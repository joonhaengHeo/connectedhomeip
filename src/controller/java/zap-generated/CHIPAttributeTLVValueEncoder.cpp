/*
 *
 *    Copyright (c) 2022 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP
#include "CHIPInvokeCallbacks.h"
#include <jni/CHIPCallbackTypes.h>
#include <jni/CHIPReadCallbacks.h>

#include <app-common/zap-generated/cluster-objects.h>
#include <controller/java/zap-generated/CHIPClientCallbacks.h>
#include <zap-generated/CHIPClusters.h>

#include <controller/java/AndroidCallbacks.h>
#include <controller/java/AndroidClusterExceptions.h>
#include <controller/java/CHIPDefaultCallbacks.h>
#include <jni.h>
#include <lib/support/CHIPListUtils.h>
#include <lib/support/CodeUtils.h>
#include <lib/support/JniReferences.h>
#include <lib/support/JniTypeWrappers.h>
#include <lib/support/Span.h>
#include <platform/PlatformManager.h>
#include <vector>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshorten-64-to-32"

using namespace chip;

CHIP_ERROR EncodeAttributeValue(const chip::app::AttributePathParams & aPath, jobject value, TLV::TLVWriter & aWriter)
{
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    CHIP_ERROR err = CHIP_NO_ERROR;

    switch (aPath.mClusterId)
    {
    case app::Clusters::Identify::Id: {
        using namespace app::Clusters::Identify;
        switch (aPath.mAttributeId)
        {
        case Attributes::IdentifyTime::Id: {
            break;
        }
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::Groups::Id: {
        using namespace app::Clusters::Groups;
        switch (aPath.mAttributeId)
        {
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::Scenes::Id: {
        using namespace app::Clusters::Scenes;
        switch (aPath.mAttributeId)
        {
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::OnOff::Id: {
        using namespace app::Clusters::OnOff;
        switch (aPath.mAttributeId)
        {
        case Attributes::OnTime::Id: {
            break;
        }
        case Attributes::OffWaitTime::Id: {
            break;
        }
        case Attributes::StartUpOnOff::Id: {
            break;
        }
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::OnOffSwitchConfiguration::Id: {
        using namespace app::Clusters::OnOffSwitchConfiguration;
        switch (aPath.mAttributeId)
        {
        case Attributes::SwitchActions::Id: {
            break;
        }
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::LevelControl::Id: {
        using namespace app::Clusters::LevelControl;
        switch (aPath.mAttributeId)
        {
        case Attributes::Options::Id: {
            break;
        }
        case Attributes::OnOffTransitionTime::Id: {
            break;
        }
        case Attributes::OnLevel::Id: {
            break;
        }
        case Attributes::OnTransitionTime::Id: {
            break;
        }
        case Attributes::OffTransitionTime::Id: {
            break;
        }
        case Attributes::DefaultMoveRate::Id: {
            break;
        }
        case Attributes::StartUpCurrentLevel::Id: {
            break;
        }
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::BinaryInputBasic::Id: {
        using namespace app::Clusters::BinaryInputBasic;
        switch (aPath.mAttributeId)
        {
        case Attributes::ActiveText::Id: {
            break;
        }
        case Attributes::Description::Id: {
            break;
        }
        case Attributes::InactiveText::Id: {
            break;
        }
        case Attributes::OutOfService::Id: {
            break;
        }
        case Attributes::PresentValue::Id: {
            break;
        }
        case Attributes::Reliability::Id: {
            break;
        }
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::PulseWidthModulation::Id: {
        using namespace app::Clusters::PulseWidthModulation;
        switch (aPath.mAttributeId)
        {
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::Descriptor::Id: {
        using namespace app::Clusters::Descriptor;
        switch (aPath.mAttributeId)
        {
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::Binding::Id: {
        using namespace app::Clusters::Binding;
        switch (aPath.mAttributeId)
        {
        case Attributes::Binding::Id: {
            break;
        }
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::AccessControl::Id: {
        using namespace app::Clusters::AccessControl;
        switch (aPath.mAttributeId)
        {
        case Attributes::Acl::Id: {
            break;
        }
        case Attributes::Extension::Id: {
            break;
        }
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::Actions::Id: {
        using namespace app::Clusters::Actions;
        switch (aPath.mAttributeId)
        {
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::BasicInformation::Id: {
        using namespace app::Clusters::BasicInformation;
        switch (aPath.mAttributeId)
        {
        case Attributes::NodeLabel::Id: {
            break;
        }
        case Attributes::Location::Id: {
            break;
        }
        case Attributes::LocalConfigDisabled::Id: {
            break;
        }
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::OtaSoftwareUpdateProvider::Id: {
        using namespace app::Clusters::OtaSoftwareUpdateProvider;
        switch (aPath.mAttributeId)
        {
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::OtaSoftwareUpdateRequestor::Id: {
        using namespace app::Clusters::OtaSoftwareUpdateRequestor;
        switch (aPath.mAttributeId)
        {
        case Attributes::DefaultOTAProviders::Id: {
            break;
        }
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::LocalizationConfiguration::Id: {
        using namespace app::Clusters::LocalizationConfiguration;
        switch (aPath.mAttributeId)
        {
        case Attributes::ActiveLocale::Id: {
            break;
        }
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::TimeFormatLocalization::Id: {
        using namespace app::Clusters::TimeFormatLocalization;
        switch (aPath.mAttributeId)
        {
        case Attributes::HourFormat::Id: {
            break;
        }
        case Attributes::ActiveCalendarType::Id: {
            break;
        }
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::UnitLocalization::Id: {
        using namespace app::Clusters::UnitLocalization;
        switch (aPath.mAttributeId)
        {
        case Attributes::TemperatureUnit::Id: {
            break;
        }
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::PowerSourceConfiguration::Id: {
        using namespace app::Clusters::PowerSourceConfiguration;
        switch (aPath.mAttributeId)
        {
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::PowerSource::Id: {
        using namespace app::Clusters::PowerSource;
        switch (aPath.mAttributeId)
        {
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::GeneralCommissioning::Id: {
        using namespace app::Clusters::GeneralCommissioning;
        switch (aPath.mAttributeId)
        {
        case Attributes::Breadcrumb::Id: {
            break;
        }
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::NetworkCommissioning::Id: {
        using namespace app::Clusters::NetworkCommissioning;
        switch (aPath.mAttributeId)
        {
        case Attributes::InterfaceEnabled::Id: {
            break;
        }
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::DiagnosticLogs::Id: {
        using namespace app::Clusters::DiagnosticLogs;
        switch (aPath.mAttributeId)
        {
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::GeneralDiagnostics::Id: {
        using namespace app::Clusters::GeneralDiagnostics;
        switch (aPath.mAttributeId)
        {
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::SoftwareDiagnostics::Id: {
        using namespace app::Clusters::SoftwareDiagnostics;
        switch (aPath.mAttributeId)
        {
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::ThreadNetworkDiagnostics::Id: {
        using namespace app::Clusters::ThreadNetworkDiagnostics;
        switch (aPath.mAttributeId)
        {
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::WiFiNetworkDiagnostics::Id: {
        using namespace app::Clusters::WiFiNetworkDiagnostics;
        switch (aPath.mAttributeId)
        {
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::EthernetNetworkDiagnostics::Id: {
        using namespace app::Clusters::EthernetNetworkDiagnostics;
        switch (aPath.mAttributeId)
        {
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::TimeSynchronization::Id: {
        using namespace app::Clusters::TimeSynchronization;
        switch (aPath.mAttributeId)
        {
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::BridgedDeviceBasicInformation::Id: {
        using namespace app::Clusters::BridgedDeviceBasicInformation;
        switch (aPath.mAttributeId)
        {
        case Attributes::NodeLabel::Id: {
            break;
        }
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::Switch::Id: {
        using namespace app::Clusters::Switch;
        switch (aPath.mAttributeId)
        {
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::AdministratorCommissioning::Id: {
        using namespace app::Clusters::AdministratorCommissioning;
        switch (aPath.mAttributeId)
        {
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::OperationalCredentials::Id: {
        using namespace app::Clusters::OperationalCredentials;
        switch (aPath.mAttributeId)
        {
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::GroupKeyManagement::Id: {
        using namespace app::Clusters::GroupKeyManagement;
        switch (aPath.mAttributeId)
        {
        case Attributes::GroupKeyMap::Id: {
            break;
        }
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::FixedLabel::Id: {
        using namespace app::Clusters::FixedLabel;
        switch (aPath.mAttributeId)
        {
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::UserLabel::Id: {
        using namespace app::Clusters::UserLabel;
        switch (aPath.mAttributeId)
        {
        case Attributes::LabelList::Id: {
            break;
        }
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::ProxyConfiguration::Id: {
        using namespace app::Clusters::ProxyConfiguration;
        switch (aPath.mAttributeId)
        {
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::ProxyDiscovery::Id: {
        using namespace app::Clusters::ProxyDiscovery;
        switch (aPath.mAttributeId)
        {
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::ProxyValid::Id: {
        using namespace app::Clusters::ProxyValid;
        switch (aPath.mAttributeId)
        {
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::BooleanState::Id: {
        using namespace app::Clusters::BooleanState;
        switch (aPath.mAttributeId)
        {
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::IcdManagement::Id: {
        using namespace app::Clusters::IcdManagement;
        switch (aPath.mAttributeId)
        {
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::ModeSelect::Id: {
        using namespace app::Clusters::ModeSelect;
        switch (aPath.mAttributeId)
        {
        case Attributes::StartUpMode::Id: {
            break;
        }
        case Attributes::OnMode::Id: {
            break;
        }
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::LaundryWasherMode::Id: {
        using namespace app::Clusters::LaundryWasherMode;
        switch (aPath.mAttributeId)
        {
        case Attributes::StartUpMode::Id: {
            break;
        }
        case Attributes::OnMode::Id: {
            break;
        }
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::RefrigeratorAndTemperatureControlledCabinetMode::Id: {
        using namespace app::Clusters::RefrigeratorAndTemperatureControlledCabinetMode;
        switch (aPath.mAttributeId)
        {
        case Attributes::StartUpMode::Id: {
            break;
        }
        case Attributes::OnMode::Id: {
            break;
        }
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::LaundryWasherControls::Id: {
        using namespace app::Clusters::LaundryWasherControls;
        switch (aPath.mAttributeId)
        {
        case Attributes::SpinSpeedCurrent::Id: {
            break;
        }
        case Attributes::NumberOfRinses::Id: {
            break;
        }
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::RvcRunMode::Id: {
        using namespace app::Clusters::RvcRunMode;
        switch (aPath.mAttributeId)
        {
        case Attributes::StartUpMode::Id: {
            break;
        }
        case Attributes::OnMode::Id: {
            break;
        }
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::RvcCleanMode::Id: {
        using namespace app::Clusters::RvcCleanMode;
        switch (aPath.mAttributeId)
        {
        case Attributes::StartUpMode::Id: {
            break;
        }
        case Attributes::OnMode::Id: {
            break;
        }
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::TemperatureControl::Id: {
        using namespace app::Clusters::TemperatureControl;
        switch (aPath.mAttributeId)
        {
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::RefrigeratorAlarm::Id: {
        using namespace app::Clusters::RefrigeratorAlarm;
        switch (aPath.mAttributeId)
        {
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::DishwasherMode::Id: {
        using namespace app::Clusters::DishwasherMode;
        switch (aPath.mAttributeId)
        {
        case Attributes::StartUpMode::Id: {
            break;
        }
        case Attributes::OnMode::Id: {
            break;
        }
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::AirQuality::Id: {
        using namespace app::Clusters::AirQuality;
        switch (aPath.mAttributeId)
        {
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::SmokeCoAlarm::Id: {
        using namespace app::Clusters::SmokeCoAlarm;
        switch (aPath.mAttributeId)
        {
        case Attributes::SmokeSensitivityLevel::Id: {
            break;
        }
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::DishwasherAlarm::Id: {
        using namespace app::Clusters::DishwasherAlarm;
        switch (aPath.mAttributeId)
        {
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::OperationalState::Id: {
        using namespace app::Clusters::OperationalState;
        switch (aPath.mAttributeId)
        {
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::RvcOperationalState::Id: {
        using namespace app::Clusters::RvcOperationalState;
        switch (aPath.mAttributeId)
        {
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::HepaFilterMonitoring::Id: {
        using namespace app::Clusters::HepaFilterMonitoring;
        switch (aPath.mAttributeId)
        {
        case Attributes::LastChangedTime::Id: {
            break;
        }
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::ActivatedCarbonFilterMonitoring::Id: {
        using namespace app::Clusters::ActivatedCarbonFilterMonitoring;
        switch (aPath.mAttributeId)
        {
        case Attributes::LastChangedTime::Id: {
            break;
        }
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::DoorLock::Id: {
        using namespace app::Clusters::DoorLock;
        switch (aPath.mAttributeId)
        {
        case Attributes::DoorOpenEvents::Id: {
            break;
        }
        case Attributes::DoorClosedEvents::Id: {
            break;
        }
        case Attributes::OpenPeriod::Id: {
            break;
        }
        case Attributes::Language::Id: {
            break;
        }
        case Attributes::LEDSettings::Id: {
            break;
        }
        case Attributes::AutoRelockTime::Id: {
            break;
        }
        case Attributes::SoundVolume::Id: {
            break;
        }
        case Attributes::OperatingMode::Id: {
            break;
        }
        case Attributes::EnableLocalProgramming::Id: {
            break;
        }
        case Attributes::EnableOneTouchLocking::Id: {
            break;
        }
        case Attributes::EnableInsideStatusLED::Id: {
            break;
        }
        case Attributes::EnablePrivacyModeButton::Id: {
            break;
        }
        case Attributes::LocalProgrammingFeatures::Id: {
            break;
        }
        case Attributes::WrongCodeEntryLimit::Id: {
            break;
        }
        case Attributes::UserCodeTemporaryDisableTime::Id: {
            break;
        }
        case Attributes::SendPINOverTheAir::Id: {
            break;
        }
        case Attributes::RequirePINforRemoteOperation::Id: {
            break;
        }
        case Attributes::ExpiringUserTimeout::Id: {
            break;
        }
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::WindowCovering::Id: {
        using namespace app::Clusters::WindowCovering;
        switch (aPath.mAttributeId)
        {
        case Attributes::Mode::Id: {
            break;
        }
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::BarrierControl::Id: {
        using namespace app::Clusters::BarrierControl;
        switch (aPath.mAttributeId)
        {
        case Attributes::BarrierOpenEvents::Id: {
            break;
        }
        case Attributes::BarrierCloseEvents::Id: {
            break;
        }
        case Attributes::BarrierCommandOpenEvents::Id: {
            break;
        }
        case Attributes::BarrierCommandCloseEvents::Id: {
            break;
        }
        case Attributes::BarrierOpenPeriod::Id: {
            break;
        }
        case Attributes::BarrierClosePeriod::Id: {
            break;
        }
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::PumpConfigurationAndControl::Id: {
        using namespace app::Clusters::PumpConfigurationAndControl;
        switch (aPath.mAttributeId)
        {
        case Attributes::LifetimeRunningHours::Id: {
            break;
        }
        case Attributes::LifetimeEnergyConsumed::Id: {
            break;
        }
        case Attributes::OperationMode::Id: {
            break;
        }
        case Attributes::ControlMode::Id: {
            break;
        }
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::Thermostat::Id: {
        using namespace app::Clusters::Thermostat;
        switch (aPath.mAttributeId)
        {
        case Attributes::HVACSystemTypeConfiguration::Id: {
            break;
        }
        case Attributes::LocalTemperatureCalibration::Id: {
            break;
        }
        case Attributes::OccupiedCoolingSetpoint::Id: {
            break;
        }
        case Attributes::OccupiedHeatingSetpoint::Id: {
            break;
        }
        case Attributes::UnoccupiedCoolingSetpoint::Id: {
            break;
        }
        case Attributes::UnoccupiedHeatingSetpoint::Id: {
            break;
        }
        case Attributes::MinHeatSetpointLimit::Id: {
            break;
        }
        case Attributes::MaxHeatSetpointLimit::Id: {
            break;
        }
        case Attributes::MinCoolSetpointLimit::Id: {
            break;
        }
        case Attributes::MaxCoolSetpointLimit::Id: {
            break;
        }
        case Attributes::MinSetpointDeadBand::Id: {
            break;
        }
        case Attributes::RemoteSensing::Id: {
            break;
        }
        case Attributes::ControlSequenceOfOperation::Id: {
            break;
        }
        case Attributes::SystemMode::Id: {
            break;
        }
        case Attributes::TemperatureSetpointHold::Id: {
            break;
        }
        case Attributes::TemperatureSetpointHoldDuration::Id: {
            break;
        }
        case Attributes::ThermostatProgrammingOperationMode::Id: {
            break;
        }
        case Attributes::OccupiedSetback::Id: {
            break;
        }
        case Attributes::UnoccupiedSetback::Id: {
            break;
        }
        case Attributes::EmergencyHeatDelta::Id: {
            break;
        }
        case Attributes::ACType::Id: {
            break;
        }
        case Attributes::ACCapacity::Id: {
            break;
        }
        case Attributes::ACRefrigerantType::Id: {
            break;
        }
        case Attributes::ACCompressorType::Id: {
            break;
        }
        case Attributes::ACErrorCode::Id: {
            break;
        }
        case Attributes::ACLouverPosition::Id: {
            break;
        }
        case Attributes::ACCapacityformat::Id: {
            break;
        }
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::FanControl::Id: {
        using namespace app::Clusters::FanControl;
        switch (aPath.mAttributeId)
        {
        case Attributes::FanMode::Id: {
            break;
        }
        case Attributes::FanModeSequence::Id: {
            break;
        }
        case Attributes::PercentSetting::Id: {
            break;
        }
        case Attributes::SpeedSetting::Id: {
            break;
        }
        case Attributes::RockSetting::Id: {
            break;
        }
        case Attributes::WindSetting::Id: {
            break;
        }
        case Attributes::AirflowDirection::Id: {
            break;
        }
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::ThermostatUserInterfaceConfiguration::Id: {
        using namespace app::Clusters::ThermostatUserInterfaceConfiguration;
        switch (aPath.mAttributeId)
        {
        case Attributes::TemperatureDisplayMode::Id: {
            break;
        }
        case Attributes::KeypadLockout::Id: {
            break;
        }
        case Attributes::ScheduleProgrammingVisibility::Id: {
            break;
        }
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::ColorControl::Id: {
        using namespace app::Clusters::ColorControl;
        switch (aPath.mAttributeId)
        {
        case Attributes::Options::Id: {
            break;
        }
        case Attributes::WhitePointX::Id: {
            break;
        }
        case Attributes::WhitePointY::Id: {
            break;
        }
        case Attributes::ColorPointRX::Id: {
            break;
        }
        case Attributes::ColorPointRY::Id: {
            break;
        }
        case Attributes::ColorPointRIntensity::Id: {
            break;
        }
        case Attributes::ColorPointGX::Id: {
            break;
        }
        case Attributes::ColorPointGY::Id: {
            break;
        }
        case Attributes::ColorPointGIntensity::Id: {
            break;
        }
        case Attributes::ColorPointBX::Id: {
            break;
        }
        case Attributes::ColorPointBY::Id: {
            break;
        }
        case Attributes::ColorPointBIntensity::Id: {
            break;
        }
        case Attributes::StartUpColorTemperatureMireds::Id: {
            break;
        }
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::BallastConfiguration::Id: {
        using namespace app::Clusters::BallastConfiguration;
        switch (aPath.mAttributeId)
        {
        case Attributes::MinLevel::Id: {
            break;
        }
        case Attributes::MaxLevel::Id: {
            break;
        }
        case Attributes::IntrinsicBallastFactor::Id: {
            break;
        }
        case Attributes::BallastFactorAdjustment::Id: {
            break;
        }
        case Attributes::LampType::Id: {
            break;
        }
        case Attributes::LampManufacturer::Id: {
            break;
        }
        case Attributes::LampRatedHours::Id: {
            break;
        }
        case Attributes::LampBurnHours::Id: {
            break;
        }
        case Attributes::LampAlarmMode::Id: {
            break;
        }
        case Attributes::LampBurnHoursTripPoint::Id: {
            break;
        }
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::IlluminanceMeasurement::Id: {
        using namespace app::Clusters::IlluminanceMeasurement;
        switch (aPath.mAttributeId)
        {
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::TemperatureMeasurement::Id: {
        using namespace app::Clusters::TemperatureMeasurement;
        switch (aPath.mAttributeId)
        {
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::PressureMeasurement::Id: {
        using namespace app::Clusters::PressureMeasurement;
        switch (aPath.mAttributeId)
        {
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::FlowMeasurement::Id: {
        using namespace app::Clusters::FlowMeasurement;
        switch (aPath.mAttributeId)
        {
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::RelativeHumidityMeasurement::Id: {
        using namespace app::Clusters::RelativeHumidityMeasurement;
        switch (aPath.mAttributeId)
        {
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::OccupancySensing::Id: {
        using namespace app::Clusters::OccupancySensing;
        switch (aPath.mAttributeId)
        {
        case Attributes::PIROccupiedToUnoccupiedDelay::Id: {
            break;
        }
        case Attributes::PIRUnoccupiedToOccupiedDelay::Id: {
            break;
        }
        case Attributes::PIRUnoccupiedToOccupiedThreshold::Id: {
            break;
        }
        case Attributes::UltrasonicOccupiedToUnoccupiedDelay::Id: {
            break;
        }
        case Attributes::UltrasonicUnoccupiedToOccupiedDelay::Id: {
            break;
        }
        case Attributes::UltrasonicUnoccupiedToOccupiedThreshold::Id: {
            break;
        }
        case Attributes::PhysicalContactOccupiedToUnoccupiedDelay::Id: {
            break;
        }
        case Attributes::PhysicalContactUnoccupiedToOccupiedDelay::Id: {
            break;
        }
        case Attributes::PhysicalContactUnoccupiedToOccupiedThreshold::Id: {
            break;
        }
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::CarbonMonoxideConcentrationMeasurement::Id: {
        using namespace app::Clusters::CarbonMonoxideConcentrationMeasurement;
        switch (aPath.mAttributeId)
        {
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::CarbonDioxideConcentrationMeasurement::Id: {
        using namespace app::Clusters::CarbonDioxideConcentrationMeasurement;
        switch (aPath.mAttributeId)
        {
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::NitrogenDioxideConcentrationMeasurement::Id: {
        using namespace app::Clusters::NitrogenDioxideConcentrationMeasurement;
        switch (aPath.mAttributeId)
        {
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::OzoneConcentrationMeasurement::Id: {
        using namespace app::Clusters::OzoneConcentrationMeasurement;
        switch (aPath.mAttributeId)
        {
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::Pm25ConcentrationMeasurement::Id: {
        using namespace app::Clusters::Pm25ConcentrationMeasurement;
        switch (aPath.mAttributeId)
        {
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::FormaldehydeConcentrationMeasurement::Id: {
        using namespace app::Clusters::FormaldehydeConcentrationMeasurement;
        switch (aPath.mAttributeId)
        {
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::Pm1ConcentrationMeasurement::Id: {
        using namespace app::Clusters::Pm1ConcentrationMeasurement;
        switch (aPath.mAttributeId)
        {
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::Pm10ConcentrationMeasurement::Id: {
        using namespace app::Clusters::Pm10ConcentrationMeasurement;
        switch (aPath.mAttributeId)
        {
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::TotalVolatileOrganicCompoundsConcentrationMeasurement::Id: {
        using namespace app::Clusters::TotalVolatileOrganicCompoundsConcentrationMeasurement;
        switch (aPath.mAttributeId)
        {
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::RadonConcentrationMeasurement::Id: {
        using namespace app::Clusters::RadonConcentrationMeasurement;
        switch (aPath.mAttributeId)
        {
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::WakeOnLan::Id: {
        using namespace app::Clusters::WakeOnLan;
        switch (aPath.mAttributeId)
        {
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::Channel::Id: {
        using namespace app::Clusters::Channel;
        switch (aPath.mAttributeId)
        {
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::TargetNavigator::Id: {
        using namespace app::Clusters::TargetNavigator;
        switch (aPath.mAttributeId)
        {
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::MediaPlayback::Id: {
        using namespace app::Clusters::MediaPlayback;
        switch (aPath.mAttributeId)
        {
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::MediaInput::Id: {
        using namespace app::Clusters::MediaInput;
        switch (aPath.mAttributeId)
        {
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::LowPower::Id: {
        using namespace app::Clusters::LowPower;
        switch (aPath.mAttributeId)
        {
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::KeypadInput::Id: {
        using namespace app::Clusters::KeypadInput;
        switch (aPath.mAttributeId)
        {
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::ContentLauncher::Id: {
        using namespace app::Clusters::ContentLauncher;
        switch (aPath.mAttributeId)
        {
        case Attributes::SupportedStreamingProtocols::Id: {
            break;
        }
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::AudioOutput::Id: {
        using namespace app::Clusters::AudioOutput;
        switch (aPath.mAttributeId)
        {
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::ApplicationLauncher::Id: {
        using namespace app::Clusters::ApplicationLauncher;
        switch (aPath.mAttributeId)
        {
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::ApplicationBasic::Id: {
        using namespace app::Clusters::ApplicationBasic;
        switch (aPath.mAttributeId)
        {
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::AccountLogin::Id: {
        using namespace app::Clusters::AccountLogin;
        switch (aPath.mAttributeId)
        {
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::ElectricalMeasurement::Id: {
        using namespace app::Clusters::ElectricalMeasurement;
        switch (aPath.mAttributeId)
        {
        case Attributes::AverageRmsVoltageMeasurementPeriod::Id: {
            break;
        }
        case Attributes::AverageRmsUnderVoltageCounter::Id: {
            break;
        }
        case Attributes::RmsExtremeOverVoltagePeriod::Id: {
            break;
        }
        case Attributes::RmsExtremeUnderVoltagePeriod::Id: {
            break;
        }
        case Attributes::RmsVoltageSagPeriod::Id: {
            break;
        }
        case Attributes::RmsVoltageSwellPeriod::Id: {
            break;
        }
        case Attributes::OverloadAlarmsMask::Id: {
            break;
        }
        case Attributes::AcOverloadAlarmsMask::Id: {
            break;
        }
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::UnitTesting::Id: {
        using namespace app::Clusters::UnitTesting;
        switch (aPath.mAttributeId)
        {
        case Attributes::Boolean::Id: {
            break;
        }
        case Attributes::Bitmap8::Id: {
            break;
        }
        case Attributes::Bitmap16::Id: {
            break;
        }
        case Attributes::Bitmap32::Id: {
            break;
        }
        case Attributes::Bitmap64::Id: {
            break;
        }
        case Attributes::Int8u::Id: {
            break;
        }
        case Attributes::Int16u::Id: {
            break;
        }
        case Attributes::Int24u::Id: {
            break;
        }
        case Attributes::Int32u::Id: {
            break;
        }
        case Attributes::Int40u::Id: {
            break;
        }
        case Attributes::Int48u::Id: {
            break;
        }
        case Attributes::Int56u::Id: {
            break;
        }
        case Attributes::Int64u::Id: {
            break;
        }
        case Attributes::Int8s::Id: {
            break;
        }
        case Attributes::Int16s::Id: {
            break;
        }
        case Attributes::Int24s::Id: {
            break;
        }
        case Attributes::Int32s::Id: {
            break;
        }
        case Attributes::Int40s::Id: {
            break;
        }
        case Attributes::Int48s::Id: {
            break;
        }
        case Attributes::Int56s::Id: {
            break;
        }
        case Attributes::Int64s::Id: {
            break;
        }
        case Attributes::Enum8::Id: {
            break;
        }
        case Attributes::Enum16::Id: {
            break;
        }
        case Attributes::FloatSingle::Id: {
            break;
        }
        case Attributes::FloatDouble::Id: {
            break;
        }
        case Attributes::OctetString::Id: {
            break;
        }
        case Attributes::ListInt8u::Id: {
            break;
        }
        case Attributes::ListOctetString::Id: {
            break;
        }
        case Attributes::ListStructOctetString::Id: {
            break;
        }
        case Attributes::LongOctetString::Id: {
            break;
        }
        case Attributes::CharString::Id: {
            break;
        }
        case Attributes::LongCharString::Id: {
            break;
        }
        case Attributes::EpochUs::Id: {
            break;
        }
        case Attributes::EpochS::Id: {
            break;
        }
        case Attributes::VendorId::Id: {
            break;
        }
        case Attributes::ListNullablesAndOptionalsStruct::Id: {
            break;
        }
        case Attributes::EnumAttr::Id: {
            break;
        }
        case Attributes::RangeRestrictedInt8u::Id: {
            break;
        }
        case Attributes::RangeRestrictedInt8s::Id: {
            break;
        }
        case Attributes::RangeRestrictedInt16u::Id: {
            break;
        }
        case Attributes::RangeRestrictedInt16s::Id: {
            break;
        }
        case Attributes::ListLongOctetString::Id: {
            break;
        }
        case Attributes::ListFabricScoped::Id: {
            break;
        }
        case Attributes::TimedWriteBoolean::Id: {
            break;
        }
        case Attributes::GeneralErrorBoolean::Id: {
            break;
        }
        case Attributes::ClusterErrorBoolean::Id: {
            break;
        }
        case Attributes::Unsupported::Id: {
            break;
        }
        case Attributes::NullableBoolean::Id: {
            break;
        }
        case Attributes::NullableBitmap8::Id: {
            break;
        }
        case Attributes::NullableBitmap16::Id: {
            break;
        }
        case Attributes::NullableBitmap32::Id: {
            break;
        }
        case Attributes::NullableBitmap64::Id: {
            break;
        }
        case Attributes::NullableInt8u::Id: {
            break;
        }
        case Attributes::NullableInt16u::Id: {
            break;
        }
        case Attributes::NullableInt24u::Id: {
            break;
        }
        case Attributes::NullableInt32u::Id: {
            break;
        }
        case Attributes::NullableInt40u::Id: {
            break;
        }
        case Attributes::NullableInt48u::Id: {
            break;
        }
        case Attributes::NullableInt56u::Id: {
            break;
        }
        case Attributes::NullableInt64u::Id: {
            break;
        }
        case Attributes::NullableInt8s::Id: {
            break;
        }
        case Attributes::NullableInt16s::Id: {
            break;
        }
        case Attributes::NullableInt24s::Id: {
            break;
        }
        case Attributes::NullableInt32s::Id: {
            break;
        }
        case Attributes::NullableInt40s::Id: {
            break;
        }
        case Attributes::NullableInt48s::Id: {
            break;
        }
        case Attributes::NullableInt56s::Id: {
            break;
        }
        case Attributes::NullableInt64s::Id: {
            break;
        }
        case Attributes::NullableEnum8::Id: {
            break;
        }
        case Attributes::NullableEnum16::Id: {
            break;
        }
        case Attributes::NullableFloatSingle::Id: {
            break;
        }
        case Attributes::NullableFloatDouble::Id: {
            break;
        }
        case Attributes::NullableOctetString::Id: {
            break;
        }
        case Attributes::NullableCharString::Id: {
            break;
        }
        case Attributes::NullableEnumAttr::Id: {
            break;
        }
        case Attributes::NullableRangeRestrictedInt8u::Id: {
            break;
        }
        case Attributes::NullableRangeRestrictedInt8s::Id: {
            break;
        }
        case Attributes::NullableRangeRestrictedInt16u::Id: {
            break;
        }
        case Attributes::NullableRangeRestrictedInt16s::Id: {
            break;
        }
        case Attributes::WriteOnlyInt8u::Id: {
            break;
        }
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::FaultInjection::Id: {
        using namespace app::Clusters::FaultInjection;
        switch (aPath.mAttributeId)
        {
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    case app::Clusters::SampleMei::Id: {
        using namespace app::Clusters::SampleMei;
        switch (aPath.mAttributeId)
        {
        case Attributes::FlipFlop::Id: {
            break;
        }
        default: {
            err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
            break;
        }
        }
        break;
    }
    default: {
        err = CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB;
        break;
    }
    }
    return err;
}

#pragma clang diagnostic pop
