/*
 *
 *    Copyright (c) 2022 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP
package chip.devicecontroller;

import javax.annotation.Nullable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;
import chip.clusterinfo.ClusterInfo;
import chip.clusterinfo.InteractionInfo;
import chip.clusterinfo.CommandParameterInfo;
import chip.clusterinfo.DelegatedClusterCallback;
import chip.clusterinfo.ClusterCommandCallback;
import chip.clusterinfo.CommandResponseInfo;
import chip.devicecontroller.ClusterReadMapping;
import chip.devicecontroller.ClusterWriteMapping;
import chip.devicecontroller.model.InvokeElement;

public class ClusterInfoMapping {
 public Map<String, ClusterInfo> getClusterMap() {
    Map<String, ClusterInfo> clusterMap = initializeClusterMap();
    Map<String, Map<String, InteractionInfo>> commandMap = getCommandMap();
    combineCommand(clusterMap, commandMap);
    Map<String, Map<String, InteractionInfo>> readAttributeMap = new ClusterReadMapping().getReadAttributeMap();
    combineCommand(clusterMap, readAttributeMap);
    Map<String, Map<String, InteractionInfo>> writeAttributeMap = new ClusterWriteMapping().getWriteAttributeMap();
    combineCommand(clusterMap, writeAttributeMap);
    return clusterMap;
 }

 public Map<String, ClusterInfo> initializeClusterMap() {
    Map<String, ClusterInfo> clusterMap = new HashMap<>();
      ClusterInfo identifyClusterInfo = new ClusterInfo(
      ClusterIDMapping.Identify.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.IdentifyCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("identify", identifyClusterInfo);
      ClusterInfo groupsClusterInfo = new ClusterInfo(
      ClusterIDMapping.Groups.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.GroupsCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("groups", groupsClusterInfo);
      ClusterInfo scenesClusterInfo = new ClusterInfo(
      ClusterIDMapping.Scenes.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.ScenesCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("scenes", scenesClusterInfo);
      ClusterInfo onOffClusterInfo = new ClusterInfo(
      ClusterIDMapping.OnOff.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.OnOffCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("onOff", onOffClusterInfo);
      ClusterInfo onOffSwitchConfigurationClusterInfo = new ClusterInfo(
      ClusterIDMapping.OnOffSwitchConfiguration.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.OnOffSwitchConfigurationCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("onOffSwitchConfiguration", onOffSwitchConfigurationClusterInfo);
      ClusterInfo levelControlClusterInfo = new ClusterInfo(
      ClusterIDMapping.LevelControl.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.LevelControlCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("levelControl", levelControlClusterInfo);
      ClusterInfo binaryInputBasicClusterInfo = new ClusterInfo(
      ClusterIDMapping.BinaryInputBasic.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.BinaryInputBasicCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("binaryInputBasic", binaryInputBasicClusterInfo);
      ClusterInfo pulseWidthModulationClusterInfo = new ClusterInfo(
      ClusterIDMapping.PulseWidthModulation.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.PulseWidthModulationCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("pulseWidthModulation", pulseWidthModulationClusterInfo);
      ClusterInfo descriptorClusterInfo = new ClusterInfo(
      ClusterIDMapping.Descriptor.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.DescriptorCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("descriptor", descriptorClusterInfo);
      ClusterInfo bindingClusterInfo = new ClusterInfo(
      ClusterIDMapping.Binding.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.BindingCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("binding", bindingClusterInfo);
      ClusterInfo accessControlClusterInfo = new ClusterInfo(
      ClusterIDMapping.AccessControl.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.AccessControlCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("accessControl", accessControlClusterInfo);
      ClusterInfo actionsClusterInfo = new ClusterInfo(
      ClusterIDMapping.Actions.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.ActionsCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("actions", actionsClusterInfo);
      ClusterInfo basicInformationClusterInfo = new ClusterInfo(
      ClusterIDMapping.BasicInformation.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.BasicInformationCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("basicInformation", basicInformationClusterInfo);
      ClusterInfo otaSoftwareUpdateProviderClusterInfo = new ClusterInfo(
      ClusterIDMapping.OtaSoftwareUpdateProvider.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.OtaSoftwareUpdateProviderCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("otaSoftwareUpdateProvider", otaSoftwareUpdateProviderClusterInfo);
      ClusterInfo otaSoftwareUpdateRequestorClusterInfo = new ClusterInfo(
      ClusterIDMapping.OtaSoftwareUpdateRequestor.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.OtaSoftwareUpdateRequestorCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("otaSoftwareUpdateRequestor", otaSoftwareUpdateRequestorClusterInfo);
      ClusterInfo localizationConfigurationClusterInfo = new ClusterInfo(
      ClusterIDMapping.LocalizationConfiguration.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.LocalizationConfigurationCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("localizationConfiguration", localizationConfigurationClusterInfo);
      ClusterInfo timeFormatLocalizationClusterInfo = new ClusterInfo(
      ClusterIDMapping.TimeFormatLocalization.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.TimeFormatLocalizationCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("timeFormatLocalization", timeFormatLocalizationClusterInfo);
      ClusterInfo unitLocalizationClusterInfo = new ClusterInfo(
      ClusterIDMapping.UnitLocalization.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.UnitLocalizationCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("unitLocalization", unitLocalizationClusterInfo);
      ClusterInfo powerSourceConfigurationClusterInfo = new ClusterInfo(
      ClusterIDMapping.PowerSourceConfiguration.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.PowerSourceConfigurationCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("powerSourceConfiguration", powerSourceConfigurationClusterInfo);
      ClusterInfo powerSourceClusterInfo = new ClusterInfo(
      ClusterIDMapping.PowerSource.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.PowerSourceCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("powerSource", powerSourceClusterInfo);
      ClusterInfo generalCommissioningClusterInfo = new ClusterInfo(
      ClusterIDMapping.GeneralCommissioning.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.GeneralCommissioningCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("generalCommissioning", generalCommissioningClusterInfo);
      ClusterInfo networkCommissioningClusterInfo = new ClusterInfo(
      ClusterIDMapping.NetworkCommissioning.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.NetworkCommissioningCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("networkCommissioning", networkCommissioningClusterInfo);
      ClusterInfo diagnosticLogsClusterInfo = new ClusterInfo(
      ClusterIDMapping.DiagnosticLogs.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.DiagnosticLogsCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("diagnosticLogs", diagnosticLogsClusterInfo);
      ClusterInfo generalDiagnosticsClusterInfo = new ClusterInfo(
      ClusterIDMapping.GeneralDiagnostics.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.GeneralDiagnosticsCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("generalDiagnostics", generalDiagnosticsClusterInfo);
      ClusterInfo softwareDiagnosticsClusterInfo = new ClusterInfo(
      ClusterIDMapping.SoftwareDiagnostics.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.SoftwareDiagnosticsCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("softwareDiagnostics", softwareDiagnosticsClusterInfo);
      ClusterInfo threadNetworkDiagnosticsClusterInfo = new ClusterInfo(
      ClusterIDMapping.ThreadNetworkDiagnostics.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.ThreadNetworkDiagnosticsCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("threadNetworkDiagnostics", threadNetworkDiagnosticsClusterInfo);
      ClusterInfo wiFiNetworkDiagnosticsClusterInfo = new ClusterInfo(
      ClusterIDMapping.WiFiNetworkDiagnostics.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.WiFiNetworkDiagnosticsCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("wiFiNetworkDiagnostics", wiFiNetworkDiagnosticsClusterInfo);
      ClusterInfo ethernetNetworkDiagnosticsClusterInfo = new ClusterInfo(
      ClusterIDMapping.EthernetNetworkDiagnostics.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.EthernetNetworkDiagnosticsCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("ethernetNetworkDiagnostics", ethernetNetworkDiagnosticsClusterInfo);
      ClusterInfo timeSynchronizationClusterInfo = new ClusterInfo(
      ClusterIDMapping.TimeSynchronization.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.TimeSynchronizationCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("timeSynchronization", timeSynchronizationClusterInfo);
      ClusterInfo bridgedDeviceBasicInformationClusterInfo = new ClusterInfo(
      ClusterIDMapping.BridgedDeviceBasicInformation.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.BridgedDeviceBasicInformationCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("bridgedDeviceBasicInformation", bridgedDeviceBasicInformationClusterInfo);
      ClusterInfo switchClusterInfo = new ClusterInfo(
      ClusterIDMapping.Switch.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.SwitchCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("switch", switchClusterInfo);
      ClusterInfo administratorCommissioningClusterInfo = new ClusterInfo(
      ClusterIDMapping.AdministratorCommissioning.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.AdministratorCommissioningCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("administratorCommissioning", administratorCommissioningClusterInfo);
      ClusterInfo operationalCredentialsClusterInfo = new ClusterInfo(
      ClusterIDMapping.OperationalCredentials.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.OperationalCredentialsCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("operationalCredentials", operationalCredentialsClusterInfo);
      ClusterInfo groupKeyManagementClusterInfo = new ClusterInfo(
      ClusterIDMapping.GroupKeyManagement.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.GroupKeyManagementCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("groupKeyManagement", groupKeyManagementClusterInfo);
      ClusterInfo fixedLabelClusterInfo = new ClusterInfo(
      ClusterIDMapping.FixedLabel.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.FixedLabelCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("fixedLabel", fixedLabelClusterInfo);
      ClusterInfo userLabelClusterInfo = new ClusterInfo(
      ClusterIDMapping.UserLabel.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.UserLabelCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("userLabel", userLabelClusterInfo);
      ClusterInfo proxyConfigurationClusterInfo = new ClusterInfo(
      ClusterIDMapping.ProxyConfiguration.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.ProxyConfigurationCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("proxyConfiguration", proxyConfigurationClusterInfo);
      ClusterInfo proxyDiscoveryClusterInfo = new ClusterInfo(
      ClusterIDMapping.ProxyDiscovery.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.ProxyDiscoveryCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("proxyDiscovery", proxyDiscoveryClusterInfo);
      ClusterInfo proxyValidClusterInfo = new ClusterInfo(
      ClusterIDMapping.ProxyValid.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.ProxyValidCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("proxyValid", proxyValidClusterInfo);
      ClusterInfo booleanStateClusterInfo = new ClusterInfo(
      ClusterIDMapping.BooleanState.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.BooleanStateCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("booleanState", booleanStateClusterInfo);
      ClusterInfo icdManagementClusterInfo = new ClusterInfo(
      ClusterIDMapping.IcdManagement.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.IcdManagementCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("icdManagement", icdManagementClusterInfo);
      ClusterInfo modeSelectClusterInfo = new ClusterInfo(
      ClusterIDMapping.ModeSelect.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.ModeSelectCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("modeSelect", modeSelectClusterInfo);
      ClusterInfo laundryWasherModeClusterInfo = new ClusterInfo(
      ClusterIDMapping.LaundryWasherMode.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.LaundryWasherModeCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("laundryWasherMode", laundryWasherModeClusterInfo);
      ClusterInfo refrigeratorAndTemperatureControlledCabinetModeClusterInfo = new ClusterInfo(
      ClusterIDMapping.RefrigeratorAndTemperatureControlledCabinetMode.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.RefrigeratorAndTemperatureControlledCabinetModeCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("refrigeratorAndTemperatureControlledCabinetMode", refrigeratorAndTemperatureControlledCabinetModeClusterInfo);
      ClusterInfo laundryWasherControlsClusterInfo = new ClusterInfo(
      ClusterIDMapping.LaundryWasherControls.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.LaundryWasherControlsCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("laundryWasherControls", laundryWasherControlsClusterInfo);
      ClusterInfo rvcRunModeClusterInfo = new ClusterInfo(
      ClusterIDMapping.RvcRunMode.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.RvcRunModeCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("rvcRunMode", rvcRunModeClusterInfo);
      ClusterInfo rvcCleanModeClusterInfo = new ClusterInfo(
      ClusterIDMapping.RvcCleanMode.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.RvcCleanModeCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("rvcCleanMode", rvcCleanModeClusterInfo);
      ClusterInfo temperatureControlClusterInfo = new ClusterInfo(
      ClusterIDMapping.TemperatureControl.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.TemperatureControlCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("temperatureControl", temperatureControlClusterInfo);
      ClusterInfo refrigeratorAlarmClusterInfo = new ClusterInfo(
      ClusterIDMapping.RefrigeratorAlarm.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.RefrigeratorAlarmCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("refrigeratorAlarm", refrigeratorAlarmClusterInfo);
      ClusterInfo dishwasherModeClusterInfo = new ClusterInfo(
      ClusterIDMapping.DishwasherMode.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.DishwasherModeCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("dishwasherMode", dishwasherModeClusterInfo);
      ClusterInfo airQualityClusterInfo = new ClusterInfo(
      ClusterIDMapping.AirQuality.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.AirQualityCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("airQuality", airQualityClusterInfo);
      ClusterInfo smokeCoAlarmClusterInfo = new ClusterInfo(
      ClusterIDMapping.SmokeCoAlarm.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.SmokeCoAlarmCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("smokeCoAlarm", smokeCoAlarmClusterInfo);
      ClusterInfo dishwasherAlarmClusterInfo = new ClusterInfo(
      ClusterIDMapping.DishwasherAlarm.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.DishwasherAlarmCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("dishwasherAlarm", dishwasherAlarmClusterInfo);
      ClusterInfo operationalStateClusterInfo = new ClusterInfo(
      ClusterIDMapping.OperationalState.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.OperationalStateCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("operationalState", operationalStateClusterInfo);
      ClusterInfo rvcOperationalStateClusterInfo = new ClusterInfo(
      ClusterIDMapping.RvcOperationalState.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.RvcOperationalStateCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("rvcOperationalState", rvcOperationalStateClusterInfo);
      ClusterInfo hepaFilterMonitoringClusterInfo = new ClusterInfo(
      ClusterIDMapping.HepaFilterMonitoring.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.HepaFilterMonitoringCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("hepaFilterMonitoring", hepaFilterMonitoringClusterInfo);
      ClusterInfo activatedCarbonFilterMonitoringClusterInfo = new ClusterInfo(
      ClusterIDMapping.ActivatedCarbonFilterMonitoring.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.ActivatedCarbonFilterMonitoringCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("activatedCarbonFilterMonitoring", activatedCarbonFilterMonitoringClusterInfo);
      ClusterInfo ceramicFilterMonitoringClusterInfo = new ClusterInfo(
      ClusterIDMapping.CeramicFilterMonitoring.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.CeramicFilterMonitoringCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("ceramicFilterMonitoring", ceramicFilterMonitoringClusterInfo);
      ClusterInfo electrostaticFilterMonitoringClusterInfo = new ClusterInfo(
      ClusterIDMapping.ElectrostaticFilterMonitoring.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.ElectrostaticFilterMonitoringCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("electrostaticFilterMonitoring", electrostaticFilterMonitoringClusterInfo);
      ClusterInfo uvFilterMonitoringClusterInfo = new ClusterInfo(
      ClusterIDMapping.UvFilterMonitoring.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.UvFilterMonitoringCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("uvFilterMonitoring", uvFilterMonitoringClusterInfo);
      ClusterInfo ionizingFilterMonitoringClusterInfo = new ClusterInfo(
      ClusterIDMapping.IonizingFilterMonitoring.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.IonizingFilterMonitoringCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("ionizingFilterMonitoring", ionizingFilterMonitoringClusterInfo);
      ClusterInfo zeoliteFilterMonitoringClusterInfo = new ClusterInfo(
      ClusterIDMapping.ZeoliteFilterMonitoring.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.ZeoliteFilterMonitoringCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("zeoliteFilterMonitoring", zeoliteFilterMonitoringClusterInfo);
      ClusterInfo ozoneFilterMonitoringClusterInfo = new ClusterInfo(
      ClusterIDMapping.OzoneFilterMonitoring.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.OzoneFilterMonitoringCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("ozoneFilterMonitoring", ozoneFilterMonitoringClusterInfo);
      ClusterInfo waterTankMonitoringClusterInfo = new ClusterInfo(
      ClusterIDMapping.WaterTankMonitoring.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.WaterTankMonitoringCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("waterTankMonitoring", waterTankMonitoringClusterInfo);
      ClusterInfo fuelTankMonitoringClusterInfo = new ClusterInfo(
      ClusterIDMapping.FuelTankMonitoring.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.FuelTankMonitoringCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("fuelTankMonitoring", fuelTankMonitoringClusterInfo);
      ClusterInfo inkCartridgeMonitoringClusterInfo = new ClusterInfo(
      ClusterIDMapping.InkCartridgeMonitoring.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.InkCartridgeMonitoringCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("inkCartridgeMonitoring", inkCartridgeMonitoringClusterInfo);
      ClusterInfo tonerCartridgeMonitoringClusterInfo = new ClusterInfo(
      ClusterIDMapping.TonerCartridgeMonitoring.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.TonerCartridgeMonitoringCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("tonerCartridgeMonitoring", tonerCartridgeMonitoringClusterInfo);
      ClusterInfo doorLockClusterInfo = new ClusterInfo(
      ClusterIDMapping.DoorLock.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.DoorLockCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("doorLock", doorLockClusterInfo);
      ClusterInfo windowCoveringClusterInfo = new ClusterInfo(
      ClusterIDMapping.WindowCovering.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.WindowCoveringCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("windowCovering", windowCoveringClusterInfo);
      ClusterInfo barrierControlClusterInfo = new ClusterInfo(
      ClusterIDMapping.BarrierControl.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.BarrierControlCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("barrierControl", barrierControlClusterInfo);
      ClusterInfo pumpConfigurationAndControlClusterInfo = new ClusterInfo(
      ClusterIDMapping.PumpConfigurationAndControl.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.PumpConfigurationAndControlCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("pumpConfigurationAndControl", pumpConfigurationAndControlClusterInfo);
      ClusterInfo thermostatClusterInfo = new ClusterInfo(
      ClusterIDMapping.Thermostat.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.ThermostatCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("thermostat", thermostatClusterInfo);
      ClusterInfo fanControlClusterInfo = new ClusterInfo(
      ClusterIDMapping.FanControl.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.FanControlCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("fanControl", fanControlClusterInfo);
      ClusterInfo thermostatUserInterfaceConfigurationClusterInfo = new ClusterInfo(
      ClusterIDMapping.ThermostatUserInterfaceConfiguration.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.ThermostatUserInterfaceConfigurationCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("thermostatUserInterfaceConfiguration", thermostatUserInterfaceConfigurationClusterInfo);
      ClusterInfo colorControlClusterInfo = new ClusterInfo(
      ClusterIDMapping.ColorControl.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.ColorControlCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("colorControl", colorControlClusterInfo);
      ClusterInfo ballastConfigurationClusterInfo = new ClusterInfo(
      ClusterIDMapping.BallastConfiguration.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.BallastConfigurationCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("ballastConfiguration", ballastConfigurationClusterInfo);
      ClusterInfo illuminanceMeasurementClusterInfo = new ClusterInfo(
      ClusterIDMapping.IlluminanceMeasurement.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.IlluminanceMeasurementCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("illuminanceMeasurement", illuminanceMeasurementClusterInfo);
      ClusterInfo temperatureMeasurementClusterInfo = new ClusterInfo(
      ClusterIDMapping.TemperatureMeasurement.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.TemperatureMeasurementCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("temperatureMeasurement", temperatureMeasurementClusterInfo);
      ClusterInfo pressureMeasurementClusterInfo = new ClusterInfo(
      ClusterIDMapping.PressureMeasurement.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.PressureMeasurementCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("pressureMeasurement", pressureMeasurementClusterInfo);
      ClusterInfo flowMeasurementClusterInfo = new ClusterInfo(
      ClusterIDMapping.FlowMeasurement.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.FlowMeasurementCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("flowMeasurement", flowMeasurementClusterInfo);
      ClusterInfo relativeHumidityMeasurementClusterInfo = new ClusterInfo(
      ClusterIDMapping.RelativeHumidityMeasurement.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.RelativeHumidityMeasurementCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("relativeHumidityMeasurement", relativeHumidityMeasurementClusterInfo);
      ClusterInfo occupancySensingClusterInfo = new ClusterInfo(
      ClusterIDMapping.OccupancySensing.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.OccupancySensingCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("occupancySensing", occupancySensingClusterInfo);
      ClusterInfo carbonMonoxideConcentrationMeasurementClusterInfo = new ClusterInfo(
      ClusterIDMapping.CarbonMonoxideConcentrationMeasurement.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.CarbonMonoxideConcentrationMeasurementCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("carbonMonoxideConcentrationMeasurement", carbonMonoxideConcentrationMeasurementClusterInfo);
      ClusterInfo carbonDioxideConcentrationMeasurementClusterInfo = new ClusterInfo(
      ClusterIDMapping.CarbonDioxideConcentrationMeasurement.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.CarbonDioxideConcentrationMeasurementCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("carbonDioxideConcentrationMeasurement", carbonDioxideConcentrationMeasurementClusterInfo);
      ClusterInfo ethyleneConcentrationMeasurementClusterInfo = new ClusterInfo(
      ClusterIDMapping.EthyleneConcentrationMeasurement.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.EthyleneConcentrationMeasurementCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("ethyleneConcentrationMeasurement", ethyleneConcentrationMeasurementClusterInfo);
      ClusterInfo ethyleneOxideConcentrationMeasurementClusterInfo = new ClusterInfo(
      ClusterIDMapping.EthyleneOxideConcentrationMeasurement.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.EthyleneOxideConcentrationMeasurementCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("ethyleneOxideConcentrationMeasurement", ethyleneOxideConcentrationMeasurementClusterInfo);
      ClusterInfo hydrogenConcentrationMeasurementClusterInfo = new ClusterInfo(
      ClusterIDMapping.HydrogenConcentrationMeasurement.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.HydrogenConcentrationMeasurementCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("hydrogenConcentrationMeasurement", hydrogenConcentrationMeasurementClusterInfo);
      ClusterInfo hydrogenSulfideConcentrationMeasurementClusterInfo = new ClusterInfo(
      ClusterIDMapping.HydrogenSulfideConcentrationMeasurement.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.HydrogenSulfideConcentrationMeasurementCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("hydrogenSulfideConcentrationMeasurement", hydrogenSulfideConcentrationMeasurementClusterInfo);
      ClusterInfo nitricOxideConcentrationMeasurementClusterInfo = new ClusterInfo(
      ClusterIDMapping.NitricOxideConcentrationMeasurement.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.NitricOxideConcentrationMeasurementCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("nitricOxideConcentrationMeasurement", nitricOxideConcentrationMeasurementClusterInfo);
      ClusterInfo nitrogenDioxideConcentrationMeasurementClusterInfo = new ClusterInfo(
      ClusterIDMapping.NitrogenDioxideConcentrationMeasurement.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.NitrogenDioxideConcentrationMeasurementCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("nitrogenDioxideConcentrationMeasurement", nitrogenDioxideConcentrationMeasurementClusterInfo);
      ClusterInfo oxygenConcentrationMeasurementClusterInfo = new ClusterInfo(
      ClusterIDMapping.OxygenConcentrationMeasurement.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.OxygenConcentrationMeasurementCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("oxygenConcentrationMeasurement", oxygenConcentrationMeasurementClusterInfo);
      ClusterInfo ozoneConcentrationMeasurementClusterInfo = new ClusterInfo(
      ClusterIDMapping.OzoneConcentrationMeasurement.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.OzoneConcentrationMeasurementCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("ozoneConcentrationMeasurement", ozoneConcentrationMeasurementClusterInfo);
      ClusterInfo sulfurDioxideConcentrationMeasurementClusterInfo = new ClusterInfo(
      ClusterIDMapping.SulfurDioxideConcentrationMeasurement.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.SulfurDioxideConcentrationMeasurementCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("sulfurDioxideConcentrationMeasurement", sulfurDioxideConcentrationMeasurementClusterInfo);
      ClusterInfo dissolvedOxygenConcentrationMeasurementClusterInfo = new ClusterInfo(
      ClusterIDMapping.DissolvedOxygenConcentrationMeasurement.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.DissolvedOxygenConcentrationMeasurementCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("dissolvedOxygenConcentrationMeasurement", dissolvedOxygenConcentrationMeasurementClusterInfo);
      ClusterInfo bromateConcentrationMeasurementClusterInfo = new ClusterInfo(
      ClusterIDMapping.BromateConcentrationMeasurement.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.BromateConcentrationMeasurementCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("bromateConcentrationMeasurement", bromateConcentrationMeasurementClusterInfo);
      ClusterInfo chloraminesConcentrationMeasurementClusterInfo = new ClusterInfo(
      ClusterIDMapping.ChloraminesConcentrationMeasurement.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.ChloraminesConcentrationMeasurementCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("chloraminesConcentrationMeasurement", chloraminesConcentrationMeasurementClusterInfo);
      ClusterInfo chlorineConcentrationMeasurementClusterInfo = new ClusterInfo(
      ClusterIDMapping.ChlorineConcentrationMeasurement.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.ChlorineConcentrationMeasurementCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("chlorineConcentrationMeasurement", chlorineConcentrationMeasurementClusterInfo);
      ClusterInfo fecalColiformEColiConcentrationMeasurementClusterInfo = new ClusterInfo(
      ClusterIDMapping.FecalColiformEColiConcentrationMeasurement.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.FecalColiformEColiConcentrationMeasurementCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("fecalColiformEColiConcentrationMeasurement", fecalColiformEColiConcentrationMeasurementClusterInfo);
      ClusterInfo fluorideConcentrationMeasurementClusterInfo = new ClusterInfo(
      ClusterIDMapping.FluorideConcentrationMeasurement.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.FluorideConcentrationMeasurementCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("fluorideConcentrationMeasurement", fluorideConcentrationMeasurementClusterInfo);
      ClusterInfo haloaceticAcidsConcentrationMeasurementClusterInfo = new ClusterInfo(
      ClusterIDMapping.HaloaceticAcidsConcentrationMeasurement.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.HaloaceticAcidsConcentrationMeasurementCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("haloaceticAcidsConcentrationMeasurement", haloaceticAcidsConcentrationMeasurementClusterInfo);
      ClusterInfo totalTrihalomethanesConcentrationMeasurementClusterInfo = new ClusterInfo(
      ClusterIDMapping.TotalTrihalomethanesConcentrationMeasurement.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.TotalTrihalomethanesConcentrationMeasurementCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("totalTrihalomethanesConcentrationMeasurement", totalTrihalomethanesConcentrationMeasurementClusterInfo);
      ClusterInfo totalColiformBacteriaConcentrationMeasurementClusterInfo = new ClusterInfo(
      ClusterIDMapping.TotalColiformBacteriaConcentrationMeasurement.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.TotalColiformBacteriaConcentrationMeasurementCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("totalColiformBacteriaConcentrationMeasurement", totalColiformBacteriaConcentrationMeasurementClusterInfo);
      ClusterInfo turbidityConcentrationMeasurementClusterInfo = new ClusterInfo(
      ClusterIDMapping.TurbidityConcentrationMeasurement.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.TurbidityConcentrationMeasurementCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("turbidityConcentrationMeasurement", turbidityConcentrationMeasurementClusterInfo);
      ClusterInfo copperConcentrationMeasurementClusterInfo = new ClusterInfo(
      ClusterIDMapping.CopperConcentrationMeasurement.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.CopperConcentrationMeasurementCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("copperConcentrationMeasurement", copperConcentrationMeasurementClusterInfo);
      ClusterInfo leadConcentrationMeasurementClusterInfo = new ClusterInfo(
      ClusterIDMapping.LeadConcentrationMeasurement.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.LeadConcentrationMeasurementCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("leadConcentrationMeasurement", leadConcentrationMeasurementClusterInfo);
      ClusterInfo manganeseConcentrationMeasurementClusterInfo = new ClusterInfo(
      ClusterIDMapping.ManganeseConcentrationMeasurement.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.ManganeseConcentrationMeasurementCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("manganeseConcentrationMeasurement", manganeseConcentrationMeasurementClusterInfo);
      ClusterInfo sulfateConcentrationMeasurementClusterInfo = new ClusterInfo(
      ClusterIDMapping.SulfateConcentrationMeasurement.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.SulfateConcentrationMeasurementCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("sulfateConcentrationMeasurement", sulfateConcentrationMeasurementClusterInfo);
      ClusterInfo bromodichloromethaneConcentrationMeasurementClusterInfo = new ClusterInfo(
      ClusterIDMapping.BromodichloromethaneConcentrationMeasurement.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.BromodichloromethaneConcentrationMeasurementCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("bromodichloromethaneConcentrationMeasurement", bromodichloromethaneConcentrationMeasurementClusterInfo);
      ClusterInfo bromoformConcentrationMeasurementClusterInfo = new ClusterInfo(
      ClusterIDMapping.BromoformConcentrationMeasurement.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.BromoformConcentrationMeasurementCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("bromoformConcentrationMeasurement", bromoformConcentrationMeasurementClusterInfo);
      ClusterInfo chlorodibromomethaneConcentrationMeasurementClusterInfo = new ClusterInfo(
      ClusterIDMapping.ChlorodibromomethaneConcentrationMeasurement.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.ChlorodibromomethaneConcentrationMeasurementCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("chlorodibromomethaneConcentrationMeasurement", chlorodibromomethaneConcentrationMeasurementClusterInfo);
      ClusterInfo chloroformConcentrationMeasurementClusterInfo = new ClusterInfo(
      ClusterIDMapping.ChloroformConcentrationMeasurement.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.ChloroformConcentrationMeasurementCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("chloroformConcentrationMeasurement", chloroformConcentrationMeasurementClusterInfo);
      ClusterInfo sodiumConcentrationMeasurementClusterInfo = new ClusterInfo(
      ClusterIDMapping.SodiumConcentrationMeasurement.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.SodiumConcentrationMeasurementCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("sodiumConcentrationMeasurement", sodiumConcentrationMeasurementClusterInfo);
      ClusterInfo pm25ConcentrationMeasurementClusterInfo = new ClusterInfo(
      ClusterIDMapping.Pm25ConcentrationMeasurement.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.Pm25ConcentrationMeasurementCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("pm25ConcentrationMeasurement", pm25ConcentrationMeasurementClusterInfo);
      ClusterInfo formaldehydeConcentrationMeasurementClusterInfo = new ClusterInfo(
      ClusterIDMapping.FormaldehydeConcentrationMeasurement.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.FormaldehydeConcentrationMeasurementCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("formaldehydeConcentrationMeasurement", formaldehydeConcentrationMeasurementClusterInfo);
      ClusterInfo pm1ConcentrationMeasurementClusterInfo = new ClusterInfo(
      ClusterIDMapping.Pm1ConcentrationMeasurement.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.Pm1ConcentrationMeasurementCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("pm1ConcentrationMeasurement", pm1ConcentrationMeasurementClusterInfo);
      ClusterInfo pm10ConcentrationMeasurementClusterInfo = new ClusterInfo(
      ClusterIDMapping.Pm10ConcentrationMeasurement.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.Pm10ConcentrationMeasurementCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("pm10ConcentrationMeasurement", pm10ConcentrationMeasurementClusterInfo);
      ClusterInfo totalVolatileOrganicCompoundsConcentrationMeasurementClusterInfo = new ClusterInfo(
      ClusterIDMapping.TotalVolatileOrganicCompoundsConcentrationMeasurement.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.TotalVolatileOrganicCompoundsConcentrationMeasurementCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("totalVolatileOrganicCompoundsConcentrationMeasurement", totalVolatileOrganicCompoundsConcentrationMeasurementClusterInfo);
      ClusterInfo radonConcentrationMeasurementClusterInfo = new ClusterInfo(
      ClusterIDMapping.RadonConcentrationMeasurement.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.RadonConcentrationMeasurementCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("radonConcentrationMeasurement", radonConcentrationMeasurementClusterInfo);
      ClusterInfo wakeOnLanClusterInfo = new ClusterInfo(
      ClusterIDMapping.WakeOnLan.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.WakeOnLanCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("wakeOnLan", wakeOnLanClusterInfo);
      ClusterInfo channelClusterInfo = new ClusterInfo(
      ClusterIDMapping.Channel.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.ChannelCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("channel", channelClusterInfo);
      ClusterInfo targetNavigatorClusterInfo = new ClusterInfo(
      ClusterIDMapping.TargetNavigator.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.TargetNavigatorCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("targetNavigator", targetNavigatorClusterInfo);
      ClusterInfo mediaPlaybackClusterInfo = new ClusterInfo(
      ClusterIDMapping.MediaPlayback.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.MediaPlaybackCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("mediaPlayback", mediaPlaybackClusterInfo);
      ClusterInfo mediaInputClusterInfo = new ClusterInfo(
      ClusterIDMapping.MediaInput.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.MediaInputCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("mediaInput", mediaInputClusterInfo);
      ClusterInfo lowPowerClusterInfo = new ClusterInfo(
      ClusterIDMapping.LowPower.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.LowPowerCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("lowPower", lowPowerClusterInfo);
      ClusterInfo keypadInputClusterInfo = new ClusterInfo(
      ClusterIDMapping.KeypadInput.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.KeypadInputCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("keypadInput", keypadInputClusterInfo);
      ClusterInfo contentLauncherClusterInfo = new ClusterInfo(
      ClusterIDMapping.ContentLauncher.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.ContentLauncherCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("contentLauncher", contentLauncherClusterInfo);
      ClusterInfo audioOutputClusterInfo = new ClusterInfo(
      ClusterIDMapping.AudioOutput.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.AudioOutputCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("audioOutput", audioOutputClusterInfo);
      ClusterInfo applicationLauncherClusterInfo = new ClusterInfo(
      ClusterIDMapping.ApplicationLauncher.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.ApplicationLauncherCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("applicationLauncher", applicationLauncherClusterInfo);
      ClusterInfo applicationBasicClusterInfo = new ClusterInfo(
      ClusterIDMapping.ApplicationBasic.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.ApplicationBasicCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("applicationBasic", applicationBasicClusterInfo);
      ClusterInfo accountLoginClusterInfo = new ClusterInfo(
      ClusterIDMapping.AccountLogin.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.AccountLoginCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("accountLogin", accountLoginClusterInfo);
      ClusterInfo electricalMeasurementClusterInfo = new ClusterInfo(
      ClusterIDMapping.ElectricalMeasurement.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.ElectricalMeasurementCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("electricalMeasurement", electricalMeasurementClusterInfo);
      ClusterInfo unitTestingClusterInfo = new ClusterInfo(
      ClusterIDMapping.UnitTesting.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.UnitTestingCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("unitTesting", unitTestingClusterInfo);
      ClusterInfo faultInjectionClusterInfo = new ClusterInfo(
      ClusterIDMapping.FaultInjection.ID, new HashMap<>());
//        (ptr, endpointId) -> new ChipClusters.FaultInjectionCluster(ptr, endpointId), new HashMap<>());
      clusterMap.put("faultInjection", faultInjectionClusterInfo);
    return clusterMap;
 }

 public void combineCommand(Map<String, ClusterInfo> destination, Map<String, Map<String, InteractionInfo>> source) {
      destination.get("identify").combineCommands(source.get("identify"));
      destination.get("groups").combineCommands(source.get("groups"));
      destination.get("scenes").combineCommands(source.get("scenes"));
      destination.get("onOff").combineCommands(source.get("onOff"));
      destination.get("onOffSwitchConfiguration").combineCommands(source.get("onOffSwitchConfiguration"));
      destination.get("levelControl").combineCommands(source.get("levelControl"));
      destination.get("binaryInputBasic").combineCommands(source.get("binaryInputBasic"));
      destination.get("pulseWidthModulation").combineCommands(source.get("pulseWidthModulation"));
      destination.get("descriptor").combineCommands(source.get("descriptor"));
      destination.get("binding").combineCommands(source.get("binding"));
      destination.get("accessControl").combineCommands(source.get("accessControl"));
      destination.get("actions").combineCommands(source.get("actions"));
      destination.get("basicInformation").combineCommands(source.get("basicInformation"));
      destination.get("otaSoftwareUpdateProvider").combineCommands(source.get("otaSoftwareUpdateProvider"));
      destination.get("otaSoftwareUpdateRequestor").combineCommands(source.get("otaSoftwareUpdateRequestor"));
      destination.get("localizationConfiguration").combineCommands(source.get("localizationConfiguration"));
      destination.get("timeFormatLocalization").combineCommands(source.get("timeFormatLocalization"));
      destination.get("unitLocalization").combineCommands(source.get("unitLocalization"));
      destination.get("powerSourceConfiguration").combineCommands(source.get("powerSourceConfiguration"));
      destination.get("powerSource").combineCommands(source.get("powerSource"));
      destination.get("generalCommissioning").combineCommands(source.get("generalCommissioning"));
      destination.get("networkCommissioning").combineCommands(source.get("networkCommissioning"));
      destination.get("diagnosticLogs").combineCommands(source.get("diagnosticLogs"));
      destination.get("generalDiagnostics").combineCommands(source.get("generalDiagnostics"));
      destination.get("softwareDiagnostics").combineCommands(source.get("softwareDiagnostics"));
      destination.get("threadNetworkDiagnostics").combineCommands(source.get("threadNetworkDiagnostics"));
      destination.get("wiFiNetworkDiagnostics").combineCommands(source.get("wiFiNetworkDiagnostics"));
      destination.get("ethernetNetworkDiagnostics").combineCommands(source.get("ethernetNetworkDiagnostics"));
      destination.get("timeSynchronization").combineCommands(source.get("timeSynchronization"));
      destination.get("bridgedDeviceBasicInformation").combineCommands(source.get("bridgedDeviceBasicInformation"));
      destination.get("switch").combineCommands(source.get("switch"));
      destination.get("administratorCommissioning").combineCommands(source.get("administratorCommissioning"));
      destination.get("operationalCredentials").combineCommands(source.get("operationalCredentials"));
      destination.get("groupKeyManagement").combineCommands(source.get("groupKeyManagement"));
      destination.get("fixedLabel").combineCommands(source.get("fixedLabel"));
      destination.get("userLabel").combineCommands(source.get("userLabel"));
      destination.get("proxyConfiguration").combineCommands(source.get("proxyConfiguration"));
      destination.get("proxyDiscovery").combineCommands(source.get("proxyDiscovery"));
      destination.get("proxyValid").combineCommands(source.get("proxyValid"));
      destination.get("booleanState").combineCommands(source.get("booleanState"));
      destination.get("icdManagement").combineCommands(source.get("icdManagement"));
      destination.get("modeSelect").combineCommands(source.get("modeSelect"));
      destination.get("laundryWasherMode").combineCommands(source.get("laundryWasherMode"));
      destination.get("refrigeratorAndTemperatureControlledCabinetMode").combineCommands(source.get("refrigeratorAndTemperatureControlledCabinetMode"));
      destination.get("laundryWasherControls").combineCommands(source.get("laundryWasherControls"));
      destination.get("rvcRunMode").combineCommands(source.get("rvcRunMode"));
      destination.get("rvcCleanMode").combineCommands(source.get("rvcCleanMode"));
      destination.get("temperatureControl").combineCommands(source.get("temperatureControl"));
      destination.get("refrigeratorAlarm").combineCommands(source.get("refrigeratorAlarm"));
      destination.get("dishwasherMode").combineCommands(source.get("dishwasherMode"));
      destination.get("airQuality").combineCommands(source.get("airQuality"));
      destination.get("smokeCoAlarm").combineCommands(source.get("smokeCoAlarm"));
      destination.get("dishwasherAlarm").combineCommands(source.get("dishwasherAlarm"));
      destination.get("operationalState").combineCommands(source.get("operationalState"));
      destination.get("rvcOperationalState").combineCommands(source.get("rvcOperationalState"));
      destination.get("hepaFilterMonitoring").combineCommands(source.get("hepaFilterMonitoring"));
      destination.get("activatedCarbonFilterMonitoring").combineCommands(source.get("activatedCarbonFilterMonitoring"));
      destination.get("ceramicFilterMonitoring").combineCommands(source.get("ceramicFilterMonitoring"));
      destination.get("electrostaticFilterMonitoring").combineCommands(source.get("electrostaticFilterMonitoring"));
      destination.get("uvFilterMonitoring").combineCommands(source.get("uvFilterMonitoring"));
      destination.get("ionizingFilterMonitoring").combineCommands(source.get("ionizingFilterMonitoring"));
      destination.get("zeoliteFilterMonitoring").combineCommands(source.get("zeoliteFilterMonitoring"));
      destination.get("ozoneFilterMonitoring").combineCommands(source.get("ozoneFilterMonitoring"));
      destination.get("waterTankMonitoring").combineCommands(source.get("waterTankMonitoring"));
      destination.get("fuelTankMonitoring").combineCommands(source.get("fuelTankMonitoring"));
      destination.get("inkCartridgeMonitoring").combineCommands(source.get("inkCartridgeMonitoring"));
      destination.get("tonerCartridgeMonitoring").combineCommands(source.get("tonerCartridgeMonitoring"));
      destination.get("doorLock").combineCommands(source.get("doorLock"));
      destination.get("windowCovering").combineCommands(source.get("windowCovering"));
      destination.get("barrierControl").combineCommands(source.get("barrierControl"));
      destination.get("pumpConfigurationAndControl").combineCommands(source.get("pumpConfigurationAndControl"));
      destination.get("thermostat").combineCommands(source.get("thermostat"));
      destination.get("fanControl").combineCommands(source.get("fanControl"));
      destination.get("thermostatUserInterfaceConfiguration").combineCommands(source.get("thermostatUserInterfaceConfiguration"));
      destination.get("colorControl").combineCommands(source.get("colorControl"));
      destination.get("ballastConfiguration").combineCommands(source.get("ballastConfiguration"));
      destination.get("illuminanceMeasurement").combineCommands(source.get("illuminanceMeasurement"));
      destination.get("temperatureMeasurement").combineCommands(source.get("temperatureMeasurement"));
      destination.get("pressureMeasurement").combineCommands(source.get("pressureMeasurement"));
      destination.get("flowMeasurement").combineCommands(source.get("flowMeasurement"));
      destination.get("relativeHumidityMeasurement").combineCommands(source.get("relativeHumidityMeasurement"));
      destination.get("occupancySensing").combineCommands(source.get("occupancySensing"));
      destination.get("carbonMonoxideConcentrationMeasurement").combineCommands(source.get("carbonMonoxideConcentrationMeasurement"));
      destination.get("carbonDioxideConcentrationMeasurement").combineCommands(source.get("carbonDioxideConcentrationMeasurement"));
      destination.get("ethyleneConcentrationMeasurement").combineCommands(source.get("ethyleneConcentrationMeasurement"));
      destination.get("ethyleneOxideConcentrationMeasurement").combineCommands(source.get("ethyleneOxideConcentrationMeasurement"));
      destination.get("hydrogenConcentrationMeasurement").combineCommands(source.get("hydrogenConcentrationMeasurement"));
      destination.get("hydrogenSulfideConcentrationMeasurement").combineCommands(source.get("hydrogenSulfideConcentrationMeasurement"));
      destination.get("nitricOxideConcentrationMeasurement").combineCommands(source.get("nitricOxideConcentrationMeasurement"));
      destination.get("nitrogenDioxideConcentrationMeasurement").combineCommands(source.get("nitrogenDioxideConcentrationMeasurement"));
      destination.get("oxygenConcentrationMeasurement").combineCommands(source.get("oxygenConcentrationMeasurement"));
      destination.get("ozoneConcentrationMeasurement").combineCommands(source.get("ozoneConcentrationMeasurement"));
      destination.get("sulfurDioxideConcentrationMeasurement").combineCommands(source.get("sulfurDioxideConcentrationMeasurement"));
      destination.get("dissolvedOxygenConcentrationMeasurement").combineCommands(source.get("dissolvedOxygenConcentrationMeasurement"));
      destination.get("bromateConcentrationMeasurement").combineCommands(source.get("bromateConcentrationMeasurement"));
      destination.get("chloraminesConcentrationMeasurement").combineCommands(source.get("chloraminesConcentrationMeasurement"));
      destination.get("chlorineConcentrationMeasurement").combineCommands(source.get("chlorineConcentrationMeasurement"));
      destination.get("fecalColiformEColiConcentrationMeasurement").combineCommands(source.get("fecalColiformEColiConcentrationMeasurement"));
      destination.get("fluorideConcentrationMeasurement").combineCommands(source.get("fluorideConcentrationMeasurement"));
      destination.get("haloaceticAcidsConcentrationMeasurement").combineCommands(source.get("haloaceticAcidsConcentrationMeasurement"));
      destination.get("totalTrihalomethanesConcentrationMeasurement").combineCommands(source.get("totalTrihalomethanesConcentrationMeasurement"));
      destination.get("totalColiformBacteriaConcentrationMeasurement").combineCommands(source.get("totalColiformBacteriaConcentrationMeasurement"));
      destination.get("turbidityConcentrationMeasurement").combineCommands(source.get("turbidityConcentrationMeasurement"));
      destination.get("copperConcentrationMeasurement").combineCommands(source.get("copperConcentrationMeasurement"));
      destination.get("leadConcentrationMeasurement").combineCommands(source.get("leadConcentrationMeasurement"));
      destination.get("manganeseConcentrationMeasurement").combineCommands(source.get("manganeseConcentrationMeasurement"));
      destination.get("sulfateConcentrationMeasurement").combineCommands(source.get("sulfateConcentrationMeasurement"));
      destination.get("bromodichloromethaneConcentrationMeasurement").combineCommands(source.get("bromodichloromethaneConcentrationMeasurement"));
      destination.get("bromoformConcentrationMeasurement").combineCommands(source.get("bromoformConcentrationMeasurement"));
      destination.get("chlorodibromomethaneConcentrationMeasurement").combineCommands(source.get("chlorodibromomethaneConcentrationMeasurement"));
      destination.get("chloroformConcentrationMeasurement").combineCommands(source.get("chloroformConcentrationMeasurement"));
      destination.get("sodiumConcentrationMeasurement").combineCommands(source.get("sodiumConcentrationMeasurement"));
      destination.get("pm25ConcentrationMeasurement").combineCommands(source.get("pm25ConcentrationMeasurement"));
      destination.get("formaldehydeConcentrationMeasurement").combineCommands(source.get("formaldehydeConcentrationMeasurement"));
      destination.get("pm1ConcentrationMeasurement").combineCommands(source.get("pm1ConcentrationMeasurement"));
      destination.get("pm10ConcentrationMeasurement").combineCommands(source.get("pm10ConcentrationMeasurement"));
      destination.get("totalVolatileOrganicCompoundsConcentrationMeasurement").combineCommands(source.get("totalVolatileOrganicCompoundsConcentrationMeasurement"));
      destination.get("radonConcentrationMeasurement").combineCommands(source.get("radonConcentrationMeasurement"));
      destination.get("wakeOnLan").combineCommands(source.get("wakeOnLan"));
      destination.get("channel").combineCommands(source.get("channel"));
      destination.get("targetNavigator").combineCommands(source.get("targetNavigator"));
      destination.get("mediaPlayback").combineCommands(source.get("mediaPlayback"));
      destination.get("mediaInput").combineCommands(source.get("mediaInput"));
      destination.get("lowPower").combineCommands(source.get("lowPower"));
      destination.get("keypadInput").combineCommands(source.get("keypadInput"));
      destination.get("contentLauncher").combineCommands(source.get("contentLauncher"));
      destination.get("audioOutput").combineCommands(source.get("audioOutput"));
      destination.get("applicationLauncher").combineCommands(source.get("applicationLauncher"));
      destination.get("applicationBasic").combineCommands(source.get("applicationBasic"));
      destination.get("accountLogin").combineCommands(source.get("accountLogin"));
      destination.get("electricalMeasurement").combineCommands(source.get("electricalMeasurement"));
      destination.get("unitTesting").combineCommands(source.get("unitTesting"));
      destination.get("faultInjection").combineCommands(source.get("faultInjection"));
 }

  public static abstract class DelegatedInvokeCallback implements InvokeCallback, DelegatedClusterCallback {
  private ClusterCommandCallback callback;

  @Override
  public void setCallbackDelegate(ClusterCommandCallback callback) {
    this.callback = callback;
  }

  @Override
  public void onResponse(InvokeElement invokeElement, long successCode) {
    byte[] tlv = invokeElement.getTlvByteArray();
    Object obj = parseTlv(tlv);

    Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
    if (obj != null) {
      CommandResponseInfo valueKey = new CommandResponseInfo("value", "String");
      responseValues.put(valueKey, obj);
    }
    callback.onSuccess(responseValues);
  }

  public abstract Object parseTlv(byte[] tlv);

  @Override
  public void onError(Exception e) {
    callback.onFailure(e);
  }
}

 @SuppressWarnings("unchecked")
 public Map<String, Map<String, InteractionInfo>> getCommandMap() {
     Map<String, Map<String, InteractionInfo>> commandMap = new HashMap<>();
     Map<String, InteractionInfo> identifyClusterInteractionInfoMap = new LinkedHashMap<>();
     Map<String, CommandParameterInfo> identifyidentifyCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo identifyidentifyidentifyTimeCommandParameterInfo = new CommandParameterInfo("identifyTime", Integer.class, Integer.class);
       identifyidentifyCommandParams.put("identifyTime",identifyidentifyidentifyTimeCommandParameterInfo);
     
       InteractionInfo identifyidentifyInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.Identify.ID, ClusterIDMapping.Identify.Command.Identify.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.IdentifyCluster) cluster)
         //  .identify((DefaultClusterCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("identifyTime")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           identifyidentifyCommandParams
       );
       identifyClusterInteractionInfoMap.put("identify", identifyidentifyInteractionInfo);
     Map<String, CommandParameterInfo> identifytriggerEffectCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo identifytriggerEffecteffectIdentifierCommandParameterInfo = new CommandParameterInfo("effectIdentifier", Integer.class, Integer.class);
       identifytriggerEffectCommandParams.put("effectIdentifier",identifytriggerEffecteffectIdentifierCommandParameterInfo);
      
       CommandParameterInfo identifytriggerEffecteffectVariantCommandParameterInfo = new CommandParameterInfo("effectVariant", Integer.class, Integer.class);
       identifytriggerEffectCommandParams.put("effectVariant",identifytriggerEffecteffectVariantCommandParameterInfo);
     
       InteractionInfo identifytriggerEffectInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.Identify.ID, ClusterIDMapping.Identify.Command.TriggerEffect.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.IdentifyCluster) cluster)
         //  .triggerEffect((DefaultClusterCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("effectIdentifier")
         //  
         //  , (Integer)
         //  commandArguments.get("effectVariant")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           identifytriggerEffectCommandParams
       );
       identifyClusterInteractionInfoMap.put("triggerEffect", identifytriggerEffectInteractionInfo);
     commandMap.put("identify", identifyClusterInteractionInfoMap);
     Map<String, InteractionInfo> groupsClusterInteractionInfoMap = new LinkedHashMap<>();
     Map<String, CommandParameterInfo> groupsaddGroupCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo groupsaddGroupgroupIDCommandParameterInfo = new CommandParameterInfo("groupID", Integer.class, Integer.class);
       groupsaddGroupCommandParams.put("groupID",groupsaddGroupgroupIDCommandParameterInfo);
      
       CommandParameterInfo groupsaddGroupgroupNameCommandParameterInfo = new CommandParameterInfo("groupName", String.class, String.class);
       groupsaddGroupCommandParams.put("groupName",groupsaddGroupgroupNameCommandParameterInfo);
     
       InteractionInfo groupsaddGroupInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.Groups.ID, ClusterIDMapping.Groups.Command.AddGroup.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.GroupsCluster) cluster)
         //  .addGroup((ChipClusters.GroupsCluster.AddGroupResponseCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("groupID")
         //  
         //  , (String)
         //  commandArguments.get("groupName")
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedGroupsClusterAddGroupResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           groupsaddGroupCommandParams
       );
       groupsClusterInteractionInfoMap.put("addGroup", groupsaddGroupInteractionInfo);
     Map<String, CommandParameterInfo> groupsviewGroupCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo groupsviewGroupgroupIDCommandParameterInfo = new CommandParameterInfo("groupID", Integer.class, Integer.class);
       groupsviewGroupCommandParams.put("groupID",groupsviewGroupgroupIDCommandParameterInfo);
     
       InteractionInfo groupsviewGroupInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.Groups.ID, ClusterIDMapping.Groups.Command.ViewGroup.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.GroupsCluster) cluster)
         //  .viewGroup((ChipClusters.GroupsCluster.ViewGroupResponseCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("groupID")
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedGroupsClusterViewGroupResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           groupsviewGroupCommandParams
       );
       groupsClusterInteractionInfoMap.put("viewGroup", groupsviewGroupInteractionInfo);
     Map<String, CommandParameterInfo> groupsgetGroupMembershipCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo groupsgetGroupMembershipgroupListCommandParameterInfo = new CommandParameterInfo("groupList", ArrayList.class, Integer.class);
       groupsgetGroupMembershipCommandParams.put("groupList",groupsgetGroupMembershipgroupListCommandParameterInfo);
     
       InteractionInfo groupsgetGroupMembershipInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.Groups.ID, ClusterIDMapping.Groups.Command.GetGroupMembership.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.GroupsCluster) cluster)
         //  .getGroupMembership((ChipClusters.GroupsCluster.GetGroupMembershipResponseCallback) callback
         //  
         //  , (ArrayList<Integer>)
         //  commandArguments.get("groupList")
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedGroupsClusterGetGroupMembershipResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           groupsgetGroupMembershipCommandParams
       );
       groupsClusterInteractionInfoMap.put("getGroupMembership", groupsgetGroupMembershipInteractionInfo);
     Map<String, CommandParameterInfo> groupsremoveGroupCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo groupsremoveGroupgroupIDCommandParameterInfo = new CommandParameterInfo("groupID", Integer.class, Integer.class);
       groupsremoveGroupCommandParams.put("groupID",groupsremoveGroupgroupIDCommandParameterInfo);
     
       InteractionInfo groupsremoveGroupInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.Groups.ID, ClusterIDMapping.Groups.Command.RemoveGroup.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.GroupsCluster) cluster)
         //  .removeGroup((ChipClusters.GroupsCluster.RemoveGroupResponseCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("groupID")
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedGroupsClusterRemoveGroupResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           groupsremoveGroupCommandParams
       );
       groupsClusterInteractionInfoMap.put("removeGroup", groupsremoveGroupInteractionInfo);
     Map<String, CommandParameterInfo> groupsremoveAllGroupsCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       InteractionInfo groupsremoveAllGroupsInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.Groups.ID, ClusterIDMapping.Groups.Command.RemoveAllGroups.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.GroupsCluster) cluster)
         //  .removeAllGroups((DefaultClusterCallback) callback
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           groupsremoveAllGroupsCommandParams
       );
       groupsClusterInteractionInfoMap.put("removeAllGroups", groupsremoveAllGroupsInteractionInfo);
     Map<String, CommandParameterInfo> groupsaddGroupIfIdentifyingCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo groupsaddGroupIfIdentifyinggroupIDCommandParameterInfo = new CommandParameterInfo("groupID", Integer.class, Integer.class);
       groupsaddGroupIfIdentifyingCommandParams.put("groupID",groupsaddGroupIfIdentifyinggroupIDCommandParameterInfo);
      
       CommandParameterInfo groupsaddGroupIfIdentifyinggroupNameCommandParameterInfo = new CommandParameterInfo("groupName", String.class, String.class);
       groupsaddGroupIfIdentifyingCommandParams.put("groupName",groupsaddGroupIfIdentifyinggroupNameCommandParameterInfo);
     
       InteractionInfo groupsaddGroupIfIdentifyingInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.Groups.ID, ClusterIDMapping.Groups.Command.AddGroupIfIdentifying.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.GroupsCluster) cluster)
         //  .addGroupIfIdentifying((DefaultClusterCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("groupID")
         //  
         //  , (String)
         //  commandArguments.get("groupName")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           groupsaddGroupIfIdentifyingCommandParams
       );
       groupsClusterInteractionInfoMap.put("addGroupIfIdentifying", groupsaddGroupIfIdentifyingInteractionInfo);
     commandMap.put("groups", groupsClusterInteractionInfoMap);
     Map<String, InteractionInfo> scenesClusterInteractionInfoMap = new LinkedHashMap<>();
     Map<String, CommandParameterInfo> scenesaddSceneCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo scenesaddScenegroupIDCommandParameterInfo = new CommandParameterInfo("groupID", Integer.class, Integer.class);
       scenesaddSceneCommandParams.put("groupID",scenesaddScenegroupIDCommandParameterInfo);
      
       CommandParameterInfo scenesaddScenesceneIDCommandParameterInfo = new CommandParameterInfo("sceneID", Integer.class, Integer.class);
       scenesaddSceneCommandParams.put("sceneID",scenesaddScenesceneIDCommandParameterInfo);
      
       CommandParameterInfo scenesaddScenetransitionTimeCommandParameterInfo = new CommandParameterInfo("transitionTime", Integer.class, Integer.class);
       scenesaddSceneCommandParams.put("transitionTime",scenesaddScenetransitionTimeCommandParameterInfo);
      
       CommandParameterInfo scenesaddScenesceneNameCommandParameterInfo = new CommandParameterInfo("sceneName", String.class, String.class);
       scenesaddSceneCommandParams.put("sceneName",scenesaddScenesceneNameCommandParameterInfo);
      
       InteractionInfo scenesaddSceneInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.Scenes.ID, ClusterIDMapping.Scenes.Command.AddScene.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.ScenesCluster) cluster)
         //  .addScene((ChipClusters.ScenesCluster.AddSceneResponseCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("groupID")
         //  
         //  , (Integer)
         //  commandArguments.get("sceneID")
         //  
         //  , (Integer)
         //  commandArguments.get("transitionTime")
         //  
         //  , (String)
         //  commandArguments.get("sceneName")
         //  
         //  , (ArrayList<ChipStructs.ScenesClusterExtensionFieldSet>)
         //  commandArguments.get("extensionFieldSets")
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedScenesClusterAddSceneResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           scenesaddSceneCommandParams
       );
       scenesClusterInteractionInfoMap.put("addScene", scenesaddSceneInteractionInfo);
     Map<String, CommandParameterInfo> scenesviewSceneCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo scenesviewScenegroupIDCommandParameterInfo = new CommandParameterInfo("groupID", Integer.class, Integer.class);
       scenesviewSceneCommandParams.put("groupID",scenesviewScenegroupIDCommandParameterInfo);
      
       CommandParameterInfo scenesviewScenesceneIDCommandParameterInfo = new CommandParameterInfo("sceneID", Integer.class, Integer.class);
       scenesviewSceneCommandParams.put("sceneID",scenesviewScenesceneIDCommandParameterInfo);
     
       InteractionInfo scenesviewSceneInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.Scenes.ID, ClusterIDMapping.Scenes.Command.ViewScene.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.ScenesCluster) cluster)
         //  .viewScene((ChipClusters.ScenesCluster.ViewSceneResponseCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("groupID")
         //  
         //  , (Integer)
         //  commandArguments.get("sceneID")
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedScenesClusterViewSceneResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           scenesviewSceneCommandParams
       );
       scenesClusterInteractionInfoMap.put("viewScene", scenesviewSceneInteractionInfo);
     Map<String, CommandParameterInfo> scenesremoveSceneCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo scenesremoveScenegroupIDCommandParameterInfo = new CommandParameterInfo("groupID", Integer.class, Integer.class);
       scenesremoveSceneCommandParams.put("groupID",scenesremoveScenegroupIDCommandParameterInfo);
      
       CommandParameterInfo scenesremoveScenesceneIDCommandParameterInfo = new CommandParameterInfo("sceneID", Integer.class, Integer.class);
       scenesremoveSceneCommandParams.put("sceneID",scenesremoveScenesceneIDCommandParameterInfo);
     
       InteractionInfo scenesremoveSceneInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.Scenes.ID, ClusterIDMapping.Scenes.Command.RemoveScene.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.ScenesCluster) cluster)
         //  .removeScene((ChipClusters.ScenesCluster.RemoveSceneResponseCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("groupID")
         //  
         //  , (Integer)
         //  commandArguments.get("sceneID")
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedScenesClusterRemoveSceneResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           scenesremoveSceneCommandParams
       );
       scenesClusterInteractionInfoMap.put("removeScene", scenesremoveSceneInteractionInfo);
     Map<String, CommandParameterInfo> scenesremoveAllScenesCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo scenesremoveAllScenesgroupIDCommandParameterInfo = new CommandParameterInfo("groupID", Integer.class, Integer.class);
       scenesremoveAllScenesCommandParams.put("groupID",scenesremoveAllScenesgroupIDCommandParameterInfo);
     
       InteractionInfo scenesremoveAllScenesInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.Scenes.ID, ClusterIDMapping.Scenes.Command.RemoveAllScenes.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.ScenesCluster) cluster)
         //  .removeAllScenes((ChipClusters.ScenesCluster.RemoveAllScenesResponseCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("groupID")
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedScenesClusterRemoveAllScenesResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           scenesremoveAllScenesCommandParams
       );
       scenesClusterInteractionInfoMap.put("removeAllScenes", scenesremoveAllScenesInteractionInfo);
     Map<String, CommandParameterInfo> scenesstoreSceneCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo scenesstoreScenegroupIDCommandParameterInfo = new CommandParameterInfo("groupID", Integer.class, Integer.class);
       scenesstoreSceneCommandParams.put("groupID",scenesstoreScenegroupIDCommandParameterInfo);
      
       CommandParameterInfo scenesstoreScenesceneIDCommandParameterInfo = new CommandParameterInfo("sceneID", Integer.class, Integer.class);
       scenesstoreSceneCommandParams.put("sceneID",scenesstoreScenesceneIDCommandParameterInfo);
     
       InteractionInfo scenesstoreSceneInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.Scenes.ID, ClusterIDMapping.Scenes.Command.StoreScene.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.ScenesCluster) cluster)
         //  .storeScene((ChipClusters.ScenesCluster.StoreSceneResponseCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("groupID")
         //  
         //  , (Integer)
         //  commandArguments.get("sceneID")
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedScenesClusterStoreSceneResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           scenesstoreSceneCommandParams
       );
       scenesClusterInteractionInfoMap.put("storeScene", scenesstoreSceneInteractionInfo);
     Map<String, CommandParameterInfo> scenesrecallSceneCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo scenesrecallScenegroupIDCommandParameterInfo = new CommandParameterInfo("groupID", Integer.class, Integer.class);
       scenesrecallSceneCommandParams.put("groupID",scenesrecallScenegroupIDCommandParameterInfo);
      
       CommandParameterInfo scenesrecallScenesceneIDCommandParameterInfo = new CommandParameterInfo("sceneID", Integer.class, Integer.class);
       scenesrecallSceneCommandParams.put("sceneID",scenesrecallScenesceneIDCommandParameterInfo);
      
       CommandParameterInfo scenesrecallScenetransitionTimeCommandParameterInfo = new CommandParameterInfo("transitionTime", Optional.class, Integer.class);
       scenesrecallSceneCommandParams.put("transitionTime",scenesrecallScenetransitionTimeCommandParameterInfo);
     
       InteractionInfo scenesrecallSceneInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.Scenes.ID, ClusterIDMapping.Scenes.Command.RecallScene.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.ScenesCluster) cluster)
         //  .recallScene((DefaultClusterCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("groupID")
         //  
         //  , (Integer)
         //  commandArguments.get("sceneID")
         //  
         //  , (Optional<Integer>)
         //  commandArguments.get("transitionTime")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           scenesrecallSceneCommandParams
       );
       scenesClusterInteractionInfoMap.put("recallScene", scenesrecallSceneInteractionInfo);
     Map<String, CommandParameterInfo> scenesgetSceneMembershipCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo scenesgetSceneMembershipgroupIDCommandParameterInfo = new CommandParameterInfo("groupID", Integer.class, Integer.class);
       scenesgetSceneMembershipCommandParams.put("groupID",scenesgetSceneMembershipgroupIDCommandParameterInfo);
     
       InteractionInfo scenesgetSceneMembershipInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.Scenes.ID, ClusterIDMapping.Scenes.Command.GetSceneMembership.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.ScenesCluster) cluster)
         //  .getSceneMembership((ChipClusters.ScenesCluster.GetSceneMembershipResponseCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("groupID")
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedScenesClusterGetSceneMembershipResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           scenesgetSceneMembershipCommandParams
       );
       scenesClusterInteractionInfoMap.put("getSceneMembership", scenesgetSceneMembershipInteractionInfo);
     Map<String, CommandParameterInfo> scenesenhancedAddSceneCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo scenesenhancedAddScenegroupIDCommandParameterInfo = new CommandParameterInfo("groupID", Integer.class, Integer.class);
       scenesenhancedAddSceneCommandParams.put("groupID",scenesenhancedAddScenegroupIDCommandParameterInfo);
      
       CommandParameterInfo scenesenhancedAddScenesceneIDCommandParameterInfo = new CommandParameterInfo("sceneID", Integer.class, Integer.class);
       scenesenhancedAddSceneCommandParams.put("sceneID",scenesenhancedAddScenesceneIDCommandParameterInfo);
      
       CommandParameterInfo scenesenhancedAddScenetransitionTimeCommandParameterInfo = new CommandParameterInfo("transitionTime", Integer.class, Integer.class);
       scenesenhancedAddSceneCommandParams.put("transitionTime",scenesenhancedAddScenetransitionTimeCommandParameterInfo);
      
       CommandParameterInfo scenesenhancedAddScenesceneNameCommandParameterInfo = new CommandParameterInfo("sceneName", String.class, String.class);
       scenesenhancedAddSceneCommandParams.put("sceneName",scenesenhancedAddScenesceneNameCommandParameterInfo);
      
       InteractionInfo scenesenhancedAddSceneInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.Scenes.ID, ClusterIDMapping.Scenes.Command.EnhancedAddScene.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.ScenesCluster) cluster)
         //  .enhancedAddScene((ChipClusters.ScenesCluster.EnhancedAddSceneResponseCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("groupID")
         //  
         //  , (Integer)
         //  commandArguments.get("sceneID")
         //  
         //  , (Integer)
         //  commandArguments.get("transitionTime")
         //  
         //  , (String)
         //  commandArguments.get("sceneName")
         //  
         //  , (ArrayList<ChipStructs.ScenesClusterExtensionFieldSet>)
         //  commandArguments.get("extensionFieldSets")
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedScenesClusterEnhancedAddSceneResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           scenesenhancedAddSceneCommandParams
       );
       scenesClusterInteractionInfoMap.put("enhancedAddScene", scenesenhancedAddSceneInteractionInfo);
     Map<String, CommandParameterInfo> scenesenhancedViewSceneCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo scenesenhancedViewScenegroupIDCommandParameterInfo = new CommandParameterInfo("groupID", Integer.class, Integer.class);
       scenesenhancedViewSceneCommandParams.put("groupID",scenesenhancedViewScenegroupIDCommandParameterInfo);
      
       CommandParameterInfo scenesenhancedViewScenesceneIDCommandParameterInfo = new CommandParameterInfo("sceneID", Integer.class, Integer.class);
       scenesenhancedViewSceneCommandParams.put("sceneID",scenesenhancedViewScenesceneIDCommandParameterInfo);
     
       InteractionInfo scenesenhancedViewSceneInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.Scenes.ID, ClusterIDMapping.Scenes.Command.EnhancedViewScene.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.ScenesCluster) cluster)
         //  .enhancedViewScene((ChipClusters.ScenesCluster.EnhancedViewSceneResponseCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("groupID")
         //  
         //  , (Integer)
         //  commandArguments.get("sceneID")
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedScenesClusterEnhancedViewSceneResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           scenesenhancedViewSceneCommandParams
       );
       scenesClusterInteractionInfoMap.put("enhancedViewScene", scenesenhancedViewSceneInteractionInfo);
     Map<String, CommandParameterInfo> scenescopySceneCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo scenescopyScenemodeCommandParameterInfo = new CommandParameterInfo("mode", Integer.class, Integer.class);
       scenescopySceneCommandParams.put("mode",scenescopyScenemodeCommandParameterInfo);
      
       CommandParameterInfo scenescopyScenegroupIdentifierFromCommandParameterInfo = new CommandParameterInfo("groupIdentifierFrom", Integer.class, Integer.class);
       scenescopySceneCommandParams.put("groupIdentifierFrom",scenescopyScenegroupIdentifierFromCommandParameterInfo);
      
       CommandParameterInfo scenescopyScenesceneIdentifierFromCommandParameterInfo = new CommandParameterInfo("sceneIdentifierFrom", Integer.class, Integer.class);
       scenescopySceneCommandParams.put("sceneIdentifierFrom",scenescopyScenesceneIdentifierFromCommandParameterInfo);
      
       CommandParameterInfo scenescopyScenegroupIdentifierToCommandParameterInfo = new CommandParameterInfo("groupIdentifierTo", Integer.class, Integer.class);
       scenescopySceneCommandParams.put("groupIdentifierTo",scenescopyScenegroupIdentifierToCommandParameterInfo);
      
       CommandParameterInfo scenescopyScenesceneIdentifierToCommandParameterInfo = new CommandParameterInfo("sceneIdentifierTo", Integer.class, Integer.class);
       scenescopySceneCommandParams.put("sceneIdentifierTo",scenescopyScenesceneIdentifierToCommandParameterInfo);
     
       InteractionInfo scenescopySceneInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.Scenes.ID, ClusterIDMapping.Scenes.Command.CopyScene.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.ScenesCluster) cluster)
         //  .copyScene((ChipClusters.ScenesCluster.CopySceneResponseCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("mode")
         //  
         //  , (Integer)
         //  commandArguments.get("groupIdentifierFrom")
         //  
         //  , (Integer)
         //  commandArguments.get("sceneIdentifierFrom")
         //  
         //  , (Integer)
         //  commandArguments.get("groupIdentifierTo")
         //  
         //  , (Integer)
         //  commandArguments.get("sceneIdentifierTo")
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedScenesClusterCopySceneResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           scenescopySceneCommandParams
       );
       scenesClusterInteractionInfoMap.put("copyScene", scenescopySceneInteractionInfo);
     commandMap.put("scenes", scenesClusterInteractionInfoMap);
     Map<String, InteractionInfo> onOffClusterInteractionInfoMap = new LinkedHashMap<>();
     Map<String, CommandParameterInfo> onOffoffCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       InteractionInfo onOffoffInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.OnOff.ID, ClusterIDMapping.OnOff.Command.Off.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.OnOffCluster) cluster)
         //  .off((DefaultClusterCallback) callback
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           onOffoffCommandParams
       );
       onOffClusterInteractionInfoMap.put("off", onOffoffInteractionInfo);
     Map<String, CommandParameterInfo> onOffonCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       InteractionInfo onOffonInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.OnOff.ID, ClusterIDMapping.OnOff.Command.On.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.OnOffCluster) cluster)
         //  .on((DefaultClusterCallback) callback
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           onOffonCommandParams
       );
       onOffClusterInteractionInfoMap.put("on", onOffonInteractionInfo);
     Map<String, CommandParameterInfo> onOfftoggleCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       InteractionInfo onOfftoggleInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.OnOff.ID, ClusterIDMapping.OnOff.Command.Toggle.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.OnOffCluster) cluster)
         //  .toggle((DefaultClusterCallback) callback
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           onOfftoggleCommandParams
       );
       onOffClusterInteractionInfoMap.put("toggle", onOfftoggleInteractionInfo);
     Map<String, CommandParameterInfo> onOffoffWithEffectCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo onOffoffWithEffecteffectIdentifierCommandParameterInfo = new CommandParameterInfo("effectIdentifier", Integer.class, Integer.class);
       onOffoffWithEffectCommandParams.put("effectIdentifier",onOffoffWithEffecteffectIdentifierCommandParameterInfo);
      
       CommandParameterInfo onOffoffWithEffecteffectVariantCommandParameterInfo = new CommandParameterInfo("effectVariant", Integer.class, Integer.class);
       onOffoffWithEffectCommandParams.put("effectVariant",onOffoffWithEffecteffectVariantCommandParameterInfo);
     
       InteractionInfo onOffoffWithEffectInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.OnOff.ID, ClusterIDMapping.OnOff.Command.OffWithEffect.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.OnOffCluster) cluster)
         //  .offWithEffect((DefaultClusterCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("effectIdentifier")
         //  
         //  , (Integer)
         //  commandArguments.get("effectVariant")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           onOffoffWithEffectCommandParams
       );
       onOffClusterInteractionInfoMap.put("offWithEffect", onOffoffWithEffectInteractionInfo);
     Map<String, CommandParameterInfo> onOffonWithRecallGlobalSceneCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       InteractionInfo onOffonWithRecallGlobalSceneInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.OnOff.ID, ClusterIDMapping.OnOff.Command.OnWithRecallGlobalScene.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.OnOffCluster) cluster)
         //  .onWithRecallGlobalScene((DefaultClusterCallback) callback
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           onOffonWithRecallGlobalSceneCommandParams
       );
       onOffClusterInteractionInfoMap.put("onWithRecallGlobalScene", onOffonWithRecallGlobalSceneInteractionInfo);
     Map<String, CommandParameterInfo> onOffonWithTimedOffCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo onOffonWithTimedOffonOffControlCommandParameterInfo = new CommandParameterInfo("onOffControl", Integer.class, Integer.class);
       onOffonWithTimedOffCommandParams.put("onOffControl",onOffonWithTimedOffonOffControlCommandParameterInfo);
      
       CommandParameterInfo onOffonWithTimedOffonTimeCommandParameterInfo = new CommandParameterInfo("onTime", Integer.class, Integer.class);
       onOffonWithTimedOffCommandParams.put("onTime",onOffonWithTimedOffonTimeCommandParameterInfo);
      
       CommandParameterInfo onOffonWithTimedOffoffWaitTimeCommandParameterInfo = new CommandParameterInfo("offWaitTime", Integer.class, Integer.class);
       onOffonWithTimedOffCommandParams.put("offWaitTime",onOffonWithTimedOffoffWaitTimeCommandParameterInfo);
     
       InteractionInfo onOffonWithTimedOffInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.OnOff.ID, ClusterIDMapping.OnOff.Command.OnWithTimedOff.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.OnOffCluster) cluster)
         //  .onWithTimedOff((DefaultClusterCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("onOffControl")
         //  
         //  , (Integer)
         //  commandArguments.get("onTime")
         //  
         //  , (Integer)
         //  commandArguments.get("offWaitTime")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           onOffonWithTimedOffCommandParams
       );
       onOffClusterInteractionInfoMap.put("onWithTimedOff", onOffonWithTimedOffInteractionInfo);
     commandMap.put("onOff", onOffClusterInteractionInfoMap);
     Map<String, InteractionInfo> onOffSwitchConfigurationClusterInteractionInfoMap = new LinkedHashMap<>();
     commandMap.put("onOffSwitchConfiguration", onOffSwitchConfigurationClusterInteractionInfoMap);
     Map<String, InteractionInfo> levelControlClusterInteractionInfoMap = new LinkedHashMap<>();
     Map<String, CommandParameterInfo> levelControlmoveToLevelCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo levelControlmoveToLevellevelCommandParameterInfo = new CommandParameterInfo("level", Integer.class, Integer.class);
       levelControlmoveToLevelCommandParams.put("level",levelControlmoveToLevellevelCommandParameterInfo);
      
       CommandParameterInfo levelControlmoveToLeveltransitionTimeCommandParameterInfo = new CommandParameterInfo("transitionTime", Integer.class, Integer.class);
       levelControlmoveToLevelCommandParams.put("transitionTime",levelControlmoveToLeveltransitionTimeCommandParameterInfo);
      
       CommandParameterInfo levelControlmoveToLeveloptionsMaskCommandParameterInfo = new CommandParameterInfo("optionsMask", Integer.class, Integer.class);
       levelControlmoveToLevelCommandParams.put("optionsMask",levelControlmoveToLeveloptionsMaskCommandParameterInfo);
      
       CommandParameterInfo levelControlmoveToLeveloptionsOverrideCommandParameterInfo = new CommandParameterInfo("optionsOverride", Integer.class, Integer.class);
       levelControlmoveToLevelCommandParams.put("optionsOverride",levelControlmoveToLeveloptionsOverrideCommandParameterInfo);
     
       InteractionInfo levelControlmoveToLevelInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.LevelControl.ID, ClusterIDMapping.LevelControl.Command.MoveToLevel.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.LevelControlCluster) cluster)
         //  .moveToLevel((DefaultClusterCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("level")
         //  
         //  , (Integer)
         //  commandArguments.get("transitionTime")
         //  
         //  , (Integer)
         //  commandArguments.get("optionsMask")
         //  
         //  , (Integer)
         //  commandArguments.get("optionsOverride")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           levelControlmoveToLevelCommandParams
       );
       levelControlClusterInteractionInfoMap.put("moveToLevel", levelControlmoveToLevelInteractionInfo);
     Map<String, CommandParameterInfo> levelControlmoveCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo levelControlmovemoveModeCommandParameterInfo = new CommandParameterInfo("moveMode", Integer.class, Integer.class);
       levelControlmoveCommandParams.put("moveMode",levelControlmovemoveModeCommandParameterInfo);
      
       CommandParameterInfo levelControlmoverateCommandParameterInfo = new CommandParameterInfo("rate", Integer.class, Integer.class);
       levelControlmoveCommandParams.put("rate",levelControlmoverateCommandParameterInfo);
      
       CommandParameterInfo levelControlmoveoptionsMaskCommandParameterInfo = new CommandParameterInfo("optionsMask", Integer.class, Integer.class);
       levelControlmoveCommandParams.put("optionsMask",levelControlmoveoptionsMaskCommandParameterInfo);
      
       CommandParameterInfo levelControlmoveoptionsOverrideCommandParameterInfo = new CommandParameterInfo("optionsOverride", Integer.class, Integer.class);
       levelControlmoveCommandParams.put("optionsOverride",levelControlmoveoptionsOverrideCommandParameterInfo);
     
       InteractionInfo levelControlmoveInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.LevelControl.ID, ClusterIDMapping.LevelControl.Command.Move.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.LevelControlCluster) cluster)
         //  .move((DefaultClusterCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("moveMode")
         //  
         //  , (Integer)
         //  commandArguments.get("rate")
         //  
         //  , (Integer)
         //  commandArguments.get("optionsMask")
         //  
         //  , (Integer)
         //  commandArguments.get("optionsOverride")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           levelControlmoveCommandParams
       );
       levelControlClusterInteractionInfoMap.put("move", levelControlmoveInteractionInfo);
     Map<String, CommandParameterInfo> levelControlstepCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo levelControlstepstepModeCommandParameterInfo = new CommandParameterInfo("stepMode", Integer.class, Integer.class);
       levelControlstepCommandParams.put("stepMode",levelControlstepstepModeCommandParameterInfo);
      
       CommandParameterInfo levelControlstepstepSizeCommandParameterInfo = new CommandParameterInfo("stepSize", Integer.class, Integer.class);
       levelControlstepCommandParams.put("stepSize",levelControlstepstepSizeCommandParameterInfo);
      
       CommandParameterInfo levelControlsteptransitionTimeCommandParameterInfo = new CommandParameterInfo("transitionTime", Integer.class, Integer.class);
       levelControlstepCommandParams.put("transitionTime",levelControlsteptransitionTimeCommandParameterInfo);
      
       CommandParameterInfo levelControlstepoptionsMaskCommandParameterInfo = new CommandParameterInfo("optionsMask", Integer.class, Integer.class);
       levelControlstepCommandParams.put("optionsMask",levelControlstepoptionsMaskCommandParameterInfo);
      
       CommandParameterInfo levelControlstepoptionsOverrideCommandParameterInfo = new CommandParameterInfo("optionsOverride", Integer.class, Integer.class);
       levelControlstepCommandParams.put("optionsOverride",levelControlstepoptionsOverrideCommandParameterInfo);
     
       InteractionInfo levelControlstepInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.LevelControl.ID, ClusterIDMapping.LevelControl.Command.Step.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.LevelControlCluster) cluster)
         //  .step((DefaultClusterCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("stepMode")
         //  
         //  , (Integer)
         //  commandArguments.get("stepSize")
         //  
         //  , (Integer)
         //  commandArguments.get("transitionTime")
         //  
         //  , (Integer)
         //  commandArguments.get("optionsMask")
         //  
         //  , (Integer)
         //  commandArguments.get("optionsOverride")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           levelControlstepCommandParams
       );
       levelControlClusterInteractionInfoMap.put("step", levelControlstepInteractionInfo);
     Map<String, CommandParameterInfo> levelControlstopCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo levelControlstopoptionsMaskCommandParameterInfo = new CommandParameterInfo("optionsMask", Integer.class, Integer.class);
       levelControlstopCommandParams.put("optionsMask",levelControlstopoptionsMaskCommandParameterInfo);
      
       CommandParameterInfo levelControlstopoptionsOverrideCommandParameterInfo = new CommandParameterInfo("optionsOverride", Integer.class, Integer.class);
       levelControlstopCommandParams.put("optionsOverride",levelControlstopoptionsOverrideCommandParameterInfo);
     
       InteractionInfo levelControlstopInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.LevelControl.ID, ClusterIDMapping.LevelControl.Command.Stop.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.LevelControlCluster) cluster)
         //  .stop((DefaultClusterCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("optionsMask")
         //  
         //  , (Integer)
         //  commandArguments.get("optionsOverride")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           levelControlstopCommandParams
       );
       levelControlClusterInteractionInfoMap.put("stop", levelControlstopInteractionInfo);
     Map<String, CommandParameterInfo> levelControlmoveToLevelWithOnOffCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo levelControlmoveToLevelWithOnOfflevelCommandParameterInfo = new CommandParameterInfo("level", Integer.class, Integer.class);
       levelControlmoveToLevelWithOnOffCommandParams.put("level",levelControlmoveToLevelWithOnOfflevelCommandParameterInfo);
      
       CommandParameterInfo levelControlmoveToLevelWithOnOfftransitionTimeCommandParameterInfo = new CommandParameterInfo("transitionTime", Integer.class, Integer.class);
       levelControlmoveToLevelWithOnOffCommandParams.put("transitionTime",levelControlmoveToLevelWithOnOfftransitionTimeCommandParameterInfo);
      
       CommandParameterInfo levelControlmoveToLevelWithOnOffoptionsMaskCommandParameterInfo = new CommandParameterInfo("optionsMask", Integer.class, Integer.class);
       levelControlmoveToLevelWithOnOffCommandParams.put("optionsMask",levelControlmoveToLevelWithOnOffoptionsMaskCommandParameterInfo);
      
       CommandParameterInfo levelControlmoveToLevelWithOnOffoptionsOverrideCommandParameterInfo = new CommandParameterInfo("optionsOverride", Integer.class, Integer.class);
       levelControlmoveToLevelWithOnOffCommandParams.put("optionsOverride",levelControlmoveToLevelWithOnOffoptionsOverrideCommandParameterInfo);
     
       InteractionInfo levelControlmoveToLevelWithOnOffInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.LevelControl.ID, ClusterIDMapping.LevelControl.Command.MoveToLevelWithOnOff.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.LevelControlCluster) cluster)
         //  .moveToLevelWithOnOff((DefaultClusterCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("level")
         //  
         //  , (Integer)
         //  commandArguments.get("transitionTime")
         //  
         //  , (Integer)
         //  commandArguments.get("optionsMask")
         //  
         //  , (Integer)
         //  commandArguments.get("optionsOverride")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           levelControlmoveToLevelWithOnOffCommandParams
       );
       levelControlClusterInteractionInfoMap.put("moveToLevelWithOnOff", levelControlmoveToLevelWithOnOffInteractionInfo);
     Map<String, CommandParameterInfo> levelControlmoveWithOnOffCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo levelControlmoveWithOnOffmoveModeCommandParameterInfo = new CommandParameterInfo("moveMode", Integer.class, Integer.class);
       levelControlmoveWithOnOffCommandParams.put("moveMode",levelControlmoveWithOnOffmoveModeCommandParameterInfo);
      
       CommandParameterInfo levelControlmoveWithOnOffrateCommandParameterInfo = new CommandParameterInfo("rate", Integer.class, Integer.class);
       levelControlmoveWithOnOffCommandParams.put("rate",levelControlmoveWithOnOffrateCommandParameterInfo);
      
       CommandParameterInfo levelControlmoveWithOnOffoptionsMaskCommandParameterInfo = new CommandParameterInfo("optionsMask", Integer.class, Integer.class);
       levelControlmoveWithOnOffCommandParams.put("optionsMask",levelControlmoveWithOnOffoptionsMaskCommandParameterInfo);
      
       CommandParameterInfo levelControlmoveWithOnOffoptionsOverrideCommandParameterInfo = new CommandParameterInfo("optionsOverride", Integer.class, Integer.class);
       levelControlmoveWithOnOffCommandParams.put("optionsOverride",levelControlmoveWithOnOffoptionsOverrideCommandParameterInfo);
     
       InteractionInfo levelControlmoveWithOnOffInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.LevelControl.ID, ClusterIDMapping.LevelControl.Command.MoveWithOnOff.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.LevelControlCluster) cluster)
         //  .moveWithOnOff((DefaultClusterCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("moveMode")
         //  
         //  , (Integer)
         //  commandArguments.get("rate")
         //  
         //  , (Integer)
         //  commandArguments.get("optionsMask")
         //  
         //  , (Integer)
         //  commandArguments.get("optionsOverride")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           levelControlmoveWithOnOffCommandParams
       );
       levelControlClusterInteractionInfoMap.put("moveWithOnOff", levelControlmoveWithOnOffInteractionInfo);
     Map<String, CommandParameterInfo> levelControlstepWithOnOffCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo levelControlstepWithOnOffstepModeCommandParameterInfo = new CommandParameterInfo("stepMode", Integer.class, Integer.class);
       levelControlstepWithOnOffCommandParams.put("stepMode",levelControlstepWithOnOffstepModeCommandParameterInfo);
      
       CommandParameterInfo levelControlstepWithOnOffstepSizeCommandParameterInfo = new CommandParameterInfo("stepSize", Integer.class, Integer.class);
       levelControlstepWithOnOffCommandParams.put("stepSize",levelControlstepWithOnOffstepSizeCommandParameterInfo);
      
       CommandParameterInfo levelControlstepWithOnOfftransitionTimeCommandParameterInfo = new CommandParameterInfo("transitionTime", Integer.class, Integer.class);
       levelControlstepWithOnOffCommandParams.put("transitionTime",levelControlstepWithOnOfftransitionTimeCommandParameterInfo);
      
       CommandParameterInfo levelControlstepWithOnOffoptionsMaskCommandParameterInfo = new CommandParameterInfo("optionsMask", Integer.class, Integer.class);
       levelControlstepWithOnOffCommandParams.put("optionsMask",levelControlstepWithOnOffoptionsMaskCommandParameterInfo);
      
       CommandParameterInfo levelControlstepWithOnOffoptionsOverrideCommandParameterInfo = new CommandParameterInfo("optionsOverride", Integer.class, Integer.class);
       levelControlstepWithOnOffCommandParams.put("optionsOverride",levelControlstepWithOnOffoptionsOverrideCommandParameterInfo);
     
       InteractionInfo levelControlstepWithOnOffInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.LevelControl.ID, ClusterIDMapping.LevelControl.Command.StepWithOnOff.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.LevelControlCluster) cluster)
         //  .stepWithOnOff((DefaultClusterCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("stepMode")
         //  
         //  , (Integer)
         //  commandArguments.get("stepSize")
         //  
         //  , (Integer)
         //  commandArguments.get("transitionTime")
         //  
         //  , (Integer)
         //  commandArguments.get("optionsMask")
         //  
         //  , (Integer)
         //  commandArguments.get("optionsOverride")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           levelControlstepWithOnOffCommandParams
       );
       levelControlClusterInteractionInfoMap.put("stepWithOnOff", levelControlstepWithOnOffInteractionInfo);
     Map<String, CommandParameterInfo> levelControlstopWithOnOffCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo levelControlstopWithOnOffoptionsMaskCommandParameterInfo = new CommandParameterInfo("optionsMask", Integer.class, Integer.class);
       levelControlstopWithOnOffCommandParams.put("optionsMask",levelControlstopWithOnOffoptionsMaskCommandParameterInfo);
      
       CommandParameterInfo levelControlstopWithOnOffoptionsOverrideCommandParameterInfo = new CommandParameterInfo("optionsOverride", Integer.class, Integer.class);
       levelControlstopWithOnOffCommandParams.put("optionsOverride",levelControlstopWithOnOffoptionsOverrideCommandParameterInfo);
     
       InteractionInfo levelControlstopWithOnOffInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.LevelControl.ID, ClusterIDMapping.LevelControl.Command.StopWithOnOff.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.LevelControlCluster) cluster)
         //  .stopWithOnOff((DefaultClusterCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("optionsMask")
         //  
         //  , (Integer)
         //  commandArguments.get("optionsOverride")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           levelControlstopWithOnOffCommandParams
       );
       levelControlClusterInteractionInfoMap.put("stopWithOnOff", levelControlstopWithOnOffInteractionInfo);
     Map<String, CommandParameterInfo> levelControlmoveToClosestFrequencyCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo levelControlmoveToClosestFrequencyfrequencyCommandParameterInfo = new CommandParameterInfo("frequency", Integer.class, Integer.class);
       levelControlmoveToClosestFrequencyCommandParams.put("frequency",levelControlmoveToClosestFrequencyfrequencyCommandParameterInfo);
     
       InteractionInfo levelControlmoveToClosestFrequencyInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.LevelControl.ID, ClusterIDMapping.LevelControl.Command.MoveToClosestFrequency.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.LevelControlCluster) cluster)
         //  .moveToClosestFrequency((DefaultClusterCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("frequency")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           levelControlmoveToClosestFrequencyCommandParams
       );
       levelControlClusterInteractionInfoMap.put("moveToClosestFrequency", levelControlmoveToClosestFrequencyInteractionInfo);
     commandMap.put("levelControl", levelControlClusterInteractionInfoMap);
     Map<String, InteractionInfo> binaryInputBasicClusterInteractionInfoMap = new LinkedHashMap<>();
     commandMap.put("binaryInputBasic", binaryInputBasicClusterInteractionInfoMap);
     Map<String, InteractionInfo> pulseWidthModulationClusterInteractionInfoMap = new LinkedHashMap<>();
     commandMap.put("pulseWidthModulation", pulseWidthModulationClusterInteractionInfoMap);
     Map<String, InteractionInfo> descriptorClusterInteractionInfoMap = new LinkedHashMap<>();
     commandMap.put("descriptor", descriptorClusterInteractionInfoMap);
     Map<String, InteractionInfo> bindingClusterInteractionInfoMap = new LinkedHashMap<>();
     commandMap.put("binding", bindingClusterInteractionInfoMap);
     Map<String, InteractionInfo> accessControlClusterInteractionInfoMap = new LinkedHashMap<>();
     commandMap.put("accessControl", accessControlClusterInteractionInfoMap);
     Map<String, InteractionInfo> actionsClusterInteractionInfoMap = new LinkedHashMap<>();
     Map<String, CommandParameterInfo> actionsinstantActionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo actionsinstantActionactionIDCommandParameterInfo = new CommandParameterInfo("actionID", Integer.class, Integer.class);
       actionsinstantActionCommandParams.put("actionID",actionsinstantActionactionIDCommandParameterInfo);
      
       CommandParameterInfo actionsinstantActioninvokeIDCommandParameterInfo = new CommandParameterInfo("invokeID", Optional.class, Long.class);
       actionsinstantActionCommandParams.put("invokeID",actionsinstantActioninvokeIDCommandParameterInfo);
     
       InteractionInfo actionsinstantActionInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.Actions.ID, ClusterIDMapping.Actions.Command.InstantAction.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.ActionsCluster) cluster)
         //  .instantAction((DefaultClusterCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("actionID")
         //  
         //  , (Optional<Long>)
         //  commandArguments.get("invokeID")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           actionsinstantActionCommandParams
       );
       actionsClusterInteractionInfoMap.put("instantAction", actionsinstantActionInteractionInfo);
     Map<String, CommandParameterInfo> actionsinstantActionWithTransitionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo actionsinstantActionWithTransitionactionIDCommandParameterInfo = new CommandParameterInfo("actionID", Integer.class, Integer.class);
       actionsinstantActionWithTransitionCommandParams.put("actionID",actionsinstantActionWithTransitionactionIDCommandParameterInfo);
      
       CommandParameterInfo actionsinstantActionWithTransitioninvokeIDCommandParameterInfo = new CommandParameterInfo("invokeID", Optional.class, Long.class);
       actionsinstantActionWithTransitionCommandParams.put("invokeID",actionsinstantActionWithTransitioninvokeIDCommandParameterInfo);
      
       CommandParameterInfo actionsinstantActionWithTransitiontransitionTimeCommandParameterInfo = new CommandParameterInfo("transitionTime", Integer.class, Integer.class);
       actionsinstantActionWithTransitionCommandParams.put("transitionTime",actionsinstantActionWithTransitiontransitionTimeCommandParameterInfo);
     
       InteractionInfo actionsinstantActionWithTransitionInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.Actions.ID, ClusterIDMapping.Actions.Command.InstantActionWithTransition.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.ActionsCluster) cluster)
         //  .instantActionWithTransition((DefaultClusterCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("actionID")
         //  
         //  , (Optional<Long>)
         //  commandArguments.get("invokeID")
         //  
         //  , (Integer)
         //  commandArguments.get("transitionTime")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           actionsinstantActionWithTransitionCommandParams
       );
       actionsClusterInteractionInfoMap.put("instantActionWithTransition", actionsinstantActionWithTransitionInteractionInfo);
     Map<String, CommandParameterInfo> actionsstartActionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo actionsstartActionactionIDCommandParameterInfo = new CommandParameterInfo("actionID", Integer.class, Integer.class);
       actionsstartActionCommandParams.put("actionID",actionsstartActionactionIDCommandParameterInfo);
      
       CommandParameterInfo actionsstartActioninvokeIDCommandParameterInfo = new CommandParameterInfo("invokeID", Optional.class, Long.class);
       actionsstartActionCommandParams.put("invokeID",actionsstartActioninvokeIDCommandParameterInfo);
     
       InteractionInfo actionsstartActionInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.Actions.ID, ClusterIDMapping.Actions.Command.StartAction.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.ActionsCluster) cluster)
         //  .startAction((DefaultClusterCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("actionID")
         //  
         //  , (Optional<Long>)
         //  commandArguments.get("invokeID")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           actionsstartActionCommandParams
       );
       actionsClusterInteractionInfoMap.put("startAction", actionsstartActionInteractionInfo);
     Map<String, CommandParameterInfo> actionsstartActionWithDurationCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo actionsstartActionWithDurationactionIDCommandParameterInfo = new CommandParameterInfo("actionID", Integer.class, Integer.class);
       actionsstartActionWithDurationCommandParams.put("actionID",actionsstartActionWithDurationactionIDCommandParameterInfo);
      
       CommandParameterInfo actionsstartActionWithDurationinvokeIDCommandParameterInfo = new CommandParameterInfo("invokeID", Optional.class, Long.class);
       actionsstartActionWithDurationCommandParams.put("invokeID",actionsstartActionWithDurationinvokeIDCommandParameterInfo);
      
       CommandParameterInfo actionsstartActionWithDurationdurationCommandParameterInfo = new CommandParameterInfo("duration", Long.class, Long.class);
       actionsstartActionWithDurationCommandParams.put("duration",actionsstartActionWithDurationdurationCommandParameterInfo);
     
       InteractionInfo actionsstartActionWithDurationInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.Actions.ID, ClusterIDMapping.Actions.Command.StartActionWithDuration.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.ActionsCluster) cluster)
         //  .startActionWithDuration((DefaultClusterCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("actionID")
         //  
         //  , (Optional<Long>)
         //  commandArguments.get("invokeID")
         //  
         //  , (Long)
         //  commandArguments.get("duration")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           actionsstartActionWithDurationCommandParams
       );
       actionsClusterInteractionInfoMap.put("startActionWithDuration", actionsstartActionWithDurationInteractionInfo);
     Map<String, CommandParameterInfo> actionsstopActionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo actionsstopActionactionIDCommandParameterInfo = new CommandParameterInfo("actionID", Integer.class, Integer.class);
       actionsstopActionCommandParams.put("actionID",actionsstopActionactionIDCommandParameterInfo);
      
       CommandParameterInfo actionsstopActioninvokeIDCommandParameterInfo = new CommandParameterInfo("invokeID", Optional.class, Long.class);
       actionsstopActionCommandParams.put("invokeID",actionsstopActioninvokeIDCommandParameterInfo);
     
       InteractionInfo actionsstopActionInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.Actions.ID, ClusterIDMapping.Actions.Command.StopAction.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.ActionsCluster) cluster)
         //  .stopAction((DefaultClusterCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("actionID")
         //  
         //  , (Optional<Long>)
         //  commandArguments.get("invokeID")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           actionsstopActionCommandParams
       );
       actionsClusterInteractionInfoMap.put("stopAction", actionsstopActionInteractionInfo);
     Map<String, CommandParameterInfo> actionspauseActionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo actionspauseActionactionIDCommandParameterInfo = new CommandParameterInfo("actionID", Integer.class, Integer.class);
       actionspauseActionCommandParams.put("actionID",actionspauseActionactionIDCommandParameterInfo);
      
       CommandParameterInfo actionspauseActioninvokeIDCommandParameterInfo = new CommandParameterInfo("invokeID", Optional.class, Long.class);
       actionspauseActionCommandParams.put("invokeID",actionspauseActioninvokeIDCommandParameterInfo);
     
       InteractionInfo actionspauseActionInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.Actions.ID, ClusterIDMapping.Actions.Command.PauseAction.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.ActionsCluster) cluster)
         //  .pauseAction((DefaultClusterCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("actionID")
         //  
         //  , (Optional<Long>)
         //  commandArguments.get("invokeID")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           actionspauseActionCommandParams
       );
       actionsClusterInteractionInfoMap.put("pauseAction", actionspauseActionInteractionInfo);
     Map<String, CommandParameterInfo> actionspauseActionWithDurationCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo actionspauseActionWithDurationactionIDCommandParameterInfo = new CommandParameterInfo("actionID", Integer.class, Integer.class);
       actionspauseActionWithDurationCommandParams.put("actionID",actionspauseActionWithDurationactionIDCommandParameterInfo);
      
       CommandParameterInfo actionspauseActionWithDurationinvokeIDCommandParameterInfo = new CommandParameterInfo("invokeID", Optional.class, Long.class);
       actionspauseActionWithDurationCommandParams.put("invokeID",actionspauseActionWithDurationinvokeIDCommandParameterInfo);
      
       CommandParameterInfo actionspauseActionWithDurationdurationCommandParameterInfo = new CommandParameterInfo("duration", Long.class, Long.class);
       actionspauseActionWithDurationCommandParams.put("duration",actionspauseActionWithDurationdurationCommandParameterInfo);
     
       InteractionInfo actionspauseActionWithDurationInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.Actions.ID, ClusterIDMapping.Actions.Command.PauseActionWithDuration.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.ActionsCluster) cluster)
         //  .pauseActionWithDuration((DefaultClusterCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("actionID")
         //  
         //  , (Optional<Long>)
         //  commandArguments.get("invokeID")
         //  
         //  , (Long)
         //  commandArguments.get("duration")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           actionspauseActionWithDurationCommandParams
       );
       actionsClusterInteractionInfoMap.put("pauseActionWithDuration", actionspauseActionWithDurationInteractionInfo);
     Map<String, CommandParameterInfo> actionsresumeActionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo actionsresumeActionactionIDCommandParameterInfo = new CommandParameterInfo("actionID", Integer.class, Integer.class);
       actionsresumeActionCommandParams.put("actionID",actionsresumeActionactionIDCommandParameterInfo);
      
       CommandParameterInfo actionsresumeActioninvokeIDCommandParameterInfo = new CommandParameterInfo("invokeID", Optional.class, Long.class);
       actionsresumeActionCommandParams.put("invokeID",actionsresumeActioninvokeIDCommandParameterInfo);
     
       InteractionInfo actionsresumeActionInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.Actions.ID, ClusterIDMapping.Actions.Command.ResumeAction.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.ActionsCluster) cluster)
         //  .resumeAction((DefaultClusterCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("actionID")
         //  
         //  , (Optional<Long>)
         //  commandArguments.get("invokeID")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           actionsresumeActionCommandParams
       );
       actionsClusterInteractionInfoMap.put("resumeAction", actionsresumeActionInteractionInfo);
     Map<String, CommandParameterInfo> actionsenableActionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo actionsenableActionactionIDCommandParameterInfo = new CommandParameterInfo("actionID", Integer.class, Integer.class);
       actionsenableActionCommandParams.put("actionID",actionsenableActionactionIDCommandParameterInfo);
      
       CommandParameterInfo actionsenableActioninvokeIDCommandParameterInfo = new CommandParameterInfo("invokeID", Optional.class, Long.class);
       actionsenableActionCommandParams.put("invokeID",actionsenableActioninvokeIDCommandParameterInfo);
     
       InteractionInfo actionsenableActionInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.Actions.ID, ClusterIDMapping.Actions.Command.EnableAction.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.ActionsCluster) cluster)
         //  .enableAction((DefaultClusterCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("actionID")
         //  
         //  , (Optional<Long>)
         //  commandArguments.get("invokeID")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           actionsenableActionCommandParams
       );
       actionsClusterInteractionInfoMap.put("enableAction", actionsenableActionInteractionInfo);
     Map<String, CommandParameterInfo> actionsenableActionWithDurationCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo actionsenableActionWithDurationactionIDCommandParameterInfo = new CommandParameterInfo("actionID", Integer.class, Integer.class);
       actionsenableActionWithDurationCommandParams.put("actionID",actionsenableActionWithDurationactionIDCommandParameterInfo);
      
       CommandParameterInfo actionsenableActionWithDurationinvokeIDCommandParameterInfo = new CommandParameterInfo("invokeID", Optional.class, Long.class);
       actionsenableActionWithDurationCommandParams.put("invokeID",actionsenableActionWithDurationinvokeIDCommandParameterInfo);
      
       CommandParameterInfo actionsenableActionWithDurationdurationCommandParameterInfo = new CommandParameterInfo("duration", Long.class, Long.class);
       actionsenableActionWithDurationCommandParams.put("duration",actionsenableActionWithDurationdurationCommandParameterInfo);
     
       InteractionInfo actionsenableActionWithDurationInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.Actions.ID, ClusterIDMapping.Actions.Command.EnableActionWithDuration.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.ActionsCluster) cluster)
         //  .enableActionWithDuration((DefaultClusterCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("actionID")
         //  
         //  , (Optional<Long>)
         //  commandArguments.get("invokeID")
         //  
         //  , (Long)
         //  commandArguments.get("duration")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           actionsenableActionWithDurationCommandParams
       );
       actionsClusterInteractionInfoMap.put("enableActionWithDuration", actionsenableActionWithDurationInteractionInfo);
     Map<String, CommandParameterInfo> actionsdisableActionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo actionsdisableActionactionIDCommandParameterInfo = new CommandParameterInfo("actionID", Integer.class, Integer.class);
       actionsdisableActionCommandParams.put("actionID",actionsdisableActionactionIDCommandParameterInfo);
      
       CommandParameterInfo actionsdisableActioninvokeIDCommandParameterInfo = new CommandParameterInfo("invokeID", Optional.class, Long.class);
       actionsdisableActionCommandParams.put("invokeID",actionsdisableActioninvokeIDCommandParameterInfo);
     
       InteractionInfo actionsdisableActionInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.Actions.ID, ClusterIDMapping.Actions.Command.DisableAction.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.ActionsCluster) cluster)
         //  .disableAction((DefaultClusterCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("actionID")
         //  
         //  , (Optional<Long>)
         //  commandArguments.get("invokeID")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           actionsdisableActionCommandParams
       );
       actionsClusterInteractionInfoMap.put("disableAction", actionsdisableActionInteractionInfo);
     Map<String, CommandParameterInfo> actionsdisableActionWithDurationCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo actionsdisableActionWithDurationactionIDCommandParameterInfo = new CommandParameterInfo("actionID", Integer.class, Integer.class);
       actionsdisableActionWithDurationCommandParams.put("actionID",actionsdisableActionWithDurationactionIDCommandParameterInfo);
      
       CommandParameterInfo actionsdisableActionWithDurationinvokeIDCommandParameterInfo = new CommandParameterInfo("invokeID", Optional.class, Long.class);
       actionsdisableActionWithDurationCommandParams.put("invokeID",actionsdisableActionWithDurationinvokeIDCommandParameterInfo);
      
       CommandParameterInfo actionsdisableActionWithDurationdurationCommandParameterInfo = new CommandParameterInfo("duration", Long.class, Long.class);
       actionsdisableActionWithDurationCommandParams.put("duration",actionsdisableActionWithDurationdurationCommandParameterInfo);
     
       InteractionInfo actionsdisableActionWithDurationInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.Actions.ID, ClusterIDMapping.Actions.Command.DisableActionWithDuration.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.ActionsCluster) cluster)
         //  .disableActionWithDuration((DefaultClusterCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("actionID")
         //  
         //  , (Optional<Long>)
         //  commandArguments.get("invokeID")
         //  
         //  , (Long)
         //  commandArguments.get("duration")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           actionsdisableActionWithDurationCommandParams
       );
       actionsClusterInteractionInfoMap.put("disableActionWithDuration", actionsdisableActionWithDurationInteractionInfo);
     commandMap.put("actions", actionsClusterInteractionInfoMap);
     Map<String, InteractionInfo> basicInformationClusterInteractionInfoMap = new LinkedHashMap<>();
     Map<String, CommandParameterInfo> basicInformationmfgSpecificPingCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       InteractionInfo basicInformationmfgSpecificPingInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.BasicInformation.ID, ClusterIDMapping.BasicInformation.Command.MfgSpecificPing.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.BasicInformationCluster) cluster)
         //  .mfgSpecificPing((DefaultClusterCallback) callback
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           basicInformationmfgSpecificPingCommandParams
       );
       basicInformationClusterInteractionInfoMap.put("mfgSpecificPing", basicInformationmfgSpecificPingInteractionInfo);
     commandMap.put("basicInformation", basicInformationClusterInteractionInfoMap);
     Map<String, InteractionInfo> otaSoftwareUpdateProviderClusterInteractionInfoMap = new LinkedHashMap<>();
     Map<String, CommandParameterInfo> otaSoftwareUpdateProviderqueryImageCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo otaSoftwareUpdateProviderqueryImagevendorIDCommandParameterInfo = new CommandParameterInfo("vendorID", Integer.class, Integer.class);
       otaSoftwareUpdateProviderqueryImageCommandParams.put("vendorID",otaSoftwareUpdateProviderqueryImagevendorIDCommandParameterInfo);
      
       CommandParameterInfo otaSoftwareUpdateProviderqueryImageproductIDCommandParameterInfo = new CommandParameterInfo("productID", Integer.class, Integer.class);
       otaSoftwareUpdateProviderqueryImageCommandParams.put("productID",otaSoftwareUpdateProviderqueryImageproductIDCommandParameterInfo);
      
       CommandParameterInfo otaSoftwareUpdateProviderqueryImagesoftwareVersionCommandParameterInfo = new CommandParameterInfo("softwareVersion", Long.class, Long.class);
       otaSoftwareUpdateProviderqueryImageCommandParams.put("softwareVersion",otaSoftwareUpdateProviderqueryImagesoftwareVersionCommandParameterInfo);
      
       CommandParameterInfo otaSoftwareUpdateProviderqueryImageprotocolsSupportedCommandParameterInfo = new CommandParameterInfo("protocolsSupported", ArrayList.class, Integer.class);
       otaSoftwareUpdateProviderqueryImageCommandParams.put("protocolsSupported",otaSoftwareUpdateProviderqueryImageprotocolsSupportedCommandParameterInfo);
      
       CommandParameterInfo otaSoftwareUpdateProviderqueryImagehardwareVersionCommandParameterInfo = new CommandParameterInfo("hardwareVersion", Optional.class, Integer.class);
       otaSoftwareUpdateProviderqueryImageCommandParams.put("hardwareVersion",otaSoftwareUpdateProviderqueryImagehardwareVersionCommandParameterInfo);
      
       CommandParameterInfo otaSoftwareUpdateProviderqueryImagelocationCommandParameterInfo = new CommandParameterInfo("location", Optional.class, String.class);
       otaSoftwareUpdateProviderqueryImageCommandParams.put("location",otaSoftwareUpdateProviderqueryImagelocationCommandParameterInfo);
      
       CommandParameterInfo otaSoftwareUpdateProviderqueryImagerequestorCanConsentCommandParameterInfo = new CommandParameterInfo("requestorCanConsent", Optional.class, Boolean.class);
       otaSoftwareUpdateProviderqueryImageCommandParams.put("requestorCanConsent",otaSoftwareUpdateProviderqueryImagerequestorCanConsentCommandParameterInfo);
      
       CommandParameterInfo otaSoftwareUpdateProviderqueryImagemetadataForProviderCommandParameterInfo = new CommandParameterInfo("metadataForProvider", Optional.class, byte[].class);
       otaSoftwareUpdateProviderqueryImageCommandParams.put("metadataForProvider",otaSoftwareUpdateProviderqueryImagemetadataForProviderCommandParameterInfo);
     
       InteractionInfo otaSoftwareUpdateProviderqueryImageInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.OtaSoftwareUpdateProvider.ID, ClusterIDMapping.OtaSoftwareUpdateProvider.Command.QueryImage.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.OtaSoftwareUpdateProviderCluster) cluster)
         //  .queryImage((ChipClusters.OtaSoftwareUpdateProviderCluster.QueryImageResponseCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("vendorID")
         //  
         //  , (Integer)
         //  commandArguments.get("productID")
         //  
         //  , (Long)
         //  commandArguments.get("softwareVersion")
         //  
         //  , (ArrayList<Integer>)
         //  commandArguments.get("protocolsSupported")
         //  
         //  , (Optional<Integer>)
         //  commandArguments.get("hardwareVersion")
         //  
         //  , (Optional<String>)
         //  commandArguments.get("location")
         //  
         //  , (Optional<Boolean>)
         //  commandArguments.get("requestorCanConsent")
         //  
         //  , (Optional<byte[]>)
         //  commandArguments.get("metadataForProvider")
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedOtaSoftwareUpdateProviderClusterQueryImageResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           otaSoftwareUpdateProviderqueryImageCommandParams
       );
       otaSoftwareUpdateProviderClusterInteractionInfoMap.put("queryImage", otaSoftwareUpdateProviderqueryImageInteractionInfo);
     Map<String, CommandParameterInfo> otaSoftwareUpdateProviderapplyUpdateRequestCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo otaSoftwareUpdateProviderapplyUpdateRequestupdateTokenCommandParameterInfo = new CommandParameterInfo("updateToken", byte[].class, byte[].class);
       otaSoftwareUpdateProviderapplyUpdateRequestCommandParams.put("updateToken",otaSoftwareUpdateProviderapplyUpdateRequestupdateTokenCommandParameterInfo);
      
       CommandParameterInfo otaSoftwareUpdateProviderapplyUpdateRequestnewVersionCommandParameterInfo = new CommandParameterInfo("newVersion", Long.class, Long.class);
       otaSoftwareUpdateProviderapplyUpdateRequestCommandParams.put("newVersion",otaSoftwareUpdateProviderapplyUpdateRequestnewVersionCommandParameterInfo);
     
       InteractionInfo otaSoftwareUpdateProviderapplyUpdateRequestInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.OtaSoftwareUpdateProvider.ID, ClusterIDMapping.OtaSoftwareUpdateProvider.Command.ApplyUpdateRequest.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.OtaSoftwareUpdateProviderCluster) cluster)
         //  .applyUpdateRequest((ChipClusters.OtaSoftwareUpdateProviderCluster.ApplyUpdateResponseCallback) callback
         //  
         //  , (byte[])
         //  commandArguments.get("updateToken")
         //  
         //  , (Long)
         //  commandArguments.get("newVersion")
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedOtaSoftwareUpdateProviderClusterApplyUpdateResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           otaSoftwareUpdateProviderapplyUpdateRequestCommandParams
       );
       otaSoftwareUpdateProviderClusterInteractionInfoMap.put("applyUpdateRequest", otaSoftwareUpdateProviderapplyUpdateRequestInteractionInfo);
     Map<String, CommandParameterInfo> otaSoftwareUpdateProvidernotifyUpdateAppliedCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo otaSoftwareUpdateProvidernotifyUpdateAppliedupdateTokenCommandParameterInfo = new CommandParameterInfo("updateToken", byte[].class, byte[].class);
       otaSoftwareUpdateProvidernotifyUpdateAppliedCommandParams.put("updateToken",otaSoftwareUpdateProvidernotifyUpdateAppliedupdateTokenCommandParameterInfo);
      
       CommandParameterInfo otaSoftwareUpdateProvidernotifyUpdateAppliedsoftwareVersionCommandParameterInfo = new CommandParameterInfo("softwareVersion", Long.class, Long.class);
       otaSoftwareUpdateProvidernotifyUpdateAppliedCommandParams.put("softwareVersion",otaSoftwareUpdateProvidernotifyUpdateAppliedsoftwareVersionCommandParameterInfo);
     
       InteractionInfo otaSoftwareUpdateProvidernotifyUpdateAppliedInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.OtaSoftwareUpdateProvider.ID, ClusterIDMapping.OtaSoftwareUpdateProvider.Command.NotifyUpdateApplied.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.OtaSoftwareUpdateProviderCluster) cluster)
         //  .notifyUpdateApplied((DefaultClusterCallback) callback
         //  
         //  , (byte[])
         //  commandArguments.get("updateToken")
         //  
         //  , (Long)
         //  commandArguments.get("softwareVersion")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           otaSoftwareUpdateProvidernotifyUpdateAppliedCommandParams
       );
       otaSoftwareUpdateProviderClusterInteractionInfoMap.put("notifyUpdateApplied", otaSoftwareUpdateProvidernotifyUpdateAppliedInteractionInfo);
     commandMap.put("otaSoftwareUpdateProvider", otaSoftwareUpdateProviderClusterInteractionInfoMap);
     Map<String, InteractionInfo> otaSoftwareUpdateRequestorClusterInteractionInfoMap = new LinkedHashMap<>();
     Map<String, CommandParameterInfo> otaSoftwareUpdateRequestorannounceOTAProviderCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo otaSoftwareUpdateRequestorannounceOTAProviderproviderNodeIDCommandParameterInfo = new CommandParameterInfo("providerNodeID", Long.class, Long.class);
       otaSoftwareUpdateRequestorannounceOTAProviderCommandParams.put("providerNodeID",otaSoftwareUpdateRequestorannounceOTAProviderproviderNodeIDCommandParameterInfo);
      
       CommandParameterInfo otaSoftwareUpdateRequestorannounceOTAProvidervendorIDCommandParameterInfo = new CommandParameterInfo("vendorID", Integer.class, Integer.class);
       otaSoftwareUpdateRequestorannounceOTAProviderCommandParams.put("vendorID",otaSoftwareUpdateRequestorannounceOTAProvidervendorIDCommandParameterInfo);
      
       CommandParameterInfo otaSoftwareUpdateRequestorannounceOTAProviderannouncementReasonCommandParameterInfo = new CommandParameterInfo("announcementReason", Integer.class, Integer.class);
       otaSoftwareUpdateRequestorannounceOTAProviderCommandParams.put("announcementReason",otaSoftwareUpdateRequestorannounceOTAProviderannouncementReasonCommandParameterInfo);
      
       CommandParameterInfo otaSoftwareUpdateRequestorannounceOTAProvidermetadataForNodeCommandParameterInfo = new CommandParameterInfo("metadataForNode", Optional.class, byte[].class);
       otaSoftwareUpdateRequestorannounceOTAProviderCommandParams.put("metadataForNode",otaSoftwareUpdateRequestorannounceOTAProvidermetadataForNodeCommandParameterInfo);
      
       CommandParameterInfo otaSoftwareUpdateRequestorannounceOTAProviderendpointCommandParameterInfo = new CommandParameterInfo("endpoint", Integer.class, Integer.class);
       otaSoftwareUpdateRequestorannounceOTAProviderCommandParams.put("endpoint",otaSoftwareUpdateRequestorannounceOTAProviderendpointCommandParameterInfo);
     
       InteractionInfo otaSoftwareUpdateRequestorannounceOTAProviderInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.OtaSoftwareUpdateRequestor.ID, ClusterIDMapping.OtaSoftwareUpdateRequestor.Command.AnnounceOTAProvider.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.OtaSoftwareUpdateRequestorCluster) cluster)
         //  .announceOTAProvider((DefaultClusterCallback) callback
         //  
         //  , (Long)
         //  commandArguments.get("providerNodeID")
         //  
         //  , (Integer)
         //  commandArguments.get("vendorID")
         //  
         //  , (Integer)
         //  commandArguments.get("announcementReason")
         //  
         //  , (Optional<byte[]>)
         //  commandArguments.get("metadataForNode")
         //  
         //  , (Integer)
         //  commandArguments.get("endpoint")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           otaSoftwareUpdateRequestorannounceOTAProviderCommandParams
       );
       otaSoftwareUpdateRequestorClusterInteractionInfoMap.put("announceOTAProvider", otaSoftwareUpdateRequestorannounceOTAProviderInteractionInfo);
     commandMap.put("otaSoftwareUpdateRequestor", otaSoftwareUpdateRequestorClusterInteractionInfoMap);
     Map<String, InteractionInfo> localizationConfigurationClusterInteractionInfoMap = new LinkedHashMap<>();
     commandMap.put("localizationConfiguration", localizationConfigurationClusterInteractionInfoMap);
     Map<String, InteractionInfo> timeFormatLocalizationClusterInteractionInfoMap = new LinkedHashMap<>();
     commandMap.put("timeFormatLocalization", timeFormatLocalizationClusterInteractionInfoMap);
     Map<String, InteractionInfo> unitLocalizationClusterInteractionInfoMap = new LinkedHashMap<>();
     commandMap.put("unitLocalization", unitLocalizationClusterInteractionInfoMap);
     Map<String, InteractionInfo> powerSourceConfigurationClusterInteractionInfoMap = new LinkedHashMap<>();
     commandMap.put("powerSourceConfiguration", powerSourceConfigurationClusterInteractionInfoMap);
     Map<String, InteractionInfo> powerSourceClusterInteractionInfoMap = new LinkedHashMap<>();
     commandMap.put("powerSource", powerSourceClusterInteractionInfoMap);
     Map<String, InteractionInfo> generalCommissioningClusterInteractionInfoMap = new LinkedHashMap<>();
     Map<String, CommandParameterInfo> generalCommissioningarmFailSafeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo generalCommissioningarmFailSafeexpiryLengthSecondsCommandParameterInfo = new CommandParameterInfo("expiryLengthSeconds", Integer.class, Integer.class);
       generalCommissioningarmFailSafeCommandParams.put("expiryLengthSeconds",generalCommissioningarmFailSafeexpiryLengthSecondsCommandParameterInfo);
      
       CommandParameterInfo generalCommissioningarmFailSafebreadcrumbCommandParameterInfo = new CommandParameterInfo("breadcrumb", Long.class, Long.class);
       generalCommissioningarmFailSafeCommandParams.put("breadcrumb",generalCommissioningarmFailSafebreadcrumbCommandParameterInfo);
     
       InteractionInfo generalCommissioningarmFailSafeInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.GeneralCommissioning.ID, ClusterIDMapping.GeneralCommissioning.Command.ArmFailSafe.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.GeneralCommissioningCluster) cluster)
         //  .armFailSafe((ChipClusters.GeneralCommissioningCluster.ArmFailSafeResponseCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("expiryLengthSeconds")
         //  
         //  , (Long)
         //  commandArguments.get("breadcrumb")
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedGeneralCommissioningClusterArmFailSafeResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           generalCommissioningarmFailSafeCommandParams
       );
       generalCommissioningClusterInteractionInfoMap.put("armFailSafe", generalCommissioningarmFailSafeInteractionInfo);
     Map<String, CommandParameterInfo> generalCommissioningsetRegulatoryConfigCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo generalCommissioningsetRegulatoryConfignewRegulatoryConfigCommandParameterInfo = new CommandParameterInfo("newRegulatoryConfig", Integer.class, Integer.class);
       generalCommissioningsetRegulatoryConfigCommandParams.put("newRegulatoryConfig",generalCommissioningsetRegulatoryConfignewRegulatoryConfigCommandParameterInfo);
      
       CommandParameterInfo generalCommissioningsetRegulatoryConfigcountryCodeCommandParameterInfo = new CommandParameterInfo("countryCode", String.class, String.class);
       generalCommissioningsetRegulatoryConfigCommandParams.put("countryCode",generalCommissioningsetRegulatoryConfigcountryCodeCommandParameterInfo);
      
       CommandParameterInfo generalCommissioningsetRegulatoryConfigbreadcrumbCommandParameterInfo = new CommandParameterInfo("breadcrumb", Long.class, Long.class);
       generalCommissioningsetRegulatoryConfigCommandParams.put("breadcrumb",generalCommissioningsetRegulatoryConfigbreadcrumbCommandParameterInfo);
     
       InteractionInfo generalCommissioningsetRegulatoryConfigInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.GeneralCommissioning.ID, ClusterIDMapping.GeneralCommissioning.Command.SetRegulatoryConfig.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.GeneralCommissioningCluster) cluster)
         //  .setRegulatoryConfig((ChipClusters.GeneralCommissioningCluster.SetRegulatoryConfigResponseCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("newRegulatoryConfig")
         //  
         //  , (String)
         //  commandArguments.get("countryCode")
         //  
         //  , (Long)
         //  commandArguments.get("breadcrumb")
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedGeneralCommissioningClusterSetRegulatoryConfigResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           generalCommissioningsetRegulatoryConfigCommandParams
       );
       generalCommissioningClusterInteractionInfoMap.put("setRegulatoryConfig", generalCommissioningsetRegulatoryConfigInteractionInfo);
     Map<String, CommandParameterInfo> generalCommissioningcommissioningCompleteCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       InteractionInfo generalCommissioningcommissioningCompleteInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.GeneralCommissioning.ID, ClusterIDMapping.GeneralCommissioning.Command.CommissioningComplete.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.GeneralCommissioningCluster) cluster)
         //  .commissioningComplete((ChipClusters.GeneralCommissioningCluster.CommissioningCompleteResponseCallback) callback
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedGeneralCommissioningClusterCommissioningCompleteResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           generalCommissioningcommissioningCompleteCommandParams
       );
       generalCommissioningClusterInteractionInfoMap.put("commissioningComplete", generalCommissioningcommissioningCompleteInteractionInfo);
     commandMap.put("generalCommissioning", generalCommissioningClusterInteractionInfoMap);
     Map<String, InteractionInfo> networkCommissioningClusterInteractionInfoMap = new LinkedHashMap<>();
     Map<String, CommandParameterInfo> networkCommissioningscanNetworksCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo networkCommissioningscanNetworksssidCommandParameterInfo = new CommandParameterInfo("ssid", Optional.class, byte[].class);
       networkCommissioningscanNetworksCommandParams.put("ssid",networkCommissioningscanNetworksssidCommandParameterInfo);
      
       CommandParameterInfo networkCommissioningscanNetworksbreadcrumbCommandParameterInfo = new CommandParameterInfo("breadcrumb", Optional.class, Long.class);
       networkCommissioningscanNetworksCommandParams.put("breadcrumb",networkCommissioningscanNetworksbreadcrumbCommandParameterInfo);
     
       InteractionInfo networkCommissioningscanNetworksInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.NetworkCommissioning.ID, ClusterIDMapping.NetworkCommissioning.Command.ScanNetworks.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.NetworkCommissioningCluster) cluster)
         //  .scanNetworks((ChipClusters.NetworkCommissioningCluster.ScanNetworksResponseCallback) callback
         //  
         //  , (Optional<byte[]>)
         //  commandArguments.get("ssid")
         //  
         //  , (Optional<Long>)
         //  commandArguments.get("breadcrumb")
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedNetworkCommissioningClusterScanNetworksResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           networkCommissioningscanNetworksCommandParams
       );
       networkCommissioningClusterInteractionInfoMap.put("scanNetworks", networkCommissioningscanNetworksInteractionInfo);
     Map<String, CommandParameterInfo> networkCommissioningaddOrUpdateWiFiNetworkCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo networkCommissioningaddOrUpdateWiFiNetworkssidCommandParameterInfo = new CommandParameterInfo("ssid", byte[].class, byte[].class);
       networkCommissioningaddOrUpdateWiFiNetworkCommandParams.put("ssid",networkCommissioningaddOrUpdateWiFiNetworkssidCommandParameterInfo);
      
       CommandParameterInfo networkCommissioningaddOrUpdateWiFiNetworkcredentialsCommandParameterInfo = new CommandParameterInfo("credentials", byte[].class, byte[].class);
       networkCommissioningaddOrUpdateWiFiNetworkCommandParams.put("credentials",networkCommissioningaddOrUpdateWiFiNetworkcredentialsCommandParameterInfo);
      
       CommandParameterInfo networkCommissioningaddOrUpdateWiFiNetworkbreadcrumbCommandParameterInfo = new CommandParameterInfo("breadcrumb", Optional.class, Long.class);
       networkCommissioningaddOrUpdateWiFiNetworkCommandParams.put("breadcrumb",networkCommissioningaddOrUpdateWiFiNetworkbreadcrumbCommandParameterInfo);
     
       InteractionInfo networkCommissioningaddOrUpdateWiFiNetworkInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.NetworkCommissioning.ID, ClusterIDMapping.NetworkCommissioning.Command.AddOrUpdateWiFiNetwork.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.NetworkCommissioningCluster) cluster)
         //  .addOrUpdateWiFiNetwork((ChipClusters.NetworkCommissioningCluster.NetworkConfigResponseCallback) callback
         //  
         //  , (byte[])
         //  commandArguments.get("ssid")
         //  
         //  , (byte[])
         //  commandArguments.get("credentials")
         //  
         //  , (Optional<Long>)
         //  commandArguments.get("breadcrumb")
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedNetworkCommissioningClusterNetworkConfigResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           networkCommissioningaddOrUpdateWiFiNetworkCommandParams
       );
       networkCommissioningClusterInteractionInfoMap.put("addOrUpdateWiFiNetwork", networkCommissioningaddOrUpdateWiFiNetworkInteractionInfo);
     Map<String, CommandParameterInfo> networkCommissioningaddOrUpdateThreadNetworkCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo networkCommissioningaddOrUpdateThreadNetworkoperationalDatasetCommandParameterInfo = new CommandParameterInfo("operationalDataset", byte[].class, byte[].class);
       networkCommissioningaddOrUpdateThreadNetworkCommandParams.put("operationalDataset",networkCommissioningaddOrUpdateThreadNetworkoperationalDatasetCommandParameterInfo);
      
       CommandParameterInfo networkCommissioningaddOrUpdateThreadNetworkbreadcrumbCommandParameterInfo = new CommandParameterInfo("breadcrumb", Optional.class, Long.class);
       networkCommissioningaddOrUpdateThreadNetworkCommandParams.put("breadcrumb",networkCommissioningaddOrUpdateThreadNetworkbreadcrumbCommandParameterInfo);
     
       InteractionInfo networkCommissioningaddOrUpdateThreadNetworkInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.NetworkCommissioning.ID, ClusterIDMapping.NetworkCommissioning.Command.AddOrUpdateThreadNetwork.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.NetworkCommissioningCluster) cluster)
         //  .addOrUpdateThreadNetwork((ChipClusters.NetworkCommissioningCluster.NetworkConfigResponseCallback) callback
         //  
         //  , (byte[])
         //  commandArguments.get("operationalDataset")
         //  
         //  , (Optional<Long>)
         //  commandArguments.get("breadcrumb")
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedNetworkCommissioningClusterNetworkConfigResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           networkCommissioningaddOrUpdateThreadNetworkCommandParams
       );
       networkCommissioningClusterInteractionInfoMap.put("addOrUpdateThreadNetwork", networkCommissioningaddOrUpdateThreadNetworkInteractionInfo);
     Map<String, CommandParameterInfo> networkCommissioningremoveNetworkCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo networkCommissioningremoveNetworknetworkIDCommandParameterInfo = new CommandParameterInfo("networkID", byte[].class, byte[].class);
       networkCommissioningremoveNetworkCommandParams.put("networkID",networkCommissioningremoveNetworknetworkIDCommandParameterInfo);
      
       CommandParameterInfo networkCommissioningremoveNetworkbreadcrumbCommandParameterInfo = new CommandParameterInfo("breadcrumb", Optional.class, Long.class);
       networkCommissioningremoveNetworkCommandParams.put("breadcrumb",networkCommissioningremoveNetworkbreadcrumbCommandParameterInfo);
     
       InteractionInfo networkCommissioningremoveNetworkInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.NetworkCommissioning.ID, ClusterIDMapping.NetworkCommissioning.Command.RemoveNetwork.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.NetworkCommissioningCluster) cluster)
         //  .removeNetwork((ChipClusters.NetworkCommissioningCluster.NetworkConfigResponseCallback) callback
         //  
         //  , (byte[])
         //  commandArguments.get("networkID")
         //  
         //  , (Optional<Long>)
         //  commandArguments.get("breadcrumb")
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedNetworkCommissioningClusterNetworkConfigResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           networkCommissioningremoveNetworkCommandParams
       );
       networkCommissioningClusterInteractionInfoMap.put("removeNetwork", networkCommissioningremoveNetworkInteractionInfo);
     Map<String, CommandParameterInfo> networkCommissioningconnectNetworkCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo networkCommissioningconnectNetworknetworkIDCommandParameterInfo = new CommandParameterInfo("networkID", byte[].class, byte[].class);
       networkCommissioningconnectNetworkCommandParams.put("networkID",networkCommissioningconnectNetworknetworkIDCommandParameterInfo);
      
       CommandParameterInfo networkCommissioningconnectNetworkbreadcrumbCommandParameterInfo = new CommandParameterInfo("breadcrumb", Optional.class, Long.class);
       networkCommissioningconnectNetworkCommandParams.put("breadcrumb",networkCommissioningconnectNetworkbreadcrumbCommandParameterInfo);
     
       InteractionInfo networkCommissioningconnectNetworkInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.NetworkCommissioning.ID, ClusterIDMapping.NetworkCommissioning.Command.ConnectNetwork.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.NetworkCommissioningCluster) cluster)
         //  .connectNetwork((ChipClusters.NetworkCommissioningCluster.ConnectNetworkResponseCallback) callback
         //  
         //  , (byte[])
         //  commandArguments.get("networkID")
         //  
         //  , (Optional<Long>)
         //  commandArguments.get("breadcrumb")
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedNetworkCommissioningClusterConnectNetworkResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           networkCommissioningconnectNetworkCommandParams
       );
       networkCommissioningClusterInteractionInfoMap.put("connectNetwork", networkCommissioningconnectNetworkInteractionInfo);
     Map<String, CommandParameterInfo> networkCommissioningreorderNetworkCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo networkCommissioningreorderNetworknetworkIDCommandParameterInfo = new CommandParameterInfo("networkID", byte[].class, byte[].class);
       networkCommissioningreorderNetworkCommandParams.put("networkID",networkCommissioningreorderNetworknetworkIDCommandParameterInfo);
      
       CommandParameterInfo networkCommissioningreorderNetworknetworkIndexCommandParameterInfo = new CommandParameterInfo("networkIndex", Integer.class, Integer.class);
       networkCommissioningreorderNetworkCommandParams.put("networkIndex",networkCommissioningreorderNetworknetworkIndexCommandParameterInfo);
      
       CommandParameterInfo networkCommissioningreorderNetworkbreadcrumbCommandParameterInfo = new CommandParameterInfo("breadcrumb", Optional.class, Long.class);
       networkCommissioningreorderNetworkCommandParams.put("breadcrumb",networkCommissioningreorderNetworkbreadcrumbCommandParameterInfo);
     
       InteractionInfo networkCommissioningreorderNetworkInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.NetworkCommissioning.ID, ClusterIDMapping.NetworkCommissioning.Command.ReorderNetwork.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.NetworkCommissioningCluster) cluster)
         //  .reorderNetwork((ChipClusters.NetworkCommissioningCluster.NetworkConfigResponseCallback) callback
         //  
         //  , (byte[])
         //  commandArguments.get("networkID")
         //  
         //  , (Integer)
         //  commandArguments.get("networkIndex")
         //  
         //  , (Optional<Long>)
         //  commandArguments.get("breadcrumb")
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedNetworkCommissioningClusterNetworkConfigResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           networkCommissioningreorderNetworkCommandParams
       );
       networkCommissioningClusterInteractionInfoMap.put("reorderNetwork", networkCommissioningreorderNetworkInteractionInfo);
     commandMap.put("networkCommissioning", networkCommissioningClusterInteractionInfoMap);
     Map<String, InteractionInfo> diagnosticLogsClusterInteractionInfoMap = new LinkedHashMap<>();
     Map<String, CommandParameterInfo> diagnosticLogsretrieveLogsRequestCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo diagnosticLogsretrieveLogsRequestintentCommandParameterInfo = new CommandParameterInfo("intent", Integer.class, Integer.class);
       diagnosticLogsretrieveLogsRequestCommandParams.put("intent",diagnosticLogsretrieveLogsRequestintentCommandParameterInfo);
      
       CommandParameterInfo diagnosticLogsretrieveLogsRequestrequestedProtocolCommandParameterInfo = new CommandParameterInfo("requestedProtocol", Integer.class, Integer.class);
       diagnosticLogsretrieveLogsRequestCommandParams.put("requestedProtocol",diagnosticLogsretrieveLogsRequestrequestedProtocolCommandParameterInfo);
      
       CommandParameterInfo diagnosticLogsretrieveLogsRequesttransferFileDesignatorCommandParameterInfo = new CommandParameterInfo("transferFileDesignator", Optional.class, String.class);
       diagnosticLogsretrieveLogsRequestCommandParams.put("transferFileDesignator",diagnosticLogsretrieveLogsRequesttransferFileDesignatorCommandParameterInfo);
     
       InteractionInfo diagnosticLogsretrieveLogsRequestInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.DiagnosticLogs.ID, ClusterIDMapping.DiagnosticLogs.Command.RetrieveLogsRequest.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.DiagnosticLogsCluster) cluster)
         //  .retrieveLogsRequest((ChipClusters.DiagnosticLogsCluster.RetrieveLogsResponseCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("intent")
         //  
         //  , (Integer)
         //  commandArguments.get("requestedProtocol")
         //  
         //  , (Optional<String>)
         //  commandArguments.get("transferFileDesignator")
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedDiagnosticLogsClusterRetrieveLogsResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           diagnosticLogsretrieveLogsRequestCommandParams
       );
       diagnosticLogsClusterInteractionInfoMap.put("retrieveLogsRequest", diagnosticLogsretrieveLogsRequestInteractionInfo);
     commandMap.put("diagnosticLogs", diagnosticLogsClusterInteractionInfoMap);
     Map<String, InteractionInfo> generalDiagnosticsClusterInteractionInfoMap = new LinkedHashMap<>();
     Map<String, CommandParameterInfo> generalDiagnosticstestEventTriggerCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo generalDiagnosticstestEventTriggerenableKeyCommandParameterInfo = new CommandParameterInfo("enableKey", byte[].class, byte[].class);
       generalDiagnosticstestEventTriggerCommandParams.put("enableKey",generalDiagnosticstestEventTriggerenableKeyCommandParameterInfo);
      
       CommandParameterInfo generalDiagnosticstestEventTriggereventTriggerCommandParameterInfo = new CommandParameterInfo("eventTrigger", Long.class, Long.class);
       generalDiagnosticstestEventTriggerCommandParams.put("eventTrigger",generalDiagnosticstestEventTriggereventTriggerCommandParameterInfo);
     
       InteractionInfo generalDiagnosticstestEventTriggerInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.GeneralDiagnostics.ID, ClusterIDMapping.GeneralDiagnostics.Command.TestEventTrigger.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.GeneralDiagnosticsCluster) cluster)
         //  .testEventTrigger((DefaultClusterCallback) callback
         //  
         //  , (byte[])
         //  commandArguments.get("enableKey")
         //  
         //  , (Long)
         //  commandArguments.get("eventTrigger")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           generalDiagnosticstestEventTriggerCommandParams
       );
       generalDiagnosticsClusterInteractionInfoMap.put("testEventTrigger", generalDiagnosticstestEventTriggerInteractionInfo);
     commandMap.put("generalDiagnostics", generalDiagnosticsClusterInteractionInfoMap);
     Map<String, InteractionInfo> softwareDiagnosticsClusterInteractionInfoMap = new LinkedHashMap<>();
     Map<String, CommandParameterInfo> softwareDiagnosticsresetWatermarksCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       InteractionInfo softwareDiagnosticsresetWatermarksInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.SoftwareDiagnostics.ID, ClusterIDMapping.SoftwareDiagnostics.Command.ResetWatermarks.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.SoftwareDiagnosticsCluster) cluster)
         //  .resetWatermarks((DefaultClusterCallback) callback
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           softwareDiagnosticsresetWatermarksCommandParams
       );
       softwareDiagnosticsClusterInteractionInfoMap.put("resetWatermarks", softwareDiagnosticsresetWatermarksInteractionInfo);
     commandMap.put("softwareDiagnostics", softwareDiagnosticsClusterInteractionInfoMap);
     Map<String, InteractionInfo> threadNetworkDiagnosticsClusterInteractionInfoMap = new LinkedHashMap<>();
     Map<String, CommandParameterInfo> threadNetworkDiagnosticsresetCountsCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       InteractionInfo threadNetworkDiagnosticsresetCountsInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.ThreadNetworkDiagnostics.ID, ClusterIDMapping.ThreadNetworkDiagnostics.Command.ResetCounts.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster)
         //  .resetCounts((DefaultClusterCallback) callback
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           threadNetworkDiagnosticsresetCountsCommandParams
       );
       threadNetworkDiagnosticsClusterInteractionInfoMap.put("resetCounts", threadNetworkDiagnosticsresetCountsInteractionInfo);
     commandMap.put("threadNetworkDiagnostics", threadNetworkDiagnosticsClusterInteractionInfoMap);
     Map<String, InteractionInfo> wiFiNetworkDiagnosticsClusterInteractionInfoMap = new LinkedHashMap<>();
     Map<String, CommandParameterInfo> wiFiNetworkDiagnosticsresetCountsCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       InteractionInfo wiFiNetworkDiagnosticsresetCountsInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.WiFiNetworkDiagnostics.ID, ClusterIDMapping.WiFiNetworkDiagnostics.Command.ResetCounts.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.WiFiNetworkDiagnosticsCluster) cluster)
         //  .resetCounts((DefaultClusterCallback) callback
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           wiFiNetworkDiagnosticsresetCountsCommandParams
       );
       wiFiNetworkDiagnosticsClusterInteractionInfoMap.put("resetCounts", wiFiNetworkDiagnosticsresetCountsInteractionInfo);
     commandMap.put("wiFiNetworkDiagnostics", wiFiNetworkDiagnosticsClusterInteractionInfoMap);
     Map<String, InteractionInfo> ethernetNetworkDiagnosticsClusterInteractionInfoMap = new LinkedHashMap<>();
     Map<String, CommandParameterInfo> ethernetNetworkDiagnosticsresetCountsCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       InteractionInfo ethernetNetworkDiagnosticsresetCountsInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.EthernetNetworkDiagnostics.ID, ClusterIDMapping.EthernetNetworkDiagnostics.Command.ResetCounts.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.EthernetNetworkDiagnosticsCluster) cluster)
         //  .resetCounts((DefaultClusterCallback) callback
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           ethernetNetworkDiagnosticsresetCountsCommandParams
       );
       ethernetNetworkDiagnosticsClusterInteractionInfoMap.put("resetCounts", ethernetNetworkDiagnosticsresetCountsInteractionInfo);
     commandMap.put("ethernetNetworkDiagnostics", ethernetNetworkDiagnosticsClusterInteractionInfoMap);
     Map<String, InteractionInfo> timeSynchronizationClusterInteractionInfoMap = new LinkedHashMap<>();
     Map<String, CommandParameterInfo> timeSynchronizationsetUTCTimeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo timeSynchronizationsetUTCTimeUTCTimeCommandParameterInfo = new CommandParameterInfo("UTCTime", Long.class, Long.class);
       timeSynchronizationsetUTCTimeCommandParams.put("UTCTime",timeSynchronizationsetUTCTimeUTCTimeCommandParameterInfo);
      
       CommandParameterInfo timeSynchronizationsetUTCTimegranularityCommandParameterInfo = new CommandParameterInfo("granularity", Integer.class, Integer.class);
       timeSynchronizationsetUTCTimeCommandParams.put("granularity",timeSynchronizationsetUTCTimegranularityCommandParameterInfo);
      
       CommandParameterInfo timeSynchronizationsetUTCTimetimeSourceCommandParameterInfo = new CommandParameterInfo("timeSource", Optional.class, Integer.class);
       timeSynchronizationsetUTCTimeCommandParams.put("timeSource",timeSynchronizationsetUTCTimetimeSourceCommandParameterInfo);
     
       InteractionInfo timeSynchronizationsetUTCTimeInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.TimeSynchronization.ID, ClusterIDMapping.TimeSynchronization.Command.SetUTCTime.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.TimeSynchronizationCluster) cluster)
         //  .setUTCTime((DefaultClusterCallback) callback
         //  
         //  , (Long)
         //  commandArguments.get("UTCTime")
         //  
         //  , (Integer)
         //  commandArguments.get("granularity")
         //  
         //  , (Optional<Integer>)
         //  commandArguments.get("timeSource")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           timeSynchronizationsetUTCTimeCommandParams
       );
       timeSynchronizationClusterInteractionInfoMap.put("setUTCTime", timeSynchronizationsetUTCTimeInteractionInfo);
     Map<String, CommandParameterInfo> timeSynchronizationsetTrustedTimeSourceCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       InteractionInfo timeSynchronizationsetTrustedTimeSourceInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.TimeSynchronization.ID, ClusterIDMapping.TimeSynchronization.Command.SetTrustedTimeSource.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.TimeSynchronizationCluster) cluster)
         //  .setTrustedTimeSource((DefaultClusterCallback) callback
         //  
         //  , (ChipStructs.TimeSynchronizationClusterFabricScopedTrustedTimeSourceStruct)
         //  commandArguments.get("trustedTimeSource")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           timeSynchronizationsetTrustedTimeSourceCommandParams
       );
       timeSynchronizationClusterInteractionInfoMap.put("setTrustedTimeSource", timeSynchronizationsetTrustedTimeSourceInteractionInfo);
     Map<String, CommandParameterInfo> timeSynchronizationsetTimeZoneCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       InteractionInfo timeSynchronizationsetTimeZoneInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.TimeSynchronization.ID, ClusterIDMapping.TimeSynchronization.Command.SetTimeZone.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.TimeSynchronizationCluster) cluster)
         //  .setTimeZone((ChipClusters.TimeSynchronizationCluster.SetTimeZoneResponseCallback) callback
         //  
         //  , (ArrayList<ChipStructs.TimeSynchronizationClusterTimeZoneStruct>)
         //  commandArguments.get("timeZone")
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedTimeSynchronizationClusterSetTimeZoneResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           timeSynchronizationsetTimeZoneCommandParams
       );
       timeSynchronizationClusterInteractionInfoMap.put("setTimeZone", timeSynchronizationsetTimeZoneInteractionInfo);
     Map<String, CommandParameterInfo> timeSynchronizationsetDSTOffsetCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       InteractionInfo timeSynchronizationsetDSTOffsetInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.TimeSynchronization.ID, ClusterIDMapping.TimeSynchronization.Command.SetDSTOffset.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.TimeSynchronizationCluster) cluster)
         //  .setDSTOffset((DefaultClusterCallback) callback
         //  
         //  , (ArrayList<ChipStructs.TimeSynchronizationClusterDSTOffsetStruct>)
         //  commandArguments.get("DSTOffset")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           timeSynchronizationsetDSTOffsetCommandParams
       );
       timeSynchronizationClusterInteractionInfoMap.put("setDSTOffset", timeSynchronizationsetDSTOffsetInteractionInfo);
     Map<String, CommandParameterInfo> timeSynchronizationsetDefaultNTPCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo timeSynchronizationsetDefaultNTPdefaultNTPCommandParameterInfo = new CommandParameterInfo("defaultNTP", String.class, String.class);
       timeSynchronizationsetDefaultNTPCommandParams.put("defaultNTP",timeSynchronizationsetDefaultNTPdefaultNTPCommandParameterInfo);
     
       InteractionInfo timeSynchronizationsetDefaultNTPInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.TimeSynchronization.ID, ClusterIDMapping.TimeSynchronization.Command.SetDefaultNTP.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.TimeSynchronizationCluster) cluster)
         //  .setDefaultNTP((DefaultClusterCallback) callback
         //  
         //  , (String)
         //  commandArguments.get("defaultNTP")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           timeSynchronizationsetDefaultNTPCommandParams
       );
       timeSynchronizationClusterInteractionInfoMap.put("setDefaultNTP", timeSynchronizationsetDefaultNTPInteractionInfo);
     commandMap.put("timeSynchronization", timeSynchronizationClusterInteractionInfoMap);
     Map<String, InteractionInfo> bridgedDeviceBasicInformationClusterInteractionInfoMap = new LinkedHashMap<>();
     commandMap.put("bridgedDeviceBasicInformation", bridgedDeviceBasicInformationClusterInteractionInfoMap);
     Map<String, InteractionInfo> switchClusterInteractionInfoMap = new LinkedHashMap<>();
     commandMap.put("switch", switchClusterInteractionInfoMap);
     Map<String, InteractionInfo> administratorCommissioningClusterInteractionInfoMap = new LinkedHashMap<>();
     Map<String, CommandParameterInfo> administratorCommissioningopenCommissioningWindowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo administratorCommissioningopenCommissioningWindowcommissioningTimeoutCommandParameterInfo = new CommandParameterInfo("commissioningTimeout", Integer.class, Integer.class);
       administratorCommissioningopenCommissioningWindowCommandParams.put("commissioningTimeout",administratorCommissioningopenCommissioningWindowcommissioningTimeoutCommandParameterInfo);
      
       CommandParameterInfo administratorCommissioningopenCommissioningWindowPAKEPasscodeVerifierCommandParameterInfo = new CommandParameterInfo("PAKEPasscodeVerifier", byte[].class, byte[].class);
       administratorCommissioningopenCommissioningWindowCommandParams.put("PAKEPasscodeVerifier",administratorCommissioningopenCommissioningWindowPAKEPasscodeVerifierCommandParameterInfo);
      
       CommandParameterInfo administratorCommissioningopenCommissioningWindowdiscriminatorCommandParameterInfo = new CommandParameterInfo("discriminator", Integer.class, Integer.class);
       administratorCommissioningopenCommissioningWindowCommandParams.put("discriminator",administratorCommissioningopenCommissioningWindowdiscriminatorCommandParameterInfo);
      
       CommandParameterInfo administratorCommissioningopenCommissioningWindowiterationsCommandParameterInfo = new CommandParameterInfo("iterations", Long.class, Long.class);
       administratorCommissioningopenCommissioningWindowCommandParams.put("iterations",administratorCommissioningopenCommissioningWindowiterationsCommandParameterInfo);
      
       CommandParameterInfo administratorCommissioningopenCommissioningWindowsaltCommandParameterInfo = new CommandParameterInfo("salt", byte[].class, byte[].class);
       administratorCommissioningopenCommissioningWindowCommandParams.put("salt",administratorCommissioningopenCommissioningWindowsaltCommandParameterInfo);
     
       InteractionInfo administratorCommissioningopenCommissioningWindowInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.AdministratorCommissioning.ID, ClusterIDMapping.AdministratorCommissioning.Command.OpenCommissioningWindow.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            10000
);
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.AdministratorCommissioningCluster) cluster)
         //  .openCommissioningWindow((DefaultClusterCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("commissioningTimeout")
         //  
         //  , (byte[])
         //  commandArguments.get("PAKEPasscodeVerifier")
         //  
         //  , (Integer)
         //  commandArguments.get("discriminator")
         //  
         //  , (Long)
         //  commandArguments.get("iterations")
         //  
         //  , (byte[])
         //  commandArguments.get("salt")
         //  
         //  
         //  , 10000
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           administratorCommissioningopenCommissioningWindowCommandParams
       );
       administratorCommissioningClusterInteractionInfoMap.put("openCommissioningWindow", administratorCommissioningopenCommissioningWindowInteractionInfo);
     Map<String, CommandParameterInfo> administratorCommissioningopenBasicCommissioningWindowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo administratorCommissioningopenBasicCommissioningWindowcommissioningTimeoutCommandParameterInfo = new CommandParameterInfo("commissioningTimeout", Integer.class, Integer.class);
       administratorCommissioningopenBasicCommissioningWindowCommandParams.put("commissioningTimeout",administratorCommissioningopenBasicCommissioningWindowcommissioningTimeoutCommandParameterInfo);
     
       InteractionInfo administratorCommissioningopenBasicCommissioningWindowInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.AdministratorCommissioning.ID, ClusterIDMapping.AdministratorCommissioning.Command.OpenBasicCommissioningWindow.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            10000
);
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.AdministratorCommissioningCluster) cluster)
         //  .openBasicCommissioningWindow((DefaultClusterCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("commissioningTimeout")
         //  
         //  
         //  , 10000
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           administratorCommissioningopenBasicCommissioningWindowCommandParams
       );
       administratorCommissioningClusterInteractionInfoMap.put("openBasicCommissioningWindow", administratorCommissioningopenBasicCommissioningWindowInteractionInfo);
     Map<String, CommandParameterInfo> administratorCommissioningrevokeCommissioningCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       InteractionInfo administratorCommissioningrevokeCommissioningInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.AdministratorCommissioning.ID, ClusterIDMapping.AdministratorCommissioning.Command.RevokeCommissioning.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            10000
);
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.AdministratorCommissioningCluster) cluster)
         //  .revokeCommissioning((DefaultClusterCallback) callback
         //  
         //  
         //  , 10000
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           administratorCommissioningrevokeCommissioningCommandParams
       );
       administratorCommissioningClusterInteractionInfoMap.put("revokeCommissioning", administratorCommissioningrevokeCommissioningInteractionInfo);
     commandMap.put("administratorCommissioning", administratorCommissioningClusterInteractionInfoMap);
     Map<String, InteractionInfo> operationalCredentialsClusterInteractionInfoMap = new LinkedHashMap<>();
     Map<String, CommandParameterInfo> operationalCredentialsattestationRequestCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo operationalCredentialsattestationRequestattestationNonceCommandParameterInfo = new CommandParameterInfo("attestationNonce", byte[].class, byte[].class);
       operationalCredentialsattestationRequestCommandParams.put("attestationNonce",operationalCredentialsattestationRequestattestationNonceCommandParameterInfo);
     
       InteractionInfo operationalCredentialsattestationRequestInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.OperationalCredentials.ID, ClusterIDMapping.OperationalCredentials.Command.AttestationRequest.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.OperationalCredentialsCluster) cluster)
         //  .attestationRequest((ChipClusters.OperationalCredentialsCluster.AttestationResponseCallback) callback
         //  
         //  , (byte[])
         //  commandArguments.get("attestationNonce")
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedOperationalCredentialsClusterAttestationResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           operationalCredentialsattestationRequestCommandParams
       );
       operationalCredentialsClusterInteractionInfoMap.put("attestationRequest", operationalCredentialsattestationRequestInteractionInfo);
     Map<String, CommandParameterInfo> operationalCredentialscertificateChainRequestCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo operationalCredentialscertificateChainRequestcertificateTypeCommandParameterInfo = new CommandParameterInfo("certificateType", Integer.class, Integer.class);
       operationalCredentialscertificateChainRequestCommandParams.put("certificateType",operationalCredentialscertificateChainRequestcertificateTypeCommandParameterInfo);
     
       InteractionInfo operationalCredentialscertificateChainRequestInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.OperationalCredentials.ID, ClusterIDMapping.OperationalCredentials.Command.CertificateChainRequest.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.OperationalCredentialsCluster) cluster)
         //  .certificateChainRequest((ChipClusters.OperationalCredentialsCluster.CertificateChainResponseCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("certificateType")
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedOperationalCredentialsClusterCertificateChainResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           operationalCredentialscertificateChainRequestCommandParams
       );
       operationalCredentialsClusterInteractionInfoMap.put("certificateChainRequest", operationalCredentialscertificateChainRequestInteractionInfo);
     Map<String, CommandParameterInfo> operationalCredentialsCSRRequestCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo operationalCredentialsCSRRequestCSRNonceCommandParameterInfo = new CommandParameterInfo("CSRNonce", byte[].class, byte[].class);
       operationalCredentialsCSRRequestCommandParams.put("CSRNonce",operationalCredentialsCSRRequestCSRNonceCommandParameterInfo);
      
       CommandParameterInfo operationalCredentialsCSRRequestisForUpdateNOCCommandParameterInfo = new CommandParameterInfo("isForUpdateNOC", Optional.class, Boolean.class);
       operationalCredentialsCSRRequestCommandParams.put("isForUpdateNOC",operationalCredentialsCSRRequestisForUpdateNOCCommandParameterInfo);
     
       InteractionInfo operationalCredentialsCSRRequestInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.OperationalCredentials.ID, ClusterIDMapping.OperationalCredentials.Command.CSRRequest.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.OperationalCredentialsCluster) cluster)
         //  .CSRRequest((ChipClusters.OperationalCredentialsCluster.CSRResponseCallback) callback
         //  
         //  , (byte[])
         //  commandArguments.get("CSRNonce")
         //  
         //  , (Optional<Boolean>)
         //  commandArguments.get("isForUpdateNOC")
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedOperationalCredentialsClusterCSRResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           operationalCredentialsCSRRequestCommandParams
       );
       operationalCredentialsClusterInteractionInfoMap.put("CSRRequest", operationalCredentialsCSRRequestInteractionInfo);
     Map<String, CommandParameterInfo> operationalCredentialsaddNOCCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo operationalCredentialsaddNOCNOCValueCommandParameterInfo = new CommandParameterInfo("NOCValue", byte[].class, byte[].class);
       operationalCredentialsaddNOCCommandParams.put("NOCValue",operationalCredentialsaddNOCNOCValueCommandParameterInfo);
      
       CommandParameterInfo operationalCredentialsaddNOCICACValueCommandParameterInfo = new CommandParameterInfo("ICACValue", Optional.class, byte[].class);
       operationalCredentialsaddNOCCommandParams.put("ICACValue",operationalCredentialsaddNOCICACValueCommandParameterInfo);
      
       CommandParameterInfo operationalCredentialsaddNOCIPKValueCommandParameterInfo = new CommandParameterInfo("IPKValue", byte[].class, byte[].class);
       operationalCredentialsaddNOCCommandParams.put("IPKValue",operationalCredentialsaddNOCIPKValueCommandParameterInfo);
      
       CommandParameterInfo operationalCredentialsaddNOCcaseAdminSubjectCommandParameterInfo = new CommandParameterInfo("caseAdminSubject", Long.class, Long.class);
       operationalCredentialsaddNOCCommandParams.put("caseAdminSubject",operationalCredentialsaddNOCcaseAdminSubjectCommandParameterInfo);
      
       CommandParameterInfo operationalCredentialsaddNOCadminVendorIdCommandParameterInfo = new CommandParameterInfo("adminVendorId", Integer.class, Integer.class);
       operationalCredentialsaddNOCCommandParams.put("adminVendorId",operationalCredentialsaddNOCadminVendorIdCommandParameterInfo);
     
       InteractionInfo operationalCredentialsaddNOCInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.OperationalCredentials.ID, ClusterIDMapping.OperationalCredentials.Command.AddNOC.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.OperationalCredentialsCluster) cluster)
         //  .addNOC((ChipClusters.OperationalCredentialsCluster.NOCResponseCallback) callback
         //  
         //  , (byte[])
         //  commandArguments.get("NOCValue")
         //  
         //  , (Optional<byte[]>)
         //  commandArguments.get("ICACValue")
         //  
         //  , (byte[])
         //  commandArguments.get("IPKValue")
         //  
         //  , (Long)
         //  commandArguments.get("caseAdminSubject")
         //  
         //  , (Integer)
         //  commandArguments.get("adminVendorId")
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedOperationalCredentialsClusterNOCResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           operationalCredentialsaddNOCCommandParams
       );
       operationalCredentialsClusterInteractionInfoMap.put("addNOC", operationalCredentialsaddNOCInteractionInfo);
     Map<String, CommandParameterInfo> operationalCredentialsupdateNOCCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo operationalCredentialsupdateNOCNOCValueCommandParameterInfo = new CommandParameterInfo("NOCValue", byte[].class, byte[].class);
       operationalCredentialsupdateNOCCommandParams.put("NOCValue",operationalCredentialsupdateNOCNOCValueCommandParameterInfo);
      
       CommandParameterInfo operationalCredentialsupdateNOCICACValueCommandParameterInfo = new CommandParameterInfo("ICACValue", Optional.class, byte[].class);
       operationalCredentialsupdateNOCCommandParams.put("ICACValue",operationalCredentialsupdateNOCICACValueCommandParameterInfo);
     
       InteractionInfo operationalCredentialsupdateNOCInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.OperationalCredentials.ID, ClusterIDMapping.OperationalCredentials.Command.UpdateNOC.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.OperationalCredentialsCluster) cluster)
         //  .updateNOC((ChipClusters.OperationalCredentialsCluster.NOCResponseCallback) callback
         //  
         //  , (byte[])
         //  commandArguments.get("NOCValue")
         //  
         //  , (Optional<byte[]>)
         //  commandArguments.get("ICACValue")
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedOperationalCredentialsClusterNOCResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           operationalCredentialsupdateNOCCommandParams
       );
       operationalCredentialsClusterInteractionInfoMap.put("updateNOC", operationalCredentialsupdateNOCInteractionInfo);
     Map<String, CommandParameterInfo> operationalCredentialsupdateFabricLabelCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo operationalCredentialsupdateFabricLabellabelCommandParameterInfo = new CommandParameterInfo("label", String.class, String.class);
       operationalCredentialsupdateFabricLabelCommandParams.put("label",operationalCredentialsupdateFabricLabellabelCommandParameterInfo);
     
       InteractionInfo operationalCredentialsupdateFabricLabelInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.OperationalCredentials.ID, ClusterIDMapping.OperationalCredentials.Command.UpdateFabricLabel.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.OperationalCredentialsCluster) cluster)
         //  .updateFabricLabel((ChipClusters.OperationalCredentialsCluster.NOCResponseCallback) callback
         //  
         //  , (String)
         //  commandArguments.get("label")
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedOperationalCredentialsClusterNOCResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           operationalCredentialsupdateFabricLabelCommandParams
       );
       operationalCredentialsClusterInteractionInfoMap.put("updateFabricLabel", operationalCredentialsupdateFabricLabelInteractionInfo);
     Map<String, CommandParameterInfo> operationalCredentialsremoveFabricCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo operationalCredentialsremoveFabricfabricIndexCommandParameterInfo = new CommandParameterInfo("fabricIndex", Integer.class, Integer.class);
       operationalCredentialsremoveFabricCommandParams.put("fabricIndex",operationalCredentialsremoveFabricfabricIndexCommandParameterInfo);
     
       InteractionInfo operationalCredentialsremoveFabricInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.OperationalCredentials.ID, ClusterIDMapping.OperationalCredentials.Command.RemoveFabric.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.OperationalCredentialsCluster) cluster)
         //  .removeFabric((ChipClusters.OperationalCredentialsCluster.NOCResponseCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("fabricIndex")
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedOperationalCredentialsClusterNOCResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           operationalCredentialsremoveFabricCommandParams
       );
       operationalCredentialsClusterInteractionInfoMap.put("removeFabric", operationalCredentialsremoveFabricInteractionInfo);
     Map<String, CommandParameterInfo> operationalCredentialsaddTrustedRootCertificateCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo operationalCredentialsaddTrustedRootCertificaterootCACertificateCommandParameterInfo = new CommandParameterInfo("rootCACertificate", byte[].class, byte[].class);
       operationalCredentialsaddTrustedRootCertificateCommandParams.put("rootCACertificate",operationalCredentialsaddTrustedRootCertificaterootCACertificateCommandParameterInfo);
     
       InteractionInfo operationalCredentialsaddTrustedRootCertificateInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.OperationalCredentials.ID, ClusterIDMapping.OperationalCredentials.Command.AddTrustedRootCertificate.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.OperationalCredentialsCluster) cluster)
         //  .addTrustedRootCertificate((DefaultClusterCallback) callback
         //  
         //  , (byte[])
         //  commandArguments.get("rootCACertificate")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           operationalCredentialsaddTrustedRootCertificateCommandParams
       );
       operationalCredentialsClusterInteractionInfoMap.put("addTrustedRootCertificate", operationalCredentialsaddTrustedRootCertificateInteractionInfo);
     commandMap.put("operationalCredentials", operationalCredentialsClusterInteractionInfoMap);
     Map<String, InteractionInfo> groupKeyManagementClusterInteractionInfoMap = new LinkedHashMap<>();
     Map<String, CommandParameterInfo> groupKeyManagementkeySetWriteCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       InteractionInfo groupKeyManagementkeySetWriteInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.GroupKeyManagement.ID, ClusterIDMapping.GroupKeyManagement.Command.KeySetWrite.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.GroupKeyManagementCluster) cluster)
         //  .keySetWrite((DefaultClusterCallback) callback
         //  
         //  , (ChipStructs.GroupKeyManagementClusterGroupKeySetStruct)
         //  commandArguments.get("groupKeySet")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           groupKeyManagementkeySetWriteCommandParams
       );
       groupKeyManagementClusterInteractionInfoMap.put("keySetWrite", groupKeyManagementkeySetWriteInteractionInfo);
     Map<String, CommandParameterInfo> groupKeyManagementkeySetReadCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo groupKeyManagementkeySetReadgroupKeySetIDCommandParameterInfo = new CommandParameterInfo("groupKeySetID", Integer.class, Integer.class);
       groupKeyManagementkeySetReadCommandParams.put("groupKeySetID",groupKeyManagementkeySetReadgroupKeySetIDCommandParameterInfo);
     
       InteractionInfo groupKeyManagementkeySetReadInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.GroupKeyManagement.ID, ClusterIDMapping.GroupKeyManagement.Command.KeySetRead.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.GroupKeyManagementCluster) cluster)
         //  .keySetRead((ChipClusters.GroupKeyManagementCluster.KeySetReadResponseCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("groupKeySetID")
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedGroupKeyManagementClusterKeySetReadResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           groupKeyManagementkeySetReadCommandParams
       );
       groupKeyManagementClusterInteractionInfoMap.put("keySetRead", groupKeyManagementkeySetReadInteractionInfo);
     Map<String, CommandParameterInfo> groupKeyManagementkeySetRemoveCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo groupKeyManagementkeySetRemovegroupKeySetIDCommandParameterInfo = new CommandParameterInfo("groupKeySetID", Integer.class, Integer.class);
       groupKeyManagementkeySetRemoveCommandParams.put("groupKeySetID",groupKeyManagementkeySetRemovegroupKeySetIDCommandParameterInfo);
     
       InteractionInfo groupKeyManagementkeySetRemoveInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.GroupKeyManagement.ID, ClusterIDMapping.GroupKeyManagement.Command.KeySetRemove.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.GroupKeyManagementCluster) cluster)
         //  .keySetRemove((DefaultClusterCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("groupKeySetID")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           groupKeyManagementkeySetRemoveCommandParams
       );
       groupKeyManagementClusterInteractionInfoMap.put("keySetRemove", groupKeyManagementkeySetRemoveInteractionInfo);
     Map<String, CommandParameterInfo> groupKeyManagementkeySetReadAllIndicesCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       InteractionInfo groupKeyManagementkeySetReadAllIndicesInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.GroupKeyManagement.ID, ClusterIDMapping.GroupKeyManagement.Command.KeySetReadAllIndices.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.GroupKeyManagementCluster) cluster)
         //  .keySetReadAllIndices((ChipClusters.GroupKeyManagementCluster.KeySetReadAllIndicesResponseCallback) callback
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedGroupKeyManagementClusterKeySetReadAllIndicesResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           groupKeyManagementkeySetReadAllIndicesCommandParams
       );
       groupKeyManagementClusterInteractionInfoMap.put("keySetReadAllIndices", groupKeyManagementkeySetReadAllIndicesInteractionInfo);
     commandMap.put("groupKeyManagement", groupKeyManagementClusterInteractionInfoMap);
     Map<String, InteractionInfo> fixedLabelClusterInteractionInfoMap = new LinkedHashMap<>();
     commandMap.put("fixedLabel", fixedLabelClusterInteractionInfoMap);
     Map<String, InteractionInfo> userLabelClusterInteractionInfoMap = new LinkedHashMap<>();
     commandMap.put("userLabel", userLabelClusterInteractionInfoMap);
     Map<String, InteractionInfo> proxyConfigurationClusterInteractionInfoMap = new LinkedHashMap<>();
     commandMap.put("proxyConfiguration", proxyConfigurationClusterInteractionInfoMap);
     Map<String, InteractionInfo> proxyDiscoveryClusterInteractionInfoMap = new LinkedHashMap<>();
     commandMap.put("proxyDiscovery", proxyDiscoveryClusterInteractionInfoMap);
     Map<String, InteractionInfo> proxyValidClusterInteractionInfoMap = new LinkedHashMap<>();
     commandMap.put("proxyValid", proxyValidClusterInteractionInfoMap);
     Map<String, InteractionInfo> booleanStateClusterInteractionInfoMap = new LinkedHashMap<>();
     commandMap.put("booleanState", booleanStateClusterInteractionInfoMap);
     Map<String, InteractionInfo> icdManagementClusterInteractionInfoMap = new LinkedHashMap<>();
     Map<String, CommandParameterInfo> icdManagementregisterClientCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo icdManagementregisterClientcheckInNodeIDCommandParameterInfo = new CommandParameterInfo("checkInNodeID", Long.class, Long.class);
       icdManagementregisterClientCommandParams.put("checkInNodeID",icdManagementregisterClientcheckInNodeIDCommandParameterInfo);
      
       CommandParameterInfo icdManagementregisterClientmonitoredSubjectCommandParameterInfo = new CommandParameterInfo("monitoredSubject", Long.class, Long.class);
       icdManagementregisterClientCommandParams.put("monitoredSubject",icdManagementregisterClientmonitoredSubjectCommandParameterInfo);
      
       CommandParameterInfo icdManagementregisterClientkeyCommandParameterInfo = new CommandParameterInfo("key", byte[].class, byte[].class);
       icdManagementregisterClientCommandParams.put("key",icdManagementregisterClientkeyCommandParameterInfo);
      
       CommandParameterInfo icdManagementregisterClientverificationKeyCommandParameterInfo = new CommandParameterInfo("verificationKey", Optional.class, byte[].class);
       icdManagementregisterClientCommandParams.put("verificationKey",icdManagementregisterClientverificationKeyCommandParameterInfo);
     
       InteractionInfo icdManagementregisterClientInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.IcdManagement.ID, ClusterIDMapping.IcdManagement.Command.RegisterClient.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.IcdManagementCluster) cluster)
         //  .registerClient((ChipClusters.IcdManagementCluster.RegisterClientResponseCallback) callback
         //  
         //  , (Long)
         //  commandArguments.get("checkInNodeID")
         //  
         //  , (Long)
         //  commandArguments.get("monitoredSubject")
         //  
         //  , (byte[])
         //  commandArguments.get("key")
         //  
         //  , (Optional<byte[]>)
         //  commandArguments.get("verificationKey")
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedIcdManagementClusterRegisterClientResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           icdManagementregisterClientCommandParams
       );
       icdManagementClusterInteractionInfoMap.put("registerClient", icdManagementregisterClientInteractionInfo);
     Map<String, CommandParameterInfo> icdManagementunregisterClientCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo icdManagementunregisterClientcheckInNodeIDCommandParameterInfo = new CommandParameterInfo("checkInNodeID", Long.class, Long.class);
       icdManagementunregisterClientCommandParams.put("checkInNodeID",icdManagementunregisterClientcheckInNodeIDCommandParameterInfo);
      
       CommandParameterInfo icdManagementunregisterClientkeyCommandParameterInfo = new CommandParameterInfo("key", Optional.class, byte[].class);
       icdManagementunregisterClientCommandParams.put("key",icdManagementunregisterClientkeyCommandParameterInfo);
     
       InteractionInfo icdManagementunregisterClientInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.IcdManagement.ID, ClusterIDMapping.IcdManagement.Command.UnregisterClient.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.IcdManagementCluster) cluster)
         //  .unregisterClient((DefaultClusterCallback) callback
         //  
         //  , (Long)
         //  commandArguments.get("checkInNodeID")
         //  
         //  , (Optional<byte[]>)
         //  commandArguments.get("key")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           icdManagementunregisterClientCommandParams
       );
       icdManagementClusterInteractionInfoMap.put("unregisterClient", icdManagementunregisterClientInteractionInfo);
     Map<String, CommandParameterInfo> icdManagementstayActiveRequestCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       InteractionInfo icdManagementstayActiveRequestInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.IcdManagement.ID, ClusterIDMapping.IcdManagement.Command.StayActiveRequest.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.IcdManagementCluster) cluster)
         //  .stayActiveRequest((DefaultClusterCallback) callback
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           icdManagementstayActiveRequestCommandParams
       );
       icdManagementClusterInteractionInfoMap.put("stayActiveRequest", icdManagementstayActiveRequestInteractionInfo);
     commandMap.put("icdManagement", icdManagementClusterInteractionInfoMap);
     Map<String, InteractionInfo> modeSelectClusterInteractionInfoMap = new LinkedHashMap<>();
     Map<String, CommandParameterInfo> modeSelectchangeToModeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo modeSelectchangeToModenewModeCommandParameterInfo = new CommandParameterInfo("newMode", Integer.class, Integer.class);
       modeSelectchangeToModeCommandParams.put("newMode",modeSelectchangeToModenewModeCommandParameterInfo);
     
       InteractionInfo modeSelectchangeToModeInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.ModeSelect.ID, ClusterIDMapping.ModeSelect.Command.ChangeToMode.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.ModeSelectCluster) cluster)
         //  .changeToMode((DefaultClusterCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("newMode")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           modeSelectchangeToModeCommandParams
       );
       modeSelectClusterInteractionInfoMap.put("changeToMode", modeSelectchangeToModeInteractionInfo);
     commandMap.put("modeSelect", modeSelectClusterInteractionInfoMap);
     Map<String, InteractionInfo> laundryWasherModeClusterInteractionInfoMap = new LinkedHashMap<>();
     Map<String, CommandParameterInfo> laundryWasherModechangeToModeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo laundryWasherModechangeToModenewModeCommandParameterInfo = new CommandParameterInfo("newMode", Integer.class, Integer.class);
       laundryWasherModechangeToModeCommandParams.put("newMode",laundryWasherModechangeToModenewModeCommandParameterInfo);
     
       InteractionInfo laundryWasherModechangeToModeInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.LaundryWasherMode.ID, ClusterIDMapping.LaundryWasherMode.Command.ChangeToMode.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.LaundryWasherModeCluster) cluster)
         //  .changeToMode((ChipClusters.LaundryWasherModeCluster.ChangeToModeResponseCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("newMode")
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedLaundryWasherModeClusterChangeToModeResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           laundryWasherModechangeToModeCommandParams
       );
       laundryWasherModeClusterInteractionInfoMap.put("changeToMode", laundryWasherModechangeToModeInteractionInfo);
     commandMap.put("laundryWasherMode", laundryWasherModeClusterInteractionInfoMap);
     Map<String, InteractionInfo> refrigeratorAndTemperatureControlledCabinetModeClusterInteractionInfoMap = new LinkedHashMap<>();
     Map<String, CommandParameterInfo> refrigeratorAndTemperatureControlledCabinetModechangeToModeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo refrigeratorAndTemperatureControlledCabinetModechangeToModenewModeCommandParameterInfo = new CommandParameterInfo("newMode", Integer.class, Integer.class);
       refrigeratorAndTemperatureControlledCabinetModechangeToModeCommandParams.put("newMode",refrigeratorAndTemperatureControlledCabinetModechangeToModenewModeCommandParameterInfo);
     
       InteractionInfo refrigeratorAndTemperatureControlledCabinetModechangeToModeInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.RefrigeratorAndTemperatureControlledCabinetMode.ID, ClusterIDMapping.RefrigeratorAndTemperatureControlledCabinetMode.Command.ChangeToMode.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.RefrigeratorAndTemperatureControlledCabinetModeCluster) cluster)
         //  .changeToMode((ChipClusters.RefrigeratorAndTemperatureControlledCabinetModeCluster.ChangeToModeResponseCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("newMode")
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedRefrigeratorAndTemperatureControlledCabinetModeClusterChangeToModeResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           refrigeratorAndTemperatureControlledCabinetModechangeToModeCommandParams
       );
       refrigeratorAndTemperatureControlledCabinetModeClusterInteractionInfoMap.put("changeToMode", refrigeratorAndTemperatureControlledCabinetModechangeToModeInteractionInfo);
     commandMap.put("refrigeratorAndTemperatureControlledCabinetMode", refrigeratorAndTemperatureControlledCabinetModeClusterInteractionInfoMap);
     Map<String, InteractionInfo> laundryWasherControlsClusterInteractionInfoMap = new LinkedHashMap<>();
     commandMap.put("laundryWasherControls", laundryWasherControlsClusterInteractionInfoMap);
     Map<String, InteractionInfo> rvcRunModeClusterInteractionInfoMap = new LinkedHashMap<>();
     Map<String, CommandParameterInfo> rvcRunModechangeToModeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo rvcRunModechangeToModenewModeCommandParameterInfo = new CommandParameterInfo("newMode", Integer.class, Integer.class);
       rvcRunModechangeToModeCommandParams.put("newMode",rvcRunModechangeToModenewModeCommandParameterInfo);
     
       InteractionInfo rvcRunModechangeToModeInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.RvcRunMode.ID, ClusterIDMapping.RvcRunMode.Command.ChangeToMode.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.RvcRunModeCluster) cluster)
         //  .changeToMode((ChipClusters.RvcRunModeCluster.ChangeToModeResponseCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("newMode")
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedRvcRunModeClusterChangeToModeResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           rvcRunModechangeToModeCommandParams
       );
       rvcRunModeClusterInteractionInfoMap.put("changeToMode", rvcRunModechangeToModeInteractionInfo);
     commandMap.put("rvcRunMode", rvcRunModeClusterInteractionInfoMap);
     Map<String, InteractionInfo> rvcCleanModeClusterInteractionInfoMap = new LinkedHashMap<>();
     Map<String, CommandParameterInfo> rvcCleanModechangeToModeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo rvcCleanModechangeToModenewModeCommandParameterInfo = new CommandParameterInfo("newMode", Integer.class, Integer.class);
       rvcCleanModechangeToModeCommandParams.put("newMode",rvcCleanModechangeToModenewModeCommandParameterInfo);
     
       InteractionInfo rvcCleanModechangeToModeInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.RvcCleanMode.ID, ClusterIDMapping.RvcCleanMode.Command.ChangeToMode.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.RvcCleanModeCluster) cluster)
         //  .changeToMode((ChipClusters.RvcCleanModeCluster.ChangeToModeResponseCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("newMode")
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedRvcCleanModeClusterChangeToModeResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           rvcCleanModechangeToModeCommandParams
       );
       rvcCleanModeClusterInteractionInfoMap.put("changeToMode", rvcCleanModechangeToModeInteractionInfo);
     commandMap.put("rvcCleanMode", rvcCleanModeClusterInteractionInfoMap);
     Map<String, InteractionInfo> temperatureControlClusterInteractionInfoMap = new LinkedHashMap<>();
     Map<String, CommandParameterInfo> temperatureControlsetTemperatureCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo temperatureControlsetTemperaturetargetTemperatureCommandParameterInfo = new CommandParameterInfo("targetTemperature", Optional.class, Integer.class);
       temperatureControlsetTemperatureCommandParams.put("targetTemperature",temperatureControlsetTemperaturetargetTemperatureCommandParameterInfo);
      
       CommandParameterInfo temperatureControlsetTemperaturetargetTemperatureLevelCommandParameterInfo = new CommandParameterInfo("targetTemperatureLevel", Optional.class, Integer.class);
       temperatureControlsetTemperatureCommandParams.put("targetTemperatureLevel",temperatureControlsetTemperaturetargetTemperatureLevelCommandParameterInfo);
     
       InteractionInfo temperatureControlsetTemperatureInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.TemperatureControl.ID, ClusterIDMapping.TemperatureControl.Command.SetTemperature.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.TemperatureControlCluster) cluster)
         //  .setTemperature((DefaultClusterCallback) callback
         //  
         //  , (Optional<Integer>)
         //  commandArguments.get("targetTemperature")
         //  
         //  , (Optional<Integer>)
         //  commandArguments.get("targetTemperatureLevel")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           temperatureControlsetTemperatureCommandParams
       );
       temperatureControlClusterInteractionInfoMap.put("setTemperature", temperatureControlsetTemperatureInteractionInfo);
     commandMap.put("temperatureControl", temperatureControlClusterInteractionInfoMap);
     Map<String, InteractionInfo> refrigeratorAlarmClusterInteractionInfoMap = new LinkedHashMap<>();
     commandMap.put("refrigeratorAlarm", refrigeratorAlarmClusterInteractionInfoMap);
     Map<String, InteractionInfo> dishwasherModeClusterInteractionInfoMap = new LinkedHashMap<>();
     Map<String, CommandParameterInfo> dishwasherModechangeToModeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo dishwasherModechangeToModenewModeCommandParameterInfo = new CommandParameterInfo("newMode", Integer.class, Integer.class);
       dishwasherModechangeToModeCommandParams.put("newMode",dishwasherModechangeToModenewModeCommandParameterInfo);
     
       InteractionInfo dishwasherModechangeToModeInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.DishwasherMode.ID, ClusterIDMapping.DishwasherMode.Command.ChangeToMode.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.DishwasherModeCluster) cluster)
         //  .changeToMode((ChipClusters.DishwasherModeCluster.ChangeToModeResponseCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("newMode")
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedDishwasherModeClusterChangeToModeResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           dishwasherModechangeToModeCommandParams
       );
       dishwasherModeClusterInteractionInfoMap.put("changeToMode", dishwasherModechangeToModeInteractionInfo);
     commandMap.put("dishwasherMode", dishwasherModeClusterInteractionInfoMap);
     Map<String, InteractionInfo> airQualityClusterInteractionInfoMap = new LinkedHashMap<>();
     commandMap.put("airQuality", airQualityClusterInteractionInfoMap);
     Map<String, InteractionInfo> smokeCoAlarmClusterInteractionInfoMap = new LinkedHashMap<>();
     Map<String, CommandParameterInfo> smokeCoAlarmselfTestRequestCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       InteractionInfo smokeCoAlarmselfTestRequestInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.SmokeCoAlarm.ID, ClusterIDMapping.SmokeCoAlarm.Command.SelfTestRequest.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.SmokeCoAlarmCluster) cluster)
         //  .selfTestRequest((DefaultClusterCallback) callback
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           smokeCoAlarmselfTestRequestCommandParams
       );
       smokeCoAlarmClusterInteractionInfoMap.put("selfTestRequest", smokeCoAlarmselfTestRequestInteractionInfo);
     commandMap.put("smokeCoAlarm", smokeCoAlarmClusterInteractionInfoMap);
     Map<String, InteractionInfo> dishwasherAlarmClusterInteractionInfoMap = new LinkedHashMap<>();
     Map<String, CommandParameterInfo> dishwasherAlarmresetCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo dishwasherAlarmresetalarmsCommandParameterInfo = new CommandParameterInfo("alarms", Long.class, Long.class);
       dishwasherAlarmresetCommandParams.put("alarms",dishwasherAlarmresetalarmsCommandParameterInfo);
     
       InteractionInfo dishwasherAlarmresetInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.DishwasherAlarm.ID, ClusterIDMapping.DishwasherAlarm.Command.Reset.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.DishwasherAlarmCluster) cluster)
         //  .reset((DefaultClusterCallback) callback
         //  
         //  , (Long)
         //  commandArguments.get("alarms")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           dishwasherAlarmresetCommandParams
       );
       dishwasherAlarmClusterInteractionInfoMap.put("reset", dishwasherAlarmresetInteractionInfo);
     Map<String, CommandParameterInfo> dishwasherAlarmmodifyEnabledAlarmsCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo dishwasherAlarmmodifyEnabledAlarmsmaskCommandParameterInfo = new CommandParameterInfo("mask", Long.class, Long.class);
       dishwasherAlarmmodifyEnabledAlarmsCommandParams.put("mask",dishwasherAlarmmodifyEnabledAlarmsmaskCommandParameterInfo);
     
       InteractionInfo dishwasherAlarmmodifyEnabledAlarmsInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.DishwasherAlarm.ID, ClusterIDMapping.DishwasherAlarm.Command.ModifyEnabledAlarms.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.DishwasherAlarmCluster) cluster)
         //  .modifyEnabledAlarms((DefaultClusterCallback) callback
         //  
         //  , (Long)
         //  commandArguments.get("mask")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           dishwasherAlarmmodifyEnabledAlarmsCommandParams
       );
       dishwasherAlarmClusterInteractionInfoMap.put("modifyEnabledAlarms", dishwasherAlarmmodifyEnabledAlarmsInteractionInfo);
     commandMap.put("dishwasherAlarm", dishwasherAlarmClusterInteractionInfoMap);
     Map<String, InteractionInfo> operationalStateClusterInteractionInfoMap = new LinkedHashMap<>();
     Map<String, CommandParameterInfo> operationalStatepauseCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       InteractionInfo operationalStatepauseInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.OperationalState.ID, ClusterIDMapping.OperationalState.Command.Pause.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.OperationalStateCluster) cluster)
         //  .pause((ChipClusters.OperationalStateCluster.OperationalCommandResponseCallback) callback
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedOperationalStateClusterOperationalCommandResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           operationalStatepauseCommandParams
       );
       operationalStateClusterInteractionInfoMap.put("pause", operationalStatepauseInteractionInfo);
     Map<String, CommandParameterInfo> operationalStatestopCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       InteractionInfo operationalStatestopInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.OperationalState.ID, ClusterIDMapping.OperationalState.Command.Stop.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.OperationalStateCluster) cluster)
         //  .stop((ChipClusters.OperationalStateCluster.OperationalCommandResponseCallback) callback
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedOperationalStateClusterOperationalCommandResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           operationalStatestopCommandParams
       );
       operationalStateClusterInteractionInfoMap.put("stop", operationalStatestopInteractionInfo);
     Map<String, CommandParameterInfo> operationalStatestartCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       InteractionInfo operationalStatestartInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.OperationalState.ID, ClusterIDMapping.OperationalState.Command.Start.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.OperationalStateCluster) cluster)
         //  .start((ChipClusters.OperationalStateCluster.OperationalCommandResponseCallback) callback
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedOperationalStateClusterOperationalCommandResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           operationalStatestartCommandParams
       );
       operationalStateClusterInteractionInfoMap.put("start", operationalStatestartInteractionInfo);
     Map<String, CommandParameterInfo> operationalStateresumeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       InteractionInfo operationalStateresumeInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.OperationalState.ID, ClusterIDMapping.OperationalState.Command.Resume.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.OperationalStateCluster) cluster)
         //  .resume((ChipClusters.OperationalStateCluster.OperationalCommandResponseCallback) callback
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedOperationalStateClusterOperationalCommandResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           operationalStateresumeCommandParams
       );
       operationalStateClusterInteractionInfoMap.put("resume", operationalStateresumeInteractionInfo);
     commandMap.put("operationalState", operationalStateClusterInteractionInfoMap);
     Map<String, InteractionInfo> rvcOperationalStateClusterInteractionInfoMap = new LinkedHashMap<>();
     Map<String, CommandParameterInfo> rvcOperationalStatepauseCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       InteractionInfo rvcOperationalStatepauseInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.RvcOperationalState.ID, ClusterIDMapping.RvcOperationalState.Command.Pause.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.RvcOperationalStateCluster) cluster)
         //  .pause((ChipClusters.RvcOperationalStateCluster.OperationalCommandResponseCallback) callback
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedRvcOperationalStateClusterOperationalCommandResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           rvcOperationalStatepauseCommandParams
       );
       rvcOperationalStateClusterInteractionInfoMap.put("pause", rvcOperationalStatepauseInteractionInfo);
     Map<String, CommandParameterInfo> rvcOperationalStatestopCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       InteractionInfo rvcOperationalStatestopInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.RvcOperationalState.ID, ClusterIDMapping.RvcOperationalState.Command.Stop.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.RvcOperationalStateCluster) cluster)
         //  .stop((ChipClusters.RvcOperationalStateCluster.OperationalCommandResponseCallback) callback
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedRvcOperationalStateClusterOperationalCommandResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           rvcOperationalStatestopCommandParams
       );
       rvcOperationalStateClusterInteractionInfoMap.put("stop", rvcOperationalStatestopInteractionInfo);
     Map<String, CommandParameterInfo> rvcOperationalStatestartCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       InteractionInfo rvcOperationalStatestartInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.RvcOperationalState.ID, ClusterIDMapping.RvcOperationalState.Command.Start.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.RvcOperationalStateCluster) cluster)
         //  .start((ChipClusters.RvcOperationalStateCluster.OperationalCommandResponseCallback) callback
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedRvcOperationalStateClusterOperationalCommandResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           rvcOperationalStatestartCommandParams
       );
       rvcOperationalStateClusterInteractionInfoMap.put("start", rvcOperationalStatestartInteractionInfo);
     Map<String, CommandParameterInfo> rvcOperationalStateresumeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       InteractionInfo rvcOperationalStateresumeInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.RvcOperationalState.ID, ClusterIDMapping.RvcOperationalState.Command.Resume.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.RvcOperationalStateCluster) cluster)
         //  .resume((ChipClusters.RvcOperationalStateCluster.OperationalCommandResponseCallback) callback
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedRvcOperationalStateClusterOperationalCommandResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           rvcOperationalStateresumeCommandParams
       );
       rvcOperationalStateClusterInteractionInfoMap.put("resume", rvcOperationalStateresumeInteractionInfo);
     commandMap.put("rvcOperationalState", rvcOperationalStateClusterInteractionInfoMap);
     Map<String, InteractionInfo> hepaFilterMonitoringClusterInteractionInfoMap = new LinkedHashMap<>();
     Map<String, CommandParameterInfo> hepaFilterMonitoringresetConditionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       InteractionInfo hepaFilterMonitoringresetConditionInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.HepaFilterMonitoring.ID, ClusterIDMapping.HepaFilterMonitoring.Command.ResetCondition.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.HepaFilterMonitoringCluster) cluster)
         //  .resetCondition((DefaultClusterCallback) callback
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           hepaFilterMonitoringresetConditionCommandParams
       );
       hepaFilterMonitoringClusterInteractionInfoMap.put("resetCondition", hepaFilterMonitoringresetConditionInteractionInfo);
     commandMap.put("hepaFilterMonitoring", hepaFilterMonitoringClusterInteractionInfoMap);
     Map<String, InteractionInfo> activatedCarbonFilterMonitoringClusterInteractionInfoMap = new LinkedHashMap<>();
     Map<String, CommandParameterInfo> activatedCarbonFilterMonitoringresetConditionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       InteractionInfo activatedCarbonFilterMonitoringresetConditionInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.ActivatedCarbonFilterMonitoring.ID, ClusterIDMapping.ActivatedCarbonFilterMonitoring.Command.ResetCondition.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.ActivatedCarbonFilterMonitoringCluster) cluster)
         //  .resetCondition((DefaultClusterCallback) callback
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           activatedCarbonFilterMonitoringresetConditionCommandParams
       );
       activatedCarbonFilterMonitoringClusterInteractionInfoMap.put("resetCondition", activatedCarbonFilterMonitoringresetConditionInteractionInfo);
     commandMap.put("activatedCarbonFilterMonitoring", activatedCarbonFilterMonitoringClusterInteractionInfoMap);
     Map<String, InteractionInfo> ceramicFilterMonitoringClusterInteractionInfoMap = new LinkedHashMap<>();
     Map<String, CommandParameterInfo> ceramicFilterMonitoringresetConditionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       InteractionInfo ceramicFilterMonitoringresetConditionInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.CeramicFilterMonitoring.ID, ClusterIDMapping.CeramicFilterMonitoring.Command.ResetCondition.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.CeramicFilterMonitoringCluster) cluster)
         //  .resetCondition((DefaultClusterCallback) callback
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           ceramicFilterMonitoringresetConditionCommandParams
       );
       ceramicFilterMonitoringClusterInteractionInfoMap.put("resetCondition", ceramicFilterMonitoringresetConditionInteractionInfo);
     commandMap.put("ceramicFilterMonitoring", ceramicFilterMonitoringClusterInteractionInfoMap);
     Map<String, InteractionInfo> electrostaticFilterMonitoringClusterInteractionInfoMap = new LinkedHashMap<>();
     Map<String, CommandParameterInfo> electrostaticFilterMonitoringresetConditionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       InteractionInfo electrostaticFilterMonitoringresetConditionInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.ElectrostaticFilterMonitoring.ID, ClusterIDMapping.ElectrostaticFilterMonitoring.Command.ResetCondition.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.ElectrostaticFilterMonitoringCluster) cluster)
         //  .resetCondition((DefaultClusterCallback) callback
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           electrostaticFilterMonitoringresetConditionCommandParams
       );
       electrostaticFilterMonitoringClusterInteractionInfoMap.put("resetCondition", electrostaticFilterMonitoringresetConditionInteractionInfo);
     commandMap.put("electrostaticFilterMonitoring", electrostaticFilterMonitoringClusterInteractionInfoMap);
     Map<String, InteractionInfo> uvFilterMonitoringClusterInteractionInfoMap = new LinkedHashMap<>();
     Map<String, CommandParameterInfo> uvFilterMonitoringresetConditionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       InteractionInfo uvFilterMonitoringresetConditionInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.UvFilterMonitoring.ID, ClusterIDMapping.UvFilterMonitoring.Command.ResetCondition.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.UvFilterMonitoringCluster) cluster)
         //  .resetCondition((DefaultClusterCallback) callback
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           uvFilterMonitoringresetConditionCommandParams
       );
       uvFilterMonitoringClusterInteractionInfoMap.put("resetCondition", uvFilterMonitoringresetConditionInteractionInfo);
     commandMap.put("uvFilterMonitoring", uvFilterMonitoringClusterInteractionInfoMap);
     Map<String, InteractionInfo> ionizingFilterMonitoringClusterInteractionInfoMap = new LinkedHashMap<>();
     Map<String, CommandParameterInfo> ionizingFilterMonitoringresetConditionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       InteractionInfo ionizingFilterMonitoringresetConditionInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.IonizingFilterMonitoring.ID, ClusterIDMapping.IonizingFilterMonitoring.Command.ResetCondition.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.IonizingFilterMonitoringCluster) cluster)
         //  .resetCondition((DefaultClusterCallback) callback
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           ionizingFilterMonitoringresetConditionCommandParams
       );
       ionizingFilterMonitoringClusterInteractionInfoMap.put("resetCondition", ionizingFilterMonitoringresetConditionInteractionInfo);
     commandMap.put("ionizingFilterMonitoring", ionizingFilterMonitoringClusterInteractionInfoMap);
     Map<String, InteractionInfo> zeoliteFilterMonitoringClusterInteractionInfoMap = new LinkedHashMap<>();
     Map<String, CommandParameterInfo> zeoliteFilterMonitoringresetConditionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       InteractionInfo zeoliteFilterMonitoringresetConditionInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.ZeoliteFilterMonitoring.ID, ClusterIDMapping.ZeoliteFilterMonitoring.Command.ResetCondition.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.ZeoliteFilterMonitoringCluster) cluster)
         //  .resetCondition((DefaultClusterCallback) callback
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           zeoliteFilterMonitoringresetConditionCommandParams
       );
       zeoliteFilterMonitoringClusterInteractionInfoMap.put("resetCondition", zeoliteFilterMonitoringresetConditionInteractionInfo);
     commandMap.put("zeoliteFilterMonitoring", zeoliteFilterMonitoringClusterInteractionInfoMap);
     Map<String, InteractionInfo> ozoneFilterMonitoringClusterInteractionInfoMap = new LinkedHashMap<>();
     Map<String, CommandParameterInfo> ozoneFilterMonitoringresetConditionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       InteractionInfo ozoneFilterMonitoringresetConditionInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.OzoneFilterMonitoring.ID, ClusterIDMapping.OzoneFilterMonitoring.Command.ResetCondition.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.OzoneFilterMonitoringCluster) cluster)
         //  .resetCondition((DefaultClusterCallback) callback
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           ozoneFilterMonitoringresetConditionCommandParams
       );
       ozoneFilterMonitoringClusterInteractionInfoMap.put("resetCondition", ozoneFilterMonitoringresetConditionInteractionInfo);
     commandMap.put("ozoneFilterMonitoring", ozoneFilterMonitoringClusterInteractionInfoMap);
     Map<String, InteractionInfo> waterTankMonitoringClusterInteractionInfoMap = new LinkedHashMap<>();
     Map<String, CommandParameterInfo> waterTankMonitoringresetConditionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       InteractionInfo waterTankMonitoringresetConditionInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.WaterTankMonitoring.ID, ClusterIDMapping.WaterTankMonitoring.Command.ResetCondition.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.WaterTankMonitoringCluster) cluster)
         //  .resetCondition((DefaultClusterCallback) callback
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           waterTankMonitoringresetConditionCommandParams
       );
       waterTankMonitoringClusterInteractionInfoMap.put("resetCondition", waterTankMonitoringresetConditionInteractionInfo);
     commandMap.put("waterTankMonitoring", waterTankMonitoringClusterInteractionInfoMap);
     Map<String, InteractionInfo> fuelTankMonitoringClusterInteractionInfoMap = new LinkedHashMap<>();
     Map<String, CommandParameterInfo> fuelTankMonitoringresetConditionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       InteractionInfo fuelTankMonitoringresetConditionInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.FuelTankMonitoring.ID, ClusterIDMapping.FuelTankMonitoring.Command.ResetCondition.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.FuelTankMonitoringCluster) cluster)
         //  .resetCondition((DefaultClusterCallback) callback
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           fuelTankMonitoringresetConditionCommandParams
       );
       fuelTankMonitoringClusterInteractionInfoMap.put("resetCondition", fuelTankMonitoringresetConditionInteractionInfo);
     commandMap.put("fuelTankMonitoring", fuelTankMonitoringClusterInteractionInfoMap);
     Map<String, InteractionInfo> inkCartridgeMonitoringClusterInteractionInfoMap = new LinkedHashMap<>();
     Map<String, CommandParameterInfo> inkCartridgeMonitoringresetConditionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       InteractionInfo inkCartridgeMonitoringresetConditionInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.InkCartridgeMonitoring.ID, ClusterIDMapping.InkCartridgeMonitoring.Command.ResetCondition.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.InkCartridgeMonitoringCluster) cluster)
         //  .resetCondition((DefaultClusterCallback) callback
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           inkCartridgeMonitoringresetConditionCommandParams
       );
       inkCartridgeMonitoringClusterInteractionInfoMap.put("resetCondition", inkCartridgeMonitoringresetConditionInteractionInfo);
     commandMap.put("inkCartridgeMonitoring", inkCartridgeMonitoringClusterInteractionInfoMap);
     Map<String, InteractionInfo> tonerCartridgeMonitoringClusterInteractionInfoMap = new LinkedHashMap<>();
     Map<String, CommandParameterInfo> tonerCartridgeMonitoringresetConditionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       InteractionInfo tonerCartridgeMonitoringresetConditionInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.TonerCartridgeMonitoring.ID, ClusterIDMapping.TonerCartridgeMonitoring.Command.ResetCondition.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.TonerCartridgeMonitoringCluster) cluster)
         //  .resetCondition((DefaultClusterCallback) callback
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           tonerCartridgeMonitoringresetConditionCommandParams
       );
       tonerCartridgeMonitoringClusterInteractionInfoMap.put("resetCondition", tonerCartridgeMonitoringresetConditionInteractionInfo);
     commandMap.put("tonerCartridgeMonitoring", tonerCartridgeMonitoringClusterInteractionInfoMap);
     Map<String, InteractionInfo> doorLockClusterInteractionInfoMap = new LinkedHashMap<>();
     Map<String, CommandParameterInfo> doorLocklockDoorCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo doorLocklockDoorPINCodeCommandParameterInfo = new CommandParameterInfo("PINCode", Optional.class, byte[].class);
       doorLocklockDoorCommandParams.put("PINCode",doorLocklockDoorPINCodeCommandParameterInfo);
     
       InteractionInfo doorLocklockDoorInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.DoorLock.ID, ClusterIDMapping.DoorLock.Command.LockDoor.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            10000
);
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.DoorLockCluster) cluster)
         //  .lockDoor((DefaultClusterCallback) callback
         //  
         //  , (Optional<byte[]>)
         //  commandArguments.get("PINCode")
         //  
         //  
         //  , 10000
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           doorLocklockDoorCommandParams
       );
       doorLockClusterInteractionInfoMap.put("lockDoor", doorLocklockDoorInteractionInfo);
     Map<String, CommandParameterInfo> doorLockunlockDoorCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo doorLockunlockDoorPINCodeCommandParameterInfo = new CommandParameterInfo("PINCode", Optional.class, byte[].class);
       doorLockunlockDoorCommandParams.put("PINCode",doorLockunlockDoorPINCodeCommandParameterInfo);
     
       InteractionInfo doorLockunlockDoorInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.DoorLock.ID, ClusterIDMapping.DoorLock.Command.UnlockDoor.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            10000
);
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.DoorLockCluster) cluster)
         //  .unlockDoor((DefaultClusterCallback) callback
         //  
         //  , (Optional<byte[]>)
         //  commandArguments.get("PINCode")
         //  
         //  
         //  , 10000
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           doorLockunlockDoorCommandParams
       );
       doorLockClusterInteractionInfoMap.put("unlockDoor", doorLockunlockDoorInteractionInfo);
     Map<String, CommandParameterInfo> doorLockunlockWithTimeoutCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo doorLockunlockWithTimeouttimeoutCommandParameterInfo = new CommandParameterInfo("timeout", Integer.class, Integer.class);
       doorLockunlockWithTimeoutCommandParams.put("timeout",doorLockunlockWithTimeouttimeoutCommandParameterInfo);
      
       CommandParameterInfo doorLockunlockWithTimeoutPINCodeCommandParameterInfo = new CommandParameterInfo("PINCode", Optional.class, byte[].class);
       doorLockunlockWithTimeoutCommandParams.put("PINCode",doorLockunlockWithTimeoutPINCodeCommandParameterInfo);
     
       InteractionInfo doorLockunlockWithTimeoutInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.DoorLock.ID, ClusterIDMapping.DoorLock.Command.UnlockWithTimeout.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            10000
);
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.DoorLockCluster) cluster)
         //  .unlockWithTimeout((DefaultClusterCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("timeout")
         //  
         //  , (Optional<byte[]>)
         //  commandArguments.get("PINCode")
         //  
         //  
         //  , 10000
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           doorLockunlockWithTimeoutCommandParams
       );
       doorLockClusterInteractionInfoMap.put("unlockWithTimeout", doorLockunlockWithTimeoutInteractionInfo);
     Map<String, CommandParameterInfo> doorLocksetWeekDayScheduleCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo doorLocksetWeekDayScheduleweekDayIndexCommandParameterInfo = new CommandParameterInfo("weekDayIndex", Integer.class, Integer.class);
       doorLocksetWeekDayScheduleCommandParams.put("weekDayIndex",doorLocksetWeekDayScheduleweekDayIndexCommandParameterInfo);
      
       CommandParameterInfo doorLocksetWeekDayScheduleuserIndexCommandParameterInfo = new CommandParameterInfo("userIndex", Integer.class, Integer.class);
       doorLocksetWeekDayScheduleCommandParams.put("userIndex",doorLocksetWeekDayScheduleuserIndexCommandParameterInfo);
      
       CommandParameterInfo doorLocksetWeekDayScheduledaysMaskCommandParameterInfo = new CommandParameterInfo("daysMask", Integer.class, Integer.class);
       doorLocksetWeekDayScheduleCommandParams.put("daysMask",doorLocksetWeekDayScheduledaysMaskCommandParameterInfo);
      
       CommandParameterInfo doorLocksetWeekDaySchedulestartHourCommandParameterInfo = new CommandParameterInfo("startHour", Integer.class, Integer.class);
       doorLocksetWeekDayScheduleCommandParams.put("startHour",doorLocksetWeekDaySchedulestartHourCommandParameterInfo);
      
       CommandParameterInfo doorLocksetWeekDaySchedulestartMinuteCommandParameterInfo = new CommandParameterInfo("startMinute", Integer.class, Integer.class);
       doorLocksetWeekDayScheduleCommandParams.put("startMinute",doorLocksetWeekDaySchedulestartMinuteCommandParameterInfo);
      
       CommandParameterInfo doorLocksetWeekDayScheduleendHourCommandParameterInfo = new CommandParameterInfo("endHour", Integer.class, Integer.class);
       doorLocksetWeekDayScheduleCommandParams.put("endHour",doorLocksetWeekDayScheduleendHourCommandParameterInfo);
      
       CommandParameterInfo doorLocksetWeekDayScheduleendMinuteCommandParameterInfo = new CommandParameterInfo("endMinute", Integer.class, Integer.class);
       doorLocksetWeekDayScheduleCommandParams.put("endMinute",doorLocksetWeekDayScheduleendMinuteCommandParameterInfo);
     
       InteractionInfo doorLocksetWeekDayScheduleInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.DoorLock.ID, ClusterIDMapping.DoorLock.Command.SetWeekDaySchedule.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.DoorLockCluster) cluster)
         //  .setWeekDaySchedule((DefaultClusterCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("weekDayIndex")
         //  
         //  , (Integer)
         //  commandArguments.get("userIndex")
         //  
         //  , (Integer)
         //  commandArguments.get("daysMask")
         //  
         //  , (Integer)
         //  commandArguments.get("startHour")
         //  
         //  , (Integer)
         //  commandArguments.get("startMinute")
         //  
         //  , (Integer)
         //  commandArguments.get("endHour")
         //  
         //  , (Integer)
         //  commandArguments.get("endMinute")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           doorLocksetWeekDayScheduleCommandParams
       );
       doorLockClusterInteractionInfoMap.put("setWeekDaySchedule", doorLocksetWeekDayScheduleInteractionInfo);
     Map<String, CommandParameterInfo> doorLockgetWeekDayScheduleCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo doorLockgetWeekDayScheduleweekDayIndexCommandParameterInfo = new CommandParameterInfo("weekDayIndex", Integer.class, Integer.class);
       doorLockgetWeekDayScheduleCommandParams.put("weekDayIndex",doorLockgetWeekDayScheduleweekDayIndexCommandParameterInfo);
      
       CommandParameterInfo doorLockgetWeekDayScheduleuserIndexCommandParameterInfo = new CommandParameterInfo("userIndex", Integer.class, Integer.class);
       doorLockgetWeekDayScheduleCommandParams.put("userIndex",doorLockgetWeekDayScheduleuserIndexCommandParameterInfo);
     
       InteractionInfo doorLockgetWeekDayScheduleInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.DoorLock.ID, ClusterIDMapping.DoorLock.Command.GetWeekDaySchedule.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.DoorLockCluster) cluster)
         //  .getWeekDaySchedule((ChipClusters.DoorLockCluster.GetWeekDayScheduleResponseCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("weekDayIndex")
         //  
         //  , (Integer)
         //  commandArguments.get("userIndex")
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedDoorLockClusterGetWeekDayScheduleResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           doorLockgetWeekDayScheduleCommandParams
       );
       doorLockClusterInteractionInfoMap.put("getWeekDaySchedule", doorLockgetWeekDayScheduleInteractionInfo);
     Map<String, CommandParameterInfo> doorLockclearWeekDayScheduleCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo doorLockclearWeekDayScheduleweekDayIndexCommandParameterInfo = new CommandParameterInfo("weekDayIndex", Integer.class, Integer.class);
       doorLockclearWeekDayScheduleCommandParams.put("weekDayIndex",doorLockclearWeekDayScheduleweekDayIndexCommandParameterInfo);
      
       CommandParameterInfo doorLockclearWeekDayScheduleuserIndexCommandParameterInfo = new CommandParameterInfo("userIndex", Integer.class, Integer.class);
       doorLockclearWeekDayScheduleCommandParams.put("userIndex",doorLockclearWeekDayScheduleuserIndexCommandParameterInfo);
     
       InteractionInfo doorLockclearWeekDayScheduleInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.DoorLock.ID, ClusterIDMapping.DoorLock.Command.ClearWeekDaySchedule.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.DoorLockCluster) cluster)
         //  .clearWeekDaySchedule((DefaultClusterCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("weekDayIndex")
         //  
         //  , (Integer)
         //  commandArguments.get("userIndex")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           doorLockclearWeekDayScheduleCommandParams
       );
       doorLockClusterInteractionInfoMap.put("clearWeekDaySchedule", doorLockclearWeekDayScheduleInteractionInfo);
     Map<String, CommandParameterInfo> doorLocksetYearDayScheduleCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo doorLocksetYearDayScheduleyearDayIndexCommandParameterInfo = new CommandParameterInfo("yearDayIndex", Integer.class, Integer.class);
       doorLocksetYearDayScheduleCommandParams.put("yearDayIndex",doorLocksetYearDayScheduleyearDayIndexCommandParameterInfo);
      
       CommandParameterInfo doorLocksetYearDayScheduleuserIndexCommandParameterInfo = new CommandParameterInfo("userIndex", Integer.class, Integer.class);
       doorLocksetYearDayScheduleCommandParams.put("userIndex",doorLocksetYearDayScheduleuserIndexCommandParameterInfo);
      
       CommandParameterInfo doorLocksetYearDaySchedulelocalStartTimeCommandParameterInfo = new CommandParameterInfo("localStartTime", Long.class, Long.class);
       doorLocksetYearDayScheduleCommandParams.put("localStartTime",doorLocksetYearDaySchedulelocalStartTimeCommandParameterInfo);
      
       CommandParameterInfo doorLocksetYearDaySchedulelocalEndTimeCommandParameterInfo = new CommandParameterInfo("localEndTime", Long.class, Long.class);
       doorLocksetYearDayScheduleCommandParams.put("localEndTime",doorLocksetYearDaySchedulelocalEndTimeCommandParameterInfo);
     
       InteractionInfo doorLocksetYearDayScheduleInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.DoorLock.ID, ClusterIDMapping.DoorLock.Command.SetYearDaySchedule.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.DoorLockCluster) cluster)
         //  .setYearDaySchedule((DefaultClusterCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("yearDayIndex")
         //  
         //  , (Integer)
         //  commandArguments.get("userIndex")
         //  
         //  , (Long)
         //  commandArguments.get("localStartTime")
         //  
         //  , (Long)
         //  commandArguments.get("localEndTime")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           doorLocksetYearDayScheduleCommandParams
       );
       doorLockClusterInteractionInfoMap.put("setYearDaySchedule", doorLocksetYearDayScheduleInteractionInfo);
     Map<String, CommandParameterInfo> doorLockgetYearDayScheduleCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo doorLockgetYearDayScheduleyearDayIndexCommandParameterInfo = new CommandParameterInfo("yearDayIndex", Integer.class, Integer.class);
       doorLockgetYearDayScheduleCommandParams.put("yearDayIndex",doorLockgetYearDayScheduleyearDayIndexCommandParameterInfo);
      
       CommandParameterInfo doorLockgetYearDayScheduleuserIndexCommandParameterInfo = new CommandParameterInfo("userIndex", Integer.class, Integer.class);
       doorLockgetYearDayScheduleCommandParams.put("userIndex",doorLockgetYearDayScheduleuserIndexCommandParameterInfo);
     
       InteractionInfo doorLockgetYearDayScheduleInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.DoorLock.ID, ClusterIDMapping.DoorLock.Command.GetYearDaySchedule.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.DoorLockCluster) cluster)
         //  .getYearDaySchedule((ChipClusters.DoorLockCluster.GetYearDayScheduleResponseCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("yearDayIndex")
         //  
         //  , (Integer)
         //  commandArguments.get("userIndex")
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedDoorLockClusterGetYearDayScheduleResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           doorLockgetYearDayScheduleCommandParams
       );
       doorLockClusterInteractionInfoMap.put("getYearDaySchedule", doorLockgetYearDayScheduleInteractionInfo);
     Map<String, CommandParameterInfo> doorLockclearYearDayScheduleCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo doorLockclearYearDayScheduleyearDayIndexCommandParameterInfo = new CommandParameterInfo("yearDayIndex", Integer.class, Integer.class);
       doorLockclearYearDayScheduleCommandParams.put("yearDayIndex",doorLockclearYearDayScheduleyearDayIndexCommandParameterInfo);
      
       CommandParameterInfo doorLockclearYearDayScheduleuserIndexCommandParameterInfo = new CommandParameterInfo("userIndex", Integer.class, Integer.class);
       doorLockclearYearDayScheduleCommandParams.put("userIndex",doorLockclearYearDayScheduleuserIndexCommandParameterInfo);
     
       InteractionInfo doorLockclearYearDayScheduleInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.DoorLock.ID, ClusterIDMapping.DoorLock.Command.ClearYearDaySchedule.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.DoorLockCluster) cluster)
         //  .clearYearDaySchedule((DefaultClusterCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("yearDayIndex")
         //  
         //  , (Integer)
         //  commandArguments.get("userIndex")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           doorLockclearYearDayScheduleCommandParams
       );
       doorLockClusterInteractionInfoMap.put("clearYearDaySchedule", doorLockclearYearDayScheduleInteractionInfo);
     Map<String, CommandParameterInfo> doorLocksetHolidayScheduleCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo doorLocksetHolidayScheduleholidayIndexCommandParameterInfo = new CommandParameterInfo("holidayIndex", Integer.class, Integer.class);
       doorLocksetHolidayScheduleCommandParams.put("holidayIndex",doorLocksetHolidayScheduleholidayIndexCommandParameterInfo);
      
       CommandParameterInfo doorLocksetHolidaySchedulelocalStartTimeCommandParameterInfo = new CommandParameterInfo("localStartTime", Long.class, Long.class);
       doorLocksetHolidayScheduleCommandParams.put("localStartTime",doorLocksetHolidaySchedulelocalStartTimeCommandParameterInfo);
      
       CommandParameterInfo doorLocksetHolidaySchedulelocalEndTimeCommandParameterInfo = new CommandParameterInfo("localEndTime", Long.class, Long.class);
       doorLocksetHolidayScheduleCommandParams.put("localEndTime",doorLocksetHolidaySchedulelocalEndTimeCommandParameterInfo);
      
       CommandParameterInfo doorLocksetHolidayScheduleoperatingModeCommandParameterInfo = new CommandParameterInfo("operatingMode", Integer.class, Integer.class);
       doorLocksetHolidayScheduleCommandParams.put("operatingMode",doorLocksetHolidayScheduleoperatingModeCommandParameterInfo);
     
       InteractionInfo doorLocksetHolidayScheduleInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.DoorLock.ID, ClusterIDMapping.DoorLock.Command.SetHolidaySchedule.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.DoorLockCluster) cluster)
         //  .setHolidaySchedule((DefaultClusterCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("holidayIndex")
         //  
         //  , (Long)
         //  commandArguments.get("localStartTime")
         //  
         //  , (Long)
         //  commandArguments.get("localEndTime")
         //  
         //  , (Integer)
         //  commandArguments.get("operatingMode")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           doorLocksetHolidayScheduleCommandParams
       );
       doorLockClusterInteractionInfoMap.put("setHolidaySchedule", doorLocksetHolidayScheduleInteractionInfo);
     Map<String, CommandParameterInfo> doorLockgetHolidayScheduleCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo doorLockgetHolidayScheduleholidayIndexCommandParameterInfo = new CommandParameterInfo("holidayIndex", Integer.class, Integer.class);
       doorLockgetHolidayScheduleCommandParams.put("holidayIndex",doorLockgetHolidayScheduleholidayIndexCommandParameterInfo);
     
       InteractionInfo doorLockgetHolidayScheduleInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.DoorLock.ID, ClusterIDMapping.DoorLock.Command.GetHolidaySchedule.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.DoorLockCluster) cluster)
         //  .getHolidaySchedule((ChipClusters.DoorLockCluster.GetHolidayScheduleResponseCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("holidayIndex")
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedDoorLockClusterGetHolidayScheduleResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           doorLockgetHolidayScheduleCommandParams
       );
       doorLockClusterInteractionInfoMap.put("getHolidaySchedule", doorLockgetHolidayScheduleInteractionInfo);
     Map<String, CommandParameterInfo> doorLockclearHolidayScheduleCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo doorLockclearHolidayScheduleholidayIndexCommandParameterInfo = new CommandParameterInfo("holidayIndex", Integer.class, Integer.class);
       doorLockclearHolidayScheduleCommandParams.put("holidayIndex",doorLockclearHolidayScheduleholidayIndexCommandParameterInfo);
     
       InteractionInfo doorLockclearHolidayScheduleInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.DoorLock.ID, ClusterIDMapping.DoorLock.Command.ClearHolidaySchedule.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.DoorLockCluster) cluster)
         //  .clearHolidaySchedule((DefaultClusterCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("holidayIndex")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           doorLockclearHolidayScheduleCommandParams
       );
       doorLockClusterInteractionInfoMap.put("clearHolidaySchedule", doorLockclearHolidayScheduleInteractionInfo);
     Map<String, CommandParameterInfo> doorLocksetUserCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo doorLocksetUseroperationTypeCommandParameterInfo = new CommandParameterInfo("operationType", Integer.class, Integer.class);
       doorLocksetUserCommandParams.put("operationType",doorLocksetUseroperationTypeCommandParameterInfo);
      
       CommandParameterInfo doorLocksetUseruserIndexCommandParameterInfo = new CommandParameterInfo("userIndex", Integer.class, Integer.class);
       doorLocksetUserCommandParams.put("userIndex",doorLocksetUseruserIndexCommandParameterInfo);
      
       CommandParameterInfo doorLocksetUseruserNameCommandParameterInfo = new CommandParameterInfo("userName", String.class, String.class);
       doorLocksetUserCommandParams.put("userName",doorLocksetUseruserNameCommandParameterInfo);
      
       CommandParameterInfo doorLocksetUseruserUniqueIDCommandParameterInfo = new CommandParameterInfo("userUniqueID", Long.class, Long.class);
       doorLocksetUserCommandParams.put("userUniqueID",doorLocksetUseruserUniqueIDCommandParameterInfo);
      
       CommandParameterInfo doorLocksetUseruserStatusCommandParameterInfo = new CommandParameterInfo("userStatus", Integer.class, Integer.class);
       doorLocksetUserCommandParams.put("userStatus",doorLocksetUseruserStatusCommandParameterInfo);
      
       CommandParameterInfo doorLocksetUseruserTypeCommandParameterInfo = new CommandParameterInfo("userType", Integer.class, Integer.class);
       doorLocksetUserCommandParams.put("userType",doorLocksetUseruserTypeCommandParameterInfo);
      
       CommandParameterInfo doorLocksetUsercredentialRuleCommandParameterInfo = new CommandParameterInfo("credentialRule", Integer.class, Integer.class);
       doorLocksetUserCommandParams.put("credentialRule",doorLocksetUsercredentialRuleCommandParameterInfo);
     
       InteractionInfo doorLocksetUserInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.DoorLock.ID, ClusterIDMapping.DoorLock.Command.SetUser.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            10000
);
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.DoorLockCluster) cluster)
         //  .setUser((DefaultClusterCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("operationType")
         //  
         //  , (Integer)
         //  commandArguments.get("userIndex")
         //  
         //  , (String)
         //  commandArguments.get("userName")
         //  
         //  , (Long)
         //  commandArguments.get("userUniqueID")
         //  
         //  , (Integer)
         //  commandArguments.get("userStatus")
         //  
         //  , (Integer)
         //  commandArguments.get("userType")
         //  
         //  , (Integer)
         //  commandArguments.get("credentialRule")
         //  
         //  
         //  , 10000
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           doorLocksetUserCommandParams
       );
       doorLockClusterInteractionInfoMap.put("setUser", doorLocksetUserInteractionInfo);
     Map<String, CommandParameterInfo> doorLockgetUserCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo doorLockgetUseruserIndexCommandParameterInfo = new CommandParameterInfo("userIndex", Integer.class, Integer.class);
       doorLockgetUserCommandParams.put("userIndex",doorLockgetUseruserIndexCommandParameterInfo);
     
       InteractionInfo doorLockgetUserInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.DoorLock.ID, ClusterIDMapping.DoorLock.Command.GetUser.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.DoorLockCluster) cluster)
         //  .getUser((ChipClusters.DoorLockCluster.GetUserResponseCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("userIndex")
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedDoorLockClusterGetUserResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           doorLockgetUserCommandParams
       );
       doorLockClusterInteractionInfoMap.put("getUser", doorLockgetUserInteractionInfo);
     Map<String, CommandParameterInfo> doorLockclearUserCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo doorLockclearUseruserIndexCommandParameterInfo = new CommandParameterInfo("userIndex", Integer.class, Integer.class);
       doorLockclearUserCommandParams.put("userIndex",doorLockclearUseruserIndexCommandParameterInfo);
     
       InteractionInfo doorLockclearUserInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.DoorLock.ID, ClusterIDMapping.DoorLock.Command.ClearUser.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            10000
);
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.DoorLockCluster) cluster)
         //  .clearUser((DefaultClusterCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("userIndex")
         //  
         //  
         //  , 10000
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           doorLockclearUserCommandParams
       );
       doorLockClusterInteractionInfoMap.put("clearUser", doorLockclearUserInteractionInfo);
     Map<String, CommandParameterInfo> doorLocksetCredentialCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo doorLocksetCredentialoperationTypeCommandParameterInfo = new CommandParameterInfo("operationType", Integer.class, Integer.class);
       doorLocksetCredentialCommandParams.put("operationType",doorLocksetCredentialoperationTypeCommandParameterInfo);
      
       CommandParameterInfo doorLocksetCredentialcredentialDataCommandParameterInfo = new CommandParameterInfo("credentialData", byte[].class, byte[].class);
       doorLocksetCredentialCommandParams.put("credentialData",doorLocksetCredentialcredentialDataCommandParameterInfo);
      
       CommandParameterInfo doorLocksetCredentialuserIndexCommandParameterInfo = new CommandParameterInfo("userIndex", Integer.class, Integer.class);
       doorLocksetCredentialCommandParams.put("userIndex",doorLocksetCredentialuserIndexCommandParameterInfo);
      
       CommandParameterInfo doorLocksetCredentialuserStatusCommandParameterInfo = new CommandParameterInfo("userStatus", Integer.class, Integer.class);
       doorLocksetCredentialCommandParams.put("userStatus",doorLocksetCredentialuserStatusCommandParameterInfo);
      
       CommandParameterInfo doorLocksetCredentialuserTypeCommandParameterInfo = new CommandParameterInfo("userType", Integer.class, Integer.class);
       doorLocksetCredentialCommandParams.put("userType",doorLocksetCredentialuserTypeCommandParameterInfo);
     
       InteractionInfo doorLocksetCredentialInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.DoorLock.ID, ClusterIDMapping.DoorLock.Command.SetCredential.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              10000
);
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.DoorLockCluster) cluster)
         //  .setCredential((ChipClusters.DoorLockCluster.SetCredentialResponseCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("operationType")
         //  
         //  , (ChipStructs.DoorLockClusterCredentialStruct)
         //  commandArguments.get("credential")
         //  
         //  , (byte[])
         //  commandArguments.get("credentialData")
         //  
         //  , (Integer)
         //  commandArguments.get("userIndex")
         //  
         //  , (Integer)
         //  commandArguments.get("userStatus")
         //  
         //  , (Integer)
         //  commandArguments.get("userType")
         //  
         //   
         //  , 10000
         //  );
         },
         //() -> new DelegatedDoorLockClusterSetCredentialResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           doorLocksetCredentialCommandParams
       );
       doorLockClusterInteractionInfoMap.put("setCredential", doorLocksetCredentialInteractionInfo);
     Map<String, CommandParameterInfo> doorLockgetCredentialStatusCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       InteractionInfo doorLockgetCredentialStatusInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.DoorLock.ID, ClusterIDMapping.DoorLock.Command.GetCredentialStatus.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.DoorLockCluster) cluster)
         //  .getCredentialStatus((ChipClusters.DoorLockCluster.GetCredentialStatusResponseCallback) callback
         //  
         //  , (ChipStructs.DoorLockClusterCredentialStruct)
         //  commandArguments.get("credential")
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedDoorLockClusterGetCredentialStatusResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           doorLockgetCredentialStatusCommandParams
       );
       doorLockClusterInteractionInfoMap.put("getCredentialStatus", doorLockgetCredentialStatusInteractionInfo);
     Map<String, CommandParameterInfo> doorLockclearCredentialCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       InteractionInfo doorLockclearCredentialInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.DoorLock.ID, ClusterIDMapping.DoorLock.Command.ClearCredential.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            10000
);
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.DoorLockCluster) cluster)
         //  .clearCredential((DefaultClusterCallback) callback
         //  
         //  , (ChipStructs.DoorLockClusterCredentialStruct)
         //  commandArguments.get("credential")
         //  
         //  
         //  , 10000
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           doorLockclearCredentialCommandParams
       );
       doorLockClusterInteractionInfoMap.put("clearCredential", doorLockclearCredentialInteractionInfo);
     Map<String, CommandParameterInfo> doorLockunboltDoorCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo doorLockunboltDoorPINCodeCommandParameterInfo = new CommandParameterInfo("PINCode", Optional.class, byte[].class);
       doorLockunboltDoorCommandParams.put("PINCode",doorLockunboltDoorPINCodeCommandParameterInfo);
     
       InteractionInfo doorLockunboltDoorInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.DoorLock.ID, ClusterIDMapping.DoorLock.Command.UnboltDoor.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            10000
);
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.DoorLockCluster) cluster)
         //  .unboltDoor((DefaultClusterCallback) callback
         //  
         //  , (Optional<byte[]>)
         //  commandArguments.get("PINCode")
         //  
         //  
         //  , 10000
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           doorLockunboltDoorCommandParams
       );
       doorLockClusterInteractionInfoMap.put("unboltDoor", doorLockunboltDoorInteractionInfo);
     commandMap.put("doorLock", doorLockClusterInteractionInfoMap);
     Map<String, InteractionInfo> windowCoveringClusterInteractionInfoMap = new LinkedHashMap<>();
     Map<String, CommandParameterInfo> windowCoveringupOrOpenCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       InteractionInfo windowCoveringupOrOpenInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.WindowCovering.ID, ClusterIDMapping.WindowCovering.Command.UpOrOpen.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.WindowCoveringCluster) cluster)
         //  .upOrOpen((DefaultClusterCallback) callback
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           windowCoveringupOrOpenCommandParams
       );
       windowCoveringClusterInteractionInfoMap.put("upOrOpen", windowCoveringupOrOpenInteractionInfo);
     Map<String, CommandParameterInfo> windowCoveringdownOrCloseCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       InteractionInfo windowCoveringdownOrCloseInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.WindowCovering.ID, ClusterIDMapping.WindowCovering.Command.DownOrClose.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.WindowCoveringCluster) cluster)
         //  .downOrClose((DefaultClusterCallback) callback
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           windowCoveringdownOrCloseCommandParams
       );
       windowCoveringClusterInteractionInfoMap.put("downOrClose", windowCoveringdownOrCloseInteractionInfo);
     Map<String, CommandParameterInfo> windowCoveringstopMotionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       InteractionInfo windowCoveringstopMotionInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.WindowCovering.ID, ClusterIDMapping.WindowCovering.Command.StopMotion.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.WindowCoveringCluster) cluster)
         //  .stopMotion((DefaultClusterCallback) callback
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           windowCoveringstopMotionCommandParams
       );
       windowCoveringClusterInteractionInfoMap.put("stopMotion", windowCoveringstopMotionInteractionInfo);
     Map<String, CommandParameterInfo> windowCoveringgoToLiftValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo windowCoveringgoToLiftValueliftValueCommandParameterInfo = new CommandParameterInfo("liftValue", Integer.class, Integer.class);
       windowCoveringgoToLiftValueCommandParams.put("liftValue",windowCoveringgoToLiftValueliftValueCommandParameterInfo);
     
       InteractionInfo windowCoveringgoToLiftValueInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.WindowCovering.ID, ClusterIDMapping.WindowCovering.Command.GoToLiftValue.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.WindowCoveringCluster) cluster)
         //  .goToLiftValue((DefaultClusterCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("liftValue")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           windowCoveringgoToLiftValueCommandParams
       );
       windowCoveringClusterInteractionInfoMap.put("goToLiftValue", windowCoveringgoToLiftValueInteractionInfo);
     Map<String, CommandParameterInfo> windowCoveringgoToLiftPercentageCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo windowCoveringgoToLiftPercentageliftPercent100thsValueCommandParameterInfo = new CommandParameterInfo("liftPercent100thsValue", Integer.class, Integer.class);
       windowCoveringgoToLiftPercentageCommandParams.put("liftPercent100thsValue",windowCoveringgoToLiftPercentageliftPercent100thsValueCommandParameterInfo);
     
       InteractionInfo windowCoveringgoToLiftPercentageInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.WindowCovering.ID, ClusterIDMapping.WindowCovering.Command.GoToLiftPercentage.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.WindowCoveringCluster) cluster)
         //  .goToLiftPercentage((DefaultClusterCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("liftPercent100thsValue")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           windowCoveringgoToLiftPercentageCommandParams
       );
       windowCoveringClusterInteractionInfoMap.put("goToLiftPercentage", windowCoveringgoToLiftPercentageInteractionInfo);
     Map<String, CommandParameterInfo> windowCoveringgoToTiltValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo windowCoveringgoToTiltValuetiltValueCommandParameterInfo = new CommandParameterInfo("tiltValue", Integer.class, Integer.class);
       windowCoveringgoToTiltValueCommandParams.put("tiltValue",windowCoveringgoToTiltValuetiltValueCommandParameterInfo);
     
       InteractionInfo windowCoveringgoToTiltValueInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.WindowCovering.ID, ClusterIDMapping.WindowCovering.Command.GoToTiltValue.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.WindowCoveringCluster) cluster)
         //  .goToTiltValue((DefaultClusterCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("tiltValue")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           windowCoveringgoToTiltValueCommandParams
       );
       windowCoveringClusterInteractionInfoMap.put("goToTiltValue", windowCoveringgoToTiltValueInteractionInfo);
     Map<String, CommandParameterInfo> windowCoveringgoToTiltPercentageCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo windowCoveringgoToTiltPercentagetiltPercent100thsValueCommandParameterInfo = new CommandParameterInfo("tiltPercent100thsValue", Integer.class, Integer.class);
       windowCoveringgoToTiltPercentageCommandParams.put("tiltPercent100thsValue",windowCoveringgoToTiltPercentagetiltPercent100thsValueCommandParameterInfo);
     
       InteractionInfo windowCoveringgoToTiltPercentageInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.WindowCovering.ID, ClusterIDMapping.WindowCovering.Command.GoToTiltPercentage.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.WindowCoveringCluster) cluster)
         //  .goToTiltPercentage((DefaultClusterCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("tiltPercent100thsValue")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           windowCoveringgoToTiltPercentageCommandParams
       );
       windowCoveringClusterInteractionInfoMap.put("goToTiltPercentage", windowCoveringgoToTiltPercentageInteractionInfo);
     commandMap.put("windowCovering", windowCoveringClusterInteractionInfoMap);
     Map<String, InteractionInfo> barrierControlClusterInteractionInfoMap = new LinkedHashMap<>();
     Map<String, CommandParameterInfo> barrierControlbarrierControlGoToPercentCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo barrierControlbarrierControlGoToPercentpercentOpenCommandParameterInfo = new CommandParameterInfo("percentOpen", Integer.class, Integer.class);
       barrierControlbarrierControlGoToPercentCommandParams.put("percentOpen",barrierControlbarrierControlGoToPercentpercentOpenCommandParameterInfo);
     
       InteractionInfo barrierControlbarrierControlGoToPercentInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.BarrierControl.ID, ClusterIDMapping.BarrierControl.Command.BarrierControlGoToPercent.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.BarrierControlCluster) cluster)
         //  .barrierControlGoToPercent((DefaultClusterCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("percentOpen")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           barrierControlbarrierControlGoToPercentCommandParams
       );
       barrierControlClusterInteractionInfoMap.put("barrierControlGoToPercent", barrierControlbarrierControlGoToPercentInteractionInfo);
     Map<String, CommandParameterInfo> barrierControlbarrierControlStopCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       InteractionInfo barrierControlbarrierControlStopInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.BarrierControl.ID, ClusterIDMapping.BarrierControl.Command.BarrierControlStop.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.BarrierControlCluster) cluster)
         //  .barrierControlStop((DefaultClusterCallback) callback
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           barrierControlbarrierControlStopCommandParams
       );
       barrierControlClusterInteractionInfoMap.put("barrierControlStop", barrierControlbarrierControlStopInteractionInfo);
     commandMap.put("barrierControl", barrierControlClusterInteractionInfoMap);
     Map<String, InteractionInfo> pumpConfigurationAndControlClusterInteractionInfoMap = new LinkedHashMap<>();
     commandMap.put("pumpConfigurationAndControl", pumpConfigurationAndControlClusterInteractionInfoMap);
     Map<String, InteractionInfo> thermostatClusterInteractionInfoMap = new LinkedHashMap<>();
     Map<String, CommandParameterInfo> thermostatsetpointRaiseLowerCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo thermostatsetpointRaiseLowermodeCommandParameterInfo = new CommandParameterInfo("mode", Integer.class, Integer.class);
       thermostatsetpointRaiseLowerCommandParams.put("mode",thermostatsetpointRaiseLowermodeCommandParameterInfo);
      
       CommandParameterInfo thermostatsetpointRaiseLoweramountCommandParameterInfo = new CommandParameterInfo("amount", Integer.class, Integer.class);
       thermostatsetpointRaiseLowerCommandParams.put("amount",thermostatsetpointRaiseLoweramountCommandParameterInfo);
     
       InteractionInfo thermostatsetpointRaiseLowerInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.Thermostat.ID, ClusterIDMapping.Thermostat.Command.SetpointRaiseLower.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.ThermostatCluster) cluster)
         //  .setpointRaiseLower((DefaultClusterCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("mode")
         //  
         //  , (Integer)
         //  commandArguments.get("amount")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           thermostatsetpointRaiseLowerCommandParams
       );
       thermostatClusterInteractionInfoMap.put("setpointRaiseLower", thermostatsetpointRaiseLowerInteractionInfo);
     Map<String, CommandParameterInfo> thermostatsetWeeklyScheduleCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo thermostatsetWeeklySchedulenumberOfTransitionsForSequenceCommandParameterInfo = new CommandParameterInfo("numberOfTransitionsForSequence", Integer.class, Integer.class);
       thermostatsetWeeklyScheduleCommandParams.put("numberOfTransitionsForSequence",thermostatsetWeeklySchedulenumberOfTransitionsForSequenceCommandParameterInfo);
      
       CommandParameterInfo thermostatsetWeeklyScheduledayOfWeekForSequenceCommandParameterInfo = new CommandParameterInfo("dayOfWeekForSequence", Integer.class, Integer.class);
       thermostatsetWeeklyScheduleCommandParams.put("dayOfWeekForSequence",thermostatsetWeeklyScheduledayOfWeekForSequenceCommandParameterInfo);
      
       CommandParameterInfo thermostatsetWeeklySchedulemodeForSequenceCommandParameterInfo = new CommandParameterInfo("modeForSequence", Integer.class, Integer.class);
       thermostatsetWeeklyScheduleCommandParams.put("modeForSequence",thermostatsetWeeklySchedulemodeForSequenceCommandParameterInfo);
      
       InteractionInfo thermostatsetWeeklyScheduleInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.Thermostat.ID, ClusterIDMapping.Thermostat.Command.SetWeeklySchedule.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.ThermostatCluster) cluster)
         //  .setWeeklySchedule((DefaultClusterCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("numberOfTransitionsForSequence")
         //  
         //  , (Integer)
         //  commandArguments.get("dayOfWeekForSequence")
         //  
         //  , (Integer)
         //  commandArguments.get("modeForSequence")
         //  
         //  , (ArrayList<ChipStructs.ThermostatClusterThermostatScheduleTransition>)
         //  commandArguments.get("transitions")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           thermostatsetWeeklyScheduleCommandParams
       );
       thermostatClusterInteractionInfoMap.put("setWeeklySchedule", thermostatsetWeeklyScheduleInteractionInfo);
     Map<String, CommandParameterInfo> thermostatgetWeeklyScheduleCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo thermostatgetWeeklyScheduledaysToReturnCommandParameterInfo = new CommandParameterInfo("daysToReturn", Integer.class, Integer.class);
       thermostatgetWeeklyScheduleCommandParams.put("daysToReturn",thermostatgetWeeklyScheduledaysToReturnCommandParameterInfo);
      
       CommandParameterInfo thermostatgetWeeklySchedulemodeToReturnCommandParameterInfo = new CommandParameterInfo("modeToReturn", Integer.class, Integer.class);
       thermostatgetWeeklyScheduleCommandParams.put("modeToReturn",thermostatgetWeeklySchedulemodeToReturnCommandParameterInfo);
     
       InteractionInfo thermostatgetWeeklyScheduleInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.Thermostat.ID, ClusterIDMapping.Thermostat.Command.GetWeeklySchedule.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.ThermostatCluster) cluster)
         //  .getWeeklySchedule((ChipClusters.ThermostatCluster.GetWeeklyScheduleResponseCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("daysToReturn")
         //  
         //  , (Integer)
         //  commandArguments.get("modeToReturn")
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedThermostatClusterGetWeeklyScheduleResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           thermostatgetWeeklyScheduleCommandParams
       );
       thermostatClusterInteractionInfoMap.put("getWeeklySchedule", thermostatgetWeeklyScheduleInteractionInfo);
     Map<String, CommandParameterInfo> thermostatclearWeeklyScheduleCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       InteractionInfo thermostatclearWeeklyScheduleInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.Thermostat.ID, ClusterIDMapping.Thermostat.Command.ClearWeeklySchedule.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.ThermostatCluster) cluster)
         //  .clearWeeklySchedule((DefaultClusterCallback) callback
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           thermostatclearWeeklyScheduleCommandParams
       );
       thermostatClusterInteractionInfoMap.put("clearWeeklySchedule", thermostatclearWeeklyScheduleInteractionInfo);
     commandMap.put("thermostat", thermostatClusterInteractionInfoMap);
     Map<String, InteractionInfo> fanControlClusterInteractionInfoMap = new LinkedHashMap<>();
     Map<String, CommandParameterInfo> fanControlstepCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo fanControlstepdirectionCommandParameterInfo = new CommandParameterInfo("direction", Integer.class, Integer.class);
       fanControlstepCommandParams.put("direction",fanControlstepdirectionCommandParameterInfo);
      
       CommandParameterInfo fanControlstepwrapCommandParameterInfo = new CommandParameterInfo("wrap", Optional.class, Boolean.class);
       fanControlstepCommandParams.put("wrap",fanControlstepwrapCommandParameterInfo);
      
       CommandParameterInfo fanControlsteplowestOffCommandParameterInfo = new CommandParameterInfo("lowestOff", Optional.class, Boolean.class);
       fanControlstepCommandParams.put("lowestOff",fanControlsteplowestOffCommandParameterInfo);
     
       InteractionInfo fanControlstepInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.FanControl.ID, ClusterIDMapping.FanControl.Command.Step.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.FanControlCluster) cluster)
         //  .step((DefaultClusterCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("direction")
         //  
         //  , (Optional<Boolean>)
         //  commandArguments.get("wrap")
         //  
         //  , (Optional<Boolean>)
         //  commandArguments.get("lowestOff")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           fanControlstepCommandParams
       );
       fanControlClusterInteractionInfoMap.put("step", fanControlstepInteractionInfo);
     commandMap.put("fanControl", fanControlClusterInteractionInfoMap);
     Map<String, InteractionInfo> thermostatUserInterfaceConfigurationClusterInteractionInfoMap = new LinkedHashMap<>();
     commandMap.put("thermostatUserInterfaceConfiguration", thermostatUserInterfaceConfigurationClusterInteractionInfoMap);
     Map<String, InteractionInfo> colorControlClusterInteractionInfoMap = new LinkedHashMap<>();
     Map<String, CommandParameterInfo> colorControlmoveToHueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo colorControlmoveToHuehueCommandParameterInfo = new CommandParameterInfo("hue", Integer.class, Integer.class);
       colorControlmoveToHueCommandParams.put("hue",colorControlmoveToHuehueCommandParameterInfo);
      
       CommandParameterInfo colorControlmoveToHuedirectionCommandParameterInfo = new CommandParameterInfo("direction", Integer.class, Integer.class);
       colorControlmoveToHueCommandParams.put("direction",colorControlmoveToHuedirectionCommandParameterInfo);
      
       CommandParameterInfo colorControlmoveToHuetransitionTimeCommandParameterInfo = new CommandParameterInfo("transitionTime", Integer.class, Integer.class);
       colorControlmoveToHueCommandParams.put("transitionTime",colorControlmoveToHuetransitionTimeCommandParameterInfo);
      
       CommandParameterInfo colorControlmoveToHueoptionsMaskCommandParameterInfo = new CommandParameterInfo("optionsMask", Integer.class, Integer.class);
       colorControlmoveToHueCommandParams.put("optionsMask",colorControlmoveToHueoptionsMaskCommandParameterInfo);
      
       CommandParameterInfo colorControlmoveToHueoptionsOverrideCommandParameterInfo = new CommandParameterInfo("optionsOverride", Integer.class, Integer.class);
       colorControlmoveToHueCommandParams.put("optionsOverride",colorControlmoveToHueoptionsOverrideCommandParameterInfo);
     
       InteractionInfo colorControlmoveToHueInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Command.MoveToHue.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.ColorControlCluster) cluster)
         //  .moveToHue((DefaultClusterCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("hue")
         //  
         //  , (Integer)
         //  commandArguments.get("direction")
         //  
         //  , (Integer)
         //  commandArguments.get("transitionTime")
         //  
         //  , (Integer)
         //  commandArguments.get("optionsMask")
         //  
         //  , (Integer)
         //  commandArguments.get("optionsOverride")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           colorControlmoveToHueCommandParams
       );
       colorControlClusterInteractionInfoMap.put("moveToHue", colorControlmoveToHueInteractionInfo);
     Map<String, CommandParameterInfo> colorControlmoveHueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo colorControlmoveHuemoveModeCommandParameterInfo = new CommandParameterInfo("moveMode", Integer.class, Integer.class);
       colorControlmoveHueCommandParams.put("moveMode",colorControlmoveHuemoveModeCommandParameterInfo);
      
       CommandParameterInfo colorControlmoveHuerateCommandParameterInfo = new CommandParameterInfo("rate", Integer.class, Integer.class);
       colorControlmoveHueCommandParams.put("rate",colorControlmoveHuerateCommandParameterInfo);
      
       CommandParameterInfo colorControlmoveHueoptionsMaskCommandParameterInfo = new CommandParameterInfo("optionsMask", Integer.class, Integer.class);
       colorControlmoveHueCommandParams.put("optionsMask",colorControlmoveHueoptionsMaskCommandParameterInfo);
      
       CommandParameterInfo colorControlmoveHueoptionsOverrideCommandParameterInfo = new CommandParameterInfo("optionsOverride", Integer.class, Integer.class);
       colorControlmoveHueCommandParams.put("optionsOverride",colorControlmoveHueoptionsOverrideCommandParameterInfo);
     
       InteractionInfo colorControlmoveHueInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Command.MoveHue.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.ColorControlCluster) cluster)
         //  .moveHue((DefaultClusterCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("moveMode")
         //  
         //  , (Integer)
         //  commandArguments.get("rate")
         //  
         //  , (Integer)
         //  commandArguments.get("optionsMask")
         //  
         //  , (Integer)
         //  commandArguments.get("optionsOverride")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           colorControlmoveHueCommandParams
       );
       colorControlClusterInteractionInfoMap.put("moveHue", colorControlmoveHueInteractionInfo);
     Map<String, CommandParameterInfo> colorControlstepHueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo colorControlstepHuestepModeCommandParameterInfo = new CommandParameterInfo("stepMode", Integer.class, Integer.class);
       colorControlstepHueCommandParams.put("stepMode",colorControlstepHuestepModeCommandParameterInfo);
      
       CommandParameterInfo colorControlstepHuestepSizeCommandParameterInfo = new CommandParameterInfo("stepSize", Integer.class, Integer.class);
       colorControlstepHueCommandParams.put("stepSize",colorControlstepHuestepSizeCommandParameterInfo);
      
       CommandParameterInfo colorControlstepHuetransitionTimeCommandParameterInfo = new CommandParameterInfo("transitionTime", Integer.class, Integer.class);
       colorControlstepHueCommandParams.put("transitionTime",colorControlstepHuetransitionTimeCommandParameterInfo);
      
       CommandParameterInfo colorControlstepHueoptionsMaskCommandParameterInfo = new CommandParameterInfo("optionsMask", Integer.class, Integer.class);
       colorControlstepHueCommandParams.put("optionsMask",colorControlstepHueoptionsMaskCommandParameterInfo);
      
       CommandParameterInfo colorControlstepHueoptionsOverrideCommandParameterInfo = new CommandParameterInfo("optionsOverride", Integer.class, Integer.class);
       colorControlstepHueCommandParams.put("optionsOverride",colorControlstepHueoptionsOverrideCommandParameterInfo);
     
       InteractionInfo colorControlstepHueInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Command.StepHue.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.ColorControlCluster) cluster)
         //  .stepHue((DefaultClusterCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("stepMode")
         //  
         //  , (Integer)
         //  commandArguments.get("stepSize")
         //  
         //  , (Integer)
         //  commandArguments.get("transitionTime")
         //  
         //  , (Integer)
         //  commandArguments.get("optionsMask")
         //  
         //  , (Integer)
         //  commandArguments.get("optionsOverride")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           colorControlstepHueCommandParams
       );
       colorControlClusterInteractionInfoMap.put("stepHue", colorControlstepHueInteractionInfo);
     Map<String, CommandParameterInfo> colorControlmoveToSaturationCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo colorControlmoveToSaturationsaturationCommandParameterInfo = new CommandParameterInfo("saturation", Integer.class, Integer.class);
       colorControlmoveToSaturationCommandParams.put("saturation",colorControlmoveToSaturationsaturationCommandParameterInfo);
      
       CommandParameterInfo colorControlmoveToSaturationtransitionTimeCommandParameterInfo = new CommandParameterInfo("transitionTime", Integer.class, Integer.class);
       colorControlmoveToSaturationCommandParams.put("transitionTime",colorControlmoveToSaturationtransitionTimeCommandParameterInfo);
      
       CommandParameterInfo colorControlmoveToSaturationoptionsMaskCommandParameterInfo = new CommandParameterInfo("optionsMask", Integer.class, Integer.class);
       colorControlmoveToSaturationCommandParams.put("optionsMask",colorControlmoveToSaturationoptionsMaskCommandParameterInfo);
      
       CommandParameterInfo colorControlmoveToSaturationoptionsOverrideCommandParameterInfo = new CommandParameterInfo("optionsOverride", Integer.class, Integer.class);
       colorControlmoveToSaturationCommandParams.put("optionsOverride",colorControlmoveToSaturationoptionsOverrideCommandParameterInfo);
     
       InteractionInfo colorControlmoveToSaturationInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Command.MoveToSaturation.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.ColorControlCluster) cluster)
         //  .moveToSaturation((DefaultClusterCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("saturation")
         //  
         //  , (Integer)
         //  commandArguments.get("transitionTime")
         //  
         //  , (Integer)
         //  commandArguments.get("optionsMask")
         //  
         //  , (Integer)
         //  commandArguments.get("optionsOverride")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           colorControlmoveToSaturationCommandParams
       );
       colorControlClusterInteractionInfoMap.put("moveToSaturation", colorControlmoveToSaturationInteractionInfo);
     Map<String, CommandParameterInfo> colorControlmoveSaturationCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo colorControlmoveSaturationmoveModeCommandParameterInfo = new CommandParameterInfo("moveMode", Integer.class, Integer.class);
       colorControlmoveSaturationCommandParams.put("moveMode",colorControlmoveSaturationmoveModeCommandParameterInfo);
      
       CommandParameterInfo colorControlmoveSaturationrateCommandParameterInfo = new CommandParameterInfo("rate", Integer.class, Integer.class);
       colorControlmoveSaturationCommandParams.put("rate",colorControlmoveSaturationrateCommandParameterInfo);
      
       CommandParameterInfo colorControlmoveSaturationoptionsMaskCommandParameterInfo = new CommandParameterInfo("optionsMask", Integer.class, Integer.class);
       colorControlmoveSaturationCommandParams.put("optionsMask",colorControlmoveSaturationoptionsMaskCommandParameterInfo);
      
       CommandParameterInfo colorControlmoveSaturationoptionsOverrideCommandParameterInfo = new CommandParameterInfo("optionsOverride", Integer.class, Integer.class);
       colorControlmoveSaturationCommandParams.put("optionsOverride",colorControlmoveSaturationoptionsOverrideCommandParameterInfo);
     
       InteractionInfo colorControlmoveSaturationInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Command.MoveSaturation.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.ColorControlCluster) cluster)
         //  .moveSaturation((DefaultClusterCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("moveMode")
         //  
         //  , (Integer)
         //  commandArguments.get("rate")
         //  
         //  , (Integer)
         //  commandArguments.get("optionsMask")
         //  
         //  , (Integer)
         //  commandArguments.get("optionsOverride")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           colorControlmoveSaturationCommandParams
       );
       colorControlClusterInteractionInfoMap.put("moveSaturation", colorControlmoveSaturationInteractionInfo);
     Map<String, CommandParameterInfo> colorControlstepSaturationCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo colorControlstepSaturationstepModeCommandParameterInfo = new CommandParameterInfo("stepMode", Integer.class, Integer.class);
       colorControlstepSaturationCommandParams.put("stepMode",colorControlstepSaturationstepModeCommandParameterInfo);
      
       CommandParameterInfo colorControlstepSaturationstepSizeCommandParameterInfo = new CommandParameterInfo("stepSize", Integer.class, Integer.class);
       colorControlstepSaturationCommandParams.put("stepSize",colorControlstepSaturationstepSizeCommandParameterInfo);
      
       CommandParameterInfo colorControlstepSaturationtransitionTimeCommandParameterInfo = new CommandParameterInfo("transitionTime", Integer.class, Integer.class);
       colorControlstepSaturationCommandParams.put("transitionTime",colorControlstepSaturationtransitionTimeCommandParameterInfo);
      
       CommandParameterInfo colorControlstepSaturationoptionsMaskCommandParameterInfo = new CommandParameterInfo("optionsMask", Integer.class, Integer.class);
       colorControlstepSaturationCommandParams.put("optionsMask",colorControlstepSaturationoptionsMaskCommandParameterInfo);
      
       CommandParameterInfo colorControlstepSaturationoptionsOverrideCommandParameterInfo = new CommandParameterInfo("optionsOverride", Integer.class, Integer.class);
       colorControlstepSaturationCommandParams.put("optionsOverride",colorControlstepSaturationoptionsOverrideCommandParameterInfo);
     
       InteractionInfo colorControlstepSaturationInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Command.StepSaturation.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.ColorControlCluster) cluster)
         //  .stepSaturation((DefaultClusterCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("stepMode")
         //  
         //  , (Integer)
         //  commandArguments.get("stepSize")
         //  
         //  , (Integer)
         //  commandArguments.get("transitionTime")
         //  
         //  , (Integer)
         //  commandArguments.get("optionsMask")
         //  
         //  , (Integer)
         //  commandArguments.get("optionsOverride")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           colorControlstepSaturationCommandParams
       );
       colorControlClusterInteractionInfoMap.put("stepSaturation", colorControlstepSaturationInteractionInfo);
     Map<String, CommandParameterInfo> colorControlmoveToHueAndSaturationCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo colorControlmoveToHueAndSaturationhueCommandParameterInfo = new CommandParameterInfo("hue", Integer.class, Integer.class);
       colorControlmoveToHueAndSaturationCommandParams.put("hue",colorControlmoveToHueAndSaturationhueCommandParameterInfo);
      
       CommandParameterInfo colorControlmoveToHueAndSaturationsaturationCommandParameterInfo = new CommandParameterInfo("saturation", Integer.class, Integer.class);
       colorControlmoveToHueAndSaturationCommandParams.put("saturation",colorControlmoveToHueAndSaturationsaturationCommandParameterInfo);
      
       CommandParameterInfo colorControlmoveToHueAndSaturationtransitionTimeCommandParameterInfo = new CommandParameterInfo("transitionTime", Integer.class, Integer.class);
       colorControlmoveToHueAndSaturationCommandParams.put("transitionTime",colorControlmoveToHueAndSaturationtransitionTimeCommandParameterInfo);
      
       CommandParameterInfo colorControlmoveToHueAndSaturationoptionsMaskCommandParameterInfo = new CommandParameterInfo("optionsMask", Integer.class, Integer.class);
       colorControlmoveToHueAndSaturationCommandParams.put("optionsMask",colorControlmoveToHueAndSaturationoptionsMaskCommandParameterInfo);
      
       CommandParameterInfo colorControlmoveToHueAndSaturationoptionsOverrideCommandParameterInfo = new CommandParameterInfo("optionsOverride", Integer.class, Integer.class);
       colorControlmoveToHueAndSaturationCommandParams.put("optionsOverride",colorControlmoveToHueAndSaturationoptionsOverrideCommandParameterInfo);
     
       InteractionInfo colorControlmoveToHueAndSaturationInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Command.MoveToHueAndSaturation.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.ColorControlCluster) cluster)
         //  .moveToHueAndSaturation((DefaultClusterCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("hue")
         //  
         //  , (Integer)
         //  commandArguments.get("saturation")
         //  
         //  , (Integer)
         //  commandArguments.get("transitionTime")
         //  
         //  , (Integer)
         //  commandArguments.get("optionsMask")
         //  
         //  , (Integer)
         //  commandArguments.get("optionsOverride")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           colorControlmoveToHueAndSaturationCommandParams
       );
       colorControlClusterInteractionInfoMap.put("moveToHueAndSaturation", colorControlmoveToHueAndSaturationInteractionInfo);
     Map<String, CommandParameterInfo> colorControlmoveToColorCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo colorControlmoveToColorcolorXCommandParameterInfo = new CommandParameterInfo("colorX", Integer.class, Integer.class);
       colorControlmoveToColorCommandParams.put("colorX",colorControlmoveToColorcolorXCommandParameterInfo);
      
       CommandParameterInfo colorControlmoveToColorcolorYCommandParameterInfo = new CommandParameterInfo("colorY", Integer.class, Integer.class);
       colorControlmoveToColorCommandParams.put("colorY",colorControlmoveToColorcolorYCommandParameterInfo);
      
       CommandParameterInfo colorControlmoveToColortransitionTimeCommandParameterInfo = new CommandParameterInfo("transitionTime", Integer.class, Integer.class);
       colorControlmoveToColorCommandParams.put("transitionTime",colorControlmoveToColortransitionTimeCommandParameterInfo);
      
       CommandParameterInfo colorControlmoveToColoroptionsMaskCommandParameterInfo = new CommandParameterInfo("optionsMask", Integer.class, Integer.class);
       colorControlmoveToColorCommandParams.put("optionsMask",colorControlmoveToColoroptionsMaskCommandParameterInfo);
      
       CommandParameterInfo colorControlmoveToColoroptionsOverrideCommandParameterInfo = new CommandParameterInfo("optionsOverride", Integer.class, Integer.class);
       colorControlmoveToColorCommandParams.put("optionsOverride",colorControlmoveToColoroptionsOverrideCommandParameterInfo);
     
       InteractionInfo colorControlmoveToColorInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Command.MoveToColor.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.ColorControlCluster) cluster)
         //  .moveToColor((DefaultClusterCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("colorX")
         //  
         //  , (Integer)
         //  commandArguments.get("colorY")
         //  
         //  , (Integer)
         //  commandArguments.get("transitionTime")
         //  
         //  , (Integer)
         //  commandArguments.get("optionsMask")
         //  
         //  , (Integer)
         //  commandArguments.get("optionsOverride")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           colorControlmoveToColorCommandParams
       );
       colorControlClusterInteractionInfoMap.put("moveToColor", colorControlmoveToColorInteractionInfo);
     Map<String, CommandParameterInfo> colorControlmoveColorCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo colorControlmoveColorrateXCommandParameterInfo = new CommandParameterInfo("rateX", Integer.class, Integer.class);
       colorControlmoveColorCommandParams.put("rateX",colorControlmoveColorrateXCommandParameterInfo);
      
       CommandParameterInfo colorControlmoveColorrateYCommandParameterInfo = new CommandParameterInfo("rateY", Integer.class, Integer.class);
       colorControlmoveColorCommandParams.put("rateY",colorControlmoveColorrateYCommandParameterInfo);
      
       CommandParameterInfo colorControlmoveColoroptionsMaskCommandParameterInfo = new CommandParameterInfo("optionsMask", Integer.class, Integer.class);
       colorControlmoveColorCommandParams.put("optionsMask",colorControlmoveColoroptionsMaskCommandParameterInfo);
      
       CommandParameterInfo colorControlmoveColoroptionsOverrideCommandParameterInfo = new CommandParameterInfo("optionsOverride", Integer.class, Integer.class);
       colorControlmoveColorCommandParams.put("optionsOverride",colorControlmoveColoroptionsOverrideCommandParameterInfo);
     
       InteractionInfo colorControlmoveColorInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Command.MoveColor.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.ColorControlCluster) cluster)
         //  .moveColor((DefaultClusterCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("rateX")
         //  
         //  , (Integer)
         //  commandArguments.get("rateY")
         //  
         //  , (Integer)
         //  commandArguments.get("optionsMask")
         //  
         //  , (Integer)
         //  commandArguments.get("optionsOverride")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           colorControlmoveColorCommandParams
       );
       colorControlClusterInteractionInfoMap.put("moveColor", colorControlmoveColorInteractionInfo);
     Map<String, CommandParameterInfo> colorControlstepColorCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo colorControlstepColorstepXCommandParameterInfo = new CommandParameterInfo("stepX", Integer.class, Integer.class);
       colorControlstepColorCommandParams.put("stepX",colorControlstepColorstepXCommandParameterInfo);
      
       CommandParameterInfo colorControlstepColorstepYCommandParameterInfo = new CommandParameterInfo("stepY", Integer.class, Integer.class);
       colorControlstepColorCommandParams.put("stepY",colorControlstepColorstepYCommandParameterInfo);
      
       CommandParameterInfo colorControlstepColortransitionTimeCommandParameterInfo = new CommandParameterInfo("transitionTime", Integer.class, Integer.class);
       colorControlstepColorCommandParams.put("transitionTime",colorControlstepColortransitionTimeCommandParameterInfo);
      
       CommandParameterInfo colorControlstepColoroptionsMaskCommandParameterInfo = new CommandParameterInfo("optionsMask", Integer.class, Integer.class);
       colorControlstepColorCommandParams.put("optionsMask",colorControlstepColoroptionsMaskCommandParameterInfo);
      
       CommandParameterInfo colorControlstepColoroptionsOverrideCommandParameterInfo = new CommandParameterInfo("optionsOverride", Integer.class, Integer.class);
       colorControlstepColorCommandParams.put("optionsOverride",colorControlstepColoroptionsOverrideCommandParameterInfo);
     
       InteractionInfo colorControlstepColorInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Command.StepColor.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.ColorControlCluster) cluster)
         //  .stepColor((DefaultClusterCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("stepX")
         //  
         //  , (Integer)
         //  commandArguments.get("stepY")
         //  
         //  , (Integer)
         //  commandArguments.get("transitionTime")
         //  
         //  , (Integer)
         //  commandArguments.get("optionsMask")
         //  
         //  , (Integer)
         //  commandArguments.get("optionsOverride")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           colorControlstepColorCommandParams
       );
       colorControlClusterInteractionInfoMap.put("stepColor", colorControlstepColorInteractionInfo);
     Map<String, CommandParameterInfo> colorControlmoveToColorTemperatureCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo colorControlmoveToColorTemperaturecolorTemperatureMiredsCommandParameterInfo = new CommandParameterInfo("colorTemperatureMireds", Integer.class, Integer.class);
       colorControlmoveToColorTemperatureCommandParams.put("colorTemperatureMireds",colorControlmoveToColorTemperaturecolorTemperatureMiredsCommandParameterInfo);
      
       CommandParameterInfo colorControlmoveToColorTemperaturetransitionTimeCommandParameterInfo = new CommandParameterInfo("transitionTime", Integer.class, Integer.class);
       colorControlmoveToColorTemperatureCommandParams.put("transitionTime",colorControlmoveToColorTemperaturetransitionTimeCommandParameterInfo);
      
       CommandParameterInfo colorControlmoveToColorTemperatureoptionsMaskCommandParameterInfo = new CommandParameterInfo("optionsMask", Integer.class, Integer.class);
       colorControlmoveToColorTemperatureCommandParams.put("optionsMask",colorControlmoveToColorTemperatureoptionsMaskCommandParameterInfo);
      
       CommandParameterInfo colorControlmoveToColorTemperatureoptionsOverrideCommandParameterInfo = new CommandParameterInfo("optionsOverride", Integer.class, Integer.class);
       colorControlmoveToColorTemperatureCommandParams.put("optionsOverride",colorControlmoveToColorTemperatureoptionsOverrideCommandParameterInfo);
     
       InteractionInfo colorControlmoveToColorTemperatureInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Command.MoveToColorTemperature.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.ColorControlCluster) cluster)
         //  .moveToColorTemperature((DefaultClusterCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("colorTemperatureMireds")
         //  
         //  , (Integer)
         //  commandArguments.get("transitionTime")
         //  
         //  , (Integer)
         //  commandArguments.get("optionsMask")
         //  
         //  , (Integer)
         //  commandArguments.get("optionsOverride")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           colorControlmoveToColorTemperatureCommandParams
       );
       colorControlClusterInteractionInfoMap.put("moveToColorTemperature", colorControlmoveToColorTemperatureInteractionInfo);
     Map<String, CommandParameterInfo> colorControlenhancedMoveToHueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo colorControlenhancedMoveToHueenhancedHueCommandParameterInfo = new CommandParameterInfo("enhancedHue", Integer.class, Integer.class);
       colorControlenhancedMoveToHueCommandParams.put("enhancedHue",colorControlenhancedMoveToHueenhancedHueCommandParameterInfo);
      
       CommandParameterInfo colorControlenhancedMoveToHuedirectionCommandParameterInfo = new CommandParameterInfo("direction", Integer.class, Integer.class);
       colorControlenhancedMoveToHueCommandParams.put("direction",colorControlenhancedMoveToHuedirectionCommandParameterInfo);
      
       CommandParameterInfo colorControlenhancedMoveToHuetransitionTimeCommandParameterInfo = new CommandParameterInfo("transitionTime", Integer.class, Integer.class);
       colorControlenhancedMoveToHueCommandParams.put("transitionTime",colorControlenhancedMoveToHuetransitionTimeCommandParameterInfo);
      
       CommandParameterInfo colorControlenhancedMoveToHueoptionsMaskCommandParameterInfo = new CommandParameterInfo("optionsMask", Integer.class, Integer.class);
       colorControlenhancedMoveToHueCommandParams.put("optionsMask",colorControlenhancedMoveToHueoptionsMaskCommandParameterInfo);
      
       CommandParameterInfo colorControlenhancedMoveToHueoptionsOverrideCommandParameterInfo = new CommandParameterInfo("optionsOverride", Integer.class, Integer.class);
       colorControlenhancedMoveToHueCommandParams.put("optionsOverride",colorControlenhancedMoveToHueoptionsOverrideCommandParameterInfo);
     
       InteractionInfo colorControlenhancedMoveToHueInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Command.EnhancedMoveToHue.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.ColorControlCluster) cluster)
         //  .enhancedMoveToHue((DefaultClusterCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("enhancedHue")
         //  
         //  , (Integer)
         //  commandArguments.get("direction")
         //  
         //  , (Integer)
         //  commandArguments.get("transitionTime")
         //  
         //  , (Integer)
         //  commandArguments.get("optionsMask")
         //  
         //  , (Integer)
         //  commandArguments.get("optionsOverride")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           colorControlenhancedMoveToHueCommandParams
       );
       colorControlClusterInteractionInfoMap.put("enhancedMoveToHue", colorControlenhancedMoveToHueInteractionInfo);
     Map<String, CommandParameterInfo> colorControlenhancedMoveHueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo colorControlenhancedMoveHuemoveModeCommandParameterInfo = new CommandParameterInfo("moveMode", Integer.class, Integer.class);
       colorControlenhancedMoveHueCommandParams.put("moveMode",colorControlenhancedMoveHuemoveModeCommandParameterInfo);
      
       CommandParameterInfo colorControlenhancedMoveHuerateCommandParameterInfo = new CommandParameterInfo("rate", Integer.class, Integer.class);
       colorControlenhancedMoveHueCommandParams.put("rate",colorControlenhancedMoveHuerateCommandParameterInfo);
      
       CommandParameterInfo colorControlenhancedMoveHueoptionsMaskCommandParameterInfo = new CommandParameterInfo("optionsMask", Integer.class, Integer.class);
       colorControlenhancedMoveHueCommandParams.put("optionsMask",colorControlenhancedMoveHueoptionsMaskCommandParameterInfo);
      
       CommandParameterInfo colorControlenhancedMoveHueoptionsOverrideCommandParameterInfo = new CommandParameterInfo("optionsOverride", Integer.class, Integer.class);
       colorControlenhancedMoveHueCommandParams.put("optionsOverride",colorControlenhancedMoveHueoptionsOverrideCommandParameterInfo);
     
       InteractionInfo colorControlenhancedMoveHueInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Command.EnhancedMoveHue.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.ColorControlCluster) cluster)
         //  .enhancedMoveHue((DefaultClusterCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("moveMode")
         //  
         //  , (Integer)
         //  commandArguments.get("rate")
         //  
         //  , (Integer)
         //  commandArguments.get("optionsMask")
         //  
         //  , (Integer)
         //  commandArguments.get("optionsOverride")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           colorControlenhancedMoveHueCommandParams
       );
       colorControlClusterInteractionInfoMap.put("enhancedMoveHue", colorControlenhancedMoveHueInteractionInfo);
     Map<String, CommandParameterInfo> colorControlenhancedStepHueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo colorControlenhancedStepHuestepModeCommandParameterInfo = new CommandParameterInfo("stepMode", Integer.class, Integer.class);
       colorControlenhancedStepHueCommandParams.put("stepMode",colorControlenhancedStepHuestepModeCommandParameterInfo);
      
       CommandParameterInfo colorControlenhancedStepHuestepSizeCommandParameterInfo = new CommandParameterInfo("stepSize", Integer.class, Integer.class);
       colorControlenhancedStepHueCommandParams.put("stepSize",colorControlenhancedStepHuestepSizeCommandParameterInfo);
      
       CommandParameterInfo colorControlenhancedStepHuetransitionTimeCommandParameterInfo = new CommandParameterInfo("transitionTime", Integer.class, Integer.class);
       colorControlenhancedStepHueCommandParams.put("transitionTime",colorControlenhancedStepHuetransitionTimeCommandParameterInfo);
      
       CommandParameterInfo colorControlenhancedStepHueoptionsMaskCommandParameterInfo = new CommandParameterInfo("optionsMask", Integer.class, Integer.class);
       colorControlenhancedStepHueCommandParams.put("optionsMask",colorControlenhancedStepHueoptionsMaskCommandParameterInfo);
      
       CommandParameterInfo colorControlenhancedStepHueoptionsOverrideCommandParameterInfo = new CommandParameterInfo("optionsOverride", Integer.class, Integer.class);
       colorControlenhancedStepHueCommandParams.put("optionsOverride",colorControlenhancedStepHueoptionsOverrideCommandParameterInfo);
     
       InteractionInfo colorControlenhancedStepHueInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Command.EnhancedStepHue.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.ColorControlCluster) cluster)
         //  .enhancedStepHue((DefaultClusterCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("stepMode")
         //  
         //  , (Integer)
         //  commandArguments.get("stepSize")
         //  
         //  , (Integer)
         //  commandArguments.get("transitionTime")
         //  
         //  , (Integer)
         //  commandArguments.get("optionsMask")
         //  
         //  , (Integer)
         //  commandArguments.get("optionsOverride")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           colorControlenhancedStepHueCommandParams
       );
       colorControlClusterInteractionInfoMap.put("enhancedStepHue", colorControlenhancedStepHueInteractionInfo);
     Map<String, CommandParameterInfo> colorControlenhancedMoveToHueAndSaturationCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo colorControlenhancedMoveToHueAndSaturationenhancedHueCommandParameterInfo = new CommandParameterInfo("enhancedHue", Integer.class, Integer.class);
       colorControlenhancedMoveToHueAndSaturationCommandParams.put("enhancedHue",colorControlenhancedMoveToHueAndSaturationenhancedHueCommandParameterInfo);
      
       CommandParameterInfo colorControlenhancedMoveToHueAndSaturationsaturationCommandParameterInfo = new CommandParameterInfo("saturation", Integer.class, Integer.class);
       colorControlenhancedMoveToHueAndSaturationCommandParams.put("saturation",colorControlenhancedMoveToHueAndSaturationsaturationCommandParameterInfo);
      
       CommandParameterInfo colorControlenhancedMoveToHueAndSaturationtransitionTimeCommandParameterInfo = new CommandParameterInfo("transitionTime", Integer.class, Integer.class);
       colorControlenhancedMoveToHueAndSaturationCommandParams.put("transitionTime",colorControlenhancedMoveToHueAndSaturationtransitionTimeCommandParameterInfo);
      
       CommandParameterInfo colorControlenhancedMoveToHueAndSaturationoptionsMaskCommandParameterInfo = new CommandParameterInfo("optionsMask", Integer.class, Integer.class);
       colorControlenhancedMoveToHueAndSaturationCommandParams.put("optionsMask",colorControlenhancedMoveToHueAndSaturationoptionsMaskCommandParameterInfo);
      
       CommandParameterInfo colorControlenhancedMoveToHueAndSaturationoptionsOverrideCommandParameterInfo = new CommandParameterInfo("optionsOverride", Integer.class, Integer.class);
       colorControlenhancedMoveToHueAndSaturationCommandParams.put("optionsOverride",colorControlenhancedMoveToHueAndSaturationoptionsOverrideCommandParameterInfo);
     
       InteractionInfo colorControlenhancedMoveToHueAndSaturationInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Command.EnhancedMoveToHueAndSaturation.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.ColorControlCluster) cluster)
         //  .enhancedMoveToHueAndSaturation((DefaultClusterCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("enhancedHue")
         //  
         //  , (Integer)
         //  commandArguments.get("saturation")
         //  
         //  , (Integer)
         //  commandArguments.get("transitionTime")
         //  
         //  , (Integer)
         //  commandArguments.get("optionsMask")
         //  
         //  , (Integer)
         //  commandArguments.get("optionsOverride")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           colorControlenhancedMoveToHueAndSaturationCommandParams
       );
       colorControlClusterInteractionInfoMap.put("enhancedMoveToHueAndSaturation", colorControlenhancedMoveToHueAndSaturationInteractionInfo);
     Map<String, CommandParameterInfo> colorControlcolorLoopSetCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo colorControlcolorLoopSetupdateFlagsCommandParameterInfo = new CommandParameterInfo("updateFlags", Integer.class, Integer.class);
       colorControlcolorLoopSetCommandParams.put("updateFlags",colorControlcolorLoopSetupdateFlagsCommandParameterInfo);
      
       CommandParameterInfo colorControlcolorLoopSetactionCommandParameterInfo = new CommandParameterInfo("action", Integer.class, Integer.class);
       colorControlcolorLoopSetCommandParams.put("action",colorControlcolorLoopSetactionCommandParameterInfo);
      
       CommandParameterInfo colorControlcolorLoopSetdirectionCommandParameterInfo = new CommandParameterInfo("direction", Integer.class, Integer.class);
       colorControlcolorLoopSetCommandParams.put("direction",colorControlcolorLoopSetdirectionCommandParameterInfo);
      
       CommandParameterInfo colorControlcolorLoopSettimeCommandParameterInfo = new CommandParameterInfo("time", Integer.class, Integer.class);
       colorControlcolorLoopSetCommandParams.put("time",colorControlcolorLoopSettimeCommandParameterInfo);
      
       CommandParameterInfo colorControlcolorLoopSetstartHueCommandParameterInfo = new CommandParameterInfo("startHue", Integer.class, Integer.class);
       colorControlcolorLoopSetCommandParams.put("startHue",colorControlcolorLoopSetstartHueCommandParameterInfo);
      
       CommandParameterInfo colorControlcolorLoopSetoptionsMaskCommandParameterInfo = new CommandParameterInfo("optionsMask", Integer.class, Integer.class);
       colorControlcolorLoopSetCommandParams.put("optionsMask",colorControlcolorLoopSetoptionsMaskCommandParameterInfo);
      
       CommandParameterInfo colorControlcolorLoopSetoptionsOverrideCommandParameterInfo = new CommandParameterInfo("optionsOverride", Integer.class, Integer.class);
       colorControlcolorLoopSetCommandParams.put("optionsOverride",colorControlcolorLoopSetoptionsOverrideCommandParameterInfo);
     
       InteractionInfo colorControlcolorLoopSetInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Command.ColorLoopSet.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.ColorControlCluster) cluster)
         //  .colorLoopSet((DefaultClusterCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("updateFlags")
         //  
         //  , (Integer)
         //  commandArguments.get("action")
         //  
         //  , (Integer)
         //  commandArguments.get("direction")
         //  
         //  , (Integer)
         //  commandArguments.get("time")
         //  
         //  , (Integer)
         //  commandArguments.get("startHue")
         //  
         //  , (Integer)
         //  commandArguments.get("optionsMask")
         //  
         //  , (Integer)
         //  commandArguments.get("optionsOverride")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           colorControlcolorLoopSetCommandParams
       );
       colorControlClusterInteractionInfoMap.put("colorLoopSet", colorControlcolorLoopSetInteractionInfo);
     Map<String, CommandParameterInfo> colorControlstopMoveStepCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo colorControlstopMoveStepoptionsMaskCommandParameterInfo = new CommandParameterInfo("optionsMask", Integer.class, Integer.class);
       colorControlstopMoveStepCommandParams.put("optionsMask",colorControlstopMoveStepoptionsMaskCommandParameterInfo);
      
       CommandParameterInfo colorControlstopMoveStepoptionsOverrideCommandParameterInfo = new CommandParameterInfo("optionsOverride", Integer.class, Integer.class);
       colorControlstopMoveStepCommandParams.put("optionsOverride",colorControlstopMoveStepoptionsOverrideCommandParameterInfo);
     
       InteractionInfo colorControlstopMoveStepInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Command.StopMoveStep.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.ColorControlCluster) cluster)
         //  .stopMoveStep((DefaultClusterCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("optionsMask")
         //  
         //  , (Integer)
         //  commandArguments.get("optionsOverride")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           colorControlstopMoveStepCommandParams
       );
       colorControlClusterInteractionInfoMap.put("stopMoveStep", colorControlstopMoveStepInteractionInfo);
     Map<String, CommandParameterInfo> colorControlmoveColorTemperatureCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo colorControlmoveColorTemperaturemoveModeCommandParameterInfo = new CommandParameterInfo("moveMode", Integer.class, Integer.class);
       colorControlmoveColorTemperatureCommandParams.put("moveMode",colorControlmoveColorTemperaturemoveModeCommandParameterInfo);
      
       CommandParameterInfo colorControlmoveColorTemperaturerateCommandParameterInfo = new CommandParameterInfo("rate", Integer.class, Integer.class);
       colorControlmoveColorTemperatureCommandParams.put("rate",colorControlmoveColorTemperaturerateCommandParameterInfo);
      
       CommandParameterInfo colorControlmoveColorTemperaturecolorTemperatureMinimumMiredsCommandParameterInfo = new CommandParameterInfo("colorTemperatureMinimumMireds", Integer.class, Integer.class);
       colorControlmoveColorTemperatureCommandParams.put("colorTemperatureMinimumMireds",colorControlmoveColorTemperaturecolorTemperatureMinimumMiredsCommandParameterInfo);
      
       CommandParameterInfo colorControlmoveColorTemperaturecolorTemperatureMaximumMiredsCommandParameterInfo = new CommandParameterInfo("colorTemperatureMaximumMireds", Integer.class, Integer.class);
       colorControlmoveColorTemperatureCommandParams.put("colorTemperatureMaximumMireds",colorControlmoveColorTemperaturecolorTemperatureMaximumMiredsCommandParameterInfo);
      
       CommandParameterInfo colorControlmoveColorTemperatureoptionsMaskCommandParameterInfo = new CommandParameterInfo("optionsMask", Integer.class, Integer.class);
       colorControlmoveColorTemperatureCommandParams.put("optionsMask",colorControlmoveColorTemperatureoptionsMaskCommandParameterInfo);
      
       CommandParameterInfo colorControlmoveColorTemperatureoptionsOverrideCommandParameterInfo = new CommandParameterInfo("optionsOverride", Integer.class, Integer.class);
       colorControlmoveColorTemperatureCommandParams.put("optionsOverride",colorControlmoveColorTemperatureoptionsOverrideCommandParameterInfo);
     
       InteractionInfo colorControlmoveColorTemperatureInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Command.MoveColorTemperature.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.ColorControlCluster) cluster)
         //  .moveColorTemperature((DefaultClusterCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("moveMode")
         //  
         //  , (Integer)
         //  commandArguments.get("rate")
         //  
         //  , (Integer)
         //  commandArguments.get("colorTemperatureMinimumMireds")
         //  
         //  , (Integer)
         //  commandArguments.get("colorTemperatureMaximumMireds")
         //  
         //  , (Integer)
         //  commandArguments.get("optionsMask")
         //  
         //  , (Integer)
         //  commandArguments.get("optionsOverride")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           colorControlmoveColorTemperatureCommandParams
       );
       colorControlClusterInteractionInfoMap.put("moveColorTemperature", colorControlmoveColorTemperatureInteractionInfo);
     Map<String, CommandParameterInfo> colorControlstepColorTemperatureCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo colorControlstepColorTemperaturestepModeCommandParameterInfo = new CommandParameterInfo("stepMode", Integer.class, Integer.class);
       colorControlstepColorTemperatureCommandParams.put("stepMode",colorControlstepColorTemperaturestepModeCommandParameterInfo);
      
       CommandParameterInfo colorControlstepColorTemperaturestepSizeCommandParameterInfo = new CommandParameterInfo("stepSize", Integer.class, Integer.class);
       colorControlstepColorTemperatureCommandParams.put("stepSize",colorControlstepColorTemperaturestepSizeCommandParameterInfo);
      
       CommandParameterInfo colorControlstepColorTemperaturetransitionTimeCommandParameterInfo = new CommandParameterInfo("transitionTime", Integer.class, Integer.class);
       colorControlstepColorTemperatureCommandParams.put("transitionTime",colorControlstepColorTemperaturetransitionTimeCommandParameterInfo);
      
       CommandParameterInfo colorControlstepColorTemperaturecolorTemperatureMinimumMiredsCommandParameterInfo = new CommandParameterInfo("colorTemperatureMinimumMireds", Integer.class, Integer.class);
       colorControlstepColorTemperatureCommandParams.put("colorTemperatureMinimumMireds",colorControlstepColorTemperaturecolorTemperatureMinimumMiredsCommandParameterInfo);
      
       CommandParameterInfo colorControlstepColorTemperaturecolorTemperatureMaximumMiredsCommandParameterInfo = new CommandParameterInfo("colorTemperatureMaximumMireds", Integer.class, Integer.class);
       colorControlstepColorTemperatureCommandParams.put("colorTemperatureMaximumMireds",colorControlstepColorTemperaturecolorTemperatureMaximumMiredsCommandParameterInfo);
      
       CommandParameterInfo colorControlstepColorTemperatureoptionsMaskCommandParameterInfo = new CommandParameterInfo("optionsMask", Integer.class, Integer.class);
       colorControlstepColorTemperatureCommandParams.put("optionsMask",colorControlstepColorTemperatureoptionsMaskCommandParameterInfo);
      
       CommandParameterInfo colorControlstepColorTemperatureoptionsOverrideCommandParameterInfo = new CommandParameterInfo("optionsOverride", Integer.class, Integer.class);
       colorControlstepColorTemperatureCommandParams.put("optionsOverride",colorControlstepColorTemperatureoptionsOverrideCommandParameterInfo);
     
       InteractionInfo colorControlstepColorTemperatureInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Command.StepColorTemperature.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.ColorControlCluster) cluster)
         //  .stepColorTemperature((DefaultClusterCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("stepMode")
         //  
         //  , (Integer)
         //  commandArguments.get("stepSize")
         //  
         //  , (Integer)
         //  commandArguments.get("transitionTime")
         //  
         //  , (Integer)
         //  commandArguments.get("colorTemperatureMinimumMireds")
         //  
         //  , (Integer)
         //  commandArguments.get("colorTemperatureMaximumMireds")
         //  
         //  , (Integer)
         //  commandArguments.get("optionsMask")
         //  
         //  , (Integer)
         //  commandArguments.get("optionsOverride")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           colorControlstepColorTemperatureCommandParams
       );
       colorControlClusterInteractionInfoMap.put("stepColorTemperature", colorControlstepColorTemperatureInteractionInfo);
     commandMap.put("colorControl", colorControlClusterInteractionInfoMap);
     Map<String, InteractionInfo> ballastConfigurationClusterInteractionInfoMap = new LinkedHashMap<>();
     commandMap.put("ballastConfiguration", ballastConfigurationClusterInteractionInfoMap);
     Map<String, InteractionInfo> illuminanceMeasurementClusterInteractionInfoMap = new LinkedHashMap<>();
     commandMap.put("illuminanceMeasurement", illuminanceMeasurementClusterInteractionInfoMap);
     Map<String, InteractionInfo> temperatureMeasurementClusterInteractionInfoMap = new LinkedHashMap<>();
     commandMap.put("temperatureMeasurement", temperatureMeasurementClusterInteractionInfoMap);
     Map<String, InteractionInfo> pressureMeasurementClusterInteractionInfoMap = new LinkedHashMap<>();
     commandMap.put("pressureMeasurement", pressureMeasurementClusterInteractionInfoMap);
     Map<String, InteractionInfo> flowMeasurementClusterInteractionInfoMap = new LinkedHashMap<>();
     commandMap.put("flowMeasurement", flowMeasurementClusterInteractionInfoMap);
     Map<String, InteractionInfo> relativeHumidityMeasurementClusterInteractionInfoMap = new LinkedHashMap<>();
     commandMap.put("relativeHumidityMeasurement", relativeHumidityMeasurementClusterInteractionInfoMap);
     Map<String, InteractionInfo> occupancySensingClusterInteractionInfoMap = new LinkedHashMap<>();
     commandMap.put("occupancySensing", occupancySensingClusterInteractionInfoMap);
     Map<String, InteractionInfo> carbonMonoxideConcentrationMeasurementClusterInteractionInfoMap = new LinkedHashMap<>();
     commandMap.put("carbonMonoxideConcentrationMeasurement", carbonMonoxideConcentrationMeasurementClusterInteractionInfoMap);
     Map<String, InteractionInfo> carbonDioxideConcentrationMeasurementClusterInteractionInfoMap = new LinkedHashMap<>();
     commandMap.put("carbonDioxideConcentrationMeasurement", carbonDioxideConcentrationMeasurementClusterInteractionInfoMap);
     Map<String, InteractionInfo> ethyleneConcentrationMeasurementClusterInteractionInfoMap = new LinkedHashMap<>();
     commandMap.put("ethyleneConcentrationMeasurement", ethyleneConcentrationMeasurementClusterInteractionInfoMap);
     Map<String, InteractionInfo> ethyleneOxideConcentrationMeasurementClusterInteractionInfoMap = new LinkedHashMap<>();
     commandMap.put("ethyleneOxideConcentrationMeasurement", ethyleneOxideConcentrationMeasurementClusterInteractionInfoMap);
     Map<String, InteractionInfo> hydrogenConcentrationMeasurementClusterInteractionInfoMap = new LinkedHashMap<>();
     commandMap.put("hydrogenConcentrationMeasurement", hydrogenConcentrationMeasurementClusterInteractionInfoMap);
     Map<String, InteractionInfo> hydrogenSulfideConcentrationMeasurementClusterInteractionInfoMap = new LinkedHashMap<>();
     commandMap.put("hydrogenSulfideConcentrationMeasurement", hydrogenSulfideConcentrationMeasurementClusterInteractionInfoMap);
     Map<String, InteractionInfo> nitricOxideConcentrationMeasurementClusterInteractionInfoMap = new LinkedHashMap<>();
     commandMap.put("nitricOxideConcentrationMeasurement", nitricOxideConcentrationMeasurementClusterInteractionInfoMap);
     Map<String, InteractionInfo> nitrogenDioxideConcentrationMeasurementClusterInteractionInfoMap = new LinkedHashMap<>();
     commandMap.put("nitrogenDioxideConcentrationMeasurement", nitrogenDioxideConcentrationMeasurementClusterInteractionInfoMap);
     Map<String, InteractionInfo> oxygenConcentrationMeasurementClusterInteractionInfoMap = new LinkedHashMap<>();
     commandMap.put("oxygenConcentrationMeasurement", oxygenConcentrationMeasurementClusterInteractionInfoMap);
     Map<String, InteractionInfo> ozoneConcentrationMeasurementClusterInteractionInfoMap = new LinkedHashMap<>();
     commandMap.put("ozoneConcentrationMeasurement", ozoneConcentrationMeasurementClusterInteractionInfoMap);
     Map<String, InteractionInfo> sulfurDioxideConcentrationMeasurementClusterInteractionInfoMap = new LinkedHashMap<>();
     commandMap.put("sulfurDioxideConcentrationMeasurement", sulfurDioxideConcentrationMeasurementClusterInteractionInfoMap);
     Map<String, InteractionInfo> dissolvedOxygenConcentrationMeasurementClusterInteractionInfoMap = new LinkedHashMap<>();
     commandMap.put("dissolvedOxygenConcentrationMeasurement", dissolvedOxygenConcentrationMeasurementClusterInteractionInfoMap);
     Map<String, InteractionInfo> bromateConcentrationMeasurementClusterInteractionInfoMap = new LinkedHashMap<>();
     commandMap.put("bromateConcentrationMeasurement", bromateConcentrationMeasurementClusterInteractionInfoMap);
     Map<String, InteractionInfo> chloraminesConcentrationMeasurementClusterInteractionInfoMap = new LinkedHashMap<>();
     commandMap.put("chloraminesConcentrationMeasurement", chloraminesConcentrationMeasurementClusterInteractionInfoMap);
     Map<String, InteractionInfo> chlorineConcentrationMeasurementClusterInteractionInfoMap = new LinkedHashMap<>();
     commandMap.put("chlorineConcentrationMeasurement", chlorineConcentrationMeasurementClusterInteractionInfoMap);
     Map<String, InteractionInfo> fecalColiformEColiConcentrationMeasurementClusterInteractionInfoMap = new LinkedHashMap<>();
     commandMap.put("fecalColiformEColiConcentrationMeasurement", fecalColiformEColiConcentrationMeasurementClusterInteractionInfoMap);
     Map<String, InteractionInfo> fluorideConcentrationMeasurementClusterInteractionInfoMap = new LinkedHashMap<>();
     commandMap.put("fluorideConcentrationMeasurement", fluorideConcentrationMeasurementClusterInteractionInfoMap);
     Map<String, InteractionInfo> haloaceticAcidsConcentrationMeasurementClusterInteractionInfoMap = new LinkedHashMap<>();
     commandMap.put("haloaceticAcidsConcentrationMeasurement", haloaceticAcidsConcentrationMeasurementClusterInteractionInfoMap);
     Map<String, InteractionInfo> totalTrihalomethanesConcentrationMeasurementClusterInteractionInfoMap = new LinkedHashMap<>();
     commandMap.put("totalTrihalomethanesConcentrationMeasurement", totalTrihalomethanesConcentrationMeasurementClusterInteractionInfoMap);
     Map<String, InteractionInfo> totalColiformBacteriaConcentrationMeasurementClusterInteractionInfoMap = new LinkedHashMap<>();
     commandMap.put("totalColiformBacteriaConcentrationMeasurement", totalColiformBacteriaConcentrationMeasurementClusterInteractionInfoMap);
     Map<String, InteractionInfo> turbidityConcentrationMeasurementClusterInteractionInfoMap = new LinkedHashMap<>();
     commandMap.put("turbidityConcentrationMeasurement", turbidityConcentrationMeasurementClusterInteractionInfoMap);
     Map<String, InteractionInfo> copperConcentrationMeasurementClusterInteractionInfoMap = new LinkedHashMap<>();
     commandMap.put("copperConcentrationMeasurement", copperConcentrationMeasurementClusterInteractionInfoMap);
     Map<String, InteractionInfo> leadConcentrationMeasurementClusterInteractionInfoMap = new LinkedHashMap<>();
     commandMap.put("leadConcentrationMeasurement", leadConcentrationMeasurementClusterInteractionInfoMap);
     Map<String, InteractionInfo> manganeseConcentrationMeasurementClusterInteractionInfoMap = new LinkedHashMap<>();
     commandMap.put("manganeseConcentrationMeasurement", manganeseConcentrationMeasurementClusterInteractionInfoMap);
     Map<String, InteractionInfo> sulfateConcentrationMeasurementClusterInteractionInfoMap = new LinkedHashMap<>();
     commandMap.put("sulfateConcentrationMeasurement", sulfateConcentrationMeasurementClusterInteractionInfoMap);
     Map<String, InteractionInfo> bromodichloromethaneConcentrationMeasurementClusterInteractionInfoMap = new LinkedHashMap<>();
     commandMap.put("bromodichloromethaneConcentrationMeasurement", bromodichloromethaneConcentrationMeasurementClusterInteractionInfoMap);
     Map<String, InteractionInfo> bromoformConcentrationMeasurementClusterInteractionInfoMap = new LinkedHashMap<>();
     commandMap.put("bromoformConcentrationMeasurement", bromoformConcentrationMeasurementClusterInteractionInfoMap);
     Map<String, InteractionInfo> chlorodibromomethaneConcentrationMeasurementClusterInteractionInfoMap = new LinkedHashMap<>();
     commandMap.put("chlorodibromomethaneConcentrationMeasurement", chlorodibromomethaneConcentrationMeasurementClusterInteractionInfoMap);
     Map<String, InteractionInfo> chloroformConcentrationMeasurementClusterInteractionInfoMap = new LinkedHashMap<>();
     commandMap.put("chloroformConcentrationMeasurement", chloroformConcentrationMeasurementClusterInteractionInfoMap);
     Map<String, InteractionInfo> sodiumConcentrationMeasurementClusterInteractionInfoMap = new LinkedHashMap<>();
     commandMap.put("sodiumConcentrationMeasurement", sodiumConcentrationMeasurementClusterInteractionInfoMap);
     Map<String, InteractionInfo> pm25ConcentrationMeasurementClusterInteractionInfoMap = new LinkedHashMap<>();
     commandMap.put("pm25ConcentrationMeasurement", pm25ConcentrationMeasurementClusterInteractionInfoMap);
     Map<String, InteractionInfo> formaldehydeConcentrationMeasurementClusterInteractionInfoMap = new LinkedHashMap<>();
     commandMap.put("formaldehydeConcentrationMeasurement", formaldehydeConcentrationMeasurementClusterInteractionInfoMap);
     Map<String, InteractionInfo> pm1ConcentrationMeasurementClusterInteractionInfoMap = new LinkedHashMap<>();
     commandMap.put("pm1ConcentrationMeasurement", pm1ConcentrationMeasurementClusterInteractionInfoMap);
     Map<String, InteractionInfo> pm10ConcentrationMeasurementClusterInteractionInfoMap = new LinkedHashMap<>();
     commandMap.put("pm10ConcentrationMeasurement", pm10ConcentrationMeasurementClusterInteractionInfoMap);
     Map<String, InteractionInfo> totalVolatileOrganicCompoundsConcentrationMeasurementClusterInteractionInfoMap = new LinkedHashMap<>();
     commandMap.put("totalVolatileOrganicCompoundsConcentrationMeasurement", totalVolatileOrganicCompoundsConcentrationMeasurementClusterInteractionInfoMap);
     Map<String, InteractionInfo> radonConcentrationMeasurementClusterInteractionInfoMap = new LinkedHashMap<>();
     commandMap.put("radonConcentrationMeasurement", radonConcentrationMeasurementClusterInteractionInfoMap);
     Map<String, InteractionInfo> wakeOnLanClusterInteractionInfoMap = new LinkedHashMap<>();
     commandMap.put("wakeOnLan", wakeOnLanClusterInteractionInfoMap);
     Map<String, InteractionInfo> channelClusterInteractionInfoMap = new LinkedHashMap<>();
     Map<String, CommandParameterInfo> channelchangeChannelCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo channelchangeChannelmatchCommandParameterInfo = new CommandParameterInfo("match", String.class, String.class);
       channelchangeChannelCommandParams.put("match",channelchangeChannelmatchCommandParameterInfo);
     
       InteractionInfo channelchangeChannelInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.Channel.ID, ClusterIDMapping.Channel.Command.ChangeChannel.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.ChannelCluster) cluster)
         //  .changeChannel((ChipClusters.ChannelCluster.ChangeChannelResponseCallback) callback
         //  
         //  , (String)
         //  commandArguments.get("match")
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedChannelClusterChangeChannelResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           channelchangeChannelCommandParams
       );
       channelClusterInteractionInfoMap.put("changeChannel", channelchangeChannelInteractionInfo);
     Map<String, CommandParameterInfo> channelchangeChannelByNumberCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo channelchangeChannelByNumbermajorNumberCommandParameterInfo = new CommandParameterInfo("majorNumber", Integer.class, Integer.class);
       channelchangeChannelByNumberCommandParams.put("majorNumber",channelchangeChannelByNumbermajorNumberCommandParameterInfo);
      
       CommandParameterInfo channelchangeChannelByNumberminorNumberCommandParameterInfo = new CommandParameterInfo("minorNumber", Integer.class, Integer.class);
       channelchangeChannelByNumberCommandParams.put("minorNumber",channelchangeChannelByNumberminorNumberCommandParameterInfo);
     
       InteractionInfo channelchangeChannelByNumberInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.Channel.ID, ClusterIDMapping.Channel.Command.ChangeChannelByNumber.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.ChannelCluster) cluster)
         //  .changeChannelByNumber((DefaultClusterCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("majorNumber")
         //  
         //  , (Integer)
         //  commandArguments.get("minorNumber")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           channelchangeChannelByNumberCommandParams
       );
       channelClusterInteractionInfoMap.put("changeChannelByNumber", channelchangeChannelByNumberInteractionInfo);
     Map<String, CommandParameterInfo> channelskipChannelCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo channelskipChannelcountCommandParameterInfo = new CommandParameterInfo("count", Integer.class, Integer.class);
       channelskipChannelCommandParams.put("count",channelskipChannelcountCommandParameterInfo);
     
       InteractionInfo channelskipChannelInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.Channel.ID, ClusterIDMapping.Channel.Command.SkipChannel.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.ChannelCluster) cluster)
         //  .skipChannel((DefaultClusterCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("count")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           channelskipChannelCommandParams
       );
       channelClusterInteractionInfoMap.put("skipChannel", channelskipChannelInteractionInfo);
     commandMap.put("channel", channelClusterInteractionInfoMap);
     Map<String, InteractionInfo> targetNavigatorClusterInteractionInfoMap = new LinkedHashMap<>();
     Map<String, CommandParameterInfo> targetNavigatornavigateTargetCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo targetNavigatornavigateTargettargetCommandParameterInfo = new CommandParameterInfo("target", Integer.class, Integer.class);
       targetNavigatornavigateTargetCommandParams.put("target",targetNavigatornavigateTargettargetCommandParameterInfo);
      
       CommandParameterInfo targetNavigatornavigateTargetdataCommandParameterInfo = new CommandParameterInfo("data", Optional.class, String.class);
       targetNavigatornavigateTargetCommandParams.put("data",targetNavigatornavigateTargetdataCommandParameterInfo);
     
       InteractionInfo targetNavigatornavigateTargetInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.TargetNavigator.ID, ClusterIDMapping.TargetNavigator.Command.NavigateTarget.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.TargetNavigatorCluster) cluster)
         //  .navigateTarget((ChipClusters.TargetNavigatorCluster.NavigateTargetResponseCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("target")
         //  
         //  , (Optional<String>)
         //  commandArguments.get("data")
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedTargetNavigatorClusterNavigateTargetResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           targetNavigatornavigateTargetCommandParams
       );
       targetNavigatorClusterInteractionInfoMap.put("navigateTarget", targetNavigatornavigateTargetInteractionInfo);
     commandMap.put("targetNavigator", targetNavigatorClusterInteractionInfoMap);
     Map<String, InteractionInfo> mediaPlaybackClusterInteractionInfoMap = new LinkedHashMap<>();
     Map<String, CommandParameterInfo> mediaPlaybackplayCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       InteractionInfo mediaPlaybackplayInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.MediaPlayback.ID, ClusterIDMapping.MediaPlayback.Command.Play.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.MediaPlaybackCluster) cluster)
         //  .play((ChipClusters.MediaPlaybackCluster.PlaybackResponseCallback) callback
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedMediaPlaybackClusterPlaybackResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           mediaPlaybackplayCommandParams
       );
       mediaPlaybackClusterInteractionInfoMap.put("play", mediaPlaybackplayInteractionInfo);
     Map<String, CommandParameterInfo> mediaPlaybackpauseCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       InteractionInfo mediaPlaybackpauseInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.MediaPlayback.ID, ClusterIDMapping.MediaPlayback.Command.Pause.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.MediaPlaybackCluster) cluster)
         //  .pause((ChipClusters.MediaPlaybackCluster.PlaybackResponseCallback) callback
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedMediaPlaybackClusterPlaybackResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           mediaPlaybackpauseCommandParams
       );
       mediaPlaybackClusterInteractionInfoMap.put("pause", mediaPlaybackpauseInteractionInfo);
     Map<String, CommandParameterInfo> mediaPlaybackstopCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       InteractionInfo mediaPlaybackstopInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.MediaPlayback.ID, ClusterIDMapping.MediaPlayback.Command.Stop.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.MediaPlaybackCluster) cluster)
         //  .stop((ChipClusters.MediaPlaybackCluster.PlaybackResponseCallback) callback
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedMediaPlaybackClusterPlaybackResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           mediaPlaybackstopCommandParams
       );
       mediaPlaybackClusterInteractionInfoMap.put("stop", mediaPlaybackstopInteractionInfo);
     Map<String, CommandParameterInfo> mediaPlaybackstartOverCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       InteractionInfo mediaPlaybackstartOverInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.MediaPlayback.ID, ClusterIDMapping.MediaPlayback.Command.StartOver.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.MediaPlaybackCluster) cluster)
         //  .startOver((ChipClusters.MediaPlaybackCluster.PlaybackResponseCallback) callback
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedMediaPlaybackClusterPlaybackResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           mediaPlaybackstartOverCommandParams
       );
       mediaPlaybackClusterInteractionInfoMap.put("startOver", mediaPlaybackstartOverInteractionInfo);
     Map<String, CommandParameterInfo> mediaPlaybackpreviousCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       InteractionInfo mediaPlaybackpreviousInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.MediaPlayback.ID, ClusterIDMapping.MediaPlayback.Command.Previous.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.MediaPlaybackCluster) cluster)
         //  .previous((ChipClusters.MediaPlaybackCluster.PlaybackResponseCallback) callback
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedMediaPlaybackClusterPlaybackResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           mediaPlaybackpreviousCommandParams
       );
       mediaPlaybackClusterInteractionInfoMap.put("previous", mediaPlaybackpreviousInteractionInfo);
     Map<String, CommandParameterInfo> mediaPlaybacknextCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       InteractionInfo mediaPlaybacknextInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.MediaPlayback.ID, ClusterIDMapping.MediaPlayback.Command.Next.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.MediaPlaybackCluster) cluster)
         //  .next((ChipClusters.MediaPlaybackCluster.PlaybackResponseCallback) callback
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedMediaPlaybackClusterPlaybackResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           mediaPlaybacknextCommandParams
       );
       mediaPlaybackClusterInteractionInfoMap.put("next", mediaPlaybacknextInteractionInfo);
     Map<String, CommandParameterInfo> mediaPlaybackrewindCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       InteractionInfo mediaPlaybackrewindInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.MediaPlayback.ID, ClusterIDMapping.MediaPlayback.Command.Rewind.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.MediaPlaybackCluster) cluster)
         //  .rewind((ChipClusters.MediaPlaybackCluster.PlaybackResponseCallback) callback
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedMediaPlaybackClusterPlaybackResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           mediaPlaybackrewindCommandParams
       );
       mediaPlaybackClusterInteractionInfoMap.put("rewind", mediaPlaybackrewindInteractionInfo);
     Map<String, CommandParameterInfo> mediaPlaybackfastForwardCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       InteractionInfo mediaPlaybackfastForwardInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.MediaPlayback.ID, ClusterIDMapping.MediaPlayback.Command.FastForward.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.MediaPlaybackCluster) cluster)
         //  .fastForward((ChipClusters.MediaPlaybackCluster.PlaybackResponseCallback) callback
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedMediaPlaybackClusterPlaybackResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           mediaPlaybackfastForwardCommandParams
       );
       mediaPlaybackClusterInteractionInfoMap.put("fastForward", mediaPlaybackfastForwardInteractionInfo);
     Map<String, CommandParameterInfo> mediaPlaybackskipForwardCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo mediaPlaybackskipForwarddeltaPositionMillisecondsCommandParameterInfo = new CommandParameterInfo("deltaPositionMilliseconds", Long.class, Long.class);
       mediaPlaybackskipForwardCommandParams.put("deltaPositionMilliseconds",mediaPlaybackskipForwarddeltaPositionMillisecondsCommandParameterInfo);
     
       InteractionInfo mediaPlaybackskipForwardInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.MediaPlayback.ID, ClusterIDMapping.MediaPlayback.Command.SkipForward.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.MediaPlaybackCluster) cluster)
         //  .skipForward((ChipClusters.MediaPlaybackCluster.PlaybackResponseCallback) callback
         //  
         //  , (Long)
         //  commandArguments.get("deltaPositionMilliseconds")
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedMediaPlaybackClusterPlaybackResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           mediaPlaybackskipForwardCommandParams
       );
       mediaPlaybackClusterInteractionInfoMap.put("skipForward", mediaPlaybackskipForwardInteractionInfo);
     Map<String, CommandParameterInfo> mediaPlaybackskipBackwardCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo mediaPlaybackskipBackwarddeltaPositionMillisecondsCommandParameterInfo = new CommandParameterInfo("deltaPositionMilliseconds", Long.class, Long.class);
       mediaPlaybackskipBackwardCommandParams.put("deltaPositionMilliseconds",mediaPlaybackskipBackwarddeltaPositionMillisecondsCommandParameterInfo);
     
       InteractionInfo mediaPlaybackskipBackwardInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.MediaPlayback.ID, ClusterIDMapping.MediaPlayback.Command.SkipBackward.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.MediaPlaybackCluster) cluster)
         //  .skipBackward((ChipClusters.MediaPlaybackCluster.PlaybackResponseCallback) callback
         //  
         //  , (Long)
         //  commandArguments.get("deltaPositionMilliseconds")
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedMediaPlaybackClusterPlaybackResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           mediaPlaybackskipBackwardCommandParams
       );
       mediaPlaybackClusterInteractionInfoMap.put("skipBackward", mediaPlaybackskipBackwardInteractionInfo);
     Map<String, CommandParameterInfo> mediaPlaybackseekCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo mediaPlaybackseekpositionCommandParameterInfo = new CommandParameterInfo("position", Long.class, Long.class);
       mediaPlaybackseekCommandParams.put("position",mediaPlaybackseekpositionCommandParameterInfo);
     
       InteractionInfo mediaPlaybackseekInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.MediaPlayback.ID, ClusterIDMapping.MediaPlayback.Command.Seek.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.MediaPlaybackCluster) cluster)
         //  .seek((ChipClusters.MediaPlaybackCluster.PlaybackResponseCallback) callback
         //  
         //  , (Long)
         //  commandArguments.get("position")
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedMediaPlaybackClusterPlaybackResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           mediaPlaybackseekCommandParams
       );
       mediaPlaybackClusterInteractionInfoMap.put("seek", mediaPlaybackseekInteractionInfo);
     commandMap.put("mediaPlayback", mediaPlaybackClusterInteractionInfoMap);
     Map<String, InteractionInfo> mediaInputClusterInteractionInfoMap = new LinkedHashMap<>();
     Map<String, CommandParameterInfo> mediaInputselectInputCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo mediaInputselectInputindexCommandParameterInfo = new CommandParameterInfo("index", Integer.class, Integer.class);
       mediaInputselectInputCommandParams.put("index",mediaInputselectInputindexCommandParameterInfo);
     
       InteractionInfo mediaInputselectInputInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.MediaInput.ID, ClusterIDMapping.MediaInput.Command.SelectInput.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.MediaInputCluster) cluster)
         //  .selectInput((DefaultClusterCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("index")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           mediaInputselectInputCommandParams
       );
       mediaInputClusterInteractionInfoMap.put("selectInput", mediaInputselectInputInteractionInfo);
     Map<String, CommandParameterInfo> mediaInputshowInputStatusCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       InteractionInfo mediaInputshowInputStatusInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.MediaInput.ID, ClusterIDMapping.MediaInput.Command.ShowInputStatus.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.MediaInputCluster) cluster)
         //  .showInputStatus((DefaultClusterCallback) callback
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           mediaInputshowInputStatusCommandParams
       );
       mediaInputClusterInteractionInfoMap.put("showInputStatus", mediaInputshowInputStatusInteractionInfo);
     Map<String, CommandParameterInfo> mediaInputhideInputStatusCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       InteractionInfo mediaInputhideInputStatusInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.MediaInput.ID, ClusterIDMapping.MediaInput.Command.HideInputStatus.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.MediaInputCluster) cluster)
         //  .hideInputStatus((DefaultClusterCallback) callback
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           mediaInputhideInputStatusCommandParams
       );
       mediaInputClusterInteractionInfoMap.put("hideInputStatus", mediaInputhideInputStatusInteractionInfo);
     Map<String, CommandParameterInfo> mediaInputrenameInputCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo mediaInputrenameInputindexCommandParameterInfo = new CommandParameterInfo("index", Integer.class, Integer.class);
       mediaInputrenameInputCommandParams.put("index",mediaInputrenameInputindexCommandParameterInfo);
      
       CommandParameterInfo mediaInputrenameInputnameCommandParameterInfo = new CommandParameterInfo("name", String.class, String.class);
       mediaInputrenameInputCommandParams.put("name",mediaInputrenameInputnameCommandParameterInfo);
     
       InteractionInfo mediaInputrenameInputInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.MediaInput.ID, ClusterIDMapping.MediaInput.Command.RenameInput.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.MediaInputCluster) cluster)
         //  .renameInput((DefaultClusterCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("index")
         //  
         //  , (String)
         //  commandArguments.get("name")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           mediaInputrenameInputCommandParams
       );
       mediaInputClusterInteractionInfoMap.put("renameInput", mediaInputrenameInputInteractionInfo);
     commandMap.put("mediaInput", mediaInputClusterInteractionInfoMap);
     Map<String, InteractionInfo> lowPowerClusterInteractionInfoMap = new LinkedHashMap<>();
     Map<String, CommandParameterInfo> lowPowersleepCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       InteractionInfo lowPowersleepInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.LowPower.ID, ClusterIDMapping.LowPower.Command.Sleep.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.LowPowerCluster) cluster)
         //  .sleep((DefaultClusterCallback) callback
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           lowPowersleepCommandParams
       );
       lowPowerClusterInteractionInfoMap.put("sleep", lowPowersleepInteractionInfo);
     commandMap.put("lowPower", lowPowerClusterInteractionInfoMap);
     Map<String, InteractionInfo> keypadInputClusterInteractionInfoMap = new LinkedHashMap<>();
     Map<String, CommandParameterInfo> keypadInputsendKeyCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo keypadInputsendKeykeyCodeCommandParameterInfo = new CommandParameterInfo("keyCode", Integer.class, Integer.class);
       keypadInputsendKeyCommandParams.put("keyCode",keypadInputsendKeykeyCodeCommandParameterInfo);
     
       InteractionInfo keypadInputsendKeyInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.KeypadInput.ID, ClusterIDMapping.KeypadInput.Command.SendKey.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.KeypadInputCluster) cluster)
         //  .sendKey((ChipClusters.KeypadInputCluster.SendKeyResponseCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("keyCode")
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedKeypadInputClusterSendKeyResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           keypadInputsendKeyCommandParams
       );
       keypadInputClusterInteractionInfoMap.put("sendKey", keypadInputsendKeyInteractionInfo);
     commandMap.put("keypadInput", keypadInputClusterInteractionInfoMap);
     Map<String, InteractionInfo> contentLauncherClusterInteractionInfoMap = new LinkedHashMap<>();
     Map<String, CommandParameterInfo> contentLauncherlaunchContentCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo contentLauncherlaunchContentautoPlayCommandParameterInfo = new CommandParameterInfo("autoPlay", Boolean.class, Boolean.class);
       contentLauncherlaunchContentCommandParams.put("autoPlay",contentLauncherlaunchContentautoPlayCommandParameterInfo);
      
       CommandParameterInfo contentLauncherlaunchContentdataCommandParameterInfo = new CommandParameterInfo("data", Optional.class, String.class);
       contentLauncherlaunchContentCommandParams.put("data",contentLauncherlaunchContentdataCommandParameterInfo);
     
       InteractionInfo contentLauncherlaunchContentInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.ContentLauncher.ID, ClusterIDMapping.ContentLauncher.Command.LaunchContent.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.ContentLauncherCluster) cluster)
         //  .launchContent((ChipClusters.ContentLauncherCluster.LauncherResponseCallback) callback
         //  
         //  , (ChipStructs.ContentLauncherClusterContentSearchStruct)
         //  commandArguments.get("search")
         //  
         //  , (Boolean)
         //  commandArguments.get("autoPlay")
         //  
         //  , (Optional<String>)
         //  commandArguments.get("data")
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedContentLauncherClusterLauncherResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           contentLauncherlaunchContentCommandParams
       );
       contentLauncherClusterInteractionInfoMap.put("launchContent", contentLauncherlaunchContentInteractionInfo);
     Map<String, CommandParameterInfo> contentLauncherlaunchURLCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo contentLauncherlaunchURLcontentURLCommandParameterInfo = new CommandParameterInfo("contentURL", String.class, String.class);
       contentLauncherlaunchURLCommandParams.put("contentURL",contentLauncherlaunchURLcontentURLCommandParameterInfo);
      
       CommandParameterInfo contentLauncherlaunchURLdisplayStringCommandParameterInfo = new CommandParameterInfo("displayString", Optional.class, String.class);
       contentLauncherlaunchURLCommandParams.put("displayString",contentLauncherlaunchURLdisplayStringCommandParameterInfo);
      
       InteractionInfo contentLauncherlaunchURLInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.ContentLauncher.ID, ClusterIDMapping.ContentLauncher.Command.LaunchURL.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.ContentLauncherCluster) cluster)
         //  .launchURL((ChipClusters.ContentLauncherCluster.LauncherResponseCallback) callback
         //  
         //  , (String)
         //  commandArguments.get("contentURL")
         //  
         //  , (Optional<String>)
         //  commandArguments.get("displayString")
         //  
         //  , (Optional<ChipStructs.ContentLauncherClusterBrandingInformationStruct>)
         //  commandArguments.get("brandingInformation")
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedContentLauncherClusterLauncherResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           contentLauncherlaunchURLCommandParams
       );
       contentLauncherClusterInteractionInfoMap.put("launchURL", contentLauncherlaunchURLInteractionInfo);
     commandMap.put("contentLauncher", contentLauncherClusterInteractionInfoMap);
     Map<String, InteractionInfo> audioOutputClusterInteractionInfoMap = new LinkedHashMap<>();
     Map<String, CommandParameterInfo> audioOutputselectOutputCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo audioOutputselectOutputindexCommandParameterInfo = new CommandParameterInfo("index", Integer.class, Integer.class);
       audioOutputselectOutputCommandParams.put("index",audioOutputselectOutputindexCommandParameterInfo);
     
       InteractionInfo audioOutputselectOutputInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.AudioOutput.ID, ClusterIDMapping.AudioOutput.Command.SelectOutput.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.AudioOutputCluster) cluster)
         //  .selectOutput((DefaultClusterCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("index")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           audioOutputselectOutputCommandParams
       );
       audioOutputClusterInteractionInfoMap.put("selectOutput", audioOutputselectOutputInteractionInfo);
     Map<String, CommandParameterInfo> audioOutputrenameOutputCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo audioOutputrenameOutputindexCommandParameterInfo = new CommandParameterInfo("index", Integer.class, Integer.class);
       audioOutputrenameOutputCommandParams.put("index",audioOutputrenameOutputindexCommandParameterInfo);
      
       CommandParameterInfo audioOutputrenameOutputnameCommandParameterInfo = new CommandParameterInfo("name", String.class, String.class);
       audioOutputrenameOutputCommandParams.put("name",audioOutputrenameOutputnameCommandParameterInfo);
     
       InteractionInfo audioOutputrenameOutputInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.AudioOutput.ID, ClusterIDMapping.AudioOutput.Command.RenameOutput.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.AudioOutputCluster) cluster)
         //  .renameOutput((DefaultClusterCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("index")
         //  
         //  , (String)
         //  commandArguments.get("name")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           audioOutputrenameOutputCommandParams
       );
       audioOutputClusterInteractionInfoMap.put("renameOutput", audioOutputrenameOutputInteractionInfo);
     commandMap.put("audioOutput", audioOutputClusterInteractionInfoMap);
     Map<String, InteractionInfo> applicationLauncherClusterInteractionInfoMap = new LinkedHashMap<>();
     Map<String, CommandParameterInfo> applicationLauncherlaunchAppCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo applicationLauncherlaunchAppdataCommandParameterInfo = new CommandParameterInfo("data", Optional.class, byte[].class);
       applicationLauncherlaunchAppCommandParams.put("data",applicationLauncherlaunchAppdataCommandParameterInfo);
     
       InteractionInfo applicationLauncherlaunchAppInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.ApplicationLauncher.ID, ClusterIDMapping.ApplicationLauncher.Command.LaunchApp.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.ApplicationLauncherCluster) cluster)
         //  .launchApp((ChipClusters.ApplicationLauncherCluster.LauncherResponseCallback) callback
         //  
         //  , (Optional<ChipStructs.ApplicationLauncherClusterApplicationStruct>)
         //  commandArguments.get("application")
         //  
         //  , (Optional<byte[]>)
         //  commandArguments.get("data")
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedApplicationLauncherClusterLauncherResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           applicationLauncherlaunchAppCommandParams
       );
       applicationLauncherClusterInteractionInfoMap.put("launchApp", applicationLauncherlaunchAppInteractionInfo);
     Map<String, CommandParameterInfo> applicationLauncherstopAppCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       InteractionInfo applicationLauncherstopAppInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.ApplicationLauncher.ID, ClusterIDMapping.ApplicationLauncher.Command.StopApp.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.ApplicationLauncherCluster) cluster)
         //  .stopApp((ChipClusters.ApplicationLauncherCluster.LauncherResponseCallback) callback
         //  
         //  , (Optional<ChipStructs.ApplicationLauncherClusterApplicationStruct>)
         //  commandArguments.get("application")
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedApplicationLauncherClusterLauncherResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           applicationLauncherstopAppCommandParams
       );
       applicationLauncherClusterInteractionInfoMap.put("stopApp", applicationLauncherstopAppInteractionInfo);
     Map<String, CommandParameterInfo> applicationLauncherhideAppCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       InteractionInfo applicationLauncherhideAppInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.ApplicationLauncher.ID, ClusterIDMapping.ApplicationLauncher.Command.HideApp.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.ApplicationLauncherCluster) cluster)
         //  .hideApp((ChipClusters.ApplicationLauncherCluster.LauncherResponseCallback) callback
         //  
         //  , (Optional<ChipStructs.ApplicationLauncherClusterApplicationStruct>)
         //  commandArguments.get("application")
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedApplicationLauncherClusterLauncherResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           applicationLauncherhideAppCommandParams
       );
       applicationLauncherClusterInteractionInfoMap.put("hideApp", applicationLauncherhideAppInteractionInfo);
     commandMap.put("applicationLauncher", applicationLauncherClusterInteractionInfoMap);
     Map<String, InteractionInfo> applicationBasicClusterInteractionInfoMap = new LinkedHashMap<>();
     commandMap.put("applicationBasic", applicationBasicClusterInteractionInfoMap);
     Map<String, InteractionInfo> accountLoginClusterInteractionInfoMap = new LinkedHashMap<>();
     Map<String, CommandParameterInfo> accountLogingetSetupPINCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo accountLogingetSetupPINtempAccountIdentifierCommandParameterInfo = new CommandParameterInfo("tempAccountIdentifier", String.class, String.class);
       accountLogingetSetupPINCommandParams.put("tempAccountIdentifier",accountLogingetSetupPINtempAccountIdentifierCommandParameterInfo);
     
       InteractionInfo accountLogingetSetupPINInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.AccountLogin.ID, ClusterIDMapping.AccountLogin.Command.GetSetupPIN.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              10000
);
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.AccountLoginCluster) cluster)
         //  .getSetupPIN((ChipClusters.AccountLoginCluster.GetSetupPINResponseCallback) callback
         //  
         //  , (String)
         //  commandArguments.get("tempAccountIdentifier")
         //  
         //   
         //  , 10000
         //  );
         },
         //() -> new DelegatedAccountLoginClusterGetSetupPINResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           accountLogingetSetupPINCommandParams
       );
       accountLoginClusterInteractionInfoMap.put("getSetupPIN", accountLogingetSetupPINInteractionInfo);
     Map<String, CommandParameterInfo> accountLoginloginCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo accountLoginlogintempAccountIdentifierCommandParameterInfo = new CommandParameterInfo("tempAccountIdentifier", String.class, String.class);
       accountLoginloginCommandParams.put("tempAccountIdentifier",accountLoginlogintempAccountIdentifierCommandParameterInfo);
      
       CommandParameterInfo accountLoginloginsetupPINCommandParameterInfo = new CommandParameterInfo("setupPIN", String.class, String.class);
       accountLoginloginCommandParams.put("setupPIN",accountLoginloginsetupPINCommandParameterInfo);
     
       InteractionInfo accountLoginloginInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.AccountLogin.ID, ClusterIDMapping.AccountLogin.Command.Login.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            10000
);
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.AccountLoginCluster) cluster)
         //  .login((DefaultClusterCallback) callback
         //  
         //  , (String)
         //  commandArguments.get("tempAccountIdentifier")
         //  
         //  , (String)
         //  commandArguments.get("setupPIN")
         //  
         //  
         //  , 10000
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           accountLoginloginCommandParams
       );
       accountLoginClusterInteractionInfoMap.put("login", accountLoginloginInteractionInfo);
     Map<String, CommandParameterInfo> accountLoginlogoutCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       InteractionInfo accountLoginlogoutInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.AccountLogin.ID, ClusterIDMapping.AccountLogin.Command.Logout.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            10000
);
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.AccountLoginCluster) cluster)
         //  .logout((DefaultClusterCallback) callback
         //  
         //  
         //  , 10000
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           accountLoginlogoutCommandParams
       );
       accountLoginClusterInteractionInfoMap.put("logout", accountLoginlogoutInteractionInfo);
     commandMap.put("accountLogin", accountLoginClusterInteractionInfoMap);
     Map<String, InteractionInfo> electricalMeasurementClusterInteractionInfoMap = new LinkedHashMap<>();
     Map<String, CommandParameterInfo> electricalMeasurementgetProfileInfoCommandCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       InteractionInfo electricalMeasurementgetProfileInfoCommandInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Command.GetProfileInfoCommand.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.ElectricalMeasurementCluster) cluster)
         //  .getProfileInfoCommand((DefaultClusterCallback) callback
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           electricalMeasurementgetProfileInfoCommandCommandParams
       );
       electricalMeasurementClusterInteractionInfoMap.put("getProfileInfoCommand", electricalMeasurementgetProfileInfoCommandInteractionInfo);
     Map<String, CommandParameterInfo> electricalMeasurementgetMeasurementProfileCommandCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo electricalMeasurementgetMeasurementProfileCommandattributeIdCommandParameterInfo = new CommandParameterInfo("attributeId", Integer.class, Integer.class);
       electricalMeasurementgetMeasurementProfileCommandCommandParams.put("attributeId",electricalMeasurementgetMeasurementProfileCommandattributeIdCommandParameterInfo);
      
       CommandParameterInfo electricalMeasurementgetMeasurementProfileCommandstartTimeCommandParameterInfo = new CommandParameterInfo("startTime", Long.class, Long.class);
       electricalMeasurementgetMeasurementProfileCommandCommandParams.put("startTime",electricalMeasurementgetMeasurementProfileCommandstartTimeCommandParameterInfo);
      
       CommandParameterInfo electricalMeasurementgetMeasurementProfileCommandnumberOfIntervalsCommandParameterInfo = new CommandParameterInfo("numberOfIntervals", Integer.class, Integer.class);
       electricalMeasurementgetMeasurementProfileCommandCommandParams.put("numberOfIntervals",electricalMeasurementgetMeasurementProfileCommandnumberOfIntervalsCommandParameterInfo);
     
       InteractionInfo electricalMeasurementgetMeasurementProfileCommandInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Command.GetMeasurementProfileCommand.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.ElectricalMeasurementCluster) cluster)
         //  .getMeasurementProfileCommand((DefaultClusterCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("attributeId")
         //  
         //  , (Long)
         //  commandArguments.get("startTime")
         //  
         //  , (Integer)
         //  commandArguments.get("numberOfIntervals")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           electricalMeasurementgetMeasurementProfileCommandCommandParams
       );
       electricalMeasurementClusterInteractionInfoMap.put("getMeasurementProfileCommand", electricalMeasurementgetMeasurementProfileCommandInteractionInfo);
     commandMap.put("electricalMeasurement", electricalMeasurementClusterInteractionInfoMap);
     Map<String, InteractionInfo> unitTestingClusterInteractionInfoMap = new LinkedHashMap<>();
     Map<String, CommandParameterInfo> unitTestingtestCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       InteractionInfo unitTestingtestInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Command.Test.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.UnitTestingCluster) cluster)
         //  .test((DefaultClusterCallback) callback
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           unitTestingtestCommandParams
       );
       unitTestingClusterInteractionInfoMap.put("test", unitTestingtestInteractionInfo);
     Map<String, CommandParameterInfo> unitTestingtestNotHandledCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       InteractionInfo unitTestingtestNotHandledInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Command.TestNotHandled.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.UnitTestingCluster) cluster)
         //  .testNotHandled((DefaultClusterCallback) callback
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           unitTestingtestNotHandledCommandParams
       );
       unitTestingClusterInteractionInfoMap.put("testNotHandled", unitTestingtestNotHandledInteractionInfo);
     Map<String, CommandParameterInfo> unitTestingtestSpecificCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       InteractionInfo unitTestingtestSpecificInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Command.TestSpecific.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.UnitTestingCluster) cluster)
         //  .testSpecific((ChipClusters.UnitTestingCluster.TestSpecificResponseCallback) callback
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedUnitTestingClusterTestSpecificResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           unitTestingtestSpecificCommandParams
       );
       unitTestingClusterInteractionInfoMap.put("testSpecific", unitTestingtestSpecificInteractionInfo);
     Map<String, CommandParameterInfo> unitTestingtestUnknownCommandCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       InteractionInfo unitTestingtestUnknownCommandInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Command.TestUnknownCommand.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.UnitTestingCluster) cluster)
         //  .testUnknownCommand((DefaultClusterCallback) callback
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           unitTestingtestUnknownCommandCommandParams
       );
       unitTestingClusterInteractionInfoMap.put("testUnknownCommand", unitTestingtestUnknownCommandInteractionInfo);
     Map<String, CommandParameterInfo> unitTestingtestAddArgumentsCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo unitTestingtestAddArgumentsarg1CommandParameterInfo = new CommandParameterInfo("arg1", Integer.class, Integer.class);
       unitTestingtestAddArgumentsCommandParams.put("arg1",unitTestingtestAddArgumentsarg1CommandParameterInfo);
      
       CommandParameterInfo unitTestingtestAddArgumentsarg2CommandParameterInfo = new CommandParameterInfo("arg2", Integer.class, Integer.class);
       unitTestingtestAddArgumentsCommandParams.put("arg2",unitTestingtestAddArgumentsarg2CommandParameterInfo);
     
       InteractionInfo unitTestingtestAddArgumentsInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Command.TestAddArguments.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.UnitTestingCluster) cluster)
         //  .testAddArguments((ChipClusters.UnitTestingCluster.TestAddArgumentsResponseCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("arg1")
         //  
         //  , (Integer)
         //  commandArguments.get("arg2")
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedUnitTestingClusterTestAddArgumentsResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           unitTestingtestAddArgumentsCommandParams
       );
       unitTestingClusterInteractionInfoMap.put("testAddArguments", unitTestingtestAddArgumentsInteractionInfo);
     Map<String, CommandParameterInfo> unitTestingtestSimpleArgumentRequestCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo unitTestingtestSimpleArgumentRequestarg1CommandParameterInfo = new CommandParameterInfo("arg1", Boolean.class, Boolean.class);
       unitTestingtestSimpleArgumentRequestCommandParams.put("arg1",unitTestingtestSimpleArgumentRequestarg1CommandParameterInfo);
     
       InteractionInfo unitTestingtestSimpleArgumentRequestInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Command.TestSimpleArgumentRequest.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.UnitTestingCluster) cluster)
         //  .testSimpleArgumentRequest((ChipClusters.UnitTestingCluster.TestSimpleArgumentResponseCallback) callback
         //  
         //  , (Boolean)
         //  commandArguments.get("arg1")
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedUnitTestingClusterTestSimpleArgumentResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           unitTestingtestSimpleArgumentRequestCommandParams
       );
       unitTestingClusterInteractionInfoMap.put("testSimpleArgumentRequest", unitTestingtestSimpleArgumentRequestInteractionInfo);
     Map<String, CommandParameterInfo> unitTestingtestStructArrayArgumentRequestCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo unitTestingtestStructArrayArgumentRequestarg3CommandParameterInfo = new CommandParameterInfo("arg3", ArrayList.class, Integer.class);
       unitTestingtestStructArrayArgumentRequestCommandParams.put("arg3",unitTestingtestStructArrayArgumentRequestarg3CommandParameterInfo);
      
       CommandParameterInfo unitTestingtestStructArrayArgumentRequestarg4CommandParameterInfo = new CommandParameterInfo("arg4", ArrayList.class, Integer.class);
       unitTestingtestStructArrayArgumentRequestCommandParams.put("arg4",unitTestingtestStructArrayArgumentRequestarg4CommandParameterInfo);
      
       CommandParameterInfo unitTestingtestStructArrayArgumentRequestarg5CommandParameterInfo = new CommandParameterInfo("arg5", Integer.class, Integer.class);
       unitTestingtestStructArrayArgumentRequestCommandParams.put("arg5",unitTestingtestStructArrayArgumentRequestarg5CommandParameterInfo);
      
       CommandParameterInfo unitTestingtestStructArrayArgumentRequestarg6CommandParameterInfo = new CommandParameterInfo("arg6", Boolean.class, Boolean.class);
       unitTestingtestStructArrayArgumentRequestCommandParams.put("arg6",unitTestingtestStructArrayArgumentRequestarg6CommandParameterInfo);
     
       InteractionInfo unitTestingtestStructArrayArgumentRequestInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Command.TestStructArrayArgumentRequest.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.UnitTestingCluster) cluster)
         //  .testStructArrayArgumentRequest((ChipClusters.UnitTestingCluster.TestStructArrayArgumentResponseCallback) callback
         //  
         //  , (ArrayList<ChipStructs.UnitTestingClusterNestedStructList>)
         //  commandArguments.get("arg1")
         //  
         //  , (ArrayList<ChipStructs.UnitTestingClusterSimpleStruct>)
         //  commandArguments.get("arg2")
         //  
         //  , (ArrayList<Integer>)
         //  commandArguments.get("arg3")
         //  
         //  , (ArrayList<Integer>)
         //  commandArguments.get("arg4")
         //  
         //  , (Integer)
         //  commandArguments.get("arg5")
         //  
         //  , (Boolean)
         //  commandArguments.get("arg6")
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedUnitTestingClusterTestStructArrayArgumentResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           unitTestingtestStructArrayArgumentRequestCommandParams
       );
       unitTestingClusterInteractionInfoMap.put("testStructArrayArgumentRequest", unitTestingtestStructArrayArgumentRequestInteractionInfo);
     Map<String, CommandParameterInfo> unitTestingtestStructArgumentRequestCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       InteractionInfo unitTestingtestStructArgumentRequestInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Command.TestStructArgumentRequest.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.UnitTestingCluster) cluster)
         //  .testStructArgumentRequest((ChipClusters.UnitTestingCluster.BooleanResponseCallback) callback
         //  
         //  , (ChipStructs.UnitTestingClusterSimpleStruct)
         //  commandArguments.get("arg1")
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedUnitTestingClusterBooleanResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           unitTestingtestStructArgumentRequestCommandParams
       );
       unitTestingClusterInteractionInfoMap.put("testStructArgumentRequest", unitTestingtestStructArgumentRequestInteractionInfo);
     Map<String, CommandParameterInfo> unitTestingtestNestedStructArgumentRequestCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       InteractionInfo unitTestingtestNestedStructArgumentRequestInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Command.TestNestedStructArgumentRequest.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.UnitTestingCluster) cluster)
         //  .testNestedStructArgumentRequest((ChipClusters.UnitTestingCluster.BooleanResponseCallback) callback
         //  
         //  , (ChipStructs.UnitTestingClusterNestedStruct)
         //  commandArguments.get("arg1")
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedUnitTestingClusterBooleanResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           unitTestingtestNestedStructArgumentRequestCommandParams
       );
       unitTestingClusterInteractionInfoMap.put("testNestedStructArgumentRequest", unitTestingtestNestedStructArgumentRequestInteractionInfo);
     Map<String, CommandParameterInfo> unitTestingtestListStructArgumentRequestCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       InteractionInfo unitTestingtestListStructArgumentRequestInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Command.TestListStructArgumentRequest.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.UnitTestingCluster) cluster)
         //  .testListStructArgumentRequest((ChipClusters.UnitTestingCluster.BooleanResponseCallback) callback
         //  
         //  , (ArrayList<ChipStructs.UnitTestingClusterSimpleStruct>)
         //  commandArguments.get("arg1")
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedUnitTestingClusterBooleanResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           unitTestingtestListStructArgumentRequestCommandParams
       );
       unitTestingClusterInteractionInfoMap.put("testListStructArgumentRequest", unitTestingtestListStructArgumentRequestInteractionInfo);
     Map<String, CommandParameterInfo> unitTestingtestListInt8UArgumentRequestCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo unitTestingtestListInt8UArgumentRequestarg1CommandParameterInfo = new CommandParameterInfo("arg1", ArrayList.class, Integer.class);
       unitTestingtestListInt8UArgumentRequestCommandParams.put("arg1",unitTestingtestListInt8UArgumentRequestarg1CommandParameterInfo);
     
       InteractionInfo unitTestingtestListInt8UArgumentRequestInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Command.TestListInt8UArgumentRequest.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.UnitTestingCluster) cluster)
         //  .testListInt8UArgumentRequest((ChipClusters.UnitTestingCluster.BooleanResponseCallback) callback
         //  
         //  , (ArrayList<Integer>)
         //  commandArguments.get("arg1")
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedUnitTestingClusterBooleanResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           unitTestingtestListInt8UArgumentRequestCommandParams
       );
       unitTestingClusterInteractionInfoMap.put("testListInt8UArgumentRequest", unitTestingtestListInt8UArgumentRequestInteractionInfo);
     Map<String, CommandParameterInfo> unitTestingtestNestedStructListArgumentRequestCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       InteractionInfo unitTestingtestNestedStructListArgumentRequestInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Command.TestNestedStructListArgumentRequest.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.UnitTestingCluster) cluster)
         //  .testNestedStructListArgumentRequest((ChipClusters.UnitTestingCluster.BooleanResponseCallback) callback
         //  
         //  , (ChipStructs.UnitTestingClusterNestedStructList)
         //  commandArguments.get("arg1")
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedUnitTestingClusterBooleanResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           unitTestingtestNestedStructListArgumentRequestCommandParams
       );
       unitTestingClusterInteractionInfoMap.put("testNestedStructListArgumentRequest", unitTestingtestNestedStructListArgumentRequestInteractionInfo);
     Map<String, CommandParameterInfo> unitTestingtestListNestedStructListArgumentRequestCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       InteractionInfo unitTestingtestListNestedStructListArgumentRequestInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Command.TestListNestedStructListArgumentRequest.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.UnitTestingCluster) cluster)
         //  .testListNestedStructListArgumentRequest((ChipClusters.UnitTestingCluster.BooleanResponseCallback) callback
         //  
         //  , (ArrayList<ChipStructs.UnitTestingClusterNestedStructList>)
         //  commandArguments.get("arg1")
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedUnitTestingClusterBooleanResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           unitTestingtestListNestedStructListArgumentRequestCommandParams
       );
       unitTestingClusterInteractionInfoMap.put("testListNestedStructListArgumentRequest", unitTestingtestListNestedStructListArgumentRequestInteractionInfo);
     Map<String, CommandParameterInfo> unitTestingtestListInt8UReverseRequestCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo unitTestingtestListInt8UReverseRequestarg1CommandParameterInfo = new CommandParameterInfo("arg1", ArrayList.class, Integer.class);
       unitTestingtestListInt8UReverseRequestCommandParams.put("arg1",unitTestingtestListInt8UReverseRequestarg1CommandParameterInfo);
     
       InteractionInfo unitTestingtestListInt8UReverseRequestInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Command.TestListInt8UReverseRequest.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.UnitTestingCluster) cluster)
         //  .testListInt8UReverseRequest((ChipClusters.UnitTestingCluster.TestListInt8UReverseResponseCallback) callback
         //  
         //  , (ArrayList<Integer>)
         //  commandArguments.get("arg1")
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedUnitTestingClusterTestListInt8UReverseResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           unitTestingtestListInt8UReverseRequestCommandParams
       );
       unitTestingClusterInteractionInfoMap.put("testListInt8UReverseRequest", unitTestingtestListInt8UReverseRequestInteractionInfo);
     Map<String, CommandParameterInfo> unitTestingtestEnumsRequestCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo unitTestingtestEnumsRequestarg1CommandParameterInfo = new CommandParameterInfo("arg1", Integer.class, Integer.class);
       unitTestingtestEnumsRequestCommandParams.put("arg1",unitTestingtestEnumsRequestarg1CommandParameterInfo);
      
       CommandParameterInfo unitTestingtestEnumsRequestarg2CommandParameterInfo = new CommandParameterInfo("arg2", Integer.class, Integer.class);
       unitTestingtestEnumsRequestCommandParams.put("arg2",unitTestingtestEnumsRequestarg2CommandParameterInfo);
     
       InteractionInfo unitTestingtestEnumsRequestInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Command.TestEnumsRequest.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.UnitTestingCluster) cluster)
         //  .testEnumsRequest((ChipClusters.UnitTestingCluster.TestEnumsResponseCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("arg1")
         //  
         //  , (Integer)
         //  commandArguments.get("arg2")
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedUnitTestingClusterTestEnumsResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           unitTestingtestEnumsRequestCommandParams
       );
       unitTestingClusterInteractionInfoMap.put("testEnumsRequest", unitTestingtestEnumsRequestInteractionInfo);
     Map<String, CommandParameterInfo> unitTestingtestNullableOptionalRequestCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo unitTestingtestNullableOptionalRequestarg1CommandParameterInfo = new CommandParameterInfo("arg1", Optional.class, Integer.class);
       unitTestingtestNullableOptionalRequestCommandParams.put("arg1",unitTestingtestNullableOptionalRequestarg1CommandParameterInfo);
     
       InteractionInfo unitTestingtestNullableOptionalRequestInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Command.TestNullableOptionalRequest.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.UnitTestingCluster) cluster)
         //  .testNullableOptionalRequest((ChipClusters.UnitTestingCluster.TestNullableOptionalResponseCallback) callback
         //  
         //  , (Optional<Integer>)
         //  commandArguments.get("arg1")
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedUnitTestingClusterTestNullableOptionalResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           unitTestingtestNullableOptionalRequestCommandParams
       );
       unitTestingClusterInteractionInfoMap.put("testNullableOptionalRequest", unitTestingtestNullableOptionalRequestInteractionInfo);
     Map<String, CommandParameterInfo> unitTestingtestComplexNullableOptionalRequestCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo unitTestingtestComplexNullableOptionalRequestnullableIntCommandParameterInfo = new CommandParameterInfo("nullableInt", Integer.class, Integer.class);
       unitTestingtestComplexNullableOptionalRequestCommandParams.put("nullableInt",unitTestingtestComplexNullableOptionalRequestnullableIntCommandParameterInfo);
      
       CommandParameterInfo unitTestingtestComplexNullableOptionalRequestoptionalIntCommandParameterInfo = new CommandParameterInfo("optionalInt", Optional.class, Integer.class);
       unitTestingtestComplexNullableOptionalRequestCommandParams.put("optionalInt",unitTestingtestComplexNullableOptionalRequestoptionalIntCommandParameterInfo);
      
       CommandParameterInfo unitTestingtestComplexNullableOptionalRequestnullableOptionalIntCommandParameterInfo = new CommandParameterInfo("nullableOptionalInt", Optional.class, Integer.class);
       unitTestingtestComplexNullableOptionalRequestCommandParams.put("nullableOptionalInt",unitTestingtestComplexNullableOptionalRequestnullableOptionalIntCommandParameterInfo);
      
       CommandParameterInfo unitTestingtestComplexNullableOptionalRequestnullableStringCommandParameterInfo = new CommandParameterInfo("nullableString", String.class, String.class);
       unitTestingtestComplexNullableOptionalRequestCommandParams.put("nullableString",unitTestingtestComplexNullableOptionalRequestnullableStringCommandParameterInfo);
      
       CommandParameterInfo unitTestingtestComplexNullableOptionalRequestoptionalStringCommandParameterInfo = new CommandParameterInfo("optionalString", Optional.class, String.class);
       unitTestingtestComplexNullableOptionalRequestCommandParams.put("optionalString",unitTestingtestComplexNullableOptionalRequestoptionalStringCommandParameterInfo);
      
       CommandParameterInfo unitTestingtestComplexNullableOptionalRequestnullableOptionalStringCommandParameterInfo = new CommandParameterInfo("nullableOptionalString", Optional.class, String.class);
       unitTestingtestComplexNullableOptionalRequestCommandParams.put("nullableOptionalString",unitTestingtestComplexNullableOptionalRequestnullableOptionalStringCommandParameterInfo);
      
       CommandParameterInfo unitTestingtestComplexNullableOptionalRequestnullableListCommandParameterInfo = new CommandParameterInfo("nullableList", ArrayList.class, Integer.class);
       unitTestingtestComplexNullableOptionalRequestCommandParams.put("nullableList",unitTestingtestComplexNullableOptionalRequestnullableListCommandParameterInfo);
      
       CommandParameterInfo unitTestingtestComplexNullableOptionalRequestoptionalListCommandParameterInfo = new CommandParameterInfo("optionalList", Optional.class, Integer.class);
       unitTestingtestComplexNullableOptionalRequestCommandParams.put("optionalList",unitTestingtestComplexNullableOptionalRequestoptionalListCommandParameterInfo);
      
       CommandParameterInfo unitTestingtestComplexNullableOptionalRequestnullableOptionalListCommandParameterInfo = new CommandParameterInfo("nullableOptionalList", Optional.class, Integer.class);
       unitTestingtestComplexNullableOptionalRequestCommandParams.put("nullableOptionalList",unitTestingtestComplexNullableOptionalRequestnullableOptionalListCommandParameterInfo);
     
       InteractionInfo unitTestingtestComplexNullableOptionalRequestInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Command.TestComplexNullableOptionalRequest.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.UnitTestingCluster) cluster)
         //  .testComplexNullableOptionalRequest((ChipClusters.UnitTestingCluster.TestComplexNullableOptionalResponseCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("nullableInt")
         //  
         //  , (Optional<Integer>)
         //  commandArguments.get("optionalInt")
         //  
         //  , (Optional<Integer>)
         //  commandArguments.get("nullableOptionalInt")
         //  
         //  , (String)
         //  commandArguments.get("nullableString")
         //  
         //  , (Optional<String>)
         //  commandArguments.get("optionalString")
         //  
         //  , (Optional<String>)
         //  commandArguments.get("nullableOptionalString")
         //  
         //  , (ChipStructs.UnitTestingClusterSimpleStruct)
         //  commandArguments.get("nullableStruct")
         //  
         //  , (Optional<ChipStructs.UnitTestingClusterSimpleStruct>)
         //  commandArguments.get("optionalStruct")
         //  
         //  , (Optional<ChipStructs.UnitTestingClusterSimpleStruct>)
         //  commandArguments.get("nullableOptionalStruct")
         //  
         //  , (ArrayList<Integer>)
         //  commandArguments.get("nullableList")
         //  
         //  , (Optional<ArrayList<Integer>>)
         //  commandArguments.get("optionalList")
         //  
         //  , (Optional<ArrayList<Integer>>)
         //  commandArguments.get("nullableOptionalList")
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedUnitTestingClusterTestComplexNullableOptionalResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           unitTestingtestComplexNullableOptionalRequestCommandParams
       );
       unitTestingClusterInteractionInfoMap.put("testComplexNullableOptionalRequest", unitTestingtestComplexNullableOptionalRequestInteractionInfo);
     Map<String, CommandParameterInfo> unitTestingsimpleStructEchoRequestCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       InteractionInfo unitTestingsimpleStructEchoRequestInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Command.SimpleStructEchoRequest.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.UnitTestingCluster) cluster)
         //  .simpleStructEchoRequest((ChipClusters.UnitTestingCluster.SimpleStructResponseCallback) callback
         //  
         //  , (ChipStructs.UnitTestingClusterSimpleStruct)
         //  commandArguments.get("arg1")
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedUnitTestingClusterSimpleStructResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           unitTestingsimpleStructEchoRequestCommandParams
       );
       unitTestingClusterInteractionInfoMap.put("simpleStructEchoRequest", unitTestingsimpleStructEchoRequestInteractionInfo);
     Map<String, CommandParameterInfo> unitTestingtimedInvokeRequestCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       InteractionInfo unitTestingtimedInvokeRequestInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Command.TimedInvokeRequest.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            10000
);
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.UnitTestingCluster) cluster)
         //  .timedInvokeRequest((DefaultClusterCallback) callback
         //  
         //  
         //  , 10000
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           unitTestingtimedInvokeRequestCommandParams
       );
       unitTestingClusterInteractionInfoMap.put("timedInvokeRequest", unitTestingtimedInvokeRequestInteractionInfo);
     Map<String, CommandParameterInfo> unitTestingtestSimpleOptionalArgumentRequestCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo unitTestingtestSimpleOptionalArgumentRequestarg1CommandParameterInfo = new CommandParameterInfo("arg1", Optional.class, Boolean.class);
       unitTestingtestSimpleOptionalArgumentRequestCommandParams.put("arg1",unitTestingtestSimpleOptionalArgumentRequestarg1CommandParameterInfo);
     
       InteractionInfo unitTestingtestSimpleOptionalArgumentRequestInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Command.TestSimpleOptionalArgumentRequest.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.UnitTestingCluster) cluster)
         //  .testSimpleOptionalArgumentRequest((DefaultClusterCallback) callback
         //  
         //  , (Optional<Boolean>)
         //  commandArguments.get("arg1")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           unitTestingtestSimpleOptionalArgumentRequestCommandParams
       );
       unitTestingClusterInteractionInfoMap.put("testSimpleOptionalArgumentRequest", unitTestingtestSimpleOptionalArgumentRequestInteractionInfo);
     Map<String, CommandParameterInfo> unitTestingtestEmitTestEventRequestCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo unitTestingtestEmitTestEventRequestarg1CommandParameterInfo = new CommandParameterInfo("arg1", Integer.class, Integer.class);
       unitTestingtestEmitTestEventRequestCommandParams.put("arg1",unitTestingtestEmitTestEventRequestarg1CommandParameterInfo);
      
       CommandParameterInfo unitTestingtestEmitTestEventRequestarg2CommandParameterInfo = new CommandParameterInfo("arg2", Integer.class, Integer.class);
       unitTestingtestEmitTestEventRequestCommandParams.put("arg2",unitTestingtestEmitTestEventRequestarg2CommandParameterInfo);
      
       CommandParameterInfo unitTestingtestEmitTestEventRequestarg3CommandParameterInfo = new CommandParameterInfo("arg3", Boolean.class, Boolean.class);
       unitTestingtestEmitTestEventRequestCommandParams.put("arg3",unitTestingtestEmitTestEventRequestarg3CommandParameterInfo);
     
       InteractionInfo unitTestingtestEmitTestEventRequestInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Command.TestEmitTestEventRequest.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.UnitTestingCluster) cluster)
         //  .testEmitTestEventRequest((ChipClusters.UnitTestingCluster.TestEmitTestEventResponseCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("arg1")
         //  
         //  , (Integer)
         //  commandArguments.get("arg2")
         //  
         //  , (Boolean)
         //  commandArguments.get("arg3")
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedUnitTestingClusterTestEmitTestEventResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           unitTestingtestEmitTestEventRequestCommandParams
       );
       unitTestingClusterInteractionInfoMap.put("testEmitTestEventRequest", unitTestingtestEmitTestEventRequestInteractionInfo);
     Map<String, CommandParameterInfo> unitTestingtestEmitTestFabricScopedEventRequestCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo unitTestingtestEmitTestFabricScopedEventRequestarg1CommandParameterInfo = new CommandParameterInfo("arg1", Integer.class, Integer.class);
       unitTestingtestEmitTestFabricScopedEventRequestCommandParams.put("arg1",unitTestingtestEmitTestFabricScopedEventRequestarg1CommandParameterInfo);
     
       InteractionInfo unitTestingtestEmitTestFabricScopedEventRequestInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Command.TestEmitTestFabricScopedEventRequest.getID(), new byte[0], null);
            deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
              0
            );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.UnitTestingCluster) cluster)
         //  .testEmitTestFabricScopedEventRequest((ChipClusters.UnitTestingCluster.TestEmitTestFabricScopedEventResponseCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("arg1")
         //  
         //   
         //  
         //  );
         },
         //() -> new DelegatedUnitTestingClusterTestEmitTestFabricScopedEventResponseCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           unitTestingtestEmitTestFabricScopedEventRequestCommandParams
       );
       unitTestingClusterInteractionInfoMap.put("testEmitTestFabricScopedEventRequest", unitTestingtestEmitTestFabricScopedEventRequestInteractionInfo);
     commandMap.put("unitTesting", unitTestingClusterInteractionInfoMap);
     Map<String, InteractionInfo> faultInjectionClusterInteractionInfoMap = new LinkedHashMap<>();
     Map<String, CommandParameterInfo> faultInjectionfailAtFaultCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo faultInjectionfailAtFaulttypeCommandParameterInfo = new CommandParameterInfo("type", Integer.class, Integer.class);
       faultInjectionfailAtFaultCommandParams.put("type",faultInjectionfailAtFaulttypeCommandParameterInfo);
      
       CommandParameterInfo faultInjectionfailAtFaultidCommandParameterInfo = new CommandParameterInfo("id", Long.class, Long.class);
       faultInjectionfailAtFaultCommandParams.put("id",faultInjectionfailAtFaultidCommandParameterInfo);
      
       CommandParameterInfo faultInjectionfailAtFaultnumCallsToSkipCommandParameterInfo = new CommandParameterInfo("numCallsToSkip", Long.class, Long.class);
       faultInjectionfailAtFaultCommandParams.put("numCallsToSkip",faultInjectionfailAtFaultnumCallsToSkipCommandParameterInfo);
      
       CommandParameterInfo faultInjectionfailAtFaultnumCallsToFailCommandParameterInfo = new CommandParameterInfo("numCallsToFail", Long.class, Long.class);
       faultInjectionfailAtFaultCommandParams.put("numCallsToFail",faultInjectionfailAtFaultnumCallsToFailCommandParameterInfo);
      
       CommandParameterInfo faultInjectionfailAtFaulttakeMutexCommandParameterInfo = new CommandParameterInfo("takeMutex", Boolean.class, Boolean.class);
       faultInjectionfailAtFaultCommandParams.put("takeMutex",faultInjectionfailAtFaulttakeMutexCommandParameterInfo);
     
       InteractionInfo faultInjectionfailAtFaultInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.FaultInjection.ID, ClusterIDMapping.FaultInjection.Command.FailAtFault.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.FaultInjectionCluster) cluster)
         //  .failAtFault((DefaultClusterCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("type")
         //  
         //  , (Long)
         //  commandArguments.get("id")
         //  
         //  , (Long)
         //  commandArguments.get("numCallsToSkip")
         //  
         //  , (Long)
         //  commandArguments.get("numCallsToFail")
         //  
         //  , (Boolean)
         //  commandArguments.get("takeMutex")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           faultInjectionfailAtFaultCommandParams
       );
       faultInjectionClusterInteractionInfoMap.put("failAtFault", faultInjectionfailAtFaultInteractionInfo);
     Map<String, CommandParameterInfo> faultInjectionfailRandomlyAtFaultCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
       CommandParameterInfo faultInjectionfailRandomlyAtFaulttypeCommandParameterInfo = new CommandParameterInfo("type", Integer.class, Integer.class);
       faultInjectionfailRandomlyAtFaultCommandParams.put("type",faultInjectionfailRandomlyAtFaulttypeCommandParameterInfo);
      
       CommandParameterInfo faultInjectionfailRandomlyAtFaultidCommandParameterInfo = new CommandParameterInfo("id", Long.class, Long.class);
       faultInjectionfailRandomlyAtFaultCommandParams.put("id",faultInjectionfailRandomlyAtFaultidCommandParameterInfo);
      
       CommandParameterInfo faultInjectionfailRandomlyAtFaultpercentageCommandParameterInfo = new CommandParameterInfo("percentage", Integer.class, Integer.class);
       faultInjectionfailRandomlyAtFaultCommandParams.put("percentage",faultInjectionfailRandomlyAtFaultpercentageCommandParameterInfo);
     
       InteractionInfo faultInjectionfailRandomlyAtFaultInteractionInfo = new InteractionInfo(
         (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
          InvokeElement element = InvokeElement.newInstance(endpointId, ClusterIDMapping.FaultInjection.ID, ClusterIDMapping.FaultInjection.Command.FailRandomlyAtFault.getID(), new byte[0], null);
          deviceController.invoke((DelegatedInvokeCallback) callback, devicePtr, element, 0,
            0
          );
         //(cluster, callback, commandArguments) -> {
         //  ((ChipClusters.FaultInjectionCluster) cluster)
         //  .failRandomlyAtFault((DefaultClusterCallback) callback
         //  
         //  , (Integer)
         //  commandArguments.get("type")
         //  
         //  , (Long)
         //  commandArguments.get("id")
         //  
         //  , (Integer)
         //  commandArguments.get("percentage")
         //  
         //  
         //  
         //  );
         },
         //() -> new DelegatedDefaultClusterCallback(),
         () -> new DelegatedInvokeCallback() {
          @Override
          public Object parseTlv(byte[] tlv) {
            return null;
          }
         },
           faultInjectionfailRandomlyAtFaultCommandParams
       );
       faultInjectionClusterInteractionInfoMap.put("failRandomlyAtFault", faultInjectionfailRandomlyAtFaultInteractionInfo);
     commandMap.put("faultInjection", faultInjectionClusterInteractionInfoMap);
     return commandMap;
  }

}
