/*
 *
 *    Copyright (c) 2023 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

package chip.devicecontroller;

import chip.devicecontroller.model.ChipAttributePath;
import chip.devicecontroller.model.ChipEventPath;
import chip.devicecontroller.model.NodeState;
import chip.devicecontroller.model.EndpointState;
import chip.devicecontroller.model.ClusterState;
import chip.devicecontroller.model.AttributeState;

import javax.annotation.Nullable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;

public class ChipClusters {

  public interface DefaultClusterCallback {
    void onSuccess();
    void onError(Exception error);
  }

  public interface BaseAttributeCallback {
    void onError(Exception error);
    default void onSubscriptionEstablished(long subscriptionId) {}
  }

  public interface CharStringAttributeCallback extends BaseAttributeCallback {
    /** Indicates a successful read for a CHAR_STRING attribute. */
    void onSuccess(String value);
  }

  public interface OctetStringAttributeCallback extends BaseAttributeCallback {
    /** Indicates a successful read for an OCTET_STRING attribute. */
    void onSuccess(byte[] value);
  }

  public interface IntegerAttributeCallback extends BaseAttributeCallback {
    void onSuccess(int value);
  }

  public interface LongAttributeCallback extends BaseAttributeCallback {
    void onSuccess(long value);
  }

  public interface BooleanAttributeCallback extends BaseAttributeCallback {
    void onSuccess(boolean value);
  }

  public interface FloatAttributeCallback extends BaseAttributeCallback {
    void onSuccess(float value);
  }

  public interface DoubleAttributeCallback extends BaseAttributeCallback {
    void onSuccess(double value);
  }

  public static abstract class BaseChipCluster {
    protected long chipClusterPtr;

    protected long devicePtr;
    protected int endpointId;

    public BaseChipCluster(long devicePtr, int endpointId) {
      chipClusterPtr = initWithDevice(devicePtr, endpointId);

      this.devicePtr = devicePtr;
      this.endpointId = endpointId;
    }

    /**
     * Sets the timeout, in milliseconds, after which commands sent through this cluster will fail
     * with a timeout (regardless of whether or not a response has been received). If set to an
     * empty optional, the default timeout will be used.
     */
    public void setCommandTimeout(Optional<Long> timeoutMillis) {
      setCommandTimeout(chipClusterPtr, timeoutMillis);
    }

    private native void setCommandTimeout(long clusterPtr, Optional<Long> timeoutMillis);

    /** Returns the current timeout (in milliseconds) for commands sent through this cluster. */
    public Optional<Long> getCommandTimeout() {
      Optional<Long> timeout = getCommandTimeout(chipClusterPtr);
      return timeout == null ? Optional.empty() : timeout;
    }

    private native Optional<Long> getCommandTimeout(long clusterPtr);

    public abstract long initWithDevice(long devicePtr, int endpointId);

    protected void readAttribute(ReportCallback callback, long clusterId, long attributeId, boolean isFabricFiltered, int imTimeoutMs) {
        ReportCallbackJni jniCallback = new ReportCallbackJni(null, callback, null);
        readAttribute(jniCallback.getCallbackHandle(), devicePtr, endpointId, clusterId, attributeId, isFabricFiltered, imTimeoutMs);
    }

    private native void readAttribute(long callbackHandle, long devicePtr, int endpointId, long clusterId, long attributeId, boolean isFabricFiltered, int imTimeoutMs);

    public native void deleteCluster(long chipClusterPtr);
    
    @SuppressWarnings("deprecation")
    protected void finalize() throws Throwable {
      super.finalize();

      if (chipClusterPtr != 0) {
        deleteCluster(chipClusterPtr);
        chipClusterPtr = 0;
      }
    }
  }

  abstract static class ReportCallbackImpl implements ReportCallback {
    private BaseAttributeCallback callback;
    private ChipAttributePath path;

    private static final long CHIP_ERROR_UNSUPPORTED_ATTRIBUTE = 0x86;

    ReportCallbackImpl(BaseAttributeCallback callback, ChipAttributePath path) {
      this.callback = callback;
      this.path = path;
    }

    @Override
    public void onError(
        @Nullable ChipAttributePath attributePath,
        @Nullable ChipEventPath eventPath,
        @Nonnull Exception e) {
      callback.onError(e);
    }

    @Override
    public void onReport(NodeState nodeState) {
      if (nodeState == null) {
        callback.onError(new ChipClusterException());
        return;
      }

      EndpointState endpointState = nodeState.getEndpointState((int)path.getEndpointId().getId());
      if (endpointState == null) {
        callback.onError(new ChipClusterException(CHIP_ERROR_UNSUPPORTED_ATTRIBUTE));
        return;
      }

      ClusterState clusterState = endpointState.getClusterState(path.getClusterId().getId());
      if (clusterState == null) {
        callback.onError(new ChipClusterException(CHIP_ERROR_UNSUPPORTED_ATTRIBUTE));
        return;
      }

      AttributeState attributeState = clusterState.getAttributeState(path.getAttributeId().getId());
      if (attributeState == null) {
        callback.onError(new ChipClusterException(CHIP_ERROR_UNSUPPORTED_ATTRIBUTE));
        return;
      }

      byte[] tlv = attributeState.getTlv();
      if (tlv == null) {
          callback.onError(new ChipClusterException(CHIP_ERROR_UNSUPPORTED_ATTRIBUTE));
          return;
      }

      onSuccess(tlv);
    }

    public abstract void onSuccess(byte[] tlv);
  }

  public static class IdentifyCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 3L;

    public IdentifyCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void identify(DefaultClusterCallback callback, Integer identifyTime) {
      identify(chipClusterPtr, callback, identifyTime, null);
    }

    public void identify(DefaultClusterCallback callback, Integer identifyTime, int timedInvokeTimeoutMs) {
      identify(chipClusterPtr, callback, identifyTime, timedInvokeTimeoutMs);
    }

    public void triggerEffect(DefaultClusterCallback callback, Integer effectIdentifier, Integer effectVariant) {
      triggerEffect(chipClusterPtr, callback, effectIdentifier, effectVariant, null);
    }

    public void triggerEffect(DefaultClusterCallback callback, Integer effectIdentifier, Integer effectVariant, int timedInvokeTimeoutMs) {
      triggerEffect(chipClusterPtr, callback, effectIdentifier, effectVariant, timedInvokeTimeoutMs);
    }

    private native void identify(long chipClusterPtr, DefaultClusterCallback callback, Integer identifyTime, @Nullable Integer timedInvokeTimeoutMs);

    private native void triggerEffect(long chipClusterPtr, DefaultClusterCallback callback, Integer effectIdentifier, Integer effectVariant, @Nullable Integer timedInvokeTimeoutMs);

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readIdentifyTimeAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeIdentifyTimeAttribute(DefaultClusterCallback callback, Integer value) {
        writeIdentifyTimeAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeIdentifyTimeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeIdentifyTimeAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeIdentifyTimeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeIdentifyTimeAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readIdentifyTypeAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeIdentifyTypeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeIdentifyTypeAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void writeIdentifyTimeAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeIdentifyTimeAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeIdentifyTypeAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class GroupsCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 4L;

    public GroupsCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void addGroup(AddGroupResponseCallback callback, Integer groupID, String groupName) {
      addGroup(chipClusterPtr, callback, groupID, groupName, null);
    }

    public void addGroup(AddGroupResponseCallback callback, Integer groupID, String groupName, int timedInvokeTimeoutMs) {
      addGroup(chipClusterPtr, callback, groupID, groupName, timedInvokeTimeoutMs);
    }

    public void viewGroup(ViewGroupResponseCallback callback, Integer groupID) {
      viewGroup(chipClusterPtr, callback, groupID, null);
    }

    public void viewGroup(ViewGroupResponseCallback callback, Integer groupID, int timedInvokeTimeoutMs) {
      viewGroup(chipClusterPtr, callback, groupID, timedInvokeTimeoutMs);
    }

    public void getGroupMembership(GetGroupMembershipResponseCallback callback, ArrayList<Integer> groupList) {
      getGroupMembership(chipClusterPtr, callback, groupList, null);
    }

    public void getGroupMembership(GetGroupMembershipResponseCallback callback, ArrayList<Integer> groupList, int timedInvokeTimeoutMs) {
      getGroupMembership(chipClusterPtr, callback, groupList, timedInvokeTimeoutMs);
    }

    public void removeGroup(RemoveGroupResponseCallback callback, Integer groupID) {
      removeGroup(chipClusterPtr, callback, groupID, null);
    }

    public void removeGroup(RemoveGroupResponseCallback callback, Integer groupID, int timedInvokeTimeoutMs) {
      removeGroup(chipClusterPtr, callback, groupID, timedInvokeTimeoutMs);
    }

    public void removeAllGroups(DefaultClusterCallback callback) {
      removeAllGroups(chipClusterPtr, callback, null);
    }

    public void removeAllGroups(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      removeAllGroups(chipClusterPtr, callback, timedInvokeTimeoutMs);
    }

    public void addGroupIfIdentifying(DefaultClusterCallback callback, Integer groupID, String groupName) {
      addGroupIfIdentifying(chipClusterPtr, callback, groupID, groupName, null);
    }

    public void addGroupIfIdentifying(DefaultClusterCallback callback, Integer groupID, String groupName, int timedInvokeTimeoutMs) {
      addGroupIfIdentifying(chipClusterPtr, callback, groupID, groupName, timedInvokeTimeoutMs);
    }

    private native void addGroup(long chipClusterPtr, AddGroupResponseCallback callback, Integer groupID, String groupName, @Nullable Integer timedInvokeTimeoutMs);

    private native void viewGroup(long chipClusterPtr, ViewGroupResponseCallback callback, Integer groupID, @Nullable Integer timedInvokeTimeoutMs);

    private native void getGroupMembership(long chipClusterPtr, GetGroupMembershipResponseCallback callback, ArrayList<Integer> groupList, @Nullable Integer timedInvokeTimeoutMs);

    private native void removeGroup(long chipClusterPtr, RemoveGroupResponseCallback callback, Integer groupID, @Nullable Integer timedInvokeTimeoutMs);

    private native void removeAllGroups(long chipClusterPtr, DefaultClusterCallback callback, @Nullable Integer timedInvokeTimeoutMs);

    private native void addGroupIfIdentifying(long chipClusterPtr, DefaultClusterCallback callback, Integer groupID, String groupName, @Nullable Integer timedInvokeTimeoutMs);

    public interface AddGroupResponseCallback {
      void onSuccess(Integer status, Integer groupID);
      void onError(Exception error);
    }

    public interface ViewGroupResponseCallback {
      void onSuccess(Integer status, Integer groupID, String groupName);
      void onError(Exception error);
    }

    public interface GetGroupMembershipResponseCallback {
      void onSuccess(@Nullable Integer capacity, ArrayList<Integer> groupList);
      void onError(Exception error);
    }

    public interface RemoveGroupResponseCallback {
      void onSuccess(Integer status, Integer groupID);
      void onError(Exception error);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readNameSupportAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeNameSupportAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeNameSupportAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeNameSupportAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class ScenesCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 5L;

    public ScenesCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void addScene(AddSceneResponseCallback callback, Integer groupID, Integer sceneID, Integer transitionTime, String sceneName, ArrayList<ChipStructs.ScenesClusterExtensionFieldSet> extensionFieldSets) {
      addScene(chipClusterPtr, callback, groupID, sceneID, transitionTime, sceneName, extensionFieldSets, null);
    }

    public void addScene(AddSceneResponseCallback callback, Integer groupID, Integer sceneID, Integer transitionTime, String sceneName, ArrayList<ChipStructs.ScenesClusterExtensionFieldSet> extensionFieldSets, int timedInvokeTimeoutMs) {
      addScene(chipClusterPtr, callback, groupID, sceneID, transitionTime, sceneName, extensionFieldSets, timedInvokeTimeoutMs);
    }

    public void viewScene(ViewSceneResponseCallback callback, Integer groupID, Integer sceneID) {
      viewScene(chipClusterPtr, callback, groupID, sceneID, null);
    }

    public void viewScene(ViewSceneResponseCallback callback, Integer groupID, Integer sceneID, int timedInvokeTimeoutMs) {
      viewScene(chipClusterPtr, callback, groupID, sceneID, timedInvokeTimeoutMs);
    }

    public void removeScene(RemoveSceneResponseCallback callback, Integer groupID, Integer sceneID) {
      removeScene(chipClusterPtr, callback, groupID, sceneID, null);
    }

    public void removeScene(RemoveSceneResponseCallback callback, Integer groupID, Integer sceneID, int timedInvokeTimeoutMs) {
      removeScene(chipClusterPtr, callback, groupID, sceneID, timedInvokeTimeoutMs);
    }

    public void removeAllScenes(RemoveAllScenesResponseCallback callback, Integer groupID) {
      removeAllScenes(chipClusterPtr, callback, groupID, null);
    }

    public void removeAllScenes(RemoveAllScenesResponseCallback callback, Integer groupID, int timedInvokeTimeoutMs) {
      removeAllScenes(chipClusterPtr, callback, groupID, timedInvokeTimeoutMs);
    }

    public void storeScene(StoreSceneResponseCallback callback, Integer groupID, Integer sceneID) {
      storeScene(chipClusterPtr, callback, groupID, sceneID, null);
    }

    public void storeScene(StoreSceneResponseCallback callback, Integer groupID, Integer sceneID, int timedInvokeTimeoutMs) {
      storeScene(chipClusterPtr, callback, groupID, sceneID, timedInvokeTimeoutMs);
    }

    public void recallScene(DefaultClusterCallback callback, Integer groupID, Integer sceneID, @Nullable Optional<Integer> transitionTime) {
      recallScene(chipClusterPtr, callback, groupID, sceneID, transitionTime, null);
    }

    public void recallScene(DefaultClusterCallback callback, Integer groupID, Integer sceneID, @Nullable Optional<Integer> transitionTime, int timedInvokeTimeoutMs) {
      recallScene(chipClusterPtr, callback, groupID, sceneID, transitionTime, timedInvokeTimeoutMs);
    }

    public void getSceneMembership(GetSceneMembershipResponseCallback callback, Integer groupID) {
      getSceneMembership(chipClusterPtr, callback, groupID, null);
    }

    public void getSceneMembership(GetSceneMembershipResponseCallback callback, Integer groupID, int timedInvokeTimeoutMs) {
      getSceneMembership(chipClusterPtr, callback, groupID, timedInvokeTimeoutMs);
    }

    public void enhancedAddScene(EnhancedAddSceneResponseCallback callback, Integer groupID, Integer sceneID, Integer transitionTime, String sceneName, ArrayList<ChipStructs.ScenesClusterExtensionFieldSet> extensionFieldSets) {
      enhancedAddScene(chipClusterPtr, callback, groupID, sceneID, transitionTime, sceneName, extensionFieldSets, null);
    }

    public void enhancedAddScene(EnhancedAddSceneResponseCallback callback, Integer groupID, Integer sceneID, Integer transitionTime, String sceneName, ArrayList<ChipStructs.ScenesClusterExtensionFieldSet> extensionFieldSets, int timedInvokeTimeoutMs) {
      enhancedAddScene(chipClusterPtr, callback, groupID, sceneID, transitionTime, sceneName, extensionFieldSets, timedInvokeTimeoutMs);
    }

    public void enhancedViewScene(EnhancedViewSceneResponseCallback callback, Integer groupID, Integer sceneID) {
      enhancedViewScene(chipClusterPtr, callback, groupID, sceneID, null);
    }

    public void enhancedViewScene(EnhancedViewSceneResponseCallback callback, Integer groupID, Integer sceneID, int timedInvokeTimeoutMs) {
      enhancedViewScene(chipClusterPtr, callback, groupID, sceneID, timedInvokeTimeoutMs);
    }

    public void copyScene(CopySceneResponseCallback callback, Integer mode, Integer groupIdentifierFrom, Integer sceneIdentifierFrom, Integer groupIdentifierTo, Integer sceneIdentifierTo) {
      copyScene(chipClusterPtr, callback, mode, groupIdentifierFrom, sceneIdentifierFrom, groupIdentifierTo, sceneIdentifierTo, null);
    }

    public void copyScene(CopySceneResponseCallback callback, Integer mode, Integer groupIdentifierFrom, Integer sceneIdentifierFrom, Integer groupIdentifierTo, Integer sceneIdentifierTo, int timedInvokeTimeoutMs) {
      copyScene(chipClusterPtr, callback, mode, groupIdentifierFrom, sceneIdentifierFrom, groupIdentifierTo, sceneIdentifierTo, timedInvokeTimeoutMs);
    }

    private native void addScene(long chipClusterPtr, AddSceneResponseCallback callback, Integer groupID, Integer sceneID, Integer transitionTime, String sceneName, ArrayList<ChipStructs.ScenesClusterExtensionFieldSet> extensionFieldSets, @Nullable Integer timedInvokeTimeoutMs);

    private native void viewScene(long chipClusterPtr, ViewSceneResponseCallback callback, Integer groupID, Integer sceneID, @Nullable Integer timedInvokeTimeoutMs);

    private native void removeScene(long chipClusterPtr, RemoveSceneResponseCallback callback, Integer groupID, Integer sceneID, @Nullable Integer timedInvokeTimeoutMs);

    private native void removeAllScenes(long chipClusterPtr, RemoveAllScenesResponseCallback callback, Integer groupID, @Nullable Integer timedInvokeTimeoutMs);

    private native void storeScene(long chipClusterPtr, StoreSceneResponseCallback callback, Integer groupID, Integer sceneID, @Nullable Integer timedInvokeTimeoutMs);

    private native void recallScene(long chipClusterPtr, DefaultClusterCallback callback, Integer groupID, Integer sceneID, @Nullable Optional<Integer> transitionTime, @Nullable Integer timedInvokeTimeoutMs);

    private native void getSceneMembership(long chipClusterPtr, GetSceneMembershipResponseCallback callback, Integer groupID, @Nullable Integer timedInvokeTimeoutMs);

    private native void enhancedAddScene(long chipClusterPtr, EnhancedAddSceneResponseCallback callback, Integer groupID, Integer sceneID, Integer transitionTime, String sceneName, ArrayList<ChipStructs.ScenesClusterExtensionFieldSet> extensionFieldSets, @Nullable Integer timedInvokeTimeoutMs);

    private native void enhancedViewScene(long chipClusterPtr, EnhancedViewSceneResponseCallback callback, Integer groupID, Integer sceneID, @Nullable Integer timedInvokeTimeoutMs);

    private native void copyScene(long chipClusterPtr, CopySceneResponseCallback callback, Integer mode, Integer groupIdentifierFrom, Integer sceneIdentifierFrom, Integer groupIdentifierTo, Integer sceneIdentifierTo, @Nullable Integer timedInvokeTimeoutMs);

    public interface AddSceneResponseCallback {
      void onSuccess(Integer status, Integer groupID, Integer sceneID);
      void onError(Exception error);
    }

    public interface ViewSceneResponseCallback {
      void onSuccess(Integer status, Integer groupID, Integer sceneID, Optional<Integer> transitionTime, Optional<String> sceneName, Optional<ArrayList<ChipStructs.ScenesClusterExtensionFieldSet>> extensionFieldSets);
      void onError(Exception error);
    }

    public interface RemoveSceneResponseCallback {
      void onSuccess(Integer status, Integer groupID, Integer sceneID);
      void onError(Exception error);
    }

    public interface RemoveAllScenesResponseCallback {
      void onSuccess(Integer status, Integer groupID);
      void onError(Exception error);
    }

    public interface StoreSceneResponseCallback {
      void onSuccess(Integer status, Integer groupID, Integer sceneID);
      void onError(Exception error);
    }

    public interface GetSceneMembershipResponseCallback {
      void onSuccess(Integer status, @Nullable Integer capacity, Integer groupID, Optional<ArrayList<Integer>> sceneList);
      void onError(Exception error);
    }

    public interface EnhancedAddSceneResponseCallback {
      void onSuccess(Integer status, Integer groupID, Integer sceneID);
      void onError(Exception error);
    }

    public interface EnhancedViewSceneResponseCallback {
      void onSuccess(Integer status, Integer groupID, Integer sceneID, Optional<Integer> transitionTime, Optional<String> sceneName, Optional<ArrayList<ChipStructs.ScenesClusterExtensionFieldSet>> extensionFieldSets);
      void onError(Exception error);
    }

    public interface CopySceneResponseCallback {
      void onSuccess(Integer status, Integer groupIdentifierFrom, Integer sceneIdentifierFrom);
      void onError(Exception error);
    }

    public interface LastConfiguredByAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readSceneCountAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeSceneCountAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeSceneCountAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readCurrentSceneAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeCurrentSceneAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeCurrentSceneAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readCurrentGroupAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeCurrentGroupAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeCurrentGroupAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readSceneValidAttribute(
        BooleanAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeSceneValidAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeSceneValidAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readNameSupportAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeNameSupportAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeNameSupportAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readLastConfiguredByAttribute(
        LastConfiguredByAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeLastConfiguredByAttribute(
        LastConfiguredByAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeLastConfiguredByAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readSceneTableSizeAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeSceneTableSizeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeSceneTableSizeAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readRemainingCapacityAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeRemainingCapacityAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeRemainingCapacityAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeSceneCountAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeCurrentSceneAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeCurrentGroupAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeSceneValidAttribute(long chipClusterPtr, BooleanAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeNameSupportAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeLastConfiguredByAttribute(long chipClusterPtr, LastConfiguredByAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeSceneTableSizeAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeRemainingCapacityAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class OnOffCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 6L;

    public OnOffCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void off(DefaultClusterCallback callback) {
      off(chipClusterPtr, callback, null);
    }

    public void off(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      off(chipClusterPtr, callback, timedInvokeTimeoutMs);
    }

    public void on(DefaultClusterCallback callback) {
      on(chipClusterPtr, callback, null);
    }

    public void on(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      on(chipClusterPtr, callback, timedInvokeTimeoutMs);
    }

    public void toggle(DefaultClusterCallback callback) {
      toggle(chipClusterPtr, callback, null);
    }

    public void toggle(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      toggle(chipClusterPtr, callback, timedInvokeTimeoutMs);
    }

    public void offWithEffect(DefaultClusterCallback callback, Integer effectIdentifier, Integer effectVariant) {
      offWithEffect(chipClusterPtr, callback, effectIdentifier, effectVariant, null);
    }

    public void offWithEffect(DefaultClusterCallback callback, Integer effectIdentifier, Integer effectVariant, int timedInvokeTimeoutMs) {
      offWithEffect(chipClusterPtr, callback, effectIdentifier, effectVariant, timedInvokeTimeoutMs);
    }

    public void onWithRecallGlobalScene(DefaultClusterCallback callback) {
      onWithRecallGlobalScene(chipClusterPtr, callback, null);
    }

    public void onWithRecallGlobalScene(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      onWithRecallGlobalScene(chipClusterPtr, callback, timedInvokeTimeoutMs);
    }

    public void onWithTimedOff(DefaultClusterCallback callback, Integer onOffControl, Integer onTime, Integer offWaitTime) {
      onWithTimedOff(chipClusterPtr, callback, onOffControl, onTime, offWaitTime, null);
    }

    public void onWithTimedOff(DefaultClusterCallback callback, Integer onOffControl, Integer onTime, Integer offWaitTime, int timedInvokeTimeoutMs) {
      onWithTimedOff(chipClusterPtr, callback, onOffControl, onTime, offWaitTime, timedInvokeTimeoutMs);
    }

    private native void off(long chipClusterPtr, DefaultClusterCallback callback, @Nullable Integer timedInvokeTimeoutMs);

    private native void on(long chipClusterPtr, DefaultClusterCallback callback, @Nullable Integer timedInvokeTimeoutMs);

    private native void toggle(long chipClusterPtr, DefaultClusterCallback callback, @Nullable Integer timedInvokeTimeoutMs);

    private native void offWithEffect(long chipClusterPtr, DefaultClusterCallback callback, Integer effectIdentifier, Integer effectVariant, @Nullable Integer timedInvokeTimeoutMs);

    private native void onWithRecallGlobalScene(long chipClusterPtr, DefaultClusterCallback callback, @Nullable Integer timedInvokeTimeoutMs);

    private native void onWithTimedOff(long chipClusterPtr, DefaultClusterCallback callback, Integer onOffControl, Integer onTime, Integer offWaitTime, @Nullable Integer timedInvokeTimeoutMs);

    public interface StartUpOnOffAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readOnOffAttribute(
        BooleanAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeOnOffAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeOnOffAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGlobalSceneControlAttribute(
        BooleanAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 16384L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGlobalSceneControlAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGlobalSceneControlAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readOnTimeAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 16385L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeOnTimeAttribute(DefaultClusterCallback callback, Integer value) {
        writeOnTimeAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeOnTimeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeOnTimeAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeOnTimeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeOnTimeAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readOffWaitTimeAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 16386L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeOffWaitTimeAttribute(DefaultClusterCallback callback, Integer value) {
        writeOffWaitTimeAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeOffWaitTimeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeOffWaitTimeAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeOffWaitTimeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeOffWaitTimeAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readStartUpOnOffAttribute(
        StartUpOnOffAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 16387L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeStartUpOnOffAttribute(DefaultClusterCallback callback, Integer value) {
        writeStartUpOnOffAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeStartUpOnOffAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeStartUpOnOffAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeStartUpOnOffAttribute(
        StartUpOnOffAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeStartUpOnOffAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeOnOffAttribute(long chipClusterPtr, BooleanAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGlobalSceneControlAttribute(long chipClusterPtr, BooleanAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeOnTimeAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeOnTimeAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeOffWaitTimeAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeOffWaitTimeAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeStartUpOnOffAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeStartUpOnOffAttribute(long chipClusterPtr, StartUpOnOffAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class OnOffSwitchConfigurationCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 7L;

    public OnOffSwitchConfigurationCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readSwitchTypeAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeSwitchTypeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeSwitchTypeAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readSwitchActionsAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 16L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeSwitchActionsAttribute(DefaultClusterCallback callback, Integer value) {
        writeSwitchActionsAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeSwitchActionsAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeSwitchActionsAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeSwitchActionsAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeSwitchActionsAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeSwitchTypeAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeSwitchActionsAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeSwitchActionsAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class LevelControlCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 8L;

    public LevelControlCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void moveToLevel(DefaultClusterCallback callback, Integer level, @Nullable Integer transitionTime, Integer optionsMask, Integer optionsOverride) {
      moveToLevel(chipClusterPtr, callback, level, transitionTime, optionsMask, optionsOverride, null);
    }

    public void moveToLevel(DefaultClusterCallback callback, Integer level, @Nullable Integer transitionTime, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      moveToLevel(chipClusterPtr, callback, level, transitionTime, optionsMask, optionsOverride, timedInvokeTimeoutMs);
    }

    public void move(DefaultClusterCallback callback, Integer moveMode, @Nullable Integer rate, Integer optionsMask, Integer optionsOverride) {
      move(chipClusterPtr, callback, moveMode, rate, optionsMask, optionsOverride, null);
    }

    public void move(DefaultClusterCallback callback, Integer moveMode, @Nullable Integer rate, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      move(chipClusterPtr, callback, moveMode, rate, optionsMask, optionsOverride, timedInvokeTimeoutMs);
    }

    public void step(DefaultClusterCallback callback, Integer stepMode, Integer stepSize, @Nullable Integer transitionTime, Integer optionsMask, Integer optionsOverride) {
      step(chipClusterPtr, callback, stepMode, stepSize, transitionTime, optionsMask, optionsOverride, null);
    }

    public void step(DefaultClusterCallback callback, Integer stepMode, Integer stepSize, @Nullable Integer transitionTime, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      step(chipClusterPtr, callback, stepMode, stepSize, transitionTime, optionsMask, optionsOverride, timedInvokeTimeoutMs);
    }

    public void stop(DefaultClusterCallback callback, Integer optionsMask, Integer optionsOverride) {
      stop(chipClusterPtr, callback, optionsMask, optionsOverride, null);
    }

    public void stop(DefaultClusterCallback callback, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      stop(chipClusterPtr, callback, optionsMask, optionsOverride, timedInvokeTimeoutMs);
    }

    public void moveToLevelWithOnOff(DefaultClusterCallback callback, Integer level, @Nullable Integer transitionTime, Integer optionsMask, Integer optionsOverride) {
      moveToLevelWithOnOff(chipClusterPtr, callback, level, transitionTime, optionsMask, optionsOverride, null);
    }

    public void moveToLevelWithOnOff(DefaultClusterCallback callback, Integer level, @Nullable Integer transitionTime, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      moveToLevelWithOnOff(chipClusterPtr, callback, level, transitionTime, optionsMask, optionsOverride, timedInvokeTimeoutMs);
    }

    public void moveWithOnOff(DefaultClusterCallback callback, Integer moveMode, @Nullable Integer rate, Integer optionsMask, Integer optionsOverride) {
      moveWithOnOff(chipClusterPtr, callback, moveMode, rate, optionsMask, optionsOverride, null);
    }

    public void moveWithOnOff(DefaultClusterCallback callback, Integer moveMode, @Nullable Integer rate, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      moveWithOnOff(chipClusterPtr, callback, moveMode, rate, optionsMask, optionsOverride, timedInvokeTimeoutMs);
    }

    public void stepWithOnOff(DefaultClusterCallback callback, Integer stepMode, Integer stepSize, @Nullable Integer transitionTime, Integer optionsMask, Integer optionsOverride) {
      stepWithOnOff(chipClusterPtr, callback, stepMode, stepSize, transitionTime, optionsMask, optionsOverride, null);
    }

    public void stepWithOnOff(DefaultClusterCallback callback, Integer stepMode, Integer stepSize, @Nullable Integer transitionTime, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      stepWithOnOff(chipClusterPtr, callback, stepMode, stepSize, transitionTime, optionsMask, optionsOverride, timedInvokeTimeoutMs);
    }

    public void stopWithOnOff(DefaultClusterCallback callback, Integer optionsMask, Integer optionsOverride) {
      stopWithOnOff(chipClusterPtr, callback, optionsMask, optionsOverride, null);
    }

    public void stopWithOnOff(DefaultClusterCallback callback, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      stopWithOnOff(chipClusterPtr, callback, optionsMask, optionsOverride, timedInvokeTimeoutMs);
    }

    public void moveToClosestFrequency(DefaultClusterCallback callback, Integer frequency) {
      moveToClosestFrequency(chipClusterPtr, callback, frequency, null);
    }

    public void moveToClosestFrequency(DefaultClusterCallback callback, Integer frequency, int timedInvokeTimeoutMs) {
      moveToClosestFrequency(chipClusterPtr, callback, frequency, timedInvokeTimeoutMs);
    }

    private native void moveToLevel(long chipClusterPtr, DefaultClusterCallback callback, Integer level, @Nullable Integer transitionTime, Integer optionsMask, Integer optionsOverride, @Nullable Integer timedInvokeTimeoutMs);

    private native void move(long chipClusterPtr, DefaultClusterCallback callback, Integer moveMode, @Nullable Integer rate, Integer optionsMask, Integer optionsOverride, @Nullable Integer timedInvokeTimeoutMs);

    private native void step(long chipClusterPtr, DefaultClusterCallback callback, Integer stepMode, Integer stepSize, @Nullable Integer transitionTime, Integer optionsMask, Integer optionsOverride, @Nullable Integer timedInvokeTimeoutMs);

    private native void stop(long chipClusterPtr, DefaultClusterCallback callback, Integer optionsMask, Integer optionsOverride, @Nullable Integer timedInvokeTimeoutMs);

    private native void moveToLevelWithOnOff(long chipClusterPtr, DefaultClusterCallback callback, Integer level, @Nullable Integer transitionTime, Integer optionsMask, Integer optionsOverride, @Nullable Integer timedInvokeTimeoutMs);

    private native void moveWithOnOff(long chipClusterPtr, DefaultClusterCallback callback, Integer moveMode, @Nullable Integer rate, Integer optionsMask, Integer optionsOverride, @Nullable Integer timedInvokeTimeoutMs);

    private native void stepWithOnOff(long chipClusterPtr, DefaultClusterCallback callback, Integer stepMode, Integer stepSize, @Nullable Integer transitionTime, Integer optionsMask, Integer optionsOverride, @Nullable Integer timedInvokeTimeoutMs);

    private native void stopWithOnOff(long chipClusterPtr, DefaultClusterCallback callback, Integer optionsMask, Integer optionsOverride, @Nullable Integer timedInvokeTimeoutMs);

    private native void moveToClosestFrequency(long chipClusterPtr, DefaultClusterCallback callback, Integer frequency, @Nullable Integer timedInvokeTimeoutMs);

    public interface CurrentLevelAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface OnLevelAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface OnTransitionTimeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface OffTransitionTimeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface DefaultMoveRateAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface StartUpCurrentLevelAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readCurrentLevelAttribute(
        CurrentLevelAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeCurrentLevelAttribute(
        CurrentLevelAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeCurrentLevelAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readRemainingTimeAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeRemainingTimeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeRemainingTimeAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMinLevelAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMinLevelAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMinLevelAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMaxLevelAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMaxLevelAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMaxLevelAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readCurrentFrequencyAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeCurrentFrequencyAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeCurrentFrequencyAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMinFrequencyAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMinFrequencyAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMinFrequencyAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMaxFrequencyAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMaxFrequencyAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMaxFrequencyAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readOptionsAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 15L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeOptionsAttribute(DefaultClusterCallback callback, Integer value) {
        writeOptionsAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeOptionsAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeOptionsAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeOptionsAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeOptionsAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readOnOffTransitionTimeAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 16L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeOnOffTransitionTimeAttribute(DefaultClusterCallback callback, Integer value) {
        writeOnOffTransitionTimeAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeOnOffTransitionTimeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeOnOffTransitionTimeAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeOnOffTransitionTimeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeOnOffTransitionTimeAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readOnLevelAttribute(
        OnLevelAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 17L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeOnLevelAttribute(DefaultClusterCallback callback, Integer value) {
        writeOnLevelAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeOnLevelAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeOnLevelAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeOnLevelAttribute(
        OnLevelAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeOnLevelAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readOnTransitionTimeAttribute(
        OnTransitionTimeAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 18L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeOnTransitionTimeAttribute(DefaultClusterCallback callback, Integer value) {
        writeOnTransitionTimeAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeOnTransitionTimeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeOnTransitionTimeAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeOnTransitionTimeAttribute(
        OnTransitionTimeAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeOnTransitionTimeAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readOffTransitionTimeAttribute(
        OffTransitionTimeAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 19L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeOffTransitionTimeAttribute(DefaultClusterCallback callback, Integer value) {
        writeOffTransitionTimeAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeOffTransitionTimeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeOffTransitionTimeAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeOffTransitionTimeAttribute(
        OffTransitionTimeAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeOffTransitionTimeAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readDefaultMoveRateAttribute(
        DefaultMoveRateAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 20L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeDefaultMoveRateAttribute(DefaultClusterCallback callback, Integer value) {
        writeDefaultMoveRateAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeDefaultMoveRateAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeDefaultMoveRateAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeDefaultMoveRateAttribute(
        DefaultMoveRateAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeDefaultMoveRateAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readStartUpCurrentLevelAttribute(
        StartUpCurrentLevelAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 16384L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeStartUpCurrentLevelAttribute(DefaultClusterCallback callback, Integer value) {
        writeStartUpCurrentLevelAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeStartUpCurrentLevelAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeStartUpCurrentLevelAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeStartUpCurrentLevelAttribute(
        StartUpCurrentLevelAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeStartUpCurrentLevelAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeCurrentLevelAttribute(long chipClusterPtr, CurrentLevelAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeRemainingTimeAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMinLevelAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMaxLevelAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeCurrentFrequencyAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMinFrequencyAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMaxFrequencyAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeOptionsAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeOptionsAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeOnOffTransitionTimeAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeOnOffTransitionTimeAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeOnLevelAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeOnLevelAttribute(long chipClusterPtr, OnLevelAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeOnTransitionTimeAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeOnTransitionTimeAttribute(long chipClusterPtr, OnTransitionTimeAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeOffTransitionTimeAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeOffTransitionTimeAttribute(long chipClusterPtr, OffTransitionTimeAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeDefaultMoveRateAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeDefaultMoveRateAttribute(long chipClusterPtr, DefaultMoveRateAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeStartUpCurrentLevelAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeStartUpCurrentLevelAttribute(long chipClusterPtr, StartUpCurrentLevelAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class BinaryInputBasicCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 15L;

    public BinaryInputBasicCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readActiveTextAttribute(
        CharStringAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeActiveTextAttribute(DefaultClusterCallback callback, String value) {
        writeActiveTextAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeActiveTextAttribute(DefaultClusterCallback callback, String value, int timedWriteTimeoutMs) {
        writeActiveTextAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeActiveTextAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeActiveTextAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readDescriptionAttribute(
        CharStringAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 28L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeDescriptionAttribute(DefaultClusterCallback callback, String value) {
        writeDescriptionAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeDescriptionAttribute(DefaultClusterCallback callback, String value, int timedWriteTimeoutMs) {
        writeDescriptionAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeDescriptionAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeDescriptionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readInactiveTextAttribute(
        CharStringAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 46L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeInactiveTextAttribute(DefaultClusterCallback callback, String value) {
        writeInactiveTextAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeInactiveTextAttribute(DefaultClusterCallback callback, String value, int timedWriteTimeoutMs) {
        writeInactiveTextAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeInactiveTextAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeInactiveTextAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readOutOfServiceAttribute(
        BooleanAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 81L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeOutOfServiceAttribute(DefaultClusterCallback callback, Boolean value) {
        writeOutOfServiceAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeOutOfServiceAttribute(DefaultClusterCallback callback, Boolean value, int timedWriteTimeoutMs) {
        writeOutOfServiceAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeOutOfServiceAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeOutOfServiceAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readPolarityAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 84L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribePolarityAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePolarityAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readPresentValueAttribute(
        BooleanAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 85L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writePresentValueAttribute(DefaultClusterCallback callback, Boolean value) {
        writePresentValueAttribute(chipClusterPtr, callback, value, null);
    }

    public void writePresentValueAttribute(DefaultClusterCallback callback, Boolean value, int timedWriteTimeoutMs) {
        writePresentValueAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribePresentValueAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePresentValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readReliabilityAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 103L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeReliabilityAttribute(DefaultClusterCallback callback, Integer value) {
        writeReliabilityAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeReliabilityAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeReliabilityAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeReliabilityAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeReliabilityAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readStatusFlagsAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 111L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeStatusFlagsAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeStatusFlagsAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readApplicationTypeAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 256L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeApplicationTypeAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeApplicationTypeAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void writeActiveTextAttribute(long chipClusterPtr, DefaultClusterCallback callback, String value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeActiveTextAttribute(long chipClusterPtr, CharStringAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeDescriptionAttribute(long chipClusterPtr, DefaultClusterCallback callback, String value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeDescriptionAttribute(long chipClusterPtr, CharStringAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeInactiveTextAttribute(long chipClusterPtr, DefaultClusterCallback callback, String value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeInactiveTextAttribute(long chipClusterPtr, CharStringAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeOutOfServiceAttribute(long chipClusterPtr, DefaultClusterCallback callback, Boolean value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeOutOfServiceAttribute(long chipClusterPtr, BooleanAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribePolarityAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writePresentValueAttribute(long chipClusterPtr, DefaultClusterCallback callback, Boolean value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribePresentValueAttribute(long chipClusterPtr, BooleanAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeReliabilityAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeReliabilityAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeStatusFlagsAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeApplicationTypeAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class PulseWidthModulationCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 28L;

    public PulseWidthModulationCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class DescriptorCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 29L;

    public DescriptorCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface DeviceTypeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.DescriptorClusterDeviceTypeStruct> value);
    }

    public interface ServerListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface ClientListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface PartsListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Integer> value);
    }

    public interface TagListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.DescriptorClusterSemanticTagStruct> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readDeviceTypeListAttribute(
        DeviceTypeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.DescriptorClusterDeviceTypeStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeDeviceTypeListAttribute(
        DeviceTypeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeDeviceTypeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readServerListAttribute(
        ServerListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeServerListAttribute(
        ServerListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeServerListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClientListAttribute(
        ClientListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClientListAttribute(
        ClientListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClientListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readPartsListAttribute(
        PartsListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribePartsListAttribute(
        PartsListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePartsListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readTagListAttribute(
        TagListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.DescriptorClusterSemanticTagStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeTagListAttribute(
        TagListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeTagListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeDeviceTypeListAttribute(long chipClusterPtr, DeviceTypeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeServerListAttribute(long chipClusterPtr, ServerListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClientListAttribute(long chipClusterPtr, ClientListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribePartsListAttribute(long chipClusterPtr, PartsListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeTagListAttribute(long chipClusterPtr, TagListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class BindingCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 30L;

    public BindingCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface BindingAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.BindingClusterTargetStruct> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readBindingAttribute(
        BindingAttributeCallback callback) {
        readBindingAttributeWithFabricFilter(callback, true);
    }

    public void readBindingAttributeWithFabricFilter(
        BindingAttributeCallback callback, boolean isFabricFiltered) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.BindingClusterTargetStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, isFabricFiltered, 0);
    }

    public void writeBindingAttribute(DefaultClusterCallback callback, ArrayList<ChipStructs.BindingClusterTargetStruct> value) {
        writeBindingAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeBindingAttribute(DefaultClusterCallback callback, ArrayList<ChipStructs.BindingClusterTargetStruct> value, int timedWriteTimeoutMs) {
        writeBindingAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeBindingAttribute(
        BindingAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeBindingAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void writeBindingAttribute(long chipClusterPtr, DefaultClusterCallback callback, ArrayList<ChipStructs.BindingClusterTargetStruct> value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeBindingAttribute(long chipClusterPtr, BindingAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class AccessControlCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 31L;

    public AccessControlCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface AclAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.AccessControlClusterAccessControlEntryStruct> value);
    }

    public interface ExtensionAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.AccessControlClusterAccessControlExtensionStruct> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readAclAttribute(
        AclAttributeCallback callback) {
        readAclAttributeWithFabricFilter(callback, true);
    }

    public void readAclAttributeWithFabricFilter(
        AclAttributeCallback callback, boolean isFabricFiltered) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.AccessControlClusterAccessControlEntryStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, isFabricFiltered, 0);
    }

    public void writeAclAttribute(DefaultClusterCallback callback, ArrayList<ChipStructs.AccessControlClusterAccessControlEntryStruct> value) {
        writeAclAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeAclAttribute(DefaultClusterCallback callback, ArrayList<ChipStructs.AccessControlClusterAccessControlEntryStruct> value, int timedWriteTimeoutMs) {
        writeAclAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeAclAttribute(
        AclAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAclAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readExtensionAttribute(
        ExtensionAttributeCallback callback) {
        readExtensionAttributeWithFabricFilter(callback, true);
    }

    public void readExtensionAttributeWithFabricFilter(
        ExtensionAttributeCallback callback, boolean isFabricFiltered) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.AccessControlClusterAccessControlExtensionStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, isFabricFiltered, 0);
    }

    public void writeExtensionAttribute(DefaultClusterCallback callback, ArrayList<ChipStructs.AccessControlClusterAccessControlExtensionStruct> value) {
        writeExtensionAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeExtensionAttribute(DefaultClusterCallback callback, ArrayList<ChipStructs.AccessControlClusterAccessControlExtensionStruct> value, int timedWriteTimeoutMs) {
        writeExtensionAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeExtensionAttribute(
        ExtensionAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeExtensionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readSubjectsPerAccessControlEntryAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeSubjectsPerAccessControlEntryAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeSubjectsPerAccessControlEntryAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readTargetsPerAccessControlEntryAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeTargetsPerAccessControlEntryAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeTargetsPerAccessControlEntryAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAccessControlEntriesPerFabricAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAccessControlEntriesPerFabricAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAccessControlEntriesPerFabricAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void writeAclAttribute(long chipClusterPtr, DefaultClusterCallback callback, ArrayList<ChipStructs.AccessControlClusterAccessControlEntryStruct> value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeAclAttribute(long chipClusterPtr, AclAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeExtensionAttribute(long chipClusterPtr, DefaultClusterCallback callback, ArrayList<ChipStructs.AccessControlClusterAccessControlExtensionStruct> value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeExtensionAttribute(long chipClusterPtr, ExtensionAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeSubjectsPerAccessControlEntryAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeTargetsPerAccessControlEntryAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAccessControlEntriesPerFabricAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class ActionsCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 37L;

    public ActionsCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void instantAction(DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID) {
      instantAction(chipClusterPtr, callback, actionID, invokeID, null);
    }

    public void instantAction(DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID, int timedInvokeTimeoutMs) {
      instantAction(chipClusterPtr, callback, actionID, invokeID, timedInvokeTimeoutMs);
    }

    public void instantActionWithTransition(DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID, Integer transitionTime) {
      instantActionWithTransition(chipClusterPtr, callback, actionID, invokeID, transitionTime, null);
    }

    public void instantActionWithTransition(DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID, Integer transitionTime, int timedInvokeTimeoutMs) {
      instantActionWithTransition(chipClusterPtr, callback, actionID, invokeID, transitionTime, timedInvokeTimeoutMs);
    }

    public void startAction(DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID) {
      startAction(chipClusterPtr, callback, actionID, invokeID, null);
    }

    public void startAction(DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID, int timedInvokeTimeoutMs) {
      startAction(chipClusterPtr, callback, actionID, invokeID, timedInvokeTimeoutMs);
    }

    public void startActionWithDuration(DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID, Long duration) {
      startActionWithDuration(chipClusterPtr, callback, actionID, invokeID, duration, null);
    }

    public void startActionWithDuration(DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID, Long duration, int timedInvokeTimeoutMs) {
      startActionWithDuration(chipClusterPtr, callback, actionID, invokeID, duration, timedInvokeTimeoutMs);
    }

    public void stopAction(DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID) {
      stopAction(chipClusterPtr, callback, actionID, invokeID, null);
    }

    public void stopAction(DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID, int timedInvokeTimeoutMs) {
      stopAction(chipClusterPtr, callback, actionID, invokeID, timedInvokeTimeoutMs);
    }

    public void pauseAction(DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID) {
      pauseAction(chipClusterPtr, callback, actionID, invokeID, null);
    }

    public void pauseAction(DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID, int timedInvokeTimeoutMs) {
      pauseAction(chipClusterPtr, callback, actionID, invokeID, timedInvokeTimeoutMs);
    }

    public void pauseActionWithDuration(DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID, Long duration) {
      pauseActionWithDuration(chipClusterPtr, callback, actionID, invokeID, duration, null);
    }

    public void pauseActionWithDuration(DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID, Long duration, int timedInvokeTimeoutMs) {
      pauseActionWithDuration(chipClusterPtr, callback, actionID, invokeID, duration, timedInvokeTimeoutMs);
    }

    public void resumeAction(DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID) {
      resumeAction(chipClusterPtr, callback, actionID, invokeID, null);
    }

    public void resumeAction(DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID, int timedInvokeTimeoutMs) {
      resumeAction(chipClusterPtr, callback, actionID, invokeID, timedInvokeTimeoutMs);
    }

    public void enableAction(DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID) {
      enableAction(chipClusterPtr, callback, actionID, invokeID, null);
    }

    public void enableAction(DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID, int timedInvokeTimeoutMs) {
      enableAction(chipClusterPtr, callback, actionID, invokeID, timedInvokeTimeoutMs);
    }

    public void enableActionWithDuration(DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID, Long duration) {
      enableActionWithDuration(chipClusterPtr, callback, actionID, invokeID, duration, null);
    }

    public void enableActionWithDuration(DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID, Long duration, int timedInvokeTimeoutMs) {
      enableActionWithDuration(chipClusterPtr, callback, actionID, invokeID, duration, timedInvokeTimeoutMs);
    }

    public void disableAction(DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID) {
      disableAction(chipClusterPtr, callback, actionID, invokeID, null);
    }

    public void disableAction(DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID, int timedInvokeTimeoutMs) {
      disableAction(chipClusterPtr, callback, actionID, invokeID, timedInvokeTimeoutMs);
    }

    public void disableActionWithDuration(DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID, Long duration) {
      disableActionWithDuration(chipClusterPtr, callback, actionID, invokeID, duration, null);
    }

    public void disableActionWithDuration(DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID, Long duration, int timedInvokeTimeoutMs) {
      disableActionWithDuration(chipClusterPtr, callback, actionID, invokeID, duration, timedInvokeTimeoutMs);
    }

    private native void instantAction(long chipClusterPtr, DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID, @Nullable Integer timedInvokeTimeoutMs);

    private native void instantActionWithTransition(long chipClusterPtr, DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID, Integer transitionTime, @Nullable Integer timedInvokeTimeoutMs);

    private native void startAction(long chipClusterPtr, DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID, @Nullable Integer timedInvokeTimeoutMs);

    private native void startActionWithDuration(long chipClusterPtr, DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID, Long duration, @Nullable Integer timedInvokeTimeoutMs);

    private native void stopAction(long chipClusterPtr, DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID, @Nullable Integer timedInvokeTimeoutMs);

    private native void pauseAction(long chipClusterPtr, DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID, @Nullable Integer timedInvokeTimeoutMs);

    private native void pauseActionWithDuration(long chipClusterPtr, DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID, Long duration, @Nullable Integer timedInvokeTimeoutMs);

    private native void resumeAction(long chipClusterPtr, DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID, @Nullable Integer timedInvokeTimeoutMs);

    private native void enableAction(long chipClusterPtr, DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID, @Nullable Integer timedInvokeTimeoutMs);

    private native void enableActionWithDuration(long chipClusterPtr, DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID, Long duration, @Nullable Integer timedInvokeTimeoutMs);

    private native void disableAction(long chipClusterPtr, DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID, @Nullable Integer timedInvokeTimeoutMs);

    private native void disableActionWithDuration(long chipClusterPtr, DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID, Long duration, @Nullable Integer timedInvokeTimeoutMs);

    public interface ActionListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.ActionsClusterActionStruct> value);
    }

    public interface EndpointListsAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.ActionsClusterEndpointListStruct> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readActionListAttribute(
        ActionListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.ActionsClusterActionStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeActionListAttribute(
        ActionListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeActionListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEndpointListsAttribute(
        EndpointListsAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.ActionsClusterEndpointListStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEndpointListsAttribute(
        EndpointListsAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEndpointListsAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readSetupURLAttribute(
        CharStringAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeSetupURLAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeSetupURLAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeActionListAttribute(long chipClusterPtr, ActionListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEndpointListsAttribute(long chipClusterPtr, EndpointListsAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeSetupURLAttribute(long chipClusterPtr, CharStringAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class BasicInformationCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 40L;

    public BasicInformationCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void mfgSpecificPing(DefaultClusterCallback callback) {
      mfgSpecificPing(chipClusterPtr, callback, null);
    }

    public void mfgSpecificPing(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      mfgSpecificPing(chipClusterPtr, callback, timedInvokeTimeoutMs);
    }

    private native void mfgSpecificPing(long chipClusterPtr, DefaultClusterCallback callback, @Nullable Integer timedInvokeTimeoutMs);

    public interface CapabilityMinimaAttributeCallback extends BaseAttributeCallback {
      void onSuccess(ChipStructs.BasicInformationClusterCapabilityMinimaStruct value);
    }

    public interface ProductAppearanceAttributeCallback extends BaseAttributeCallback {
      void onSuccess(ChipStructs.BasicInformationClusterProductAppearanceStruct value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readDataModelRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeDataModelRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeDataModelRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readVendorNameAttribute(
        CharStringAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeVendorNameAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeVendorNameAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readVendorIDAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeVendorIDAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeVendorIDAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readProductNameAttribute(
        CharStringAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeProductNameAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeProductNameAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readProductIDAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeProductIDAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeProductIDAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readNodeLabelAttribute(
        CharStringAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeNodeLabelAttribute(DefaultClusterCallback callback, String value) {
        writeNodeLabelAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeNodeLabelAttribute(DefaultClusterCallback callback, String value, int timedWriteTimeoutMs) {
        writeNodeLabelAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeNodeLabelAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeNodeLabelAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readLocationAttribute(
        CharStringAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeLocationAttribute(DefaultClusterCallback callback, String value) {
        writeLocationAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeLocationAttribute(DefaultClusterCallback callback, String value, int timedWriteTimeoutMs) {
        writeLocationAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeLocationAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeLocationAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readHardwareVersionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeHardwareVersionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeHardwareVersionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readHardwareVersionStringAttribute(
        CharStringAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeHardwareVersionStringAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeHardwareVersionStringAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readSoftwareVersionAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 9L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeSoftwareVersionAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeSoftwareVersionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readSoftwareVersionStringAttribute(
        CharStringAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 10L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeSoftwareVersionStringAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeSoftwareVersionStringAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readManufacturingDateAttribute(
        CharStringAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 11L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeManufacturingDateAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeManufacturingDateAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readPartNumberAttribute(
        CharStringAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 12L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribePartNumberAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePartNumberAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readProductURLAttribute(
        CharStringAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 13L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeProductURLAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeProductURLAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readProductLabelAttribute(
        CharStringAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 14L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeProductLabelAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeProductLabelAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readSerialNumberAttribute(
        CharStringAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 15L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeSerialNumberAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeSerialNumberAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readLocalConfigDisabledAttribute(
        BooleanAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 16L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeLocalConfigDisabledAttribute(DefaultClusterCallback callback, Boolean value) {
        writeLocalConfigDisabledAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeLocalConfigDisabledAttribute(DefaultClusterCallback callback, Boolean value, int timedWriteTimeoutMs) {
        writeLocalConfigDisabledAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeLocalConfigDisabledAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeLocalConfigDisabledAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readReachableAttribute(
        BooleanAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 17L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeReachableAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeReachableAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readUniqueIDAttribute(
        CharStringAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 18L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeUniqueIDAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeUniqueIDAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readCapabilityMinimaAttribute(
        CapabilityMinimaAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 19L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            ChipStructs.BasicInformationClusterCapabilityMinimaStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeCapabilityMinimaAttribute(
        CapabilityMinimaAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeCapabilityMinimaAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readProductAppearanceAttribute(
        ProductAppearanceAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 20L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            ChipStructs.BasicInformationClusterProductAppearanceStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeProductAppearanceAttribute(
        ProductAppearanceAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeProductAppearanceAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeDataModelRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeVendorNameAttribute(long chipClusterPtr, CharStringAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeVendorIDAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeProductNameAttribute(long chipClusterPtr, CharStringAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeProductIDAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeNodeLabelAttribute(long chipClusterPtr, DefaultClusterCallback callback, String value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeNodeLabelAttribute(long chipClusterPtr, CharStringAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeLocationAttribute(long chipClusterPtr, DefaultClusterCallback callback, String value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeLocationAttribute(long chipClusterPtr, CharStringAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeHardwareVersionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeHardwareVersionStringAttribute(long chipClusterPtr, CharStringAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeSoftwareVersionAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeSoftwareVersionStringAttribute(long chipClusterPtr, CharStringAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeManufacturingDateAttribute(long chipClusterPtr, CharStringAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribePartNumberAttribute(long chipClusterPtr, CharStringAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeProductURLAttribute(long chipClusterPtr, CharStringAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeProductLabelAttribute(long chipClusterPtr, CharStringAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeSerialNumberAttribute(long chipClusterPtr, CharStringAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeLocalConfigDisabledAttribute(long chipClusterPtr, DefaultClusterCallback callback, Boolean value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeLocalConfigDisabledAttribute(long chipClusterPtr, BooleanAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeReachableAttribute(long chipClusterPtr, BooleanAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeUniqueIDAttribute(long chipClusterPtr, CharStringAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeCapabilityMinimaAttribute(long chipClusterPtr, CapabilityMinimaAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeProductAppearanceAttribute(long chipClusterPtr, ProductAppearanceAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class OtaSoftwareUpdateProviderCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 41L;

    public OtaSoftwareUpdateProviderCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void queryImage(QueryImageResponseCallback callback, Integer vendorID, Integer productID, Long softwareVersion, ArrayList<Integer> protocolsSupported, Optional<Integer> hardwareVersion, Optional<String> location, Optional<Boolean> requestorCanConsent, Optional<byte[]> metadataForProvider) {
      queryImage(chipClusterPtr, callback, vendorID, productID, softwareVersion, protocolsSupported, hardwareVersion, location, requestorCanConsent, metadataForProvider, null);
    }

    public void queryImage(QueryImageResponseCallback callback, Integer vendorID, Integer productID, Long softwareVersion, ArrayList<Integer> protocolsSupported, Optional<Integer> hardwareVersion, Optional<String> location, Optional<Boolean> requestorCanConsent, Optional<byte[]> metadataForProvider, int timedInvokeTimeoutMs) {
      queryImage(chipClusterPtr, callback, vendorID, productID, softwareVersion, protocolsSupported, hardwareVersion, location, requestorCanConsent, metadataForProvider, timedInvokeTimeoutMs);
    }

    public void applyUpdateRequest(ApplyUpdateResponseCallback callback, byte[] updateToken, Long newVersion) {
      applyUpdateRequest(chipClusterPtr, callback, updateToken, newVersion, null);
    }

    public void applyUpdateRequest(ApplyUpdateResponseCallback callback, byte[] updateToken, Long newVersion, int timedInvokeTimeoutMs) {
      applyUpdateRequest(chipClusterPtr, callback, updateToken, newVersion, timedInvokeTimeoutMs);
    }

    public void notifyUpdateApplied(DefaultClusterCallback callback, byte[] updateToken, Long softwareVersion) {
      notifyUpdateApplied(chipClusterPtr, callback, updateToken, softwareVersion, null);
    }

    public void notifyUpdateApplied(DefaultClusterCallback callback, byte[] updateToken, Long softwareVersion, int timedInvokeTimeoutMs) {
      notifyUpdateApplied(chipClusterPtr, callback, updateToken, softwareVersion, timedInvokeTimeoutMs);
    }

    private native void queryImage(long chipClusterPtr, QueryImageResponseCallback callback, Integer vendorID, Integer productID, Long softwareVersion, ArrayList<Integer> protocolsSupported, Optional<Integer> hardwareVersion, Optional<String> location, Optional<Boolean> requestorCanConsent, Optional<byte[]> metadataForProvider, @Nullable Integer timedInvokeTimeoutMs);

    private native void applyUpdateRequest(long chipClusterPtr, ApplyUpdateResponseCallback callback, byte[] updateToken, Long newVersion, @Nullable Integer timedInvokeTimeoutMs);

    private native void notifyUpdateApplied(long chipClusterPtr, DefaultClusterCallback callback, byte[] updateToken, Long softwareVersion, @Nullable Integer timedInvokeTimeoutMs);

    public interface QueryImageResponseCallback {
      void onSuccess(Integer status, Optional<Long> delayedActionTime, Optional<String> imageURI, Optional<Long> softwareVersion, Optional<String> softwareVersionString, Optional<byte[]> updateToken, Optional<Boolean> userConsentNeeded, Optional<byte[]> metadataForRequestor);
      void onError(Exception error);
    }

    public interface ApplyUpdateResponseCallback {
      void onSuccess(Integer action, Long delayedActionTime);
      void onError(Exception error);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class OtaSoftwareUpdateRequestorCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 42L;

    public OtaSoftwareUpdateRequestorCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void announceOTAProvider(DefaultClusterCallback callback, Long providerNodeID, Integer vendorID, Integer announcementReason, Optional<byte[]> metadataForNode, Integer endpoint) {
      announceOTAProvider(chipClusterPtr, callback, providerNodeID, vendorID, announcementReason, metadataForNode, endpoint, null);
    }

    public void announceOTAProvider(DefaultClusterCallback callback, Long providerNodeID, Integer vendorID, Integer announcementReason, Optional<byte[]> metadataForNode, Integer endpoint, int timedInvokeTimeoutMs) {
      announceOTAProvider(chipClusterPtr, callback, providerNodeID, vendorID, announcementReason, metadataForNode, endpoint, timedInvokeTimeoutMs);
    }

    private native void announceOTAProvider(long chipClusterPtr, DefaultClusterCallback callback, Long providerNodeID, Integer vendorID, Integer announcementReason, Optional<byte[]> metadataForNode, Integer endpoint, @Nullable Integer timedInvokeTimeoutMs);

    public interface DefaultOTAProvidersAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.OtaSoftwareUpdateRequestorClusterProviderLocation> value);
    }

    public interface UpdateStateProgressAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readDefaultOTAProvidersAttribute(
        DefaultOTAProvidersAttributeCallback callback) {
        readDefaultOTAProvidersAttributeWithFabricFilter(callback, true);
    }

    public void readDefaultOTAProvidersAttributeWithFabricFilter(
        DefaultOTAProvidersAttributeCallback callback, boolean isFabricFiltered) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.OtaSoftwareUpdateRequestorClusterProviderLocation> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, isFabricFiltered, 0);
    }

    public void writeDefaultOTAProvidersAttribute(DefaultClusterCallback callback, ArrayList<ChipStructs.OtaSoftwareUpdateRequestorClusterProviderLocation> value) {
        writeDefaultOTAProvidersAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeDefaultOTAProvidersAttribute(DefaultClusterCallback callback, ArrayList<ChipStructs.OtaSoftwareUpdateRequestorClusterProviderLocation> value, int timedWriteTimeoutMs) {
        writeDefaultOTAProvidersAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeDefaultOTAProvidersAttribute(
        DefaultOTAProvidersAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeDefaultOTAProvidersAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readUpdatePossibleAttribute(
        BooleanAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeUpdatePossibleAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeUpdatePossibleAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readUpdateStateAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeUpdateStateAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeUpdateStateAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readUpdateStateProgressAttribute(
        UpdateStateProgressAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeUpdateStateProgressAttribute(
        UpdateStateProgressAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeUpdateStateProgressAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void writeDefaultOTAProvidersAttribute(long chipClusterPtr, DefaultClusterCallback callback, ArrayList<ChipStructs.OtaSoftwareUpdateRequestorClusterProviderLocation> value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeDefaultOTAProvidersAttribute(long chipClusterPtr, DefaultOTAProvidersAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeUpdatePossibleAttribute(long chipClusterPtr, BooleanAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeUpdateStateAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeUpdateStateProgressAttribute(long chipClusterPtr, UpdateStateProgressAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class LocalizationConfigurationCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 43L;

    public LocalizationConfigurationCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface SupportedLocalesAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<String> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readActiveLocaleAttribute(
        CharStringAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeActiveLocaleAttribute(DefaultClusterCallback callback, String value) {
        writeActiveLocaleAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeActiveLocaleAttribute(DefaultClusterCallback callback, String value, int timedWriteTimeoutMs) {
        writeActiveLocaleAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeActiveLocaleAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeActiveLocaleAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readSupportedLocalesAttribute(
        SupportedLocalesAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<String> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeSupportedLocalesAttribute(
        SupportedLocalesAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeSupportedLocalesAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void writeActiveLocaleAttribute(long chipClusterPtr, DefaultClusterCallback callback, String value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeActiveLocaleAttribute(long chipClusterPtr, CharStringAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeSupportedLocalesAttribute(long chipClusterPtr, SupportedLocalesAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class TimeFormatLocalizationCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 44L;

    public TimeFormatLocalizationCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface SupportedCalendarTypesAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Integer> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readHourFormatAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeHourFormatAttribute(DefaultClusterCallback callback, Integer value) {
        writeHourFormatAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeHourFormatAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeHourFormatAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeHourFormatAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeHourFormatAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readActiveCalendarTypeAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeActiveCalendarTypeAttribute(DefaultClusterCallback callback, Integer value) {
        writeActiveCalendarTypeAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeActiveCalendarTypeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeActiveCalendarTypeAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeActiveCalendarTypeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeActiveCalendarTypeAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readSupportedCalendarTypesAttribute(
        SupportedCalendarTypesAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeSupportedCalendarTypesAttribute(
        SupportedCalendarTypesAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeSupportedCalendarTypesAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void writeHourFormatAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeHourFormatAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeActiveCalendarTypeAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeActiveCalendarTypeAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeSupportedCalendarTypesAttribute(long chipClusterPtr, SupportedCalendarTypesAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class UnitLocalizationCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 45L;

    public UnitLocalizationCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readTemperatureUnitAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeTemperatureUnitAttribute(DefaultClusterCallback callback, Integer value) {
        writeTemperatureUnitAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeTemperatureUnitAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeTemperatureUnitAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeTemperatureUnitAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeTemperatureUnitAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void writeTemperatureUnitAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeTemperatureUnitAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class PowerSourceConfigurationCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 46L;

    public PowerSourceConfigurationCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface SourcesAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Integer> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readSourcesAttribute(
        SourcesAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeSourcesAttribute(
        SourcesAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeSourcesAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeSourcesAttribute(long chipClusterPtr, SourcesAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class PowerSourceCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 47L;

    public PowerSourceCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface WiredAssessedInputVoltageAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface WiredAssessedInputFrequencyAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface WiredAssessedCurrentAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface ActiveWiredFaultsAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Integer> value);
    }

    public interface BatVoltageAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface BatPercentRemainingAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface BatTimeRemainingAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface ActiveBatFaultsAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Integer> value);
    }

    public interface BatTimeToFullChargeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface BatChargingCurrentAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface ActiveBatChargeFaultsAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Integer> value);
    }

    public interface EndpointListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Integer> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readStatusAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeStatusAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeStatusAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readOrderAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeOrderAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeOrderAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readDescriptionAttribute(
        CharStringAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeDescriptionAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeDescriptionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readWiredAssessedInputVoltageAttribute(
        WiredAssessedInputVoltageAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeWiredAssessedInputVoltageAttribute(
        WiredAssessedInputVoltageAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeWiredAssessedInputVoltageAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readWiredAssessedInputFrequencyAttribute(
        WiredAssessedInputFrequencyAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeWiredAssessedInputFrequencyAttribute(
        WiredAssessedInputFrequencyAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeWiredAssessedInputFrequencyAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readWiredCurrentTypeAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeWiredCurrentTypeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeWiredCurrentTypeAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readWiredAssessedCurrentAttribute(
        WiredAssessedCurrentAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeWiredAssessedCurrentAttribute(
        WiredAssessedCurrentAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeWiredAssessedCurrentAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readWiredNominalVoltageAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeWiredNominalVoltageAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeWiredNominalVoltageAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readWiredMaximumCurrentAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeWiredMaximumCurrentAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeWiredMaximumCurrentAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readWiredPresentAttribute(
        BooleanAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 9L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeWiredPresentAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeWiredPresentAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readActiveWiredFaultsAttribute(
        ActiveWiredFaultsAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 10L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeActiveWiredFaultsAttribute(
        ActiveWiredFaultsAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeActiveWiredFaultsAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readBatVoltageAttribute(
        BatVoltageAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 11L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeBatVoltageAttribute(
        BatVoltageAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeBatVoltageAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readBatPercentRemainingAttribute(
        BatPercentRemainingAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 12L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeBatPercentRemainingAttribute(
        BatPercentRemainingAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeBatPercentRemainingAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readBatTimeRemainingAttribute(
        BatTimeRemainingAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 13L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeBatTimeRemainingAttribute(
        BatTimeRemainingAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeBatTimeRemainingAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readBatChargeLevelAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 14L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeBatChargeLevelAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeBatChargeLevelAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readBatReplacementNeededAttribute(
        BooleanAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 15L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeBatReplacementNeededAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeBatReplacementNeededAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readBatReplaceabilityAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 16L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeBatReplaceabilityAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeBatReplaceabilityAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readBatPresentAttribute(
        BooleanAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 17L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeBatPresentAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeBatPresentAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readActiveBatFaultsAttribute(
        ActiveBatFaultsAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 18L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeActiveBatFaultsAttribute(
        ActiveBatFaultsAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeActiveBatFaultsAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readBatReplacementDescriptionAttribute(
        CharStringAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 19L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeBatReplacementDescriptionAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeBatReplacementDescriptionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readBatCommonDesignationAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 20L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeBatCommonDesignationAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeBatCommonDesignationAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readBatANSIDesignationAttribute(
        CharStringAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 21L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeBatANSIDesignationAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeBatANSIDesignationAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readBatIECDesignationAttribute(
        CharStringAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 22L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeBatIECDesignationAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeBatIECDesignationAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readBatApprovedChemistryAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 23L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeBatApprovedChemistryAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeBatApprovedChemistryAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readBatCapacityAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 24L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeBatCapacityAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeBatCapacityAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readBatQuantityAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 25L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeBatQuantityAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeBatQuantityAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readBatChargeStateAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 26L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeBatChargeStateAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeBatChargeStateAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readBatTimeToFullChargeAttribute(
        BatTimeToFullChargeAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 27L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeBatTimeToFullChargeAttribute(
        BatTimeToFullChargeAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeBatTimeToFullChargeAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readBatFunctionalWhileChargingAttribute(
        BooleanAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 28L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeBatFunctionalWhileChargingAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeBatFunctionalWhileChargingAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readBatChargingCurrentAttribute(
        BatChargingCurrentAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 29L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeBatChargingCurrentAttribute(
        BatChargingCurrentAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeBatChargingCurrentAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readActiveBatChargeFaultsAttribute(
        ActiveBatChargeFaultsAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 30L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeActiveBatChargeFaultsAttribute(
        ActiveBatChargeFaultsAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeActiveBatChargeFaultsAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEndpointListAttribute(
        EndpointListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 31L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEndpointListAttribute(
        EndpointListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEndpointListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeStatusAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeOrderAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeDescriptionAttribute(long chipClusterPtr, CharStringAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeWiredAssessedInputVoltageAttribute(long chipClusterPtr, WiredAssessedInputVoltageAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeWiredAssessedInputFrequencyAttribute(long chipClusterPtr, WiredAssessedInputFrequencyAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeWiredCurrentTypeAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeWiredAssessedCurrentAttribute(long chipClusterPtr, WiredAssessedCurrentAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeWiredNominalVoltageAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeWiredMaximumCurrentAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeWiredPresentAttribute(long chipClusterPtr, BooleanAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeActiveWiredFaultsAttribute(long chipClusterPtr, ActiveWiredFaultsAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeBatVoltageAttribute(long chipClusterPtr, BatVoltageAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeBatPercentRemainingAttribute(long chipClusterPtr, BatPercentRemainingAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeBatTimeRemainingAttribute(long chipClusterPtr, BatTimeRemainingAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeBatChargeLevelAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeBatReplacementNeededAttribute(long chipClusterPtr, BooleanAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeBatReplaceabilityAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeBatPresentAttribute(long chipClusterPtr, BooleanAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeActiveBatFaultsAttribute(long chipClusterPtr, ActiveBatFaultsAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeBatReplacementDescriptionAttribute(long chipClusterPtr, CharStringAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeBatCommonDesignationAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeBatANSIDesignationAttribute(long chipClusterPtr, CharStringAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeBatIECDesignationAttribute(long chipClusterPtr, CharStringAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeBatApprovedChemistryAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeBatCapacityAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeBatQuantityAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeBatChargeStateAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeBatTimeToFullChargeAttribute(long chipClusterPtr, BatTimeToFullChargeAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeBatFunctionalWhileChargingAttribute(long chipClusterPtr, BooleanAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeBatChargingCurrentAttribute(long chipClusterPtr, BatChargingCurrentAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeActiveBatChargeFaultsAttribute(long chipClusterPtr, ActiveBatChargeFaultsAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEndpointListAttribute(long chipClusterPtr, EndpointListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class GeneralCommissioningCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 48L;

    public GeneralCommissioningCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void armFailSafe(ArmFailSafeResponseCallback callback, Integer expiryLengthSeconds, Long breadcrumb) {
      armFailSafe(chipClusterPtr, callback, expiryLengthSeconds, breadcrumb, null);
    }

    public void armFailSafe(ArmFailSafeResponseCallback callback, Integer expiryLengthSeconds, Long breadcrumb, int timedInvokeTimeoutMs) {
      armFailSafe(chipClusterPtr, callback, expiryLengthSeconds, breadcrumb, timedInvokeTimeoutMs);
    }

    public void setRegulatoryConfig(SetRegulatoryConfigResponseCallback callback, Integer newRegulatoryConfig, String countryCode, Long breadcrumb) {
      setRegulatoryConfig(chipClusterPtr, callback, newRegulatoryConfig, countryCode, breadcrumb, null);
    }

    public void setRegulatoryConfig(SetRegulatoryConfigResponseCallback callback, Integer newRegulatoryConfig, String countryCode, Long breadcrumb, int timedInvokeTimeoutMs) {
      setRegulatoryConfig(chipClusterPtr, callback, newRegulatoryConfig, countryCode, breadcrumb, timedInvokeTimeoutMs);
    }

    public void commissioningComplete(CommissioningCompleteResponseCallback callback) {
      commissioningComplete(chipClusterPtr, callback, null);
    }

    public void commissioningComplete(CommissioningCompleteResponseCallback callback, int timedInvokeTimeoutMs) {
      commissioningComplete(chipClusterPtr, callback, timedInvokeTimeoutMs);
    }

    private native void armFailSafe(long chipClusterPtr, ArmFailSafeResponseCallback callback, Integer expiryLengthSeconds, Long breadcrumb, @Nullable Integer timedInvokeTimeoutMs);

    private native void setRegulatoryConfig(long chipClusterPtr, SetRegulatoryConfigResponseCallback callback, Integer newRegulatoryConfig, String countryCode, Long breadcrumb, @Nullable Integer timedInvokeTimeoutMs);

    private native void commissioningComplete(long chipClusterPtr, CommissioningCompleteResponseCallback callback, @Nullable Integer timedInvokeTimeoutMs);

    public interface ArmFailSafeResponseCallback {
      void onSuccess(Integer errorCode, String debugText);
      void onError(Exception error);
    }

    public interface SetRegulatoryConfigResponseCallback {
      void onSuccess(Integer errorCode, String debugText);
      void onError(Exception error);
    }

    public interface CommissioningCompleteResponseCallback {
      void onSuccess(Integer errorCode, String debugText);
      void onError(Exception error);
    }

    public interface BasicCommissioningInfoAttributeCallback extends BaseAttributeCallback {
      void onSuccess(ChipStructs.GeneralCommissioningClusterBasicCommissioningInfo value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readBreadcrumbAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeBreadcrumbAttribute(DefaultClusterCallback callback, Long value) {
        writeBreadcrumbAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeBreadcrumbAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
        writeBreadcrumbAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeBreadcrumbAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeBreadcrumbAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readBasicCommissioningInfoAttribute(
        BasicCommissioningInfoAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            ChipStructs.GeneralCommissioningClusterBasicCommissioningInfo value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeBasicCommissioningInfoAttribute(
        BasicCommissioningInfoAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeBasicCommissioningInfoAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readRegulatoryConfigAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeRegulatoryConfigAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeRegulatoryConfigAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readLocationCapabilityAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeLocationCapabilityAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeLocationCapabilityAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readSupportsConcurrentConnectionAttribute(
        BooleanAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeSupportsConcurrentConnectionAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeSupportsConcurrentConnectionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void writeBreadcrumbAttribute(long chipClusterPtr, DefaultClusterCallback callback, Long value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeBreadcrumbAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeBasicCommissioningInfoAttribute(long chipClusterPtr, BasicCommissioningInfoAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeRegulatoryConfigAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeLocationCapabilityAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeSupportsConcurrentConnectionAttribute(long chipClusterPtr, BooleanAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class NetworkCommissioningCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 49L;

    public NetworkCommissioningCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void scanNetworks(ScanNetworksResponseCallback callback, @Nullable Optional<byte[]> ssid, Optional<Long> breadcrumb) {
      scanNetworks(chipClusterPtr, callback, ssid, breadcrumb, null);
    }

    public void scanNetworks(ScanNetworksResponseCallback callback, @Nullable Optional<byte[]> ssid, Optional<Long> breadcrumb, int timedInvokeTimeoutMs) {
      scanNetworks(chipClusterPtr, callback, ssid, breadcrumb, timedInvokeTimeoutMs);
    }

    public void addOrUpdateWiFiNetwork(NetworkConfigResponseCallback callback, byte[] ssid, byte[] credentials, Optional<Long> breadcrumb) {
      addOrUpdateWiFiNetwork(chipClusterPtr, callback, ssid, credentials, breadcrumb, null);
    }

    public void addOrUpdateWiFiNetwork(NetworkConfigResponseCallback callback, byte[] ssid, byte[] credentials, Optional<Long> breadcrumb, int timedInvokeTimeoutMs) {
      addOrUpdateWiFiNetwork(chipClusterPtr, callback, ssid, credentials, breadcrumb, timedInvokeTimeoutMs);
    }

    public void addOrUpdateThreadNetwork(NetworkConfigResponseCallback callback, byte[] operationalDataset, Optional<Long> breadcrumb) {
      addOrUpdateThreadNetwork(chipClusterPtr, callback, operationalDataset, breadcrumb, null);
    }

    public void addOrUpdateThreadNetwork(NetworkConfigResponseCallback callback, byte[] operationalDataset, Optional<Long> breadcrumb, int timedInvokeTimeoutMs) {
      addOrUpdateThreadNetwork(chipClusterPtr, callback, operationalDataset, breadcrumb, timedInvokeTimeoutMs);
    }

    public void removeNetwork(NetworkConfigResponseCallback callback, byte[] networkID, Optional<Long> breadcrumb) {
      removeNetwork(chipClusterPtr, callback, networkID, breadcrumb, null);
    }

    public void removeNetwork(NetworkConfigResponseCallback callback, byte[] networkID, Optional<Long> breadcrumb, int timedInvokeTimeoutMs) {
      removeNetwork(chipClusterPtr, callback, networkID, breadcrumb, timedInvokeTimeoutMs);
    }

    public void connectNetwork(ConnectNetworkResponseCallback callback, byte[] networkID, Optional<Long> breadcrumb) {
      connectNetwork(chipClusterPtr, callback, networkID, breadcrumb, null);
    }

    public void connectNetwork(ConnectNetworkResponseCallback callback, byte[] networkID, Optional<Long> breadcrumb, int timedInvokeTimeoutMs) {
      connectNetwork(chipClusterPtr, callback, networkID, breadcrumb, timedInvokeTimeoutMs);
    }

    public void reorderNetwork(NetworkConfigResponseCallback callback, byte[] networkID, Integer networkIndex, Optional<Long> breadcrumb) {
      reorderNetwork(chipClusterPtr, callback, networkID, networkIndex, breadcrumb, null);
    }

    public void reorderNetwork(NetworkConfigResponseCallback callback, byte[] networkID, Integer networkIndex, Optional<Long> breadcrumb, int timedInvokeTimeoutMs) {
      reorderNetwork(chipClusterPtr, callback, networkID, networkIndex, breadcrumb, timedInvokeTimeoutMs);
    }

    private native void scanNetworks(long chipClusterPtr, ScanNetworksResponseCallback callback, @Nullable Optional<byte[]> ssid, Optional<Long> breadcrumb, @Nullable Integer timedInvokeTimeoutMs);

    private native void addOrUpdateWiFiNetwork(long chipClusterPtr, NetworkConfigResponseCallback callback, byte[] ssid, byte[] credentials, Optional<Long> breadcrumb, @Nullable Integer timedInvokeTimeoutMs);

    private native void addOrUpdateThreadNetwork(long chipClusterPtr, NetworkConfigResponseCallback callback, byte[] operationalDataset, Optional<Long> breadcrumb, @Nullable Integer timedInvokeTimeoutMs);

    private native void removeNetwork(long chipClusterPtr, NetworkConfigResponseCallback callback, byte[] networkID, Optional<Long> breadcrumb, @Nullable Integer timedInvokeTimeoutMs);

    private native void connectNetwork(long chipClusterPtr, ConnectNetworkResponseCallback callback, byte[] networkID, Optional<Long> breadcrumb, @Nullable Integer timedInvokeTimeoutMs);

    private native void reorderNetwork(long chipClusterPtr, NetworkConfigResponseCallback callback, byte[] networkID, Integer networkIndex, Optional<Long> breadcrumb, @Nullable Integer timedInvokeTimeoutMs);

    public interface ScanNetworksResponseCallback {
      void onSuccess(Integer networkingStatus, Optional<String> debugText, Optional<ArrayList<ChipStructs.NetworkCommissioningClusterWiFiInterfaceScanResultStruct>> wiFiScanResults, Optional<ArrayList<ChipStructs.NetworkCommissioningClusterThreadInterfaceScanResultStruct>> threadScanResults);
      void onError(Exception error);
    }

    public interface NetworkConfigResponseCallback {
      void onSuccess(Integer networkingStatus, Optional<String> debugText, Optional<Integer> networkIndex);
      void onError(Exception error);
    }

    public interface ConnectNetworkResponseCallback {
      void onSuccess(Integer networkingStatus, Optional<String> debugText, @Nullable Long errorValue);
      void onError(Exception error);
    }

    public interface NetworksAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.NetworkCommissioningClusterNetworkInfoStruct> value);
    }

    public interface LastNetworkingStatusAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface LastNetworkIDAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable byte[] value);
    }

    public interface LastConnectErrorValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readMaxNetworksAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMaxNetworksAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMaxNetworksAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readNetworksAttribute(
        NetworksAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.NetworkCommissioningClusterNetworkInfoStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeNetworksAttribute(
        NetworksAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeNetworksAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readScanMaxTimeSecondsAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeScanMaxTimeSecondsAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeScanMaxTimeSecondsAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readConnectMaxTimeSecondsAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeConnectMaxTimeSecondsAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeConnectMaxTimeSecondsAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readInterfaceEnabledAttribute(
        BooleanAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeInterfaceEnabledAttribute(DefaultClusterCallback callback, Boolean value) {
        writeInterfaceEnabledAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeInterfaceEnabledAttribute(DefaultClusterCallback callback, Boolean value, int timedWriteTimeoutMs) {
        writeInterfaceEnabledAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeInterfaceEnabledAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeInterfaceEnabledAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readLastNetworkingStatusAttribute(
        LastNetworkingStatusAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeLastNetworkingStatusAttribute(
        LastNetworkingStatusAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeLastNetworkingStatusAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readLastNetworkIDAttribute(
        LastNetworkIDAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable byte[] value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeLastNetworkIDAttribute(
        LastNetworkIDAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeLastNetworkIDAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readLastConnectErrorValueAttribute(
        LastConnectErrorValueAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeLastConnectErrorValueAttribute(
        LastConnectErrorValueAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeLastConnectErrorValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeMaxNetworksAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeNetworksAttribute(long chipClusterPtr, NetworksAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeScanMaxTimeSecondsAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeConnectMaxTimeSecondsAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeInterfaceEnabledAttribute(long chipClusterPtr, DefaultClusterCallback callback, Boolean value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeInterfaceEnabledAttribute(long chipClusterPtr, BooleanAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeLastNetworkingStatusAttribute(long chipClusterPtr, LastNetworkingStatusAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeLastNetworkIDAttribute(long chipClusterPtr, LastNetworkIDAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeLastConnectErrorValueAttribute(long chipClusterPtr, LastConnectErrorValueAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class DiagnosticLogsCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 50L;

    public DiagnosticLogsCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void retrieveLogsRequest(RetrieveLogsResponseCallback callback, Integer intent, Integer requestedProtocol, Optional<String> transferFileDesignator) {
      retrieveLogsRequest(chipClusterPtr, callback, intent, requestedProtocol, transferFileDesignator, null);
    }

    public void retrieveLogsRequest(RetrieveLogsResponseCallback callback, Integer intent, Integer requestedProtocol, Optional<String> transferFileDesignator, int timedInvokeTimeoutMs) {
      retrieveLogsRequest(chipClusterPtr, callback, intent, requestedProtocol, transferFileDesignator, timedInvokeTimeoutMs);
    }

    private native void retrieveLogsRequest(long chipClusterPtr, RetrieveLogsResponseCallback callback, Integer intent, Integer requestedProtocol, Optional<String> transferFileDesignator, @Nullable Integer timedInvokeTimeoutMs);

    public interface RetrieveLogsResponseCallback {
      void onSuccess(Integer status, byte[] logContent, Optional<Long> UTCTimeStamp, Optional<Long> timeSinceBoot);
      void onError(Exception error);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class GeneralDiagnosticsCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 51L;

    public GeneralDiagnosticsCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void testEventTrigger(DefaultClusterCallback callback, byte[] enableKey, Long eventTrigger) {
      testEventTrigger(chipClusterPtr, callback, enableKey, eventTrigger, null);
    }

    public void testEventTrigger(DefaultClusterCallback callback, byte[] enableKey, Long eventTrigger, int timedInvokeTimeoutMs) {
      testEventTrigger(chipClusterPtr, callback, enableKey, eventTrigger, timedInvokeTimeoutMs);
    }

    private native void testEventTrigger(long chipClusterPtr, DefaultClusterCallback callback, byte[] enableKey, Long eventTrigger, @Nullable Integer timedInvokeTimeoutMs);

    public interface NetworkInterfacesAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.GeneralDiagnosticsClusterNetworkInterface> value);
    }

    public interface ActiveHardwareFaultsAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Integer> value);
    }

    public interface ActiveRadioFaultsAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Integer> value);
    }

    public interface ActiveNetworkFaultsAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Integer> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readNetworkInterfacesAttribute(
        NetworkInterfacesAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.GeneralDiagnosticsClusterNetworkInterface> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeNetworkInterfacesAttribute(
        NetworkInterfacesAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeNetworkInterfacesAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readRebootCountAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeRebootCountAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeRebootCountAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readUpTimeAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeUpTimeAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeUpTimeAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readTotalOperationalHoursAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeTotalOperationalHoursAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeTotalOperationalHoursAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readBootReasonAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeBootReasonAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeBootReasonAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readActiveHardwareFaultsAttribute(
        ActiveHardwareFaultsAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeActiveHardwareFaultsAttribute(
        ActiveHardwareFaultsAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeActiveHardwareFaultsAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readActiveRadioFaultsAttribute(
        ActiveRadioFaultsAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeActiveRadioFaultsAttribute(
        ActiveRadioFaultsAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeActiveRadioFaultsAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readActiveNetworkFaultsAttribute(
        ActiveNetworkFaultsAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeActiveNetworkFaultsAttribute(
        ActiveNetworkFaultsAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeActiveNetworkFaultsAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readTestEventTriggersEnabledAttribute(
        BooleanAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeTestEventTriggersEnabledAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeTestEventTriggersEnabledAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAverageWearCountAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 9L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAverageWearCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAverageWearCountAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeNetworkInterfacesAttribute(long chipClusterPtr, NetworkInterfacesAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeRebootCountAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeUpTimeAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeTotalOperationalHoursAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeBootReasonAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeActiveHardwareFaultsAttribute(long chipClusterPtr, ActiveHardwareFaultsAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeActiveRadioFaultsAttribute(long chipClusterPtr, ActiveRadioFaultsAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeActiveNetworkFaultsAttribute(long chipClusterPtr, ActiveNetworkFaultsAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeTestEventTriggersEnabledAttribute(long chipClusterPtr, BooleanAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAverageWearCountAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class SoftwareDiagnosticsCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 52L;

    public SoftwareDiagnosticsCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void resetWatermarks(DefaultClusterCallback callback) {
      resetWatermarks(chipClusterPtr, callback, null);
    }

    public void resetWatermarks(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      resetWatermarks(chipClusterPtr, callback, timedInvokeTimeoutMs);
    }

    private native void resetWatermarks(long chipClusterPtr, DefaultClusterCallback callback, @Nullable Integer timedInvokeTimeoutMs);

    public interface ThreadMetricsAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.SoftwareDiagnosticsClusterThreadMetricsStruct> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readThreadMetricsAttribute(
        ThreadMetricsAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.SoftwareDiagnosticsClusterThreadMetricsStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeThreadMetricsAttribute(
        ThreadMetricsAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeThreadMetricsAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readCurrentHeapFreeAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeCurrentHeapFreeAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeCurrentHeapFreeAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readCurrentHeapUsedAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeCurrentHeapUsedAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeCurrentHeapUsedAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readCurrentHeapHighWatermarkAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeCurrentHeapHighWatermarkAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeCurrentHeapHighWatermarkAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeThreadMetricsAttribute(long chipClusterPtr, ThreadMetricsAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeCurrentHeapFreeAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeCurrentHeapUsedAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeCurrentHeapHighWatermarkAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class ThreadNetworkDiagnosticsCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 53L;

    public ThreadNetworkDiagnosticsCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void resetCounts(DefaultClusterCallback callback) {
      resetCounts(chipClusterPtr, callback, null);
    }

    public void resetCounts(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      resetCounts(chipClusterPtr, callback, timedInvokeTimeoutMs);
    }

    private native void resetCounts(long chipClusterPtr, DefaultClusterCallback callback, @Nullable Integer timedInvokeTimeoutMs);

    public interface ChannelAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface RoutingRoleAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface NetworkNameAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable String value);
    }

    public interface PanIdAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface ExtendedPanIdAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface MeshLocalPrefixAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable byte[] value);
    }

    public interface NeighborTableAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.ThreadNetworkDiagnosticsClusterNeighborTableStruct> value);
    }

    public interface RouteTableAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.ThreadNetworkDiagnosticsClusterRouteTableStruct> value);
    }

    public interface PartitionIdAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface WeightingAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface DataVersionAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface StableDataVersionAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface LeaderRouterIdAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface ActiveTimestampAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface PendingTimestampAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface DelayAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface SecurityPolicyAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable ChipStructs.ThreadNetworkDiagnosticsClusterSecurityPolicy value);
    }

    public interface ChannelPage0MaskAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable byte[] value);
    }

    public interface OperationalDatasetComponentsAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable ChipStructs.ThreadNetworkDiagnosticsClusterOperationalDatasetComponents value);
    }

    public interface ActiveNetworkFaultsListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Integer> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readChannelAttribute(
        ChannelAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeChannelAttribute(
        ChannelAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeChannelAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readRoutingRoleAttribute(
        RoutingRoleAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeRoutingRoleAttribute(
        RoutingRoleAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeRoutingRoleAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readNetworkNameAttribute(
        NetworkNameAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeNetworkNameAttribute(
        NetworkNameAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeNetworkNameAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readPanIdAttribute(
        PanIdAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribePanIdAttribute(
        PanIdAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePanIdAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readExtendedPanIdAttribute(
        ExtendedPanIdAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeExtendedPanIdAttribute(
        ExtendedPanIdAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeExtendedPanIdAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMeshLocalPrefixAttribute(
        MeshLocalPrefixAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable byte[] value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMeshLocalPrefixAttribute(
        MeshLocalPrefixAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMeshLocalPrefixAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readOverrunCountAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeOverrunCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeOverrunCountAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readNeighborTableAttribute(
        NeighborTableAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.ThreadNetworkDiagnosticsClusterNeighborTableStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeNeighborTableAttribute(
        NeighborTableAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeNeighborTableAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readRouteTableAttribute(
        RouteTableAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.ThreadNetworkDiagnosticsClusterRouteTableStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeRouteTableAttribute(
        RouteTableAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeRouteTableAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readPartitionIdAttribute(
        PartitionIdAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 9L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribePartitionIdAttribute(
        PartitionIdAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePartitionIdAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readWeightingAttribute(
        WeightingAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 10L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeWeightingAttribute(
        WeightingAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeWeightingAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readDataVersionAttribute(
        DataVersionAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 11L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeDataVersionAttribute(
        DataVersionAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeDataVersionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readStableDataVersionAttribute(
        StableDataVersionAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 12L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeStableDataVersionAttribute(
        StableDataVersionAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeStableDataVersionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readLeaderRouterIdAttribute(
        LeaderRouterIdAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 13L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeLeaderRouterIdAttribute(
        LeaderRouterIdAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeLeaderRouterIdAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readDetachedRoleCountAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 14L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeDetachedRoleCountAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeDetachedRoleCountAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readChildRoleCountAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 15L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeChildRoleCountAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeChildRoleCountAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readRouterRoleCountAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 16L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeRouterRoleCountAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeRouterRoleCountAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readLeaderRoleCountAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 17L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeLeaderRoleCountAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeLeaderRoleCountAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttachAttemptCountAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 18L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttachAttemptCountAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttachAttemptCountAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readPartitionIdChangeCountAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 19L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribePartitionIdChangeCountAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePartitionIdChangeCountAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readBetterPartitionAttachAttemptCountAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 20L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeBetterPartitionAttachAttemptCountAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeBetterPartitionAttachAttemptCountAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readParentChangeCountAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 21L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeParentChangeCountAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeParentChangeCountAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readTxTotalCountAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 22L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeTxTotalCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeTxTotalCountAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readTxUnicastCountAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 23L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeTxUnicastCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeTxUnicastCountAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readTxBroadcastCountAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 24L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeTxBroadcastCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeTxBroadcastCountAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readTxAckRequestedCountAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 25L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeTxAckRequestedCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeTxAckRequestedCountAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readTxAckedCountAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 26L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeTxAckedCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeTxAckedCountAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readTxNoAckRequestedCountAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 27L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeTxNoAckRequestedCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeTxNoAckRequestedCountAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readTxDataCountAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 28L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeTxDataCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeTxDataCountAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readTxDataPollCountAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 29L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeTxDataPollCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeTxDataPollCountAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readTxBeaconCountAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 30L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeTxBeaconCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeTxBeaconCountAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readTxBeaconRequestCountAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 31L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeTxBeaconRequestCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeTxBeaconRequestCountAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readTxOtherCountAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 32L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeTxOtherCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeTxOtherCountAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readTxRetryCountAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 33L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeTxRetryCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeTxRetryCountAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readTxDirectMaxRetryExpiryCountAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 34L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeTxDirectMaxRetryExpiryCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeTxDirectMaxRetryExpiryCountAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readTxIndirectMaxRetryExpiryCountAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 35L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeTxIndirectMaxRetryExpiryCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeTxIndirectMaxRetryExpiryCountAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readTxErrCcaCountAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 36L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeTxErrCcaCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeTxErrCcaCountAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readTxErrAbortCountAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 37L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeTxErrAbortCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeTxErrAbortCountAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readTxErrBusyChannelCountAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 38L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeTxErrBusyChannelCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeTxErrBusyChannelCountAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readRxTotalCountAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 39L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeRxTotalCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeRxTotalCountAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readRxUnicastCountAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 40L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeRxUnicastCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeRxUnicastCountAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readRxBroadcastCountAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 41L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeRxBroadcastCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeRxBroadcastCountAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readRxDataCountAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 42L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeRxDataCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeRxDataCountAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readRxDataPollCountAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 43L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeRxDataPollCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeRxDataPollCountAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readRxBeaconCountAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 44L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeRxBeaconCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeRxBeaconCountAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readRxBeaconRequestCountAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 45L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeRxBeaconRequestCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeRxBeaconRequestCountAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readRxOtherCountAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 46L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeRxOtherCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeRxOtherCountAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readRxAddressFilteredCountAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 47L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeRxAddressFilteredCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeRxAddressFilteredCountAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readRxDestAddrFilteredCountAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 48L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeRxDestAddrFilteredCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeRxDestAddrFilteredCountAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readRxDuplicatedCountAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 49L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeRxDuplicatedCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeRxDuplicatedCountAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readRxErrNoFrameCountAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 50L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeRxErrNoFrameCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeRxErrNoFrameCountAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readRxErrUnknownNeighborCountAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 51L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeRxErrUnknownNeighborCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeRxErrUnknownNeighborCountAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readRxErrInvalidSrcAddrCountAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 52L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeRxErrInvalidSrcAddrCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeRxErrInvalidSrcAddrCountAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readRxErrSecCountAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 53L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeRxErrSecCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeRxErrSecCountAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readRxErrFcsCountAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 54L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeRxErrFcsCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeRxErrFcsCountAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readRxErrOtherCountAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 55L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeRxErrOtherCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeRxErrOtherCountAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readActiveTimestampAttribute(
        ActiveTimestampAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 56L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeActiveTimestampAttribute(
        ActiveTimestampAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeActiveTimestampAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readPendingTimestampAttribute(
        PendingTimestampAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 57L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribePendingTimestampAttribute(
        PendingTimestampAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePendingTimestampAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readDelayAttribute(
        DelayAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 58L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeDelayAttribute(
        DelayAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeDelayAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readSecurityPolicyAttribute(
        SecurityPolicyAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 59L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable ChipStructs.ThreadNetworkDiagnosticsClusterSecurityPolicy value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeSecurityPolicyAttribute(
        SecurityPolicyAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeSecurityPolicyAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readChannelPage0MaskAttribute(
        ChannelPage0MaskAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 60L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable byte[] value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeChannelPage0MaskAttribute(
        ChannelPage0MaskAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeChannelPage0MaskAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readOperationalDatasetComponentsAttribute(
        OperationalDatasetComponentsAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 61L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable ChipStructs.ThreadNetworkDiagnosticsClusterOperationalDatasetComponents value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeOperationalDatasetComponentsAttribute(
        OperationalDatasetComponentsAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeOperationalDatasetComponentsAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readActiveNetworkFaultsListAttribute(
        ActiveNetworkFaultsListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 62L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeActiveNetworkFaultsListAttribute(
        ActiveNetworkFaultsListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeActiveNetworkFaultsListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeChannelAttribute(long chipClusterPtr, ChannelAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeRoutingRoleAttribute(long chipClusterPtr, RoutingRoleAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeNetworkNameAttribute(long chipClusterPtr, NetworkNameAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribePanIdAttribute(long chipClusterPtr, PanIdAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeExtendedPanIdAttribute(long chipClusterPtr, ExtendedPanIdAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMeshLocalPrefixAttribute(long chipClusterPtr, MeshLocalPrefixAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeOverrunCountAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeNeighborTableAttribute(long chipClusterPtr, NeighborTableAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeRouteTableAttribute(long chipClusterPtr, RouteTableAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribePartitionIdAttribute(long chipClusterPtr, PartitionIdAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeWeightingAttribute(long chipClusterPtr, WeightingAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeDataVersionAttribute(long chipClusterPtr, DataVersionAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeStableDataVersionAttribute(long chipClusterPtr, StableDataVersionAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeLeaderRouterIdAttribute(long chipClusterPtr, LeaderRouterIdAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeDetachedRoleCountAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeChildRoleCountAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeRouterRoleCountAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeLeaderRoleCountAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttachAttemptCountAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribePartitionIdChangeCountAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeBetterPartitionAttachAttemptCountAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeParentChangeCountAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeTxTotalCountAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeTxUnicastCountAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeTxBroadcastCountAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeTxAckRequestedCountAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeTxAckedCountAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeTxNoAckRequestedCountAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeTxDataCountAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeTxDataPollCountAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeTxBeaconCountAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeTxBeaconRequestCountAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeTxOtherCountAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeTxRetryCountAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeTxDirectMaxRetryExpiryCountAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeTxIndirectMaxRetryExpiryCountAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeTxErrCcaCountAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeTxErrAbortCountAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeTxErrBusyChannelCountAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeRxTotalCountAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeRxUnicastCountAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeRxBroadcastCountAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeRxDataCountAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeRxDataPollCountAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeRxBeaconCountAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeRxBeaconRequestCountAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeRxOtherCountAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeRxAddressFilteredCountAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeRxDestAddrFilteredCountAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeRxDuplicatedCountAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeRxErrNoFrameCountAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeRxErrUnknownNeighborCountAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeRxErrInvalidSrcAddrCountAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeRxErrSecCountAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeRxErrFcsCountAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeRxErrOtherCountAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeActiveTimestampAttribute(long chipClusterPtr, ActiveTimestampAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribePendingTimestampAttribute(long chipClusterPtr, PendingTimestampAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeDelayAttribute(long chipClusterPtr, DelayAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeSecurityPolicyAttribute(long chipClusterPtr, SecurityPolicyAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeChannelPage0MaskAttribute(long chipClusterPtr, ChannelPage0MaskAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeOperationalDatasetComponentsAttribute(long chipClusterPtr, OperationalDatasetComponentsAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeActiveNetworkFaultsListAttribute(long chipClusterPtr, ActiveNetworkFaultsListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class WiFiNetworkDiagnosticsCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 54L;

    public WiFiNetworkDiagnosticsCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void resetCounts(DefaultClusterCallback callback) {
      resetCounts(chipClusterPtr, callback, null);
    }

    public void resetCounts(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      resetCounts(chipClusterPtr, callback, timedInvokeTimeoutMs);
    }

    private native void resetCounts(long chipClusterPtr, DefaultClusterCallback callback, @Nullable Integer timedInvokeTimeoutMs);

    public interface BssidAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable byte[] value);
    }

    public interface SecurityTypeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface WiFiVersionAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface ChannelNumberAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface RssiAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface BeaconLostCountAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface BeaconRxCountAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface PacketMulticastRxCountAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface PacketMulticastTxCountAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface PacketUnicastRxCountAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface PacketUnicastTxCountAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface CurrentMaxRateAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface OverrunCountAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readBssidAttribute(
        BssidAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable byte[] value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeBssidAttribute(
        BssidAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeBssidAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readSecurityTypeAttribute(
        SecurityTypeAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeSecurityTypeAttribute(
        SecurityTypeAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeSecurityTypeAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readWiFiVersionAttribute(
        WiFiVersionAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeWiFiVersionAttribute(
        WiFiVersionAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeWiFiVersionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readChannelNumberAttribute(
        ChannelNumberAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeChannelNumberAttribute(
        ChannelNumberAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeChannelNumberAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readRssiAttribute(
        RssiAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeRssiAttribute(
        RssiAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeRssiAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readBeaconLostCountAttribute(
        BeaconLostCountAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeBeaconLostCountAttribute(
        BeaconLostCountAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeBeaconLostCountAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readBeaconRxCountAttribute(
        BeaconRxCountAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeBeaconRxCountAttribute(
        BeaconRxCountAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeBeaconRxCountAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readPacketMulticastRxCountAttribute(
        PacketMulticastRxCountAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribePacketMulticastRxCountAttribute(
        PacketMulticastRxCountAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePacketMulticastRxCountAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readPacketMulticastTxCountAttribute(
        PacketMulticastTxCountAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribePacketMulticastTxCountAttribute(
        PacketMulticastTxCountAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePacketMulticastTxCountAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readPacketUnicastRxCountAttribute(
        PacketUnicastRxCountAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 9L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribePacketUnicastRxCountAttribute(
        PacketUnicastRxCountAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePacketUnicastRxCountAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readPacketUnicastTxCountAttribute(
        PacketUnicastTxCountAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 10L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribePacketUnicastTxCountAttribute(
        PacketUnicastTxCountAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePacketUnicastTxCountAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readCurrentMaxRateAttribute(
        CurrentMaxRateAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 11L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeCurrentMaxRateAttribute(
        CurrentMaxRateAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeCurrentMaxRateAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readOverrunCountAttribute(
        OverrunCountAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 12L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeOverrunCountAttribute(
        OverrunCountAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeOverrunCountAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeBssidAttribute(long chipClusterPtr, BssidAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeSecurityTypeAttribute(long chipClusterPtr, SecurityTypeAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeWiFiVersionAttribute(long chipClusterPtr, WiFiVersionAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeChannelNumberAttribute(long chipClusterPtr, ChannelNumberAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeRssiAttribute(long chipClusterPtr, RssiAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeBeaconLostCountAttribute(long chipClusterPtr, BeaconLostCountAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeBeaconRxCountAttribute(long chipClusterPtr, BeaconRxCountAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribePacketMulticastRxCountAttribute(long chipClusterPtr, PacketMulticastRxCountAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribePacketMulticastTxCountAttribute(long chipClusterPtr, PacketMulticastTxCountAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribePacketUnicastRxCountAttribute(long chipClusterPtr, PacketUnicastRxCountAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribePacketUnicastTxCountAttribute(long chipClusterPtr, PacketUnicastTxCountAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeCurrentMaxRateAttribute(long chipClusterPtr, CurrentMaxRateAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeOverrunCountAttribute(long chipClusterPtr, OverrunCountAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class EthernetNetworkDiagnosticsCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 55L;

    public EthernetNetworkDiagnosticsCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void resetCounts(DefaultClusterCallback callback) {
      resetCounts(chipClusterPtr, callback, null);
    }

    public void resetCounts(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      resetCounts(chipClusterPtr, callback, timedInvokeTimeoutMs);
    }

    private native void resetCounts(long chipClusterPtr, DefaultClusterCallback callback, @Nullable Integer timedInvokeTimeoutMs);

    public interface PHYRateAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface FullDuplexAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Boolean value);
    }

    public interface CarrierDetectAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Boolean value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readPHYRateAttribute(
        PHYRateAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribePHYRateAttribute(
        PHYRateAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePHYRateAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFullDuplexAttribute(
        FullDuplexAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFullDuplexAttribute(
        FullDuplexAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFullDuplexAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readPacketRxCountAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribePacketRxCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePacketRxCountAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readPacketTxCountAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribePacketTxCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePacketTxCountAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readTxErrCountAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeTxErrCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeTxErrCountAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readCollisionCountAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeCollisionCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeCollisionCountAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readOverrunCountAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeOverrunCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeOverrunCountAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readCarrierDetectAttribute(
        CarrierDetectAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeCarrierDetectAttribute(
        CarrierDetectAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeCarrierDetectAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readTimeSinceResetAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeTimeSinceResetAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeTimeSinceResetAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribePHYRateAttribute(long chipClusterPtr, PHYRateAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFullDuplexAttribute(long chipClusterPtr, FullDuplexAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribePacketRxCountAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribePacketTxCountAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeTxErrCountAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeCollisionCountAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeOverrunCountAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeCarrierDetectAttribute(long chipClusterPtr, CarrierDetectAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeTimeSinceResetAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class TimeSynchronizationCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 56L;

    public TimeSynchronizationCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void setUTCTime(DefaultClusterCallback callback, Long UTCTime, Integer granularity, Optional<Integer> timeSource) {
      setUTCTime(chipClusterPtr, callback, UTCTime, granularity, timeSource, null);
    }

    public void setUTCTime(DefaultClusterCallback callback, Long UTCTime, Integer granularity, Optional<Integer> timeSource, int timedInvokeTimeoutMs) {
      setUTCTime(chipClusterPtr, callback, UTCTime, granularity, timeSource, timedInvokeTimeoutMs);
    }

    public void setTrustedTimeSource(DefaultClusterCallback callback, @Nullable ChipStructs.TimeSynchronizationClusterFabricScopedTrustedTimeSourceStruct trustedTimeSource) {
      setTrustedTimeSource(chipClusterPtr, callback, trustedTimeSource, null);
    }

    public void setTrustedTimeSource(DefaultClusterCallback callback, @Nullable ChipStructs.TimeSynchronizationClusterFabricScopedTrustedTimeSourceStruct trustedTimeSource, int timedInvokeTimeoutMs) {
      setTrustedTimeSource(chipClusterPtr, callback, trustedTimeSource, timedInvokeTimeoutMs);
    }

    public void setTimeZone(SetTimeZoneResponseCallback callback, ArrayList<ChipStructs.TimeSynchronizationClusterTimeZoneStruct> timeZone) {
      setTimeZone(chipClusterPtr, callback, timeZone, null);
    }

    public void setTimeZone(SetTimeZoneResponseCallback callback, ArrayList<ChipStructs.TimeSynchronizationClusterTimeZoneStruct> timeZone, int timedInvokeTimeoutMs) {
      setTimeZone(chipClusterPtr, callback, timeZone, timedInvokeTimeoutMs);
    }

    public void setDSTOffset(DefaultClusterCallback callback, ArrayList<ChipStructs.TimeSynchronizationClusterDSTOffsetStruct> DSTOffset) {
      setDSTOffset(chipClusterPtr, callback, DSTOffset, null);
    }

    public void setDSTOffset(DefaultClusterCallback callback, ArrayList<ChipStructs.TimeSynchronizationClusterDSTOffsetStruct> DSTOffset, int timedInvokeTimeoutMs) {
      setDSTOffset(chipClusterPtr, callback, DSTOffset, timedInvokeTimeoutMs);
    }

    public void setDefaultNTP(DefaultClusterCallback callback, @Nullable String defaultNTP) {
      setDefaultNTP(chipClusterPtr, callback, defaultNTP, null);
    }

    public void setDefaultNTP(DefaultClusterCallback callback, @Nullable String defaultNTP, int timedInvokeTimeoutMs) {
      setDefaultNTP(chipClusterPtr, callback, defaultNTP, timedInvokeTimeoutMs);
    }

    private native void setUTCTime(long chipClusterPtr, DefaultClusterCallback callback, Long UTCTime, Integer granularity, Optional<Integer> timeSource, @Nullable Integer timedInvokeTimeoutMs);

    private native void setTrustedTimeSource(long chipClusterPtr, DefaultClusterCallback callback, @Nullable ChipStructs.TimeSynchronizationClusterFabricScopedTrustedTimeSourceStruct trustedTimeSource, @Nullable Integer timedInvokeTimeoutMs);

    private native void setTimeZone(long chipClusterPtr, SetTimeZoneResponseCallback callback, ArrayList<ChipStructs.TimeSynchronizationClusterTimeZoneStruct> timeZone, @Nullable Integer timedInvokeTimeoutMs);

    private native void setDSTOffset(long chipClusterPtr, DefaultClusterCallback callback, ArrayList<ChipStructs.TimeSynchronizationClusterDSTOffsetStruct> DSTOffset, @Nullable Integer timedInvokeTimeoutMs);

    private native void setDefaultNTP(long chipClusterPtr, DefaultClusterCallback callback, @Nullable String defaultNTP, @Nullable Integer timedInvokeTimeoutMs);

    public interface SetTimeZoneResponseCallback {
      void onSuccess(Boolean DSTOffsetRequired);
      void onError(Exception error);
    }

    public interface UTCTimeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface TrustedTimeSourceAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable ChipStructs.TimeSynchronizationClusterTrustedTimeSourceStruct value);
    }

    public interface DefaultNTPAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable String value);
    }

    public interface TimeZoneAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.TimeSynchronizationClusterTimeZoneStruct> value);
    }

    public interface DSTOffsetAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.TimeSynchronizationClusterDSTOffsetStruct> value);
    }

    public interface LocalTimeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readUTCTimeAttribute(
        UTCTimeAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeUTCTimeAttribute(
        UTCTimeAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeUTCTimeAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGranularityAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGranularityAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGranularityAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readTimeSourceAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeTimeSourceAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeTimeSourceAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readTrustedTimeSourceAttribute(
        TrustedTimeSourceAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable ChipStructs.TimeSynchronizationClusterTrustedTimeSourceStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeTrustedTimeSourceAttribute(
        TrustedTimeSourceAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeTrustedTimeSourceAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readDefaultNTPAttribute(
        DefaultNTPAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeDefaultNTPAttribute(
        DefaultNTPAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeDefaultNTPAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readTimeZoneAttribute(
        TimeZoneAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.TimeSynchronizationClusterTimeZoneStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeTimeZoneAttribute(
        TimeZoneAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeTimeZoneAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readDSTOffsetAttribute(
        DSTOffsetAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.TimeSynchronizationClusterDSTOffsetStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeDSTOffsetAttribute(
        DSTOffsetAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeDSTOffsetAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readLocalTimeAttribute(
        LocalTimeAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeLocalTimeAttribute(
        LocalTimeAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeLocalTimeAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readTimeZoneDatabaseAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeTimeZoneDatabaseAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeTimeZoneDatabaseAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readNTPServerAvailableAttribute(
        BooleanAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 9L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeNTPServerAvailableAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeNTPServerAvailableAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readTimeZoneListMaxSizeAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 10L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeTimeZoneListMaxSizeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeTimeZoneListMaxSizeAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readDSTOffsetListMaxSizeAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 11L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeDSTOffsetListMaxSizeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeDSTOffsetListMaxSizeAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readSupportsDNSResolveAttribute(
        BooleanAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 12L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeSupportsDNSResolveAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeSupportsDNSResolveAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeUTCTimeAttribute(long chipClusterPtr, UTCTimeAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGranularityAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeTimeSourceAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeTrustedTimeSourceAttribute(long chipClusterPtr, TrustedTimeSourceAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeDefaultNTPAttribute(long chipClusterPtr, DefaultNTPAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeTimeZoneAttribute(long chipClusterPtr, TimeZoneAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeDSTOffsetAttribute(long chipClusterPtr, DSTOffsetAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeLocalTimeAttribute(long chipClusterPtr, LocalTimeAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeTimeZoneDatabaseAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeNTPServerAvailableAttribute(long chipClusterPtr, BooleanAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeTimeZoneListMaxSizeAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeDSTOffsetListMaxSizeAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeSupportsDNSResolveAttribute(long chipClusterPtr, BooleanAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class BridgedDeviceBasicInformationCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 57L;

    public BridgedDeviceBasicInformationCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface ProductAppearanceAttributeCallback extends BaseAttributeCallback {
      void onSuccess(ChipStructs.BridgedDeviceBasicInformationClusterProductAppearanceStruct value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readVendorNameAttribute(
        CharStringAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeVendorNameAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeVendorNameAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readVendorIDAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeVendorIDAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeVendorIDAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readProductNameAttribute(
        CharStringAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeProductNameAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeProductNameAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readNodeLabelAttribute(
        CharStringAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeNodeLabelAttribute(DefaultClusterCallback callback, String value) {
        writeNodeLabelAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeNodeLabelAttribute(DefaultClusterCallback callback, String value, int timedWriteTimeoutMs) {
        writeNodeLabelAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeNodeLabelAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeNodeLabelAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readHardwareVersionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeHardwareVersionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeHardwareVersionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readHardwareVersionStringAttribute(
        CharStringAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeHardwareVersionStringAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeHardwareVersionStringAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readSoftwareVersionAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 9L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeSoftwareVersionAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeSoftwareVersionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readSoftwareVersionStringAttribute(
        CharStringAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 10L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeSoftwareVersionStringAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeSoftwareVersionStringAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readManufacturingDateAttribute(
        CharStringAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 11L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeManufacturingDateAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeManufacturingDateAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readPartNumberAttribute(
        CharStringAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 12L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribePartNumberAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePartNumberAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readProductURLAttribute(
        CharStringAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 13L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeProductURLAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeProductURLAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readProductLabelAttribute(
        CharStringAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 14L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeProductLabelAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeProductLabelAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readSerialNumberAttribute(
        CharStringAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 15L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeSerialNumberAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeSerialNumberAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readReachableAttribute(
        BooleanAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 17L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeReachableAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeReachableAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readUniqueIDAttribute(
        CharStringAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 18L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeUniqueIDAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeUniqueIDAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readProductAppearanceAttribute(
        ProductAppearanceAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 20L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            ChipStructs.BridgedDeviceBasicInformationClusterProductAppearanceStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeProductAppearanceAttribute(
        ProductAppearanceAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeProductAppearanceAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeVendorNameAttribute(long chipClusterPtr, CharStringAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeVendorIDAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeProductNameAttribute(long chipClusterPtr, CharStringAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeNodeLabelAttribute(long chipClusterPtr, DefaultClusterCallback callback, String value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeNodeLabelAttribute(long chipClusterPtr, CharStringAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeHardwareVersionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeHardwareVersionStringAttribute(long chipClusterPtr, CharStringAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeSoftwareVersionAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeSoftwareVersionStringAttribute(long chipClusterPtr, CharStringAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeManufacturingDateAttribute(long chipClusterPtr, CharStringAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribePartNumberAttribute(long chipClusterPtr, CharStringAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeProductURLAttribute(long chipClusterPtr, CharStringAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeProductLabelAttribute(long chipClusterPtr, CharStringAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeSerialNumberAttribute(long chipClusterPtr, CharStringAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeReachableAttribute(long chipClusterPtr, BooleanAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeUniqueIDAttribute(long chipClusterPtr, CharStringAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeProductAppearanceAttribute(long chipClusterPtr, ProductAppearanceAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class SwitchCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 59L;

    public SwitchCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readNumberOfPositionsAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeNumberOfPositionsAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeNumberOfPositionsAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readCurrentPositionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeCurrentPositionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeCurrentPositionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMultiPressMaxAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMultiPressMaxAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMultiPressMaxAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeNumberOfPositionsAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeCurrentPositionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMultiPressMaxAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class AdministratorCommissioningCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 60L;

    public AdministratorCommissioningCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);


    public void openCommissioningWindow(DefaultClusterCallback callback, Integer commissioningTimeout, byte[] PAKEPasscodeVerifier, Integer discriminator, Long iterations, byte[] salt, int timedInvokeTimeoutMs) {
      openCommissioningWindow(chipClusterPtr, callback, commissioningTimeout, PAKEPasscodeVerifier, discriminator, iterations, salt, timedInvokeTimeoutMs);
    }


    public void openBasicCommissioningWindow(DefaultClusterCallback callback, Integer commissioningTimeout, int timedInvokeTimeoutMs) {
      openBasicCommissioningWindow(chipClusterPtr, callback, commissioningTimeout, timedInvokeTimeoutMs);
    }


    public void revokeCommissioning(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      revokeCommissioning(chipClusterPtr, callback, timedInvokeTimeoutMs);
    }

    private native void openCommissioningWindow(long chipClusterPtr, DefaultClusterCallback callback, Integer commissioningTimeout, byte[] PAKEPasscodeVerifier, Integer discriminator, Long iterations, byte[] salt, @Nullable Integer timedInvokeTimeoutMs);

    private native void openBasicCommissioningWindow(long chipClusterPtr, DefaultClusterCallback callback, Integer commissioningTimeout, @Nullable Integer timedInvokeTimeoutMs);

    private native void revokeCommissioning(long chipClusterPtr, DefaultClusterCallback callback, @Nullable Integer timedInvokeTimeoutMs);

    public interface AdminFabricIndexAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface AdminVendorIdAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readWindowStatusAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeWindowStatusAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeWindowStatusAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAdminFabricIndexAttribute(
        AdminFabricIndexAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAdminFabricIndexAttribute(
        AdminFabricIndexAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAdminFabricIndexAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAdminVendorIdAttribute(
        AdminVendorIdAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAdminVendorIdAttribute(
        AdminVendorIdAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAdminVendorIdAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeWindowStatusAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAdminFabricIndexAttribute(long chipClusterPtr, AdminFabricIndexAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAdminVendorIdAttribute(long chipClusterPtr, AdminVendorIdAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class OperationalCredentialsCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 62L;

    public OperationalCredentialsCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void attestationRequest(AttestationResponseCallback callback, byte[] attestationNonce) {
      attestationRequest(chipClusterPtr, callback, attestationNonce, null);
    }

    public void attestationRequest(AttestationResponseCallback callback, byte[] attestationNonce, int timedInvokeTimeoutMs) {
      attestationRequest(chipClusterPtr, callback, attestationNonce, timedInvokeTimeoutMs);
    }

    public void certificateChainRequest(CertificateChainResponseCallback callback, Integer certificateType) {
      certificateChainRequest(chipClusterPtr, callback, certificateType, null);
    }

    public void certificateChainRequest(CertificateChainResponseCallback callback, Integer certificateType, int timedInvokeTimeoutMs) {
      certificateChainRequest(chipClusterPtr, callback, certificateType, timedInvokeTimeoutMs);
    }

    public void CSRRequest(CSRResponseCallback callback, byte[] CSRNonce, Optional<Boolean> isForUpdateNOC) {
      CSRRequest(chipClusterPtr, callback, CSRNonce, isForUpdateNOC, null);
    }

    public void CSRRequest(CSRResponseCallback callback, byte[] CSRNonce, Optional<Boolean> isForUpdateNOC, int timedInvokeTimeoutMs) {
      CSRRequest(chipClusterPtr, callback, CSRNonce, isForUpdateNOC, timedInvokeTimeoutMs);
    }

    public void addNOC(NOCResponseCallback callback, byte[] NOCValue, Optional<byte[]> ICACValue, byte[] IPKValue, Long caseAdminSubject, Integer adminVendorId) {
      addNOC(chipClusterPtr, callback, NOCValue, ICACValue, IPKValue, caseAdminSubject, adminVendorId, null);
    }

    public void addNOC(NOCResponseCallback callback, byte[] NOCValue, Optional<byte[]> ICACValue, byte[] IPKValue, Long caseAdminSubject, Integer adminVendorId, int timedInvokeTimeoutMs) {
      addNOC(chipClusterPtr, callback, NOCValue, ICACValue, IPKValue, caseAdminSubject, adminVendorId, timedInvokeTimeoutMs);
    }

    public void updateNOC(NOCResponseCallback callback, byte[] NOCValue, Optional<byte[]> ICACValue) {
      updateNOC(chipClusterPtr, callback, NOCValue, ICACValue, null);
    }

    public void updateNOC(NOCResponseCallback callback, byte[] NOCValue, Optional<byte[]> ICACValue, int timedInvokeTimeoutMs) {
      updateNOC(chipClusterPtr, callback, NOCValue, ICACValue, timedInvokeTimeoutMs);
    }

    public void updateFabricLabel(NOCResponseCallback callback, String label) {
      updateFabricLabel(chipClusterPtr, callback, label, null);
    }

    public void updateFabricLabel(NOCResponseCallback callback, String label, int timedInvokeTimeoutMs) {
      updateFabricLabel(chipClusterPtr, callback, label, timedInvokeTimeoutMs);
    }

    public void removeFabric(NOCResponseCallback callback, Integer fabricIndex) {
      removeFabric(chipClusterPtr, callback, fabricIndex, null);
    }

    public void removeFabric(NOCResponseCallback callback, Integer fabricIndex, int timedInvokeTimeoutMs) {
      removeFabric(chipClusterPtr, callback, fabricIndex, timedInvokeTimeoutMs);
    }

    public void addTrustedRootCertificate(DefaultClusterCallback callback, byte[] rootCACertificate) {
      addTrustedRootCertificate(chipClusterPtr, callback, rootCACertificate, null);
    }

    public void addTrustedRootCertificate(DefaultClusterCallback callback, byte[] rootCACertificate, int timedInvokeTimeoutMs) {
      addTrustedRootCertificate(chipClusterPtr, callback, rootCACertificate, timedInvokeTimeoutMs);
    }

    private native void attestationRequest(long chipClusterPtr, AttestationResponseCallback callback, byte[] attestationNonce, @Nullable Integer timedInvokeTimeoutMs);

    private native void certificateChainRequest(long chipClusterPtr, CertificateChainResponseCallback callback, Integer certificateType, @Nullable Integer timedInvokeTimeoutMs);

    private native void CSRRequest(long chipClusterPtr, CSRResponseCallback callback, byte[] CSRNonce, Optional<Boolean> isForUpdateNOC, @Nullable Integer timedInvokeTimeoutMs);

    private native void addNOC(long chipClusterPtr, NOCResponseCallback callback, byte[] NOCValue, Optional<byte[]> ICACValue, byte[] IPKValue, Long caseAdminSubject, Integer adminVendorId, @Nullable Integer timedInvokeTimeoutMs);

    private native void updateNOC(long chipClusterPtr, NOCResponseCallback callback, byte[] NOCValue, Optional<byte[]> ICACValue, @Nullable Integer timedInvokeTimeoutMs);

    private native void updateFabricLabel(long chipClusterPtr, NOCResponseCallback callback, String label, @Nullable Integer timedInvokeTimeoutMs);

    private native void removeFabric(long chipClusterPtr, NOCResponseCallback callback, Integer fabricIndex, @Nullable Integer timedInvokeTimeoutMs);

    private native void addTrustedRootCertificate(long chipClusterPtr, DefaultClusterCallback callback, byte[] rootCACertificate, @Nullable Integer timedInvokeTimeoutMs);

    public interface AttestationResponseCallback {
      void onSuccess(byte[] attestationElements, byte[] attestationSignature);
      void onError(Exception error);
    }

    public interface CertificateChainResponseCallback {
      void onSuccess(byte[] certificate);
      void onError(Exception error);
    }

    public interface CSRResponseCallback {
      void onSuccess(byte[] NOCSRElements, byte[] attestationSignature);
      void onError(Exception error);
    }

    public interface NOCResponseCallback {
      void onSuccess(Integer statusCode, Optional<Integer> fabricIndex, Optional<String> debugText);
      void onError(Exception error);
    }

    public interface NOCsAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.OperationalCredentialsClusterNOCStruct> value);
    }

    public interface FabricsAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.OperationalCredentialsClusterFabricDescriptorStruct> value);
    }

    public interface TrustedRootCertificatesAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<byte[]> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readNOCsAttribute(
        NOCsAttributeCallback callback) {
        readNOCsAttributeWithFabricFilter(callback, true);
    }

    public void readNOCsAttributeWithFabricFilter(
        NOCsAttributeCallback callback, boolean isFabricFiltered) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.OperationalCredentialsClusterNOCStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, isFabricFiltered, 0);
    }

    public void subscribeNOCsAttribute(
        NOCsAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeNOCsAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFabricsAttribute(
        FabricsAttributeCallback callback) {
        readFabricsAttributeWithFabricFilter(callback, true);
    }

    public void readFabricsAttributeWithFabricFilter(
        FabricsAttributeCallback callback, boolean isFabricFiltered) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.OperationalCredentialsClusterFabricDescriptorStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, isFabricFiltered, 0);
    }

    public void subscribeFabricsAttribute(
        FabricsAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFabricsAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readSupportedFabricsAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeSupportedFabricsAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeSupportedFabricsAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readCommissionedFabricsAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeCommissionedFabricsAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeCommissionedFabricsAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readTrustedRootCertificatesAttribute(
        TrustedRootCertificatesAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<byte[]> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeTrustedRootCertificatesAttribute(
        TrustedRootCertificatesAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeTrustedRootCertificatesAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readCurrentFabricIndexAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeCurrentFabricIndexAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeCurrentFabricIndexAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeNOCsAttribute(long chipClusterPtr, NOCsAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFabricsAttribute(long chipClusterPtr, FabricsAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeSupportedFabricsAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeCommissionedFabricsAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeTrustedRootCertificatesAttribute(long chipClusterPtr, TrustedRootCertificatesAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeCurrentFabricIndexAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class GroupKeyManagementCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 63L;

    public GroupKeyManagementCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void keySetWrite(DefaultClusterCallback callback, ChipStructs.GroupKeyManagementClusterGroupKeySetStruct groupKeySet) {
      keySetWrite(chipClusterPtr, callback, groupKeySet, null);
    }

    public void keySetWrite(DefaultClusterCallback callback, ChipStructs.GroupKeyManagementClusterGroupKeySetStruct groupKeySet, int timedInvokeTimeoutMs) {
      keySetWrite(chipClusterPtr, callback, groupKeySet, timedInvokeTimeoutMs);
    }

    public void keySetRead(KeySetReadResponseCallback callback, Integer groupKeySetID) {
      keySetRead(chipClusterPtr, callback, groupKeySetID, null);
    }

    public void keySetRead(KeySetReadResponseCallback callback, Integer groupKeySetID, int timedInvokeTimeoutMs) {
      keySetRead(chipClusterPtr, callback, groupKeySetID, timedInvokeTimeoutMs);
    }

    public void keySetRemove(DefaultClusterCallback callback, Integer groupKeySetID) {
      keySetRemove(chipClusterPtr, callback, groupKeySetID, null);
    }

    public void keySetRemove(DefaultClusterCallback callback, Integer groupKeySetID, int timedInvokeTimeoutMs) {
      keySetRemove(chipClusterPtr, callback, groupKeySetID, timedInvokeTimeoutMs);
    }

    public void keySetReadAllIndices(KeySetReadAllIndicesResponseCallback callback) {
      keySetReadAllIndices(chipClusterPtr, callback, null);
    }

    public void keySetReadAllIndices(KeySetReadAllIndicesResponseCallback callback, int timedInvokeTimeoutMs) {
      keySetReadAllIndices(chipClusterPtr, callback, timedInvokeTimeoutMs);
    }

    private native void keySetWrite(long chipClusterPtr, DefaultClusterCallback callback, ChipStructs.GroupKeyManagementClusterGroupKeySetStruct groupKeySet, @Nullable Integer timedInvokeTimeoutMs);

    private native void keySetRead(long chipClusterPtr, KeySetReadResponseCallback callback, Integer groupKeySetID, @Nullable Integer timedInvokeTimeoutMs);

    private native void keySetRemove(long chipClusterPtr, DefaultClusterCallback callback, Integer groupKeySetID, @Nullable Integer timedInvokeTimeoutMs);

    private native void keySetReadAllIndices(long chipClusterPtr, KeySetReadAllIndicesResponseCallback callback, @Nullable Integer timedInvokeTimeoutMs);

    public interface KeySetReadResponseCallback {
      void onSuccess(ChipStructs.GroupKeyManagementClusterGroupKeySetStruct groupKeySet);
      void onError(Exception error);
    }

    public interface KeySetReadAllIndicesResponseCallback {
      void onSuccess(ArrayList<Integer> groupKeySetIDs);
      void onError(Exception error);
    }

    public interface GroupKeyMapAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.GroupKeyManagementClusterGroupKeyMapStruct> value);
    }

    public interface GroupTableAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.GroupKeyManagementClusterGroupInfoMapStruct> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readGroupKeyMapAttribute(
        GroupKeyMapAttributeCallback callback) {
        readGroupKeyMapAttributeWithFabricFilter(callback, true);
    }

    public void readGroupKeyMapAttributeWithFabricFilter(
        GroupKeyMapAttributeCallback callback, boolean isFabricFiltered) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.GroupKeyManagementClusterGroupKeyMapStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, isFabricFiltered, 0);
    }

    public void writeGroupKeyMapAttribute(DefaultClusterCallback callback, ArrayList<ChipStructs.GroupKeyManagementClusterGroupKeyMapStruct> value) {
        writeGroupKeyMapAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeGroupKeyMapAttribute(DefaultClusterCallback callback, ArrayList<ChipStructs.GroupKeyManagementClusterGroupKeyMapStruct> value, int timedWriteTimeoutMs) {
        writeGroupKeyMapAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeGroupKeyMapAttribute(
        GroupKeyMapAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGroupKeyMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGroupTableAttribute(
        GroupTableAttributeCallback callback) {
        readGroupTableAttributeWithFabricFilter(callback, true);
    }

    public void readGroupTableAttributeWithFabricFilter(
        GroupTableAttributeCallback callback, boolean isFabricFiltered) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.GroupKeyManagementClusterGroupInfoMapStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, isFabricFiltered, 0);
    }

    public void subscribeGroupTableAttribute(
        GroupTableAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGroupTableAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMaxGroupsPerFabricAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMaxGroupsPerFabricAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMaxGroupsPerFabricAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMaxGroupKeysPerFabricAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMaxGroupKeysPerFabricAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMaxGroupKeysPerFabricAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void writeGroupKeyMapAttribute(long chipClusterPtr, DefaultClusterCallback callback, ArrayList<ChipStructs.GroupKeyManagementClusterGroupKeyMapStruct> value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeGroupKeyMapAttribute(long chipClusterPtr, GroupKeyMapAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGroupTableAttribute(long chipClusterPtr, GroupTableAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMaxGroupsPerFabricAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMaxGroupKeysPerFabricAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class FixedLabelCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 64L;

    public FixedLabelCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface LabelListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.FixedLabelClusterLabelStruct> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readLabelListAttribute(
        LabelListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.FixedLabelClusterLabelStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeLabelListAttribute(
        LabelListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeLabelListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeLabelListAttribute(long chipClusterPtr, LabelListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class UserLabelCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 65L;

    public UserLabelCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface LabelListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.UserLabelClusterLabelStruct> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readLabelListAttribute(
        LabelListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.UserLabelClusterLabelStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeLabelListAttribute(DefaultClusterCallback callback, ArrayList<ChipStructs.UserLabelClusterLabelStruct> value) {
        writeLabelListAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeLabelListAttribute(DefaultClusterCallback callback, ArrayList<ChipStructs.UserLabelClusterLabelStruct> value, int timedWriteTimeoutMs) {
        writeLabelListAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeLabelListAttribute(
        LabelListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeLabelListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void writeLabelListAttribute(long chipClusterPtr, DefaultClusterCallback callback, ArrayList<ChipStructs.UserLabelClusterLabelStruct> value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeLabelListAttribute(long chipClusterPtr, LabelListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class ProxyConfigurationCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 66L;

    public ProxyConfigurationCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class ProxyDiscoveryCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 67L;

    public ProxyDiscoveryCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class ProxyValidCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 68L;

    public ProxyValidCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class BooleanStateCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 69L;

    public BooleanStateCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readStateValueAttribute(
        BooleanAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeStateValueAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeStateValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeStateValueAttribute(long chipClusterPtr, BooleanAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class IcdManagementCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 70L;

    public IcdManagementCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void registerClient(RegisterClientResponseCallback callback, Long checkInNodeID, Long monitoredSubject, byte[] key, Optional<byte[]> verificationKey) {
      registerClient(chipClusterPtr, callback, checkInNodeID, monitoredSubject, key, verificationKey, null);
    }

    public void registerClient(RegisterClientResponseCallback callback, Long checkInNodeID, Long monitoredSubject, byte[] key, Optional<byte[]> verificationKey, int timedInvokeTimeoutMs) {
      registerClient(chipClusterPtr, callback, checkInNodeID, monitoredSubject, key, verificationKey, timedInvokeTimeoutMs);
    }

    public void unregisterClient(DefaultClusterCallback callback, Long checkInNodeID, Optional<byte[]> verificationKey) {
      unregisterClient(chipClusterPtr, callback, checkInNodeID, verificationKey, null);
    }

    public void unregisterClient(DefaultClusterCallback callback, Long checkInNodeID, Optional<byte[]> verificationKey, int timedInvokeTimeoutMs) {
      unregisterClient(chipClusterPtr, callback, checkInNodeID, verificationKey, timedInvokeTimeoutMs);
    }

    public void stayActiveRequest(DefaultClusterCallback callback) {
      stayActiveRequest(chipClusterPtr, callback, null);
    }

    public void stayActiveRequest(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      stayActiveRequest(chipClusterPtr, callback, timedInvokeTimeoutMs);
    }

    private native void registerClient(long chipClusterPtr, RegisterClientResponseCallback callback, Long checkInNodeID, Long monitoredSubject, byte[] key, Optional<byte[]> verificationKey, @Nullable Integer timedInvokeTimeoutMs);

    private native void unregisterClient(long chipClusterPtr, DefaultClusterCallback callback, Long checkInNodeID, Optional<byte[]> verificationKey, @Nullable Integer timedInvokeTimeoutMs);

    private native void stayActiveRequest(long chipClusterPtr, DefaultClusterCallback callback, @Nullable Integer timedInvokeTimeoutMs);

    public interface RegisterClientResponseCallback {
      void onSuccess(Long ICDCounter);
      void onError(Exception error);
    }

    public interface RegisteredClientsAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.IcdManagementClusterMonitoringRegistrationStruct> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readIdleModeIntervalAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeIdleModeIntervalAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeIdleModeIntervalAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readActiveModeIntervalAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeActiveModeIntervalAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeActiveModeIntervalAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readActiveModeThresholdAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeActiveModeThresholdAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeActiveModeThresholdAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readRegisteredClientsAttribute(
        RegisteredClientsAttributeCallback callback) {
        readRegisteredClientsAttributeWithFabricFilter(callback, true);
    }

    public void readRegisteredClientsAttributeWithFabricFilter(
        RegisteredClientsAttributeCallback callback, boolean isFabricFiltered) {
      long clusterId = CLUSTER_ID;
      long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.IcdManagementClusterMonitoringRegistrationStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, isFabricFiltered, 0);
    }

    public void subscribeRegisteredClientsAttribute(
        RegisteredClientsAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeRegisteredClientsAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readICDCounterAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeICDCounterAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeICDCounterAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClientsSupportedPerFabricAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClientsSupportedPerFabricAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClientsSupportedPerFabricAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeIdleModeIntervalAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeActiveModeIntervalAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeActiveModeThresholdAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeRegisteredClientsAttribute(long chipClusterPtr, RegisteredClientsAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeICDCounterAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClientsSupportedPerFabricAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class ModeSelectCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 80L;

    public ModeSelectCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void changeToMode(DefaultClusterCallback callback, Integer newMode) {
      changeToMode(chipClusterPtr, callback, newMode, null);
    }

    public void changeToMode(DefaultClusterCallback callback, Integer newMode, int timedInvokeTimeoutMs) {
      changeToMode(chipClusterPtr, callback, newMode, timedInvokeTimeoutMs);
    }

    private native void changeToMode(long chipClusterPtr, DefaultClusterCallback callback, Integer newMode, @Nullable Integer timedInvokeTimeoutMs);

    public interface StandardNamespaceAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface SupportedModesAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.ModeSelectClusterModeOptionStruct> value);
    }

    public interface StartUpModeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface OnModeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readDescriptionAttribute(
        CharStringAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeDescriptionAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeDescriptionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readStandardNamespaceAttribute(
        StandardNamespaceAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeStandardNamespaceAttribute(
        StandardNamespaceAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeStandardNamespaceAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readSupportedModesAttribute(
        SupportedModesAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.ModeSelectClusterModeOptionStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeSupportedModesAttribute(
        SupportedModesAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeSupportedModesAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readCurrentModeAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeCurrentModeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeCurrentModeAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readStartUpModeAttribute(
        StartUpModeAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeStartUpModeAttribute(DefaultClusterCallback callback, Integer value) {
        writeStartUpModeAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeStartUpModeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeStartUpModeAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeStartUpModeAttribute(
        StartUpModeAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeStartUpModeAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readOnModeAttribute(
        OnModeAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeOnModeAttribute(DefaultClusterCallback callback, Integer value) {
        writeOnModeAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeOnModeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeOnModeAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeOnModeAttribute(
        OnModeAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeOnModeAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeDescriptionAttribute(long chipClusterPtr, CharStringAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeStandardNamespaceAttribute(long chipClusterPtr, StandardNamespaceAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeSupportedModesAttribute(long chipClusterPtr, SupportedModesAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeCurrentModeAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeStartUpModeAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeStartUpModeAttribute(long chipClusterPtr, StartUpModeAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeOnModeAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeOnModeAttribute(long chipClusterPtr, OnModeAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class LaundryWasherModeCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 81L;

    public LaundryWasherModeCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void changeToMode(ChangeToModeResponseCallback callback, Integer newMode) {
      changeToMode(chipClusterPtr, callback, newMode, null);
    }

    public void changeToMode(ChangeToModeResponseCallback callback, Integer newMode, int timedInvokeTimeoutMs) {
      changeToMode(chipClusterPtr, callback, newMode, timedInvokeTimeoutMs);
    }

    private native void changeToMode(long chipClusterPtr, ChangeToModeResponseCallback callback, Integer newMode, @Nullable Integer timedInvokeTimeoutMs);

    public interface ChangeToModeResponseCallback {
      void onSuccess(Integer status, Optional<String> statusText);
      void onError(Exception error);
    }

    public interface SupportedModesAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.LaundryWasherModeClusterModeOptionStruct> value);
    }

    public interface StartUpModeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface OnModeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readSupportedModesAttribute(
        SupportedModesAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.LaundryWasherModeClusterModeOptionStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeSupportedModesAttribute(
        SupportedModesAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeSupportedModesAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readCurrentModeAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeCurrentModeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeCurrentModeAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readStartUpModeAttribute(
        StartUpModeAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeStartUpModeAttribute(DefaultClusterCallback callback, Integer value) {
        writeStartUpModeAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeStartUpModeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeStartUpModeAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeStartUpModeAttribute(
        StartUpModeAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeStartUpModeAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readOnModeAttribute(
        OnModeAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeOnModeAttribute(DefaultClusterCallback callback, Integer value) {
        writeOnModeAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeOnModeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeOnModeAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeOnModeAttribute(
        OnModeAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeOnModeAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeSupportedModesAttribute(long chipClusterPtr, SupportedModesAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeCurrentModeAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeStartUpModeAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeStartUpModeAttribute(long chipClusterPtr, StartUpModeAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeOnModeAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeOnModeAttribute(long chipClusterPtr, OnModeAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class RefrigeratorAndTemperatureControlledCabinetModeCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 82L;

    public RefrigeratorAndTemperatureControlledCabinetModeCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void changeToMode(ChangeToModeResponseCallback callback, Integer newMode) {
      changeToMode(chipClusterPtr, callback, newMode, null);
    }

    public void changeToMode(ChangeToModeResponseCallback callback, Integer newMode, int timedInvokeTimeoutMs) {
      changeToMode(chipClusterPtr, callback, newMode, timedInvokeTimeoutMs);
    }

    private native void changeToMode(long chipClusterPtr, ChangeToModeResponseCallback callback, Integer newMode, @Nullable Integer timedInvokeTimeoutMs);

    public interface ChangeToModeResponseCallback {
      void onSuccess(Integer status, Optional<String> statusText);
      void onError(Exception error);
    }

    public interface SupportedModesAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.RefrigeratorAndTemperatureControlledCabinetModeClusterModeOptionStruct> value);
    }

    public interface StartUpModeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface OnModeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readSupportedModesAttribute(
        SupportedModesAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.RefrigeratorAndTemperatureControlledCabinetModeClusterModeOptionStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeSupportedModesAttribute(
        SupportedModesAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeSupportedModesAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readCurrentModeAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeCurrentModeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeCurrentModeAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readStartUpModeAttribute(
        StartUpModeAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeStartUpModeAttribute(DefaultClusterCallback callback, Integer value) {
        writeStartUpModeAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeStartUpModeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeStartUpModeAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeStartUpModeAttribute(
        StartUpModeAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeStartUpModeAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readOnModeAttribute(
        OnModeAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeOnModeAttribute(DefaultClusterCallback callback, Integer value) {
        writeOnModeAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeOnModeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeOnModeAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeOnModeAttribute(
        OnModeAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeOnModeAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeSupportedModesAttribute(long chipClusterPtr, SupportedModesAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeCurrentModeAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeStartUpModeAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeStartUpModeAttribute(long chipClusterPtr, StartUpModeAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeOnModeAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeOnModeAttribute(long chipClusterPtr, OnModeAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class LaundryWasherControlsCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 83L;

    public LaundryWasherControlsCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface SpinSpeedsAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<String> value);
    }

    public interface SpinSpeedCurrentAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface SupportedRinsesAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Integer> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readSpinSpeedsAttribute(
        SpinSpeedsAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<String> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeSpinSpeedsAttribute(
        SpinSpeedsAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeSpinSpeedsAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readSpinSpeedCurrentAttribute(
        SpinSpeedCurrentAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeSpinSpeedCurrentAttribute(DefaultClusterCallback callback, Integer value) {
        writeSpinSpeedCurrentAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeSpinSpeedCurrentAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeSpinSpeedCurrentAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeSpinSpeedCurrentAttribute(
        SpinSpeedCurrentAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeSpinSpeedCurrentAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readNumberOfRinsesAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeNumberOfRinsesAttribute(DefaultClusterCallback callback, Integer value) {
        writeNumberOfRinsesAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeNumberOfRinsesAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeNumberOfRinsesAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeNumberOfRinsesAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeNumberOfRinsesAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readSupportedRinsesAttribute(
        SupportedRinsesAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeSupportedRinsesAttribute(
        SupportedRinsesAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeSupportedRinsesAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeSpinSpeedsAttribute(long chipClusterPtr, SpinSpeedsAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeSpinSpeedCurrentAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeSpinSpeedCurrentAttribute(long chipClusterPtr, SpinSpeedCurrentAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeNumberOfRinsesAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeNumberOfRinsesAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeSupportedRinsesAttribute(long chipClusterPtr, SupportedRinsesAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class RvcRunModeCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 84L;

    public RvcRunModeCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void changeToMode(ChangeToModeResponseCallback callback, Integer newMode) {
      changeToMode(chipClusterPtr, callback, newMode, null);
    }

    public void changeToMode(ChangeToModeResponseCallback callback, Integer newMode, int timedInvokeTimeoutMs) {
      changeToMode(chipClusterPtr, callback, newMode, timedInvokeTimeoutMs);
    }

    private native void changeToMode(long chipClusterPtr, ChangeToModeResponseCallback callback, Integer newMode, @Nullable Integer timedInvokeTimeoutMs);

    public interface ChangeToModeResponseCallback {
      void onSuccess(Integer status, Optional<String> statusText);
      void onError(Exception error);
    }

    public interface SupportedModesAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.RvcRunModeClusterModeOptionStruct> value);
    }

    public interface StartUpModeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface OnModeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readSupportedModesAttribute(
        SupportedModesAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.RvcRunModeClusterModeOptionStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeSupportedModesAttribute(
        SupportedModesAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeSupportedModesAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readCurrentModeAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeCurrentModeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeCurrentModeAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readStartUpModeAttribute(
        StartUpModeAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeStartUpModeAttribute(DefaultClusterCallback callback, Integer value) {
        writeStartUpModeAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeStartUpModeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeStartUpModeAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeStartUpModeAttribute(
        StartUpModeAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeStartUpModeAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readOnModeAttribute(
        OnModeAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeOnModeAttribute(DefaultClusterCallback callback, Integer value) {
        writeOnModeAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeOnModeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeOnModeAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeOnModeAttribute(
        OnModeAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeOnModeAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeSupportedModesAttribute(long chipClusterPtr, SupportedModesAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeCurrentModeAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeStartUpModeAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeStartUpModeAttribute(long chipClusterPtr, StartUpModeAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeOnModeAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeOnModeAttribute(long chipClusterPtr, OnModeAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class RvcCleanModeCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 85L;

    public RvcCleanModeCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void changeToMode(ChangeToModeResponseCallback callback, Integer newMode) {
      changeToMode(chipClusterPtr, callback, newMode, null);
    }

    public void changeToMode(ChangeToModeResponseCallback callback, Integer newMode, int timedInvokeTimeoutMs) {
      changeToMode(chipClusterPtr, callback, newMode, timedInvokeTimeoutMs);
    }

    private native void changeToMode(long chipClusterPtr, ChangeToModeResponseCallback callback, Integer newMode, @Nullable Integer timedInvokeTimeoutMs);

    public interface ChangeToModeResponseCallback {
      void onSuccess(Integer status, Optional<String> statusText);
      void onError(Exception error);
    }

    public interface SupportedModesAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.RvcCleanModeClusterModeOptionStruct> value);
    }

    public interface StartUpModeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface OnModeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readSupportedModesAttribute(
        SupportedModesAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.RvcCleanModeClusterModeOptionStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeSupportedModesAttribute(
        SupportedModesAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeSupportedModesAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readCurrentModeAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeCurrentModeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeCurrentModeAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readStartUpModeAttribute(
        StartUpModeAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeStartUpModeAttribute(DefaultClusterCallback callback, Integer value) {
        writeStartUpModeAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeStartUpModeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeStartUpModeAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeStartUpModeAttribute(
        StartUpModeAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeStartUpModeAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readOnModeAttribute(
        OnModeAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeOnModeAttribute(DefaultClusterCallback callback, Integer value) {
        writeOnModeAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeOnModeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeOnModeAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeOnModeAttribute(
        OnModeAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeOnModeAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeSupportedModesAttribute(long chipClusterPtr, SupportedModesAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeCurrentModeAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeStartUpModeAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeStartUpModeAttribute(long chipClusterPtr, StartUpModeAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeOnModeAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeOnModeAttribute(long chipClusterPtr, OnModeAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class TemperatureControlCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 86L;

    public TemperatureControlCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void setTemperature(DefaultClusterCallback callback, Optional<Integer> targetTemperature, Optional<Integer> targetTemperatureLevel) {
      setTemperature(chipClusterPtr, callback, targetTemperature, targetTemperatureLevel, null);
    }

    public void setTemperature(DefaultClusterCallback callback, Optional<Integer> targetTemperature, Optional<Integer> targetTemperatureLevel, int timedInvokeTimeoutMs) {
      setTemperature(chipClusterPtr, callback, targetTemperature, targetTemperatureLevel, timedInvokeTimeoutMs);
    }

    private native void setTemperature(long chipClusterPtr, DefaultClusterCallback callback, Optional<Integer> targetTemperature, Optional<Integer> targetTemperatureLevel, @Nullable Integer timedInvokeTimeoutMs);

    public interface SupportedTemperatureLevelsAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<String> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readTemperatureSetpointAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeTemperatureSetpointAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeTemperatureSetpointAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMinTemperatureAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMinTemperatureAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMinTemperatureAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMaxTemperatureAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMaxTemperatureAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMaxTemperatureAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readStepAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeStepAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeStepAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readSelectedTemperatureLevelAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeSelectedTemperatureLevelAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeSelectedTemperatureLevelAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readSupportedTemperatureLevelsAttribute(
        SupportedTemperatureLevelsAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<String> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeSupportedTemperatureLevelsAttribute(
        SupportedTemperatureLevelsAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeSupportedTemperatureLevelsAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeTemperatureSetpointAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMinTemperatureAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMaxTemperatureAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeStepAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeSelectedTemperatureLevelAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeSupportedTemperatureLevelsAttribute(long chipClusterPtr, SupportedTemperatureLevelsAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class RefrigeratorAlarmCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 87L;

    public RefrigeratorAlarmCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readMaskAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMaskAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMaskAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readStateAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeStateAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeStateAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readSupportedAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeSupportedAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeSupportedAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeMaskAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeStateAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeSupportedAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class DishwasherModeCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 89L;

    public DishwasherModeCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void changeToMode(ChangeToModeResponseCallback callback, Integer newMode) {
      changeToMode(chipClusterPtr, callback, newMode, null);
    }

    public void changeToMode(ChangeToModeResponseCallback callback, Integer newMode, int timedInvokeTimeoutMs) {
      changeToMode(chipClusterPtr, callback, newMode, timedInvokeTimeoutMs);
    }

    private native void changeToMode(long chipClusterPtr, ChangeToModeResponseCallback callback, Integer newMode, @Nullable Integer timedInvokeTimeoutMs);

    public interface ChangeToModeResponseCallback {
      void onSuccess(Integer status, Optional<String> statusText);
      void onError(Exception error);
    }

    public interface SupportedModesAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.DishwasherModeClusterModeOptionStruct> value);
    }

    public interface StartUpModeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface OnModeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readSupportedModesAttribute(
        SupportedModesAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.DishwasherModeClusterModeOptionStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeSupportedModesAttribute(
        SupportedModesAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeSupportedModesAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readCurrentModeAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeCurrentModeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeCurrentModeAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readStartUpModeAttribute(
        StartUpModeAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeStartUpModeAttribute(DefaultClusterCallback callback, Integer value) {
        writeStartUpModeAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeStartUpModeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeStartUpModeAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeStartUpModeAttribute(
        StartUpModeAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeStartUpModeAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readOnModeAttribute(
        OnModeAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeOnModeAttribute(DefaultClusterCallback callback, Integer value) {
        writeOnModeAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeOnModeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeOnModeAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeOnModeAttribute(
        OnModeAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeOnModeAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeSupportedModesAttribute(long chipClusterPtr, SupportedModesAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeCurrentModeAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeStartUpModeAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeStartUpModeAttribute(long chipClusterPtr, StartUpModeAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeOnModeAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeOnModeAttribute(long chipClusterPtr, OnModeAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class AirQualityCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 91L;

    public AirQualityCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readAirQualityAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAirQualityAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAirQualityAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeAirQualityAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class SmokeCoAlarmCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 92L;

    public SmokeCoAlarmCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void selfTestRequest(DefaultClusterCallback callback) {
      selfTestRequest(chipClusterPtr, callback, null);
    }

    public void selfTestRequest(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      selfTestRequest(chipClusterPtr, callback, timedInvokeTimeoutMs);
    }

    private native void selfTestRequest(long chipClusterPtr, DefaultClusterCallback callback, @Nullable Integer timedInvokeTimeoutMs);

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readExpressedStateAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeExpressedStateAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeExpressedStateAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readSmokeStateAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeSmokeStateAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeSmokeStateAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readCOStateAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeCOStateAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeCOStateAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readBatteryAlertAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeBatteryAlertAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeBatteryAlertAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readDeviceMutedAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeDeviceMutedAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeDeviceMutedAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readTestInProgressAttribute(
        BooleanAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeTestInProgressAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeTestInProgressAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readHardwareFaultAlertAttribute(
        BooleanAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeHardwareFaultAlertAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeHardwareFaultAlertAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEndOfServiceAlertAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEndOfServiceAlertAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEndOfServiceAlertAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readInterconnectSmokeAlarmAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeInterconnectSmokeAlarmAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeInterconnectSmokeAlarmAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readInterconnectCOAlarmAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 9L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeInterconnectCOAlarmAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeInterconnectCOAlarmAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readContaminationStateAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 10L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeContaminationStateAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeContaminationStateAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readSmokeSensitivityLevelAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 11L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeSmokeSensitivityLevelAttribute(DefaultClusterCallback callback, Integer value) {
        writeSmokeSensitivityLevelAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeSmokeSensitivityLevelAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeSmokeSensitivityLevelAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeSmokeSensitivityLevelAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeSmokeSensitivityLevelAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readExpiryDateAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 12L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeExpiryDateAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeExpiryDateAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeExpressedStateAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeSmokeStateAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeCOStateAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeBatteryAlertAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeDeviceMutedAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeTestInProgressAttribute(long chipClusterPtr, BooleanAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeHardwareFaultAlertAttribute(long chipClusterPtr, BooleanAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEndOfServiceAlertAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeInterconnectSmokeAlarmAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeInterconnectCOAlarmAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeContaminationStateAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeSmokeSensitivityLevelAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeSmokeSensitivityLevelAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeExpiryDateAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class DishwasherAlarmCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 93L;

    public DishwasherAlarmCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void reset(DefaultClusterCallback callback, Long alarms) {
      reset(chipClusterPtr, callback, alarms, null);
    }

    public void reset(DefaultClusterCallback callback, Long alarms, int timedInvokeTimeoutMs) {
      reset(chipClusterPtr, callback, alarms, timedInvokeTimeoutMs);
    }

    public void modifyEnabledAlarms(DefaultClusterCallback callback, Long mask) {
      modifyEnabledAlarms(chipClusterPtr, callback, mask, null);
    }

    public void modifyEnabledAlarms(DefaultClusterCallback callback, Long mask, int timedInvokeTimeoutMs) {
      modifyEnabledAlarms(chipClusterPtr, callback, mask, timedInvokeTimeoutMs);
    }

    private native void reset(long chipClusterPtr, DefaultClusterCallback callback, Long alarms, @Nullable Integer timedInvokeTimeoutMs);

    private native void modifyEnabledAlarms(long chipClusterPtr, DefaultClusterCallback callback, Long mask, @Nullable Integer timedInvokeTimeoutMs);

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readMaskAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMaskAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMaskAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readLatchAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeLatchAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeLatchAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readStateAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeStateAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeStateAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readSupportedAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeSupportedAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeSupportedAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeMaskAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeLatchAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeStateAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeSupportedAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class OperationalStateCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 96L;

    public OperationalStateCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void pause(OperationalCommandResponseCallback callback) {
      pause(chipClusterPtr, callback, null);
    }

    public void pause(OperationalCommandResponseCallback callback, int timedInvokeTimeoutMs) {
      pause(chipClusterPtr, callback, timedInvokeTimeoutMs);
    }

    public void stop(OperationalCommandResponseCallback callback) {
      stop(chipClusterPtr, callback, null);
    }

    public void stop(OperationalCommandResponseCallback callback, int timedInvokeTimeoutMs) {
      stop(chipClusterPtr, callback, timedInvokeTimeoutMs);
    }

    public void start(OperationalCommandResponseCallback callback) {
      start(chipClusterPtr, callback, null);
    }

    public void start(OperationalCommandResponseCallback callback, int timedInvokeTimeoutMs) {
      start(chipClusterPtr, callback, timedInvokeTimeoutMs);
    }

    public void resume(OperationalCommandResponseCallback callback) {
      resume(chipClusterPtr, callback, null);
    }

    public void resume(OperationalCommandResponseCallback callback, int timedInvokeTimeoutMs) {
      resume(chipClusterPtr, callback, timedInvokeTimeoutMs);
    }

    private native void pause(long chipClusterPtr, OperationalCommandResponseCallback callback, @Nullable Integer timedInvokeTimeoutMs);

    private native void stop(long chipClusterPtr, OperationalCommandResponseCallback callback, @Nullable Integer timedInvokeTimeoutMs);

    private native void start(long chipClusterPtr, OperationalCommandResponseCallback callback, @Nullable Integer timedInvokeTimeoutMs);

    private native void resume(long chipClusterPtr, OperationalCommandResponseCallback callback, @Nullable Integer timedInvokeTimeoutMs);

    public interface OperationalCommandResponseCallback {
      void onSuccess(ChipStructs.OperationalStateClusterErrorStateStruct commandResponseState);
      void onError(Exception error);
    }

    public interface PhaseListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable List<String> value);
    }

    public interface CurrentPhaseAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface CountdownTimeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface OperationalStateListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.OperationalStateClusterOperationalStateStruct> value);
    }

    public interface OperationalErrorAttributeCallback extends BaseAttributeCallback {
      void onSuccess(ChipStructs.OperationalStateClusterErrorStateStruct value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readPhaseListAttribute(
        PhaseListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable List<String> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribePhaseListAttribute(
        PhaseListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePhaseListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readCurrentPhaseAttribute(
        CurrentPhaseAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeCurrentPhaseAttribute(
        CurrentPhaseAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeCurrentPhaseAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readCountdownTimeAttribute(
        CountdownTimeAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeCountdownTimeAttribute(
        CountdownTimeAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeCountdownTimeAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readOperationalStateListAttribute(
        OperationalStateListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.OperationalStateClusterOperationalStateStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeOperationalStateListAttribute(
        OperationalStateListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeOperationalStateListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readOperationalStateAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeOperationalStateAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeOperationalStateAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readOperationalErrorAttribute(
        OperationalErrorAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            ChipStructs.OperationalStateClusterErrorStateStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeOperationalErrorAttribute(
        OperationalErrorAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeOperationalErrorAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribePhaseListAttribute(long chipClusterPtr, PhaseListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeCurrentPhaseAttribute(long chipClusterPtr, CurrentPhaseAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeCountdownTimeAttribute(long chipClusterPtr, CountdownTimeAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeOperationalStateListAttribute(long chipClusterPtr, OperationalStateListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeOperationalStateAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeOperationalErrorAttribute(long chipClusterPtr, OperationalErrorAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class RvcOperationalStateCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 97L;

    public RvcOperationalStateCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void pause(OperationalCommandResponseCallback callback) {
      pause(chipClusterPtr, callback, null);
    }

    public void pause(OperationalCommandResponseCallback callback, int timedInvokeTimeoutMs) {
      pause(chipClusterPtr, callback, timedInvokeTimeoutMs);
    }

    public void stop(OperationalCommandResponseCallback callback) {
      stop(chipClusterPtr, callback, null);
    }

    public void stop(OperationalCommandResponseCallback callback, int timedInvokeTimeoutMs) {
      stop(chipClusterPtr, callback, timedInvokeTimeoutMs);
    }

    public void start(OperationalCommandResponseCallback callback) {
      start(chipClusterPtr, callback, null);
    }

    public void start(OperationalCommandResponseCallback callback, int timedInvokeTimeoutMs) {
      start(chipClusterPtr, callback, timedInvokeTimeoutMs);
    }

    public void resume(OperationalCommandResponseCallback callback) {
      resume(chipClusterPtr, callback, null);
    }

    public void resume(OperationalCommandResponseCallback callback, int timedInvokeTimeoutMs) {
      resume(chipClusterPtr, callback, timedInvokeTimeoutMs);
    }

    private native void pause(long chipClusterPtr, OperationalCommandResponseCallback callback, @Nullable Integer timedInvokeTimeoutMs);

    private native void stop(long chipClusterPtr, OperationalCommandResponseCallback callback, @Nullable Integer timedInvokeTimeoutMs);

    private native void start(long chipClusterPtr, OperationalCommandResponseCallback callback, @Nullable Integer timedInvokeTimeoutMs);

    private native void resume(long chipClusterPtr, OperationalCommandResponseCallback callback, @Nullable Integer timedInvokeTimeoutMs);

    public interface OperationalCommandResponseCallback {
      void onSuccess(ChipStructs.RvcOperationalStateClusterErrorStateStruct commandResponseState);
      void onError(Exception error);
    }

    public interface PhaseListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable List<String> value);
    }

    public interface CurrentPhaseAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface CountdownTimeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface OperationalStateListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.RvcOperationalStateClusterOperationalStateStruct> value);
    }

    public interface OperationalErrorAttributeCallback extends BaseAttributeCallback {
      void onSuccess(ChipStructs.RvcOperationalStateClusterErrorStateStruct value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readPhaseListAttribute(
        PhaseListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable List<String> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribePhaseListAttribute(
        PhaseListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePhaseListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readCurrentPhaseAttribute(
        CurrentPhaseAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeCurrentPhaseAttribute(
        CurrentPhaseAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeCurrentPhaseAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readCountdownTimeAttribute(
        CountdownTimeAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeCountdownTimeAttribute(
        CountdownTimeAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeCountdownTimeAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readOperationalStateListAttribute(
        OperationalStateListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.RvcOperationalStateClusterOperationalStateStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeOperationalStateListAttribute(
        OperationalStateListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeOperationalStateListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readOperationalStateAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeOperationalStateAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeOperationalStateAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readOperationalErrorAttribute(
        OperationalErrorAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            ChipStructs.RvcOperationalStateClusterErrorStateStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeOperationalErrorAttribute(
        OperationalErrorAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeOperationalErrorAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribePhaseListAttribute(long chipClusterPtr, PhaseListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeCurrentPhaseAttribute(long chipClusterPtr, CurrentPhaseAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeCountdownTimeAttribute(long chipClusterPtr, CountdownTimeAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeOperationalStateListAttribute(long chipClusterPtr, OperationalStateListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeOperationalStateAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeOperationalErrorAttribute(long chipClusterPtr, OperationalErrorAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class HepaFilterMonitoringCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 113L;

    public HepaFilterMonitoringCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void resetCondition(DefaultClusterCallback callback) {
      resetCondition(chipClusterPtr, callback, null);
    }

    public void resetCondition(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      resetCondition(chipClusterPtr, callback, timedInvokeTimeoutMs);
    }

    private native void resetCondition(long chipClusterPtr, DefaultClusterCallback callback, @Nullable Integer timedInvokeTimeoutMs);

    public interface LastChangedTimeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface ReplacementProductListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.HepaFilterMonitoringClusterReplacementProductStruct> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readConditionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeConditionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeConditionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readDegradationDirectionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeDegradationDirectionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeDegradationDirectionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readChangeIndicationAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeChangeIndicationAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeChangeIndicationAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readInPlaceIndicatorAttribute(
        BooleanAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeInPlaceIndicatorAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeInPlaceIndicatorAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readLastChangedTimeAttribute(
        LastChangedTimeAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeLastChangedTimeAttribute(DefaultClusterCallback callback, Long value) {
        writeLastChangedTimeAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeLastChangedTimeAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
        writeLastChangedTimeAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeLastChangedTimeAttribute(
        LastChangedTimeAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeLastChangedTimeAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readReplacementProductListAttribute(
        ReplacementProductListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.HepaFilterMonitoringClusterReplacementProductStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeReplacementProductListAttribute(
        ReplacementProductListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeReplacementProductListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeConditionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeDegradationDirectionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeChangeIndicationAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeInPlaceIndicatorAttribute(long chipClusterPtr, BooleanAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeLastChangedTimeAttribute(long chipClusterPtr, DefaultClusterCallback callback, Long value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeLastChangedTimeAttribute(long chipClusterPtr, LastChangedTimeAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeReplacementProductListAttribute(long chipClusterPtr, ReplacementProductListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class ActivatedCarbonFilterMonitoringCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 114L;

    public ActivatedCarbonFilterMonitoringCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void resetCondition(DefaultClusterCallback callback) {
      resetCondition(chipClusterPtr, callback, null);
    }

    public void resetCondition(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      resetCondition(chipClusterPtr, callback, timedInvokeTimeoutMs);
    }

    private native void resetCondition(long chipClusterPtr, DefaultClusterCallback callback, @Nullable Integer timedInvokeTimeoutMs);

    public interface LastChangedTimeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface ReplacementProductListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.ActivatedCarbonFilterMonitoringClusterReplacementProductStruct> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readConditionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeConditionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeConditionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readDegradationDirectionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeDegradationDirectionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeDegradationDirectionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readChangeIndicationAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeChangeIndicationAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeChangeIndicationAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readInPlaceIndicatorAttribute(
        BooleanAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeInPlaceIndicatorAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeInPlaceIndicatorAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readLastChangedTimeAttribute(
        LastChangedTimeAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeLastChangedTimeAttribute(DefaultClusterCallback callback, Long value) {
        writeLastChangedTimeAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeLastChangedTimeAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
        writeLastChangedTimeAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeLastChangedTimeAttribute(
        LastChangedTimeAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeLastChangedTimeAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readReplacementProductListAttribute(
        ReplacementProductListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.ActivatedCarbonFilterMonitoringClusterReplacementProductStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeReplacementProductListAttribute(
        ReplacementProductListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeReplacementProductListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeConditionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeDegradationDirectionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeChangeIndicationAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeInPlaceIndicatorAttribute(long chipClusterPtr, BooleanAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeLastChangedTimeAttribute(long chipClusterPtr, DefaultClusterCallback callback, Long value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeLastChangedTimeAttribute(long chipClusterPtr, LastChangedTimeAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeReplacementProductListAttribute(long chipClusterPtr, ReplacementProductListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class DoorLockCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 257L;

    public DoorLockCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);


    public void lockDoor(DefaultClusterCallback callback, Optional<byte[]> PINCode, int timedInvokeTimeoutMs) {
      lockDoor(chipClusterPtr, callback, PINCode, timedInvokeTimeoutMs);
    }


    public void unlockDoor(DefaultClusterCallback callback, Optional<byte[]> PINCode, int timedInvokeTimeoutMs) {
      unlockDoor(chipClusterPtr, callback, PINCode, timedInvokeTimeoutMs);
    }


    public void unlockWithTimeout(DefaultClusterCallback callback, Integer timeout, Optional<byte[]> PINCode, int timedInvokeTimeoutMs) {
      unlockWithTimeout(chipClusterPtr, callback, timeout, PINCode, timedInvokeTimeoutMs);
    }

    public void setWeekDaySchedule(DefaultClusterCallback callback, Integer weekDayIndex, Integer userIndex, Integer daysMask, Integer startHour, Integer startMinute, Integer endHour, Integer endMinute) {
      setWeekDaySchedule(chipClusterPtr, callback, weekDayIndex, userIndex, daysMask, startHour, startMinute, endHour, endMinute, null);
    }

    public void setWeekDaySchedule(DefaultClusterCallback callback, Integer weekDayIndex, Integer userIndex, Integer daysMask, Integer startHour, Integer startMinute, Integer endHour, Integer endMinute, int timedInvokeTimeoutMs) {
      setWeekDaySchedule(chipClusterPtr, callback, weekDayIndex, userIndex, daysMask, startHour, startMinute, endHour, endMinute, timedInvokeTimeoutMs);
    }

    public void getWeekDaySchedule(GetWeekDayScheduleResponseCallback callback, Integer weekDayIndex, Integer userIndex) {
      getWeekDaySchedule(chipClusterPtr, callback, weekDayIndex, userIndex, null);
    }

    public void getWeekDaySchedule(GetWeekDayScheduleResponseCallback callback, Integer weekDayIndex, Integer userIndex, int timedInvokeTimeoutMs) {
      getWeekDaySchedule(chipClusterPtr, callback, weekDayIndex, userIndex, timedInvokeTimeoutMs);
    }

    public void clearWeekDaySchedule(DefaultClusterCallback callback, Integer weekDayIndex, Integer userIndex) {
      clearWeekDaySchedule(chipClusterPtr, callback, weekDayIndex, userIndex, null);
    }

    public void clearWeekDaySchedule(DefaultClusterCallback callback, Integer weekDayIndex, Integer userIndex, int timedInvokeTimeoutMs) {
      clearWeekDaySchedule(chipClusterPtr, callback, weekDayIndex, userIndex, timedInvokeTimeoutMs);
    }

    public void setYearDaySchedule(DefaultClusterCallback callback, Integer yearDayIndex, Integer userIndex, Long localStartTime, Long localEndTime) {
      setYearDaySchedule(chipClusterPtr, callback, yearDayIndex, userIndex, localStartTime, localEndTime, null);
    }

    public void setYearDaySchedule(DefaultClusterCallback callback, Integer yearDayIndex, Integer userIndex, Long localStartTime, Long localEndTime, int timedInvokeTimeoutMs) {
      setYearDaySchedule(chipClusterPtr, callback, yearDayIndex, userIndex, localStartTime, localEndTime, timedInvokeTimeoutMs);
    }

    public void getYearDaySchedule(GetYearDayScheduleResponseCallback callback, Integer yearDayIndex, Integer userIndex) {
      getYearDaySchedule(chipClusterPtr, callback, yearDayIndex, userIndex, null);
    }

    public void getYearDaySchedule(GetYearDayScheduleResponseCallback callback, Integer yearDayIndex, Integer userIndex, int timedInvokeTimeoutMs) {
      getYearDaySchedule(chipClusterPtr, callback, yearDayIndex, userIndex, timedInvokeTimeoutMs);
    }

    public void clearYearDaySchedule(DefaultClusterCallback callback, Integer yearDayIndex, Integer userIndex) {
      clearYearDaySchedule(chipClusterPtr, callback, yearDayIndex, userIndex, null);
    }

    public void clearYearDaySchedule(DefaultClusterCallback callback, Integer yearDayIndex, Integer userIndex, int timedInvokeTimeoutMs) {
      clearYearDaySchedule(chipClusterPtr, callback, yearDayIndex, userIndex, timedInvokeTimeoutMs);
    }

    public void setHolidaySchedule(DefaultClusterCallback callback, Integer holidayIndex, Long localStartTime, Long localEndTime, Integer operatingMode) {
      setHolidaySchedule(chipClusterPtr, callback, holidayIndex, localStartTime, localEndTime, operatingMode, null);
    }

    public void setHolidaySchedule(DefaultClusterCallback callback, Integer holidayIndex, Long localStartTime, Long localEndTime, Integer operatingMode, int timedInvokeTimeoutMs) {
      setHolidaySchedule(chipClusterPtr, callback, holidayIndex, localStartTime, localEndTime, operatingMode, timedInvokeTimeoutMs);
    }

    public void getHolidaySchedule(GetHolidayScheduleResponseCallback callback, Integer holidayIndex) {
      getHolidaySchedule(chipClusterPtr, callback, holidayIndex, null);
    }

    public void getHolidaySchedule(GetHolidayScheduleResponseCallback callback, Integer holidayIndex, int timedInvokeTimeoutMs) {
      getHolidaySchedule(chipClusterPtr, callback, holidayIndex, timedInvokeTimeoutMs);
    }

    public void clearHolidaySchedule(DefaultClusterCallback callback, Integer holidayIndex) {
      clearHolidaySchedule(chipClusterPtr, callback, holidayIndex, null);
    }

    public void clearHolidaySchedule(DefaultClusterCallback callback, Integer holidayIndex, int timedInvokeTimeoutMs) {
      clearHolidaySchedule(chipClusterPtr, callback, holidayIndex, timedInvokeTimeoutMs);
    }


    public void setUser(DefaultClusterCallback callback, Integer operationType, Integer userIndex, @Nullable String userName, @Nullable Long userUniqueID, @Nullable Integer userStatus, @Nullable Integer userType, @Nullable Integer credentialRule, int timedInvokeTimeoutMs) {
      setUser(chipClusterPtr, callback, operationType, userIndex, userName, userUniqueID, userStatus, userType, credentialRule, timedInvokeTimeoutMs);
    }

    public void getUser(GetUserResponseCallback callback, Integer userIndex) {
      getUser(chipClusterPtr, callback, userIndex, null);
    }

    public void getUser(GetUserResponseCallback callback, Integer userIndex, int timedInvokeTimeoutMs) {
      getUser(chipClusterPtr, callback, userIndex, timedInvokeTimeoutMs);
    }


    public void clearUser(DefaultClusterCallback callback, Integer userIndex, int timedInvokeTimeoutMs) {
      clearUser(chipClusterPtr, callback, userIndex, timedInvokeTimeoutMs);
    }


    public void setCredential(SetCredentialResponseCallback callback, Integer operationType, ChipStructs.DoorLockClusterCredentialStruct credential, byte[] credentialData, @Nullable Integer userIndex, @Nullable Integer userStatus, @Nullable Integer userType, int timedInvokeTimeoutMs) {
      setCredential(chipClusterPtr, callback, operationType, credential, credentialData, userIndex, userStatus, userType, timedInvokeTimeoutMs);
    }

    public void getCredentialStatus(GetCredentialStatusResponseCallback callback, ChipStructs.DoorLockClusterCredentialStruct credential) {
      getCredentialStatus(chipClusterPtr, callback, credential, null);
    }

    public void getCredentialStatus(GetCredentialStatusResponseCallback callback, ChipStructs.DoorLockClusterCredentialStruct credential, int timedInvokeTimeoutMs) {
      getCredentialStatus(chipClusterPtr, callback, credential, timedInvokeTimeoutMs);
    }


    public void clearCredential(DefaultClusterCallback callback, @Nullable ChipStructs.DoorLockClusterCredentialStruct credential, int timedInvokeTimeoutMs) {
      clearCredential(chipClusterPtr, callback, credential, timedInvokeTimeoutMs);
    }


    public void unboltDoor(DefaultClusterCallback callback, Optional<byte[]> PINCode, int timedInvokeTimeoutMs) {
      unboltDoor(chipClusterPtr, callback, PINCode, timedInvokeTimeoutMs);
    }

    private native void lockDoor(long chipClusterPtr, DefaultClusterCallback callback, Optional<byte[]> PINCode, @Nullable Integer timedInvokeTimeoutMs);

    private native void unlockDoor(long chipClusterPtr, DefaultClusterCallback callback, Optional<byte[]> PINCode, @Nullable Integer timedInvokeTimeoutMs);

    private native void unlockWithTimeout(long chipClusterPtr, DefaultClusterCallback callback, Integer timeout, Optional<byte[]> PINCode, @Nullable Integer timedInvokeTimeoutMs);

    private native void setWeekDaySchedule(long chipClusterPtr, DefaultClusterCallback callback, Integer weekDayIndex, Integer userIndex, Integer daysMask, Integer startHour, Integer startMinute, Integer endHour, Integer endMinute, @Nullable Integer timedInvokeTimeoutMs);

    private native void getWeekDaySchedule(long chipClusterPtr, GetWeekDayScheduleResponseCallback callback, Integer weekDayIndex, Integer userIndex, @Nullable Integer timedInvokeTimeoutMs);

    private native void clearWeekDaySchedule(long chipClusterPtr, DefaultClusterCallback callback, Integer weekDayIndex, Integer userIndex, @Nullable Integer timedInvokeTimeoutMs);

    private native void setYearDaySchedule(long chipClusterPtr, DefaultClusterCallback callback, Integer yearDayIndex, Integer userIndex, Long localStartTime, Long localEndTime, @Nullable Integer timedInvokeTimeoutMs);

    private native void getYearDaySchedule(long chipClusterPtr, GetYearDayScheduleResponseCallback callback, Integer yearDayIndex, Integer userIndex, @Nullable Integer timedInvokeTimeoutMs);

    private native void clearYearDaySchedule(long chipClusterPtr, DefaultClusterCallback callback, Integer yearDayIndex, Integer userIndex, @Nullable Integer timedInvokeTimeoutMs);

    private native void setHolidaySchedule(long chipClusterPtr, DefaultClusterCallback callback, Integer holidayIndex, Long localStartTime, Long localEndTime, Integer operatingMode, @Nullable Integer timedInvokeTimeoutMs);

    private native void getHolidaySchedule(long chipClusterPtr, GetHolidayScheduleResponseCallback callback, Integer holidayIndex, @Nullable Integer timedInvokeTimeoutMs);

    private native void clearHolidaySchedule(long chipClusterPtr, DefaultClusterCallback callback, Integer holidayIndex, @Nullable Integer timedInvokeTimeoutMs);

    private native void setUser(long chipClusterPtr, DefaultClusterCallback callback, Integer operationType, Integer userIndex, @Nullable String userName, @Nullable Long userUniqueID, @Nullable Integer userStatus, @Nullable Integer userType, @Nullable Integer credentialRule, @Nullable Integer timedInvokeTimeoutMs);

    private native void getUser(long chipClusterPtr, GetUserResponseCallback callback, Integer userIndex, @Nullable Integer timedInvokeTimeoutMs);

    private native void clearUser(long chipClusterPtr, DefaultClusterCallback callback, Integer userIndex, @Nullable Integer timedInvokeTimeoutMs);

    private native void setCredential(long chipClusterPtr, SetCredentialResponseCallback callback, Integer operationType, ChipStructs.DoorLockClusterCredentialStruct credential, byte[] credentialData, @Nullable Integer userIndex, @Nullable Integer userStatus, @Nullable Integer userType, @Nullable Integer timedInvokeTimeoutMs);

    private native void getCredentialStatus(long chipClusterPtr, GetCredentialStatusResponseCallback callback, ChipStructs.DoorLockClusterCredentialStruct credential, @Nullable Integer timedInvokeTimeoutMs);

    private native void clearCredential(long chipClusterPtr, DefaultClusterCallback callback, @Nullable ChipStructs.DoorLockClusterCredentialStruct credential, @Nullable Integer timedInvokeTimeoutMs);

    private native void unboltDoor(long chipClusterPtr, DefaultClusterCallback callback, Optional<byte[]> PINCode, @Nullable Integer timedInvokeTimeoutMs);

    public interface GetWeekDayScheduleResponseCallback {
      void onSuccess(Integer weekDayIndex, Integer userIndex, Integer status, Optional<Integer> daysMask, Optional<Integer> startHour, Optional<Integer> startMinute, Optional<Integer> endHour, Optional<Integer> endMinute);
      void onError(Exception error);
    }

    public interface GetYearDayScheduleResponseCallback {
      void onSuccess(Integer yearDayIndex, Integer userIndex, Integer status, Optional<Long> localStartTime, Optional<Long> localEndTime);
      void onError(Exception error);
    }

    public interface GetHolidayScheduleResponseCallback {
      void onSuccess(Integer holidayIndex, Integer status, Optional<Long> localStartTime, Optional<Long> localEndTime, Optional<Integer> operatingMode);
      void onError(Exception error);
    }

    public interface GetUserResponseCallback {
      void onSuccess(Integer userIndex, @Nullable String userName, @Nullable Long userUniqueID, @Nullable Integer userStatus, @Nullable Integer userType, @Nullable Integer credentialRule, @Nullable ArrayList<ChipStructs.DoorLockClusterCredentialStruct> credentials, @Nullable Integer creatorFabricIndex, @Nullable Integer lastModifiedFabricIndex, @Nullable Integer nextUserIndex);
      void onError(Exception error);
    }

    public interface SetCredentialResponseCallback {
      void onSuccess(Integer status, @Nullable Integer userIndex, @Nullable Integer nextCredentialIndex);
      void onError(Exception error);
    }

    public interface GetCredentialStatusResponseCallback {
      void onSuccess(Boolean credentialExists, @Nullable Integer userIndex, @Nullable Integer creatorFabricIndex, @Nullable Integer lastModifiedFabricIndex, @Nullable Integer nextCredentialIndex);
      void onError(Exception error);
    }

    public interface LockStateAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface DoorStateAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readLockStateAttribute(
        LockStateAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeLockStateAttribute(
        LockStateAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeLockStateAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readLockTypeAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeLockTypeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeLockTypeAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readActuatorEnabledAttribute(
        BooleanAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeActuatorEnabledAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeActuatorEnabledAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readDoorStateAttribute(
        DoorStateAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeDoorStateAttribute(
        DoorStateAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeDoorStateAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readDoorOpenEventsAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeDoorOpenEventsAttribute(DefaultClusterCallback callback, Long value) {
        writeDoorOpenEventsAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeDoorOpenEventsAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
        writeDoorOpenEventsAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeDoorOpenEventsAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeDoorOpenEventsAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readDoorClosedEventsAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeDoorClosedEventsAttribute(DefaultClusterCallback callback, Long value) {
        writeDoorClosedEventsAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeDoorClosedEventsAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
        writeDoorClosedEventsAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeDoorClosedEventsAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeDoorClosedEventsAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readOpenPeriodAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeOpenPeriodAttribute(DefaultClusterCallback callback, Integer value) {
        writeOpenPeriodAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeOpenPeriodAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeOpenPeriodAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeOpenPeriodAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeOpenPeriodAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readNumberOfTotalUsersSupportedAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 17L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeNumberOfTotalUsersSupportedAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeNumberOfTotalUsersSupportedAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readNumberOfPINUsersSupportedAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 18L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeNumberOfPINUsersSupportedAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeNumberOfPINUsersSupportedAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readNumberOfRFIDUsersSupportedAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 19L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeNumberOfRFIDUsersSupportedAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeNumberOfRFIDUsersSupportedAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readNumberOfWeekDaySchedulesSupportedPerUserAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 20L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeNumberOfWeekDaySchedulesSupportedPerUserAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeNumberOfWeekDaySchedulesSupportedPerUserAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readNumberOfYearDaySchedulesSupportedPerUserAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 21L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeNumberOfYearDaySchedulesSupportedPerUserAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeNumberOfYearDaySchedulesSupportedPerUserAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readNumberOfHolidaySchedulesSupportedAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 22L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeNumberOfHolidaySchedulesSupportedAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeNumberOfHolidaySchedulesSupportedAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMaxPINCodeLengthAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 23L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMaxPINCodeLengthAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMaxPINCodeLengthAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMinPINCodeLengthAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 24L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMinPINCodeLengthAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMinPINCodeLengthAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMaxRFIDCodeLengthAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 25L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMaxRFIDCodeLengthAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMaxRFIDCodeLengthAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMinRFIDCodeLengthAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 26L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMinRFIDCodeLengthAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMinRFIDCodeLengthAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readCredentialRulesSupportAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 27L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeCredentialRulesSupportAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeCredentialRulesSupportAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readNumberOfCredentialsSupportedPerUserAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 28L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeNumberOfCredentialsSupportedPerUserAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeNumberOfCredentialsSupportedPerUserAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readLanguageAttribute(
        CharStringAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 33L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeLanguageAttribute(DefaultClusterCallback callback, String value) {
        writeLanguageAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeLanguageAttribute(DefaultClusterCallback callback, String value, int timedWriteTimeoutMs) {
        writeLanguageAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeLanguageAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeLanguageAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readLEDSettingsAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 34L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeLEDSettingsAttribute(DefaultClusterCallback callback, Integer value) {
        writeLEDSettingsAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeLEDSettingsAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeLEDSettingsAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeLEDSettingsAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeLEDSettingsAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAutoRelockTimeAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 35L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeAutoRelockTimeAttribute(DefaultClusterCallback callback, Long value) {
        writeAutoRelockTimeAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeAutoRelockTimeAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
        writeAutoRelockTimeAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeAutoRelockTimeAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAutoRelockTimeAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readSoundVolumeAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 36L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeSoundVolumeAttribute(DefaultClusterCallback callback, Integer value) {
        writeSoundVolumeAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeSoundVolumeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeSoundVolumeAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeSoundVolumeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeSoundVolumeAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readOperatingModeAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 37L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeOperatingModeAttribute(DefaultClusterCallback callback, Integer value) {
        writeOperatingModeAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeOperatingModeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeOperatingModeAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeOperatingModeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeOperatingModeAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readSupportedOperatingModesAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 38L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeSupportedOperatingModesAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeSupportedOperatingModesAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readDefaultConfigurationRegisterAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 39L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeDefaultConfigurationRegisterAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeDefaultConfigurationRegisterAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEnableLocalProgrammingAttribute(
        BooleanAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 40L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeEnableLocalProgrammingAttribute(DefaultClusterCallback callback, Boolean value) {
        writeEnableLocalProgrammingAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeEnableLocalProgrammingAttribute(DefaultClusterCallback callback, Boolean value, int timedWriteTimeoutMs) {
        writeEnableLocalProgrammingAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeEnableLocalProgrammingAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEnableLocalProgrammingAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEnableOneTouchLockingAttribute(
        BooleanAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 41L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeEnableOneTouchLockingAttribute(DefaultClusterCallback callback, Boolean value) {
        writeEnableOneTouchLockingAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeEnableOneTouchLockingAttribute(DefaultClusterCallback callback, Boolean value, int timedWriteTimeoutMs) {
        writeEnableOneTouchLockingAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeEnableOneTouchLockingAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEnableOneTouchLockingAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEnableInsideStatusLEDAttribute(
        BooleanAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 42L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeEnableInsideStatusLEDAttribute(DefaultClusterCallback callback, Boolean value) {
        writeEnableInsideStatusLEDAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeEnableInsideStatusLEDAttribute(DefaultClusterCallback callback, Boolean value, int timedWriteTimeoutMs) {
        writeEnableInsideStatusLEDAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeEnableInsideStatusLEDAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEnableInsideStatusLEDAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEnablePrivacyModeButtonAttribute(
        BooleanAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 43L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeEnablePrivacyModeButtonAttribute(DefaultClusterCallback callback, Boolean value) {
        writeEnablePrivacyModeButtonAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeEnablePrivacyModeButtonAttribute(DefaultClusterCallback callback, Boolean value, int timedWriteTimeoutMs) {
        writeEnablePrivacyModeButtonAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeEnablePrivacyModeButtonAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEnablePrivacyModeButtonAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readLocalProgrammingFeaturesAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 44L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeLocalProgrammingFeaturesAttribute(DefaultClusterCallback callback, Integer value) {
        writeLocalProgrammingFeaturesAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeLocalProgrammingFeaturesAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeLocalProgrammingFeaturesAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeLocalProgrammingFeaturesAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeLocalProgrammingFeaturesAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readWrongCodeEntryLimitAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 48L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeWrongCodeEntryLimitAttribute(DefaultClusterCallback callback, Integer value) {
        writeWrongCodeEntryLimitAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeWrongCodeEntryLimitAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeWrongCodeEntryLimitAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeWrongCodeEntryLimitAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeWrongCodeEntryLimitAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readUserCodeTemporaryDisableTimeAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 49L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeUserCodeTemporaryDisableTimeAttribute(DefaultClusterCallback callback, Integer value) {
        writeUserCodeTemporaryDisableTimeAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeUserCodeTemporaryDisableTimeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeUserCodeTemporaryDisableTimeAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeUserCodeTemporaryDisableTimeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeUserCodeTemporaryDisableTimeAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readSendPINOverTheAirAttribute(
        BooleanAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 50L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeSendPINOverTheAirAttribute(DefaultClusterCallback callback, Boolean value) {
        writeSendPINOverTheAirAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeSendPINOverTheAirAttribute(DefaultClusterCallback callback, Boolean value, int timedWriteTimeoutMs) {
        writeSendPINOverTheAirAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeSendPINOverTheAirAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeSendPINOverTheAirAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readRequirePINforRemoteOperationAttribute(
        BooleanAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 51L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeRequirePINforRemoteOperationAttribute(DefaultClusterCallback callback, Boolean value) {
        writeRequirePINforRemoteOperationAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeRequirePINforRemoteOperationAttribute(DefaultClusterCallback callback, Boolean value, int timedWriteTimeoutMs) {
        writeRequirePINforRemoteOperationAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeRequirePINforRemoteOperationAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeRequirePINforRemoteOperationAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readExpiringUserTimeoutAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 53L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeExpiringUserTimeoutAttribute(DefaultClusterCallback callback, Integer value) {
        writeExpiringUserTimeoutAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeExpiringUserTimeoutAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeExpiringUserTimeoutAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeExpiringUserTimeoutAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeExpiringUserTimeoutAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeLockStateAttribute(long chipClusterPtr, LockStateAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeLockTypeAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeActuatorEnabledAttribute(long chipClusterPtr, BooleanAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeDoorStateAttribute(long chipClusterPtr, DoorStateAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeDoorOpenEventsAttribute(long chipClusterPtr, DefaultClusterCallback callback, Long value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeDoorOpenEventsAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeDoorClosedEventsAttribute(long chipClusterPtr, DefaultClusterCallback callback, Long value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeDoorClosedEventsAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeOpenPeriodAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeOpenPeriodAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeNumberOfTotalUsersSupportedAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeNumberOfPINUsersSupportedAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeNumberOfRFIDUsersSupportedAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeNumberOfWeekDaySchedulesSupportedPerUserAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeNumberOfYearDaySchedulesSupportedPerUserAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeNumberOfHolidaySchedulesSupportedAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMaxPINCodeLengthAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMinPINCodeLengthAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMaxRFIDCodeLengthAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMinRFIDCodeLengthAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeCredentialRulesSupportAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeNumberOfCredentialsSupportedPerUserAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeLanguageAttribute(long chipClusterPtr, DefaultClusterCallback callback, String value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeLanguageAttribute(long chipClusterPtr, CharStringAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeLEDSettingsAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeLEDSettingsAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeAutoRelockTimeAttribute(long chipClusterPtr, DefaultClusterCallback callback, Long value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeAutoRelockTimeAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeSoundVolumeAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeSoundVolumeAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeOperatingModeAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeOperatingModeAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeSupportedOperatingModesAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeDefaultConfigurationRegisterAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeEnableLocalProgrammingAttribute(long chipClusterPtr, DefaultClusterCallback callback, Boolean value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeEnableLocalProgrammingAttribute(long chipClusterPtr, BooleanAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeEnableOneTouchLockingAttribute(long chipClusterPtr, DefaultClusterCallback callback, Boolean value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeEnableOneTouchLockingAttribute(long chipClusterPtr, BooleanAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeEnableInsideStatusLEDAttribute(long chipClusterPtr, DefaultClusterCallback callback, Boolean value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeEnableInsideStatusLEDAttribute(long chipClusterPtr, BooleanAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeEnablePrivacyModeButtonAttribute(long chipClusterPtr, DefaultClusterCallback callback, Boolean value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeEnablePrivacyModeButtonAttribute(long chipClusterPtr, BooleanAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeLocalProgrammingFeaturesAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeLocalProgrammingFeaturesAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeWrongCodeEntryLimitAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeWrongCodeEntryLimitAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeUserCodeTemporaryDisableTimeAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeUserCodeTemporaryDisableTimeAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeSendPINOverTheAirAttribute(long chipClusterPtr, DefaultClusterCallback callback, Boolean value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeSendPINOverTheAirAttribute(long chipClusterPtr, BooleanAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeRequirePINforRemoteOperationAttribute(long chipClusterPtr, DefaultClusterCallback callback, Boolean value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeRequirePINforRemoteOperationAttribute(long chipClusterPtr, BooleanAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeExpiringUserTimeoutAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeExpiringUserTimeoutAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class WindowCoveringCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 258L;

    public WindowCoveringCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void upOrOpen(DefaultClusterCallback callback) {
      upOrOpen(chipClusterPtr, callback, null);
    }

    public void upOrOpen(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      upOrOpen(chipClusterPtr, callback, timedInvokeTimeoutMs);
    }

    public void downOrClose(DefaultClusterCallback callback) {
      downOrClose(chipClusterPtr, callback, null);
    }

    public void downOrClose(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      downOrClose(chipClusterPtr, callback, timedInvokeTimeoutMs);
    }

    public void stopMotion(DefaultClusterCallback callback) {
      stopMotion(chipClusterPtr, callback, null);
    }

    public void stopMotion(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      stopMotion(chipClusterPtr, callback, timedInvokeTimeoutMs);
    }

    public void goToLiftValue(DefaultClusterCallback callback, Integer liftValue) {
      goToLiftValue(chipClusterPtr, callback, liftValue, null);
    }

    public void goToLiftValue(DefaultClusterCallback callback, Integer liftValue, int timedInvokeTimeoutMs) {
      goToLiftValue(chipClusterPtr, callback, liftValue, timedInvokeTimeoutMs);
    }

    public void goToLiftPercentage(DefaultClusterCallback callback, Integer liftPercent100thsValue) {
      goToLiftPercentage(chipClusterPtr, callback, liftPercent100thsValue, null);
    }

    public void goToLiftPercentage(DefaultClusterCallback callback, Integer liftPercent100thsValue, int timedInvokeTimeoutMs) {
      goToLiftPercentage(chipClusterPtr, callback, liftPercent100thsValue, timedInvokeTimeoutMs);
    }

    public void goToTiltValue(DefaultClusterCallback callback, Integer tiltValue) {
      goToTiltValue(chipClusterPtr, callback, tiltValue, null);
    }

    public void goToTiltValue(DefaultClusterCallback callback, Integer tiltValue, int timedInvokeTimeoutMs) {
      goToTiltValue(chipClusterPtr, callback, tiltValue, timedInvokeTimeoutMs);
    }

    public void goToTiltPercentage(DefaultClusterCallback callback, Integer tiltPercent100thsValue) {
      goToTiltPercentage(chipClusterPtr, callback, tiltPercent100thsValue, null);
    }

    public void goToTiltPercentage(DefaultClusterCallback callback, Integer tiltPercent100thsValue, int timedInvokeTimeoutMs) {
      goToTiltPercentage(chipClusterPtr, callback, tiltPercent100thsValue, timedInvokeTimeoutMs);
    }

    private native void upOrOpen(long chipClusterPtr, DefaultClusterCallback callback, @Nullable Integer timedInvokeTimeoutMs);

    private native void downOrClose(long chipClusterPtr, DefaultClusterCallback callback, @Nullable Integer timedInvokeTimeoutMs);

    private native void stopMotion(long chipClusterPtr, DefaultClusterCallback callback, @Nullable Integer timedInvokeTimeoutMs);

    private native void goToLiftValue(long chipClusterPtr, DefaultClusterCallback callback, Integer liftValue, @Nullable Integer timedInvokeTimeoutMs);

    private native void goToLiftPercentage(long chipClusterPtr, DefaultClusterCallback callback, Integer liftPercent100thsValue, @Nullable Integer timedInvokeTimeoutMs);

    private native void goToTiltValue(long chipClusterPtr, DefaultClusterCallback callback, Integer tiltValue, @Nullable Integer timedInvokeTimeoutMs);

    private native void goToTiltPercentage(long chipClusterPtr, DefaultClusterCallback callback, Integer tiltPercent100thsValue, @Nullable Integer timedInvokeTimeoutMs);

    public interface CurrentPositionLiftAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface CurrentPositionTiltAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface CurrentPositionLiftPercentageAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface CurrentPositionTiltPercentageAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface TargetPositionLiftPercent100thsAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface TargetPositionTiltPercent100thsAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface CurrentPositionLiftPercent100thsAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface CurrentPositionTiltPercent100thsAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readTypeAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeTypeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeTypeAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readPhysicalClosedLimitLiftAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribePhysicalClosedLimitLiftAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePhysicalClosedLimitLiftAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readPhysicalClosedLimitTiltAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribePhysicalClosedLimitTiltAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePhysicalClosedLimitTiltAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readCurrentPositionLiftAttribute(
        CurrentPositionLiftAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeCurrentPositionLiftAttribute(
        CurrentPositionLiftAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeCurrentPositionLiftAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readCurrentPositionTiltAttribute(
        CurrentPositionTiltAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeCurrentPositionTiltAttribute(
        CurrentPositionTiltAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeCurrentPositionTiltAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readNumberOfActuationsLiftAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeNumberOfActuationsLiftAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeNumberOfActuationsLiftAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readNumberOfActuationsTiltAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeNumberOfActuationsTiltAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeNumberOfActuationsTiltAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readConfigStatusAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeConfigStatusAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeConfigStatusAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readCurrentPositionLiftPercentageAttribute(
        CurrentPositionLiftPercentageAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeCurrentPositionLiftPercentageAttribute(
        CurrentPositionLiftPercentageAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeCurrentPositionLiftPercentageAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readCurrentPositionTiltPercentageAttribute(
        CurrentPositionTiltPercentageAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 9L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeCurrentPositionTiltPercentageAttribute(
        CurrentPositionTiltPercentageAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeCurrentPositionTiltPercentageAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readOperationalStatusAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 10L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeOperationalStatusAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeOperationalStatusAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readTargetPositionLiftPercent100thsAttribute(
        TargetPositionLiftPercent100thsAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 11L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeTargetPositionLiftPercent100thsAttribute(
        TargetPositionLiftPercent100thsAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeTargetPositionLiftPercent100thsAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readTargetPositionTiltPercent100thsAttribute(
        TargetPositionTiltPercent100thsAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 12L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeTargetPositionTiltPercent100thsAttribute(
        TargetPositionTiltPercent100thsAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeTargetPositionTiltPercent100thsAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEndProductTypeAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 13L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEndProductTypeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEndProductTypeAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readCurrentPositionLiftPercent100thsAttribute(
        CurrentPositionLiftPercent100thsAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 14L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeCurrentPositionLiftPercent100thsAttribute(
        CurrentPositionLiftPercent100thsAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeCurrentPositionLiftPercent100thsAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readCurrentPositionTiltPercent100thsAttribute(
        CurrentPositionTiltPercent100thsAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 15L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeCurrentPositionTiltPercent100thsAttribute(
        CurrentPositionTiltPercent100thsAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeCurrentPositionTiltPercent100thsAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readInstalledOpenLimitLiftAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 16L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeInstalledOpenLimitLiftAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeInstalledOpenLimitLiftAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readInstalledClosedLimitLiftAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 17L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeInstalledClosedLimitLiftAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeInstalledClosedLimitLiftAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readInstalledOpenLimitTiltAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 18L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeInstalledOpenLimitTiltAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeInstalledOpenLimitTiltAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readInstalledClosedLimitTiltAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 19L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeInstalledClosedLimitTiltAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeInstalledClosedLimitTiltAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readModeAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 23L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeModeAttribute(DefaultClusterCallback callback, Integer value) {
        writeModeAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeModeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeModeAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeModeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeModeAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readSafetyStatusAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 26L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeSafetyStatusAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeSafetyStatusAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeTypeAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribePhysicalClosedLimitLiftAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribePhysicalClosedLimitTiltAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeCurrentPositionLiftAttribute(long chipClusterPtr, CurrentPositionLiftAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeCurrentPositionTiltAttribute(long chipClusterPtr, CurrentPositionTiltAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeNumberOfActuationsLiftAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeNumberOfActuationsTiltAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeConfigStatusAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeCurrentPositionLiftPercentageAttribute(long chipClusterPtr, CurrentPositionLiftPercentageAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeCurrentPositionTiltPercentageAttribute(long chipClusterPtr, CurrentPositionTiltPercentageAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeOperationalStatusAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeTargetPositionLiftPercent100thsAttribute(long chipClusterPtr, TargetPositionLiftPercent100thsAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeTargetPositionTiltPercent100thsAttribute(long chipClusterPtr, TargetPositionTiltPercent100thsAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEndProductTypeAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeCurrentPositionLiftPercent100thsAttribute(long chipClusterPtr, CurrentPositionLiftPercent100thsAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeCurrentPositionTiltPercent100thsAttribute(long chipClusterPtr, CurrentPositionTiltPercent100thsAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeInstalledOpenLimitLiftAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeInstalledClosedLimitLiftAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeInstalledOpenLimitTiltAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeInstalledClosedLimitTiltAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeModeAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeModeAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeSafetyStatusAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class BarrierControlCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 259L;

    public BarrierControlCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void barrierControlGoToPercent(DefaultClusterCallback callback, Integer percentOpen) {
      barrierControlGoToPercent(chipClusterPtr, callback, percentOpen, null);
    }

    public void barrierControlGoToPercent(DefaultClusterCallback callback, Integer percentOpen, int timedInvokeTimeoutMs) {
      barrierControlGoToPercent(chipClusterPtr, callback, percentOpen, timedInvokeTimeoutMs);
    }

    public void barrierControlStop(DefaultClusterCallback callback) {
      barrierControlStop(chipClusterPtr, callback, null);
    }

    public void barrierControlStop(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      barrierControlStop(chipClusterPtr, callback, timedInvokeTimeoutMs);
    }

    private native void barrierControlGoToPercent(long chipClusterPtr, DefaultClusterCallback callback, Integer percentOpen, @Nullable Integer timedInvokeTimeoutMs);

    private native void barrierControlStop(long chipClusterPtr, DefaultClusterCallback callback, @Nullable Integer timedInvokeTimeoutMs);

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readBarrierMovingStateAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeBarrierMovingStateAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeBarrierMovingStateAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readBarrierSafetyStatusAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeBarrierSafetyStatusAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeBarrierSafetyStatusAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readBarrierCapabilitiesAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeBarrierCapabilitiesAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeBarrierCapabilitiesAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readBarrierOpenEventsAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeBarrierOpenEventsAttribute(DefaultClusterCallback callback, Integer value) {
        writeBarrierOpenEventsAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeBarrierOpenEventsAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeBarrierOpenEventsAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeBarrierOpenEventsAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeBarrierOpenEventsAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readBarrierCloseEventsAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeBarrierCloseEventsAttribute(DefaultClusterCallback callback, Integer value) {
        writeBarrierCloseEventsAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeBarrierCloseEventsAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeBarrierCloseEventsAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeBarrierCloseEventsAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeBarrierCloseEventsAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readBarrierCommandOpenEventsAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeBarrierCommandOpenEventsAttribute(DefaultClusterCallback callback, Integer value) {
        writeBarrierCommandOpenEventsAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeBarrierCommandOpenEventsAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeBarrierCommandOpenEventsAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeBarrierCommandOpenEventsAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeBarrierCommandOpenEventsAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readBarrierCommandCloseEventsAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeBarrierCommandCloseEventsAttribute(DefaultClusterCallback callback, Integer value) {
        writeBarrierCommandCloseEventsAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeBarrierCommandCloseEventsAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeBarrierCommandCloseEventsAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeBarrierCommandCloseEventsAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeBarrierCommandCloseEventsAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readBarrierOpenPeriodAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeBarrierOpenPeriodAttribute(DefaultClusterCallback callback, Integer value) {
        writeBarrierOpenPeriodAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeBarrierOpenPeriodAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeBarrierOpenPeriodAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeBarrierOpenPeriodAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeBarrierOpenPeriodAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readBarrierClosePeriodAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 9L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeBarrierClosePeriodAttribute(DefaultClusterCallback callback, Integer value) {
        writeBarrierClosePeriodAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeBarrierClosePeriodAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeBarrierClosePeriodAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeBarrierClosePeriodAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeBarrierClosePeriodAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readBarrierPositionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 10L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeBarrierPositionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeBarrierPositionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeBarrierMovingStateAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeBarrierSafetyStatusAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeBarrierCapabilitiesAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeBarrierOpenEventsAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeBarrierOpenEventsAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeBarrierCloseEventsAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeBarrierCloseEventsAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeBarrierCommandOpenEventsAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeBarrierCommandOpenEventsAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeBarrierCommandCloseEventsAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeBarrierCommandCloseEventsAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeBarrierOpenPeriodAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeBarrierOpenPeriodAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeBarrierClosePeriodAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeBarrierClosePeriodAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeBarrierPositionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class PumpConfigurationAndControlCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 512L;

    public PumpConfigurationAndControlCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface MaxPressureAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface MaxSpeedAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface MaxFlowAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface MinConstPressureAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface MaxConstPressureAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface MinCompPressureAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface MaxCompPressureAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface MinConstSpeedAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface MaxConstSpeedAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface MinConstFlowAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface MaxConstFlowAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface MinConstTempAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface MaxConstTempAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface CapacityAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface SpeedAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface LifetimeRunningHoursAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface PowerAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface LifetimeEnergyConsumedAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readMaxPressureAttribute(
        MaxPressureAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMaxPressureAttribute(
        MaxPressureAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMaxPressureAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMaxSpeedAttribute(
        MaxSpeedAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMaxSpeedAttribute(
        MaxSpeedAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMaxSpeedAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMaxFlowAttribute(
        MaxFlowAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMaxFlowAttribute(
        MaxFlowAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMaxFlowAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMinConstPressureAttribute(
        MinConstPressureAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMinConstPressureAttribute(
        MinConstPressureAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMinConstPressureAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMaxConstPressureAttribute(
        MaxConstPressureAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMaxConstPressureAttribute(
        MaxConstPressureAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMaxConstPressureAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMinCompPressureAttribute(
        MinCompPressureAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMinCompPressureAttribute(
        MinCompPressureAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMinCompPressureAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMaxCompPressureAttribute(
        MaxCompPressureAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMaxCompPressureAttribute(
        MaxCompPressureAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMaxCompPressureAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMinConstSpeedAttribute(
        MinConstSpeedAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMinConstSpeedAttribute(
        MinConstSpeedAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMinConstSpeedAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMaxConstSpeedAttribute(
        MaxConstSpeedAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMaxConstSpeedAttribute(
        MaxConstSpeedAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMaxConstSpeedAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMinConstFlowAttribute(
        MinConstFlowAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 9L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMinConstFlowAttribute(
        MinConstFlowAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMinConstFlowAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMaxConstFlowAttribute(
        MaxConstFlowAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 10L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMaxConstFlowAttribute(
        MaxConstFlowAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMaxConstFlowAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMinConstTempAttribute(
        MinConstTempAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 11L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMinConstTempAttribute(
        MinConstTempAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMinConstTempAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMaxConstTempAttribute(
        MaxConstTempAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 12L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMaxConstTempAttribute(
        MaxConstTempAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMaxConstTempAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readPumpStatusAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 16L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribePumpStatusAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePumpStatusAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEffectiveOperationModeAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 17L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEffectiveOperationModeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEffectiveOperationModeAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEffectiveControlModeAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 18L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEffectiveControlModeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEffectiveControlModeAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readCapacityAttribute(
        CapacityAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 19L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeCapacityAttribute(
        CapacityAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeCapacityAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readSpeedAttribute(
        SpeedAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 20L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeSpeedAttribute(
        SpeedAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeSpeedAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readLifetimeRunningHoursAttribute(
        LifetimeRunningHoursAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 21L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeLifetimeRunningHoursAttribute(DefaultClusterCallback callback, Long value) {
        writeLifetimeRunningHoursAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeLifetimeRunningHoursAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
        writeLifetimeRunningHoursAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeLifetimeRunningHoursAttribute(
        LifetimeRunningHoursAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeLifetimeRunningHoursAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readPowerAttribute(
        PowerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 22L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribePowerAttribute(
        PowerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePowerAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readLifetimeEnergyConsumedAttribute(
        LifetimeEnergyConsumedAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 23L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeLifetimeEnergyConsumedAttribute(DefaultClusterCallback callback, Long value) {
        writeLifetimeEnergyConsumedAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeLifetimeEnergyConsumedAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
        writeLifetimeEnergyConsumedAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeLifetimeEnergyConsumedAttribute(
        LifetimeEnergyConsumedAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeLifetimeEnergyConsumedAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readOperationModeAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 32L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeOperationModeAttribute(DefaultClusterCallback callback, Integer value) {
        writeOperationModeAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeOperationModeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeOperationModeAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeOperationModeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeOperationModeAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readControlModeAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 33L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeControlModeAttribute(DefaultClusterCallback callback, Integer value) {
        writeControlModeAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeControlModeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeControlModeAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeControlModeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeControlModeAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeMaxPressureAttribute(long chipClusterPtr, MaxPressureAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMaxSpeedAttribute(long chipClusterPtr, MaxSpeedAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMaxFlowAttribute(long chipClusterPtr, MaxFlowAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMinConstPressureAttribute(long chipClusterPtr, MinConstPressureAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMaxConstPressureAttribute(long chipClusterPtr, MaxConstPressureAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMinCompPressureAttribute(long chipClusterPtr, MinCompPressureAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMaxCompPressureAttribute(long chipClusterPtr, MaxCompPressureAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMinConstSpeedAttribute(long chipClusterPtr, MinConstSpeedAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMaxConstSpeedAttribute(long chipClusterPtr, MaxConstSpeedAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMinConstFlowAttribute(long chipClusterPtr, MinConstFlowAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMaxConstFlowAttribute(long chipClusterPtr, MaxConstFlowAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMinConstTempAttribute(long chipClusterPtr, MinConstTempAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMaxConstTempAttribute(long chipClusterPtr, MaxConstTempAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribePumpStatusAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEffectiveOperationModeAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEffectiveControlModeAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeCapacityAttribute(long chipClusterPtr, CapacityAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeSpeedAttribute(long chipClusterPtr, SpeedAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeLifetimeRunningHoursAttribute(long chipClusterPtr, DefaultClusterCallback callback, Long value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeLifetimeRunningHoursAttribute(long chipClusterPtr, LifetimeRunningHoursAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribePowerAttribute(long chipClusterPtr, PowerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeLifetimeEnergyConsumedAttribute(long chipClusterPtr, DefaultClusterCallback callback, Long value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeLifetimeEnergyConsumedAttribute(long chipClusterPtr, LifetimeEnergyConsumedAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeOperationModeAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeOperationModeAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeControlModeAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeControlModeAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class ThermostatCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 513L;

    public ThermostatCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void setpointRaiseLower(DefaultClusterCallback callback, Integer mode, Integer amount) {
      setpointRaiseLower(chipClusterPtr, callback, mode, amount, null);
    }

    public void setpointRaiseLower(DefaultClusterCallback callback, Integer mode, Integer amount, int timedInvokeTimeoutMs) {
      setpointRaiseLower(chipClusterPtr, callback, mode, amount, timedInvokeTimeoutMs);
    }

    public void setWeeklySchedule(DefaultClusterCallback callback, Integer numberOfTransitionsForSequence, Integer dayOfWeekForSequence, Integer modeForSequence, ArrayList<ChipStructs.ThermostatClusterThermostatScheduleTransition> transitions) {
      setWeeklySchedule(chipClusterPtr, callback, numberOfTransitionsForSequence, dayOfWeekForSequence, modeForSequence, transitions, null);
    }

    public void setWeeklySchedule(DefaultClusterCallback callback, Integer numberOfTransitionsForSequence, Integer dayOfWeekForSequence, Integer modeForSequence, ArrayList<ChipStructs.ThermostatClusterThermostatScheduleTransition> transitions, int timedInvokeTimeoutMs) {
      setWeeklySchedule(chipClusterPtr, callback, numberOfTransitionsForSequence, dayOfWeekForSequence, modeForSequence, transitions, timedInvokeTimeoutMs);
    }

    public void getWeeklySchedule(GetWeeklyScheduleResponseCallback callback, Integer daysToReturn, Integer modeToReturn) {
      getWeeklySchedule(chipClusterPtr, callback, daysToReturn, modeToReturn, null);
    }

    public void getWeeklySchedule(GetWeeklyScheduleResponseCallback callback, Integer daysToReturn, Integer modeToReturn, int timedInvokeTimeoutMs) {
      getWeeklySchedule(chipClusterPtr, callback, daysToReturn, modeToReturn, timedInvokeTimeoutMs);
    }

    public void clearWeeklySchedule(DefaultClusterCallback callback) {
      clearWeeklySchedule(chipClusterPtr, callback, null);
    }

    public void clearWeeklySchedule(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      clearWeeklySchedule(chipClusterPtr, callback, timedInvokeTimeoutMs);
    }

    private native void setpointRaiseLower(long chipClusterPtr, DefaultClusterCallback callback, Integer mode, Integer amount, @Nullable Integer timedInvokeTimeoutMs);

    private native void setWeeklySchedule(long chipClusterPtr, DefaultClusterCallback callback, Integer numberOfTransitionsForSequence, Integer dayOfWeekForSequence, Integer modeForSequence, ArrayList<ChipStructs.ThermostatClusterThermostatScheduleTransition> transitions, @Nullable Integer timedInvokeTimeoutMs);

    private native void getWeeklySchedule(long chipClusterPtr, GetWeeklyScheduleResponseCallback callback, Integer daysToReturn, Integer modeToReturn, @Nullable Integer timedInvokeTimeoutMs);

    private native void clearWeeklySchedule(long chipClusterPtr, DefaultClusterCallback callback, @Nullable Integer timedInvokeTimeoutMs);

    public interface GetWeeklyScheduleResponseCallback {
      void onSuccess(Integer numberOfTransitionsForSequence, Integer dayOfWeekForSequence, Integer modeForSequence, ArrayList<ChipStructs.ThermostatClusterThermostatScheduleTransition> transitions);
      void onError(Exception error);
    }

    public interface LocalTemperatureAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface OutdoorTemperatureAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface TemperatureSetpointHoldDurationAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface SetpointChangeAmountAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface OccupiedSetbackAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface OccupiedSetbackMinAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface OccupiedSetbackMaxAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface UnoccupiedSetbackAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface UnoccupiedSetbackMinAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface UnoccupiedSetbackMaxAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface ACCoilTemperatureAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readLocalTemperatureAttribute(
        LocalTemperatureAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeLocalTemperatureAttribute(
        LocalTemperatureAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeLocalTemperatureAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readOutdoorTemperatureAttribute(
        OutdoorTemperatureAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeOutdoorTemperatureAttribute(
        OutdoorTemperatureAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeOutdoorTemperatureAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readOccupancyAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeOccupancyAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeOccupancyAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAbsMinHeatSetpointLimitAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAbsMinHeatSetpointLimitAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAbsMinHeatSetpointLimitAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAbsMaxHeatSetpointLimitAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAbsMaxHeatSetpointLimitAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAbsMaxHeatSetpointLimitAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAbsMinCoolSetpointLimitAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAbsMinCoolSetpointLimitAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAbsMinCoolSetpointLimitAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAbsMaxCoolSetpointLimitAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAbsMaxCoolSetpointLimitAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAbsMaxCoolSetpointLimitAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readPICoolingDemandAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribePICoolingDemandAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePICoolingDemandAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readPIHeatingDemandAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribePIHeatingDemandAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePIHeatingDemandAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readHVACSystemTypeConfigurationAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 9L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeHVACSystemTypeConfigurationAttribute(DefaultClusterCallback callback, Integer value) {
        writeHVACSystemTypeConfigurationAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeHVACSystemTypeConfigurationAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeHVACSystemTypeConfigurationAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeHVACSystemTypeConfigurationAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeHVACSystemTypeConfigurationAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readLocalTemperatureCalibrationAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 16L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeLocalTemperatureCalibrationAttribute(DefaultClusterCallback callback, Integer value) {
        writeLocalTemperatureCalibrationAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeLocalTemperatureCalibrationAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeLocalTemperatureCalibrationAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeLocalTemperatureCalibrationAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeLocalTemperatureCalibrationAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readOccupiedCoolingSetpointAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 17L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeOccupiedCoolingSetpointAttribute(DefaultClusterCallback callback, Integer value) {
        writeOccupiedCoolingSetpointAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeOccupiedCoolingSetpointAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeOccupiedCoolingSetpointAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeOccupiedCoolingSetpointAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeOccupiedCoolingSetpointAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readOccupiedHeatingSetpointAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 18L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeOccupiedHeatingSetpointAttribute(DefaultClusterCallback callback, Integer value) {
        writeOccupiedHeatingSetpointAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeOccupiedHeatingSetpointAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeOccupiedHeatingSetpointAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeOccupiedHeatingSetpointAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeOccupiedHeatingSetpointAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readUnoccupiedCoolingSetpointAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 19L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeUnoccupiedCoolingSetpointAttribute(DefaultClusterCallback callback, Integer value) {
        writeUnoccupiedCoolingSetpointAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeUnoccupiedCoolingSetpointAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeUnoccupiedCoolingSetpointAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeUnoccupiedCoolingSetpointAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeUnoccupiedCoolingSetpointAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readUnoccupiedHeatingSetpointAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 20L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeUnoccupiedHeatingSetpointAttribute(DefaultClusterCallback callback, Integer value) {
        writeUnoccupiedHeatingSetpointAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeUnoccupiedHeatingSetpointAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeUnoccupiedHeatingSetpointAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeUnoccupiedHeatingSetpointAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeUnoccupiedHeatingSetpointAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMinHeatSetpointLimitAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 21L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeMinHeatSetpointLimitAttribute(DefaultClusterCallback callback, Integer value) {
        writeMinHeatSetpointLimitAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeMinHeatSetpointLimitAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeMinHeatSetpointLimitAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeMinHeatSetpointLimitAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMinHeatSetpointLimitAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMaxHeatSetpointLimitAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 22L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeMaxHeatSetpointLimitAttribute(DefaultClusterCallback callback, Integer value) {
        writeMaxHeatSetpointLimitAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeMaxHeatSetpointLimitAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeMaxHeatSetpointLimitAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeMaxHeatSetpointLimitAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMaxHeatSetpointLimitAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMinCoolSetpointLimitAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 23L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeMinCoolSetpointLimitAttribute(DefaultClusterCallback callback, Integer value) {
        writeMinCoolSetpointLimitAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeMinCoolSetpointLimitAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeMinCoolSetpointLimitAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeMinCoolSetpointLimitAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMinCoolSetpointLimitAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMaxCoolSetpointLimitAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 24L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeMaxCoolSetpointLimitAttribute(DefaultClusterCallback callback, Integer value) {
        writeMaxCoolSetpointLimitAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeMaxCoolSetpointLimitAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeMaxCoolSetpointLimitAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeMaxCoolSetpointLimitAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMaxCoolSetpointLimitAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMinSetpointDeadBandAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 25L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeMinSetpointDeadBandAttribute(DefaultClusterCallback callback, Integer value) {
        writeMinSetpointDeadBandAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeMinSetpointDeadBandAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeMinSetpointDeadBandAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeMinSetpointDeadBandAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMinSetpointDeadBandAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readRemoteSensingAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 26L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeRemoteSensingAttribute(DefaultClusterCallback callback, Integer value) {
        writeRemoteSensingAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeRemoteSensingAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeRemoteSensingAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeRemoteSensingAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeRemoteSensingAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readControlSequenceOfOperationAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 27L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeControlSequenceOfOperationAttribute(DefaultClusterCallback callback, Integer value) {
        writeControlSequenceOfOperationAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeControlSequenceOfOperationAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeControlSequenceOfOperationAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeControlSequenceOfOperationAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeControlSequenceOfOperationAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readSystemModeAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 28L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeSystemModeAttribute(DefaultClusterCallback callback, Integer value) {
        writeSystemModeAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeSystemModeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeSystemModeAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeSystemModeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeSystemModeAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readThermostatRunningModeAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 30L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeThermostatRunningModeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeThermostatRunningModeAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readStartOfWeekAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 32L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeStartOfWeekAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeStartOfWeekAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readNumberOfWeeklyTransitionsAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 33L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeNumberOfWeeklyTransitionsAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeNumberOfWeeklyTransitionsAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readNumberOfDailyTransitionsAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 34L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeNumberOfDailyTransitionsAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeNumberOfDailyTransitionsAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readTemperatureSetpointHoldAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 35L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeTemperatureSetpointHoldAttribute(DefaultClusterCallback callback, Integer value) {
        writeTemperatureSetpointHoldAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeTemperatureSetpointHoldAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeTemperatureSetpointHoldAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeTemperatureSetpointHoldAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeTemperatureSetpointHoldAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readTemperatureSetpointHoldDurationAttribute(
        TemperatureSetpointHoldDurationAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 36L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeTemperatureSetpointHoldDurationAttribute(DefaultClusterCallback callback, Integer value) {
        writeTemperatureSetpointHoldDurationAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeTemperatureSetpointHoldDurationAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeTemperatureSetpointHoldDurationAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeTemperatureSetpointHoldDurationAttribute(
        TemperatureSetpointHoldDurationAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeTemperatureSetpointHoldDurationAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readThermostatProgrammingOperationModeAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 37L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeThermostatProgrammingOperationModeAttribute(DefaultClusterCallback callback, Integer value) {
        writeThermostatProgrammingOperationModeAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeThermostatProgrammingOperationModeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeThermostatProgrammingOperationModeAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeThermostatProgrammingOperationModeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeThermostatProgrammingOperationModeAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readThermostatRunningStateAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 41L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeThermostatRunningStateAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeThermostatRunningStateAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readSetpointChangeSourceAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 48L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeSetpointChangeSourceAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeSetpointChangeSourceAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readSetpointChangeAmountAttribute(
        SetpointChangeAmountAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 49L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeSetpointChangeAmountAttribute(
        SetpointChangeAmountAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeSetpointChangeAmountAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readSetpointChangeSourceTimestampAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 50L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeSetpointChangeSourceTimestampAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeSetpointChangeSourceTimestampAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readOccupiedSetbackAttribute(
        OccupiedSetbackAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 52L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeOccupiedSetbackAttribute(DefaultClusterCallback callback, Integer value) {
        writeOccupiedSetbackAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeOccupiedSetbackAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeOccupiedSetbackAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeOccupiedSetbackAttribute(
        OccupiedSetbackAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeOccupiedSetbackAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readOccupiedSetbackMinAttribute(
        OccupiedSetbackMinAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 53L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeOccupiedSetbackMinAttribute(
        OccupiedSetbackMinAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeOccupiedSetbackMinAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readOccupiedSetbackMaxAttribute(
        OccupiedSetbackMaxAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 54L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeOccupiedSetbackMaxAttribute(
        OccupiedSetbackMaxAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeOccupiedSetbackMaxAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readUnoccupiedSetbackAttribute(
        UnoccupiedSetbackAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 55L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeUnoccupiedSetbackAttribute(DefaultClusterCallback callback, Integer value) {
        writeUnoccupiedSetbackAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeUnoccupiedSetbackAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeUnoccupiedSetbackAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeUnoccupiedSetbackAttribute(
        UnoccupiedSetbackAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeUnoccupiedSetbackAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readUnoccupiedSetbackMinAttribute(
        UnoccupiedSetbackMinAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 56L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeUnoccupiedSetbackMinAttribute(
        UnoccupiedSetbackMinAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeUnoccupiedSetbackMinAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readUnoccupiedSetbackMaxAttribute(
        UnoccupiedSetbackMaxAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 57L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeUnoccupiedSetbackMaxAttribute(
        UnoccupiedSetbackMaxAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeUnoccupiedSetbackMaxAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEmergencyHeatDeltaAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 58L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeEmergencyHeatDeltaAttribute(DefaultClusterCallback callback, Integer value) {
        writeEmergencyHeatDeltaAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeEmergencyHeatDeltaAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeEmergencyHeatDeltaAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeEmergencyHeatDeltaAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEmergencyHeatDeltaAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readACTypeAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 64L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeACTypeAttribute(DefaultClusterCallback callback, Integer value) {
        writeACTypeAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeACTypeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeACTypeAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeACTypeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeACTypeAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readACCapacityAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeACCapacityAttribute(DefaultClusterCallback callback, Integer value) {
        writeACCapacityAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeACCapacityAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeACCapacityAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeACCapacityAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeACCapacityAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readACRefrigerantTypeAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 66L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeACRefrigerantTypeAttribute(DefaultClusterCallback callback, Integer value) {
        writeACRefrigerantTypeAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeACRefrigerantTypeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeACRefrigerantTypeAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeACRefrigerantTypeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeACRefrigerantTypeAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readACCompressorTypeAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 67L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeACCompressorTypeAttribute(DefaultClusterCallback callback, Integer value) {
        writeACCompressorTypeAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeACCompressorTypeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeACCompressorTypeAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeACCompressorTypeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeACCompressorTypeAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readACErrorCodeAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 68L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeACErrorCodeAttribute(DefaultClusterCallback callback, Long value) {
        writeACErrorCodeAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeACErrorCodeAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
        writeACErrorCodeAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeACErrorCodeAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeACErrorCodeAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readACLouverPositionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 69L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeACLouverPositionAttribute(DefaultClusterCallback callback, Integer value) {
        writeACLouverPositionAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeACLouverPositionAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeACLouverPositionAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeACLouverPositionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeACLouverPositionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readACCoilTemperatureAttribute(
        ACCoilTemperatureAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 70L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeACCoilTemperatureAttribute(
        ACCoilTemperatureAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeACCoilTemperatureAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readACCapacityformatAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 71L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeACCapacityformatAttribute(DefaultClusterCallback callback, Integer value) {
        writeACCapacityformatAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeACCapacityformatAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeACCapacityformatAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeACCapacityformatAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeACCapacityformatAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeLocalTemperatureAttribute(long chipClusterPtr, LocalTemperatureAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeOutdoorTemperatureAttribute(long chipClusterPtr, OutdoorTemperatureAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeOccupancyAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAbsMinHeatSetpointLimitAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAbsMaxHeatSetpointLimitAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAbsMinCoolSetpointLimitAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAbsMaxCoolSetpointLimitAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribePICoolingDemandAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribePIHeatingDemandAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeHVACSystemTypeConfigurationAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeHVACSystemTypeConfigurationAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeLocalTemperatureCalibrationAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeLocalTemperatureCalibrationAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeOccupiedCoolingSetpointAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeOccupiedCoolingSetpointAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeOccupiedHeatingSetpointAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeOccupiedHeatingSetpointAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeUnoccupiedCoolingSetpointAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeUnoccupiedCoolingSetpointAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeUnoccupiedHeatingSetpointAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeUnoccupiedHeatingSetpointAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeMinHeatSetpointLimitAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeMinHeatSetpointLimitAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeMaxHeatSetpointLimitAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeMaxHeatSetpointLimitAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeMinCoolSetpointLimitAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeMinCoolSetpointLimitAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeMaxCoolSetpointLimitAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeMaxCoolSetpointLimitAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeMinSetpointDeadBandAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeMinSetpointDeadBandAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeRemoteSensingAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeRemoteSensingAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeControlSequenceOfOperationAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeControlSequenceOfOperationAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeSystemModeAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeSystemModeAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeThermostatRunningModeAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeStartOfWeekAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeNumberOfWeeklyTransitionsAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeNumberOfDailyTransitionsAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeTemperatureSetpointHoldAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeTemperatureSetpointHoldAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeTemperatureSetpointHoldDurationAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeTemperatureSetpointHoldDurationAttribute(long chipClusterPtr, TemperatureSetpointHoldDurationAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeThermostatProgrammingOperationModeAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeThermostatProgrammingOperationModeAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeThermostatRunningStateAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeSetpointChangeSourceAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeSetpointChangeAmountAttribute(long chipClusterPtr, SetpointChangeAmountAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeSetpointChangeSourceTimestampAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeOccupiedSetbackAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeOccupiedSetbackAttribute(long chipClusterPtr, OccupiedSetbackAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeOccupiedSetbackMinAttribute(long chipClusterPtr, OccupiedSetbackMinAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeOccupiedSetbackMaxAttribute(long chipClusterPtr, OccupiedSetbackMaxAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeUnoccupiedSetbackAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeUnoccupiedSetbackAttribute(long chipClusterPtr, UnoccupiedSetbackAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeUnoccupiedSetbackMinAttribute(long chipClusterPtr, UnoccupiedSetbackMinAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeUnoccupiedSetbackMaxAttribute(long chipClusterPtr, UnoccupiedSetbackMaxAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeEmergencyHeatDeltaAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeEmergencyHeatDeltaAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeACTypeAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeACTypeAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeACCapacityAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeACCapacityAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeACRefrigerantTypeAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeACRefrigerantTypeAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeACCompressorTypeAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeACCompressorTypeAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeACErrorCodeAttribute(long chipClusterPtr, DefaultClusterCallback callback, Long value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeACErrorCodeAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeACLouverPositionAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeACLouverPositionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeACCoilTemperatureAttribute(long chipClusterPtr, ACCoilTemperatureAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeACCapacityformatAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeACCapacityformatAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class FanControlCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 514L;

    public FanControlCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void step(DefaultClusterCallback callback, Integer direction, Optional<Boolean> wrap, Optional<Boolean> lowestOff) {
      step(chipClusterPtr, callback, direction, wrap, lowestOff, null);
    }

    public void step(DefaultClusterCallback callback, Integer direction, Optional<Boolean> wrap, Optional<Boolean> lowestOff, int timedInvokeTimeoutMs) {
      step(chipClusterPtr, callback, direction, wrap, lowestOff, timedInvokeTimeoutMs);
    }

    private native void step(long chipClusterPtr, DefaultClusterCallback callback, Integer direction, Optional<Boolean> wrap, Optional<Boolean> lowestOff, @Nullable Integer timedInvokeTimeoutMs);

    public interface PercentSettingAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface SpeedSettingAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readFanModeAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeFanModeAttribute(DefaultClusterCallback callback, Integer value) {
        writeFanModeAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeFanModeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeFanModeAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeFanModeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFanModeAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFanModeSequenceAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeFanModeSequenceAttribute(DefaultClusterCallback callback, Integer value) {
        writeFanModeSequenceAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeFanModeSequenceAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeFanModeSequenceAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeFanModeSequenceAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFanModeSequenceAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readPercentSettingAttribute(
        PercentSettingAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writePercentSettingAttribute(DefaultClusterCallback callback, Integer value) {
        writePercentSettingAttribute(chipClusterPtr, callback, value, null);
    }

    public void writePercentSettingAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writePercentSettingAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribePercentSettingAttribute(
        PercentSettingAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePercentSettingAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readPercentCurrentAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribePercentCurrentAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePercentCurrentAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readSpeedMaxAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeSpeedMaxAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeSpeedMaxAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readSpeedSettingAttribute(
        SpeedSettingAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeSpeedSettingAttribute(DefaultClusterCallback callback, Integer value) {
        writeSpeedSettingAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeSpeedSettingAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeSpeedSettingAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeSpeedSettingAttribute(
        SpeedSettingAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeSpeedSettingAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readSpeedCurrentAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeSpeedCurrentAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeSpeedCurrentAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readRockSupportAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeRockSupportAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeRockSupportAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readRockSettingAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeRockSettingAttribute(DefaultClusterCallback callback, Integer value) {
        writeRockSettingAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeRockSettingAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeRockSettingAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeRockSettingAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeRockSettingAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readWindSupportAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 9L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeWindSupportAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeWindSupportAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readWindSettingAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 10L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeWindSettingAttribute(DefaultClusterCallback callback, Integer value) {
        writeWindSettingAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeWindSettingAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeWindSettingAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeWindSettingAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeWindSettingAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAirflowDirectionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 11L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeAirflowDirectionAttribute(DefaultClusterCallback callback, Integer value) {
        writeAirflowDirectionAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeAirflowDirectionAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeAirflowDirectionAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeAirflowDirectionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAirflowDirectionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void writeFanModeAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeFanModeAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeFanModeSequenceAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeFanModeSequenceAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writePercentSettingAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribePercentSettingAttribute(long chipClusterPtr, PercentSettingAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribePercentCurrentAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeSpeedMaxAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeSpeedSettingAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeSpeedSettingAttribute(long chipClusterPtr, SpeedSettingAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeSpeedCurrentAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeRockSupportAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeRockSettingAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeRockSettingAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeWindSupportAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeWindSettingAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeWindSettingAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeAirflowDirectionAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeAirflowDirectionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class ThermostatUserInterfaceConfigurationCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 516L;

    public ThermostatUserInterfaceConfigurationCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readTemperatureDisplayModeAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeTemperatureDisplayModeAttribute(DefaultClusterCallback callback, Integer value) {
        writeTemperatureDisplayModeAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeTemperatureDisplayModeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeTemperatureDisplayModeAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeTemperatureDisplayModeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeTemperatureDisplayModeAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readKeypadLockoutAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeKeypadLockoutAttribute(DefaultClusterCallback callback, Integer value) {
        writeKeypadLockoutAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeKeypadLockoutAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeKeypadLockoutAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeKeypadLockoutAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeKeypadLockoutAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readScheduleProgrammingVisibilityAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeScheduleProgrammingVisibilityAttribute(DefaultClusterCallback callback, Integer value) {
        writeScheduleProgrammingVisibilityAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeScheduleProgrammingVisibilityAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeScheduleProgrammingVisibilityAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeScheduleProgrammingVisibilityAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeScheduleProgrammingVisibilityAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void writeTemperatureDisplayModeAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeTemperatureDisplayModeAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeKeypadLockoutAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeKeypadLockoutAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeScheduleProgrammingVisibilityAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeScheduleProgrammingVisibilityAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class ColorControlCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 768L;

    public ColorControlCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void moveToHue(DefaultClusterCallback callback, Integer hue, Integer direction, Integer transitionTime, Integer optionsMask, Integer optionsOverride) {
      moveToHue(chipClusterPtr, callback, hue, direction, transitionTime, optionsMask, optionsOverride, null);
    }

    public void moveToHue(DefaultClusterCallback callback, Integer hue, Integer direction, Integer transitionTime, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      moveToHue(chipClusterPtr, callback, hue, direction, transitionTime, optionsMask, optionsOverride, timedInvokeTimeoutMs);
    }

    public void moveHue(DefaultClusterCallback callback, Integer moveMode, Integer rate, Integer optionsMask, Integer optionsOverride) {
      moveHue(chipClusterPtr, callback, moveMode, rate, optionsMask, optionsOverride, null);
    }

    public void moveHue(DefaultClusterCallback callback, Integer moveMode, Integer rate, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      moveHue(chipClusterPtr, callback, moveMode, rate, optionsMask, optionsOverride, timedInvokeTimeoutMs);
    }

    public void stepHue(DefaultClusterCallback callback, Integer stepMode, Integer stepSize, Integer transitionTime, Integer optionsMask, Integer optionsOverride) {
      stepHue(chipClusterPtr, callback, stepMode, stepSize, transitionTime, optionsMask, optionsOverride, null);
    }

    public void stepHue(DefaultClusterCallback callback, Integer stepMode, Integer stepSize, Integer transitionTime, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      stepHue(chipClusterPtr, callback, stepMode, stepSize, transitionTime, optionsMask, optionsOverride, timedInvokeTimeoutMs);
    }

    public void moveToSaturation(DefaultClusterCallback callback, Integer saturation, Integer transitionTime, Integer optionsMask, Integer optionsOverride) {
      moveToSaturation(chipClusterPtr, callback, saturation, transitionTime, optionsMask, optionsOverride, null);
    }

    public void moveToSaturation(DefaultClusterCallback callback, Integer saturation, Integer transitionTime, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      moveToSaturation(chipClusterPtr, callback, saturation, transitionTime, optionsMask, optionsOverride, timedInvokeTimeoutMs);
    }

    public void moveSaturation(DefaultClusterCallback callback, Integer moveMode, Integer rate, Integer optionsMask, Integer optionsOverride) {
      moveSaturation(chipClusterPtr, callback, moveMode, rate, optionsMask, optionsOverride, null);
    }

    public void moveSaturation(DefaultClusterCallback callback, Integer moveMode, Integer rate, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      moveSaturation(chipClusterPtr, callback, moveMode, rate, optionsMask, optionsOverride, timedInvokeTimeoutMs);
    }

    public void stepSaturation(DefaultClusterCallback callback, Integer stepMode, Integer stepSize, Integer transitionTime, Integer optionsMask, Integer optionsOverride) {
      stepSaturation(chipClusterPtr, callback, stepMode, stepSize, transitionTime, optionsMask, optionsOverride, null);
    }

    public void stepSaturation(DefaultClusterCallback callback, Integer stepMode, Integer stepSize, Integer transitionTime, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      stepSaturation(chipClusterPtr, callback, stepMode, stepSize, transitionTime, optionsMask, optionsOverride, timedInvokeTimeoutMs);
    }

    public void moveToHueAndSaturation(DefaultClusterCallback callback, Integer hue, Integer saturation, Integer transitionTime, Integer optionsMask, Integer optionsOverride) {
      moveToHueAndSaturation(chipClusterPtr, callback, hue, saturation, transitionTime, optionsMask, optionsOverride, null);
    }

    public void moveToHueAndSaturation(DefaultClusterCallback callback, Integer hue, Integer saturation, Integer transitionTime, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      moveToHueAndSaturation(chipClusterPtr, callback, hue, saturation, transitionTime, optionsMask, optionsOverride, timedInvokeTimeoutMs);
    }

    public void moveToColor(DefaultClusterCallback callback, Integer colorX, Integer colorY, Integer transitionTime, Integer optionsMask, Integer optionsOverride) {
      moveToColor(chipClusterPtr, callback, colorX, colorY, transitionTime, optionsMask, optionsOverride, null);
    }

    public void moveToColor(DefaultClusterCallback callback, Integer colorX, Integer colorY, Integer transitionTime, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      moveToColor(chipClusterPtr, callback, colorX, colorY, transitionTime, optionsMask, optionsOverride, timedInvokeTimeoutMs);
    }

    public void moveColor(DefaultClusterCallback callback, Integer rateX, Integer rateY, Integer optionsMask, Integer optionsOverride) {
      moveColor(chipClusterPtr, callback, rateX, rateY, optionsMask, optionsOverride, null);
    }

    public void moveColor(DefaultClusterCallback callback, Integer rateX, Integer rateY, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      moveColor(chipClusterPtr, callback, rateX, rateY, optionsMask, optionsOverride, timedInvokeTimeoutMs);
    }

    public void stepColor(DefaultClusterCallback callback, Integer stepX, Integer stepY, Integer transitionTime, Integer optionsMask, Integer optionsOverride) {
      stepColor(chipClusterPtr, callback, stepX, stepY, transitionTime, optionsMask, optionsOverride, null);
    }

    public void stepColor(DefaultClusterCallback callback, Integer stepX, Integer stepY, Integer transitionTime, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      stepColor(chipClusterPtr, callback, stepX, stepY, transitionTime, optionsMask, optionsOverride, timedInvokeTimeoutMs);
    }

    public void moveToColorTemperature(DefaultClusterCallback callback, Integer colorTemperatureMireds, Integer transitionTime, Integer optionsMask, Integer optionsOverride) {
      moveToColorTemperature(chipClusterPtr, callback, colorTemperatureMireds, transitionTime, optionsMask, optionsOverride, null);
    }

    public void moveToColorTemperature(DefaultClusterCallback callback, Integer colorTemperatureMireds, Integer transitionTime, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      moveToColorTemperature(chipClusterPtr, callback, colorTemperatureMireds, transitionTime, optionsMask, optionsOverride, timedInvokeTimeoutMs);
    }

    public void enhancedMoveToHue(DefaultClusterCallback callback, Integer enhancedHue, Integer direction, Integer transitionTime, Integer optionsMask, Integer optionsOverride) {
      enhancedMoveToHue(chipClusterPtr, callback, enhancedHue, direction, transitionTime, optionsMask, optionsOverride, null);
    }

    public void enhancedMoveToHue(DefaultClusterCallback callback, Integer enhancedHue, Integer direction, Integer transitionTime, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      enhancedMoveToHue(chipClusterPtr, callback, enhancedHue, direction, transitionTime, optionsMask, optionsOverride, timedInvokeTimeoutMs);
    }

    public void enhancedMoveHue(DefaultClusterCallback callback, Integer moveMode, Integer rate, Integer optionsMask, Integer optionsOverride) {
      enhancedMoveHue(chipClusterPtr, callback, moveMode, rate, optionsMask, optionsOverride, null);
    }

    public void enhancedMoveHue(DefaultClusterCallback callback, Integer moveMode, Integer rate, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      enhancedMoveHue(chipClusterPtr, callback, moveMode, rate, optionsMask, optionsOverride, timedInvokeTimeoutMs);
    }

    public void enhancedStepHue(DefaultClusterCallback callback, Integer stepMode, Integer stepSize, Integer transitionTime, Integer optionsMask, Integer optionsOverride) {
      enhancedStepHue(chipClusterPtr, callback, stepMode, stepSize, transitionTime, optionsMask, optionsOverride, null);
    }

    public void enhancedStepHue(DefaultClusterCallback callback, Integer stepMode, Integer stepSize, Integer transitionTime, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      enhancedStepHue(chipClusterPtr, callback, stepMode, stepSize, transitionTime, optionsMask, optionsOverride, timedInvokeTimeoutMs);
    }

    public void enhancedMoveToHueAndSaturation(DefaultClusterCallback callback, Integer enhancedHue, Integer saturation, Integer transitionTime, Integer optionsMask, Integer optionsOverride) {
      enhancedMoveToHueAndSaturation(chipClusterPtr, callback, enhancedHue, saturation, transitionTime, optionsMask, optionsOverride, null);
    }

    public void enhancedMoveToHueAndSaturation(DefaultClusterCallback callback, Integer enhancedHue, Integer saturation, Integer transitionTime, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      enhancedMoveToHueAndSaturation(chipClusterPtr, callback, enhancedHue, saturation, transitionTime, optionsMask, optionsOverride, timedInvokeTimeoutMs);
    }

    public void colorLoopSet(DefaultClusterCallback callback, Integer updateFlags, Integer action, Integer direction, Integer time, Integer startHue, Integer optionsMask, Integer optionsOverride) {
      colorLoopSet(chipClusterPtr, callback, updateFlags, action, direction, time, startHue, optionsMask, optionsOverride, null);
    }

    public void colorLoopSet(DefaultClusterCallback callback, Integer updateFlags, Integer action, Integer direction, Integer time, Integer startHue, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      colorLoopSet(chipClusterPtr, callback, updateFlags, action, direction, time, startHue, optionsMask, optionsOverride, timedInvokeTimeoutMs);
    }

    public void stopMoveStep(DefaultClusterCallback callback, Integer optionsMask, Integer optionsOverride) {
      stopMoveStep(chipClusterPtr, callback, optionsMask, optionsOverride, null);
    }

    public void stopMoveStep(DefaultClusterCallback callback, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      stopMoveStep(chipClusterPtr, callback, optionsMask, optionsOverride, timedInvokeTimeoutMs);
    }

    public void moveColorTemperature(DefaultClusterCallback callback, Integer moveMode, Integer rate, Integer colorTemperatureMinimumMireds, Integer colorTemperatureMaximumMireds, Integer optionsMask, Integer optionsOverride) {
      moveColorTemperature(chipClusterPtr, callback, moveMode, rate, colorTemperatureMinimumMireds, colorTemperatureMaximumMireds, optionsMask, optionsOverride, null);
    }

    public void moveColorTemperature(DefaultClusterCallback callback, Integer moveMode, Integer rate, Integer colorTemperatureMinimumMireds, Integer colorTemperatureMaximumMireds, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      moveColorTemperature(chipClusterPtr, callback, moveMode, rate, colorTemperatureMinimumMireds, colorTemperatureMaximumMireds, optionsMask, optionsOverride, timedInvokeTimeoutMs);
    }

    public void stepColorTemperature(DefaultClusterCallback callback, Integer stepMode, Integer stepSize, Integer transitionTime, Integer colorTemperatureMinimumMireds, Integer colorTemperatureMaximumMireds, Integer optionsMask, Integer optionsOverride) {
      stepColorTemperature(chipClusterPtr, callback, stepMode, stepSize, transitionTime, colorTemperatureMinimumMireds, colorTemperatureMaximumMireds, optionsMask, optionsOverride, null);
    }

    public void stepColorTemperature(DefaultClusterCallback callback, Integer stepMode, Integer stepSize, Integer transitionTime, Integer colorTemperatureMinimumMireds, Integer colorTemperatureMaximumMireds, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      stepColorTemperature(chipClusterPtr, callback, stepMode, stepSize, transitionTime, colorTemperatureMinimumMireds, colorTemperatureMaximumMireds, optionsMask, optionsOverride, timedInvokeTimeoutMs);
    }

    private native void moveToHue(long chipClusterPtr, DefaultClusterCallback callback, Integer hue, Integer direction, Integer transitionTime, Integer optionsMask, Integer optionsOverride, @Nullable Integer timedInvokeTimeoutMs);

    private native void moveHue(long chipClusterPtr, DefaultClusterCallback callback, Integer moveMode, Integer rate, Integer optionsMask, Integer optionsOverride, @Nullable Integer timedInvokeTimeoutMs);

    private native void stepHue(long chipClusterPtr, DefaultClusterCallback callback, Integer stepMode, Integer stepSize, Integer transitionTime, Integer optionsMask, Integer optionsOverride, @Nullable Integer timedInvokeTimeoutMs);

    private native void moveToSaturation(long chipClusterPtr, DefaultClusterCallback callback, Integer saturation, Integer transitionTime, Integer optionsMask, Integer optionsOverride, @Nullable Integer timedInvokeTimeoutMs);

    private native void moveSaturation(long chipClusterPtr, DefaultClusterCallback callback, Integer moveMode, Integer rate, Integer optionsMask, Integer optionsOverride, @Nullable Integer timedInvokeTimeoutMs);

    private native void stepSaturation(long chipClusterPtr, DefaultClusterCallback callback, Integer stepMode, Integer stepSize, Integer transitionTime, Integer optionsMask, Integer optionsOverride, @Nullable Integer timedInvokeTimeoutMs);

    private native void moveToHueAndSaturation(long chipClusterPtr, DefaultClusterCallback callback, Integer hue, Integer saturation, Integer transitionTime, Integer optionsMask, Integer optionsOverride, @Nullable Integer timedInvokeTimeoutMs);

    private native void moveToColor(long chipClusterPtr, DefaultClusterCallback callback, Integer colorX, Integer colorY, Integer transitionTime, Integer optionsMask, Integer optionsOverride, @Nullable Integer timedInvokeTimeoutMs);

    private native void moveColor(long chipClusterPtr, DefaultClusterCallback callback, Integer rateX, Integer rateY, Integer optionsMask, Integer optionsOverride, @Nullable Integer timedInvokeTimeoutMs);

    private native void stepColor(long chipClusterPtr, DefaultClusterCallback callback, Integer stepX, Integer stepY, Integer transitionTime, Integer optionsMask, Integer optionsOverride, @Nullable Integer timedInvokeTimeoutMs);

    private native void moveToColorTemperature(long chipClusterPtr, DefaultClusterCallback callback, Integer colorTemperatureMireds, Integer transitionTime, Integer optionsMask, Integer optionsOverride, @Nullable Integer timedInvokeTimeoutMs);

    private native void enhancedMoveToHue(long chipClusterPtr, DefaultClusterCallback callback, Integer enhancedHue, Integer direction, Integer transitionTime, Integer optionsMask, Integer optionsOverride, @Nullable Integer timedInvokeTimeoutMs);

    private native void enhancedMoveHue(long chipClusterPtr, DefaultClusterCallback callback, Integer moveMode, Integer rate, Integer optionsMask, Integer optionsOverride, @Nullable Integer timedInvokeTimeoutMs);

    private native void enhancedStepHue(long chipClusterPtr, DefaultClusterCallback callback, Integer stepMode, Integer stepSize, Integer transitionTime, Integer optionsMask, Integer optionsOverride, @Nullable Integer timedInvokeTimeoutMs);

    private native void enhancedMoveToHueAndSaturation(long chipClusterPtr, DefaultClusterCallback callback, Integer enhancedHue, Integer saturation, Integer transitionTime, Integer optionsMask, Integer optionsOverride, @Nullable Integer timedInvokeTimeoutMs);

    private native void colorLoopSet(long chipClusterPtr, DefaultClusterCallback callback, Integer updateFlags, Integer action, Integer direction, Integer time, Integer startHue, Integer optionsMask, Integer optionsOverride, @Nullable Integer timedInvokeTimeoutMs);

    private native void stopMoveStep(long chipClusterPtr, DefaultClusterCallback callback, Integer optionsMask, Integer optionsOverride, @Nullable Integer timedInvokeTimeoutMs);

    private native void moveColorTemperature(long chipClusterPtr, DefaultClusterCallback callback, Integer moveMode, Integer rate, Integer colorTemperatureMinimumMireds, Integer colorTemperatureMaximumMireds, Integer optionsMask, Integer optionsOverride, @Nullable Integer timedInvokeTimeoutMs);

    private native void stepColorTemperature(long chipClusterPtr, DefaultClusterCallback callback, Integer stepMode, Integer stepSize, Integer transitionTime, Integer colorTemperatureMinimumMireds, Integer colorTemperatureMaximumMireds, Integer optionsMask, Integer optionsOverride, @Nullable Integer timedInvokeTimeoutMs);

    public interface NumberOfPrimariesAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface Primary1IntensityAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface Primary2IntensityAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface Primary3IntensityAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface Primary4IntensityAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface Primary5IntensityAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface Primary6IntensityAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface ColorPointRIntensityAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface ColorPointGIntensityAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface ColorPointBIntensityAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface StartUpColorTemperatureMiredsAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readCurrentHueAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeCurrentHueAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeCurrentHueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readCurrentSaturationAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeCurrentSaturationAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeCurrentSaturationAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readRemainingTimeAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeRemainingTimeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeRemainingTimeAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readCurrentXAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeCurrentXAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeCurrentXAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readCurrentYAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeCurrentYAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeCurrentYAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readDriftCompensationAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeDriftCompensationAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeDriftCompensationAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readCompensationTextAttribute(
        CharStringAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeCompensationTextAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeCompensationTextAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readColorTemperatureMiredsAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeColorTemperatureMiredsAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeColorTemperatureMiredsAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readColorModeAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeColorModeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeColorModeAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readOptionsAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 15L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeOptionsAttribute(DefaultClusterCallback callback, Integer value) {
        writeOptionsAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeOptionsAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeOptionsAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeOptionsAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeOptionsAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readNumberOfPrimariesAttribute(
        NumberOfPrimariesAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 16L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeNumberOfPrimariesAttribute(
        NumberOfPrimariesAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeNumberOfPrimariesAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readPrimary1XAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 17L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribePrimary1XAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePrimary1XAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readPrimary1YAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 18L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribePrimary1YAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePrimary1YAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readPrimary1IntensityAttribute(
        Primary1IntensityAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 19L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribePrimary1IntensityAttribute(
        Primary1IntensityAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePrimary1IntensityAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readPrimary2XAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 21L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribePrimary2XAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePrimary2XAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readPrimary2YAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 22L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribePrimary2YAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePrimary2YAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readPrimary2IntensityAttribute(
        Primary2IntensityAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 23L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribePrimary2IntensityAttribute(
        Primary2IntensityAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePrimary2IntensityAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readPrimary3XAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 25L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribePrimary3XAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePrimary3XAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readPrimary3YAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 26L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribePrimary3YAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePrimary3YAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readPrimary3IntensityAttribute(
        Primary3IntensityAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 27L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribePrimary3IntensityAttribute(
        Primary3IntensityAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePrimary3IntensityAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readPrimary4XAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 32L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribePrimary4XAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePrimary4XAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readPrimary4YAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 33L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribePrimary4YAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePrimary4YAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readPrimary4IntensityAttribute(
        Primary4IntensityAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 34L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribePrimary4IntensityAttribute(
        Primary4IntensityAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePrimary4IntensityAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readPrimary5XAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 36L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribePrimary5XAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePrimary5XAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readPrimary5YAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 37L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribePrimary5YAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePrimary5YAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readPrimary5IntensityAttribute(
        Primary5IntensityAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 38L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribePrimary5IntensityAttribute(
        Primary5IntensityAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePrimary5IntensityAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readPrimary6XAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 40L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribePrimary6XAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePrimary6XAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readPrimary6YAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 41L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribePrimary6YAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePrimary6YAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readPrimary6IntensityAttribute(
        Primary6IntensityAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 42L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribePrimary6IntensityAttribute(
        Primary6IntensityAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePrimary6IntensityAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readWhitePointXAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 48L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeWhitePointXAttribute(DefaultClusterCallback callback, Integer value) {
        writeWhitePointXAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeWhitePointXAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeWhitePointXAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeWhitePointXAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeWhitePointXAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readWhitePointYAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 49L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeWhitePointYAttribute(DefaultClusterCallback callback, Integer value) {
        writeWhitePointYAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeWhitePointYAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeWhitePointYAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeWhitePointYAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeWhitePointYAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readColorPointRXAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 50L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeColorPointRXAttribute(DefaultClusterCallback callback, Integer value) {
        writeColorPointRXAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeColorPointRXAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeColorPointRXAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeColorPointRXAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeColorPointRXAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readColorPointRYAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 51L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeColorPointRYAttribute(DefaultClusterCallback callback, Integer value) {
        writeColorPointRYAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeColorPointRYAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeColorPointRYAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeColorPointRYAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeColorPointRYAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readColorPointRIntensityAttribute(
        ColorPointRIntensityAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 52L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeColorPointRIntensityAttribute(DefaultClusterCallback callback, Integer value) {
        writeColorPointRIntensityAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeColorPointRIntensityAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeColorPointRIntensityAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeColorPointRIntensityAttribute(
        ColorPointRIntensityAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeColorPointRIntensityAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readColorPointGXAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 54L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeColorPointGXAttribute(DefaultClusterCallback callback, Integer value) {
        writeColorPointGXAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeColorPointGXAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeColorPointGXAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeColorPointGXAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeColorPointGXAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readColorPointGYAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 55L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeColorPointGYAttribute(DefaultClusterCallback callback, Integer value) {
        writeColorPointGYAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeColorPointGYAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeColorPointGYAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeColorPointGYAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeColorPointGYAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readColorPointGIntensityAttribute(
        ColorPointGIntensityAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 56L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeColorPointGIntensityAttribute(DefaultClusterCallback callback, Integer value) {
        writeColorPointGIntensityAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeColorPointGIntensityAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeColorPointGIntensityAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeColorPointGIntensityAttribute(
        ColorPointGIntensityAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeColorPointGIntensityAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readColorPointBXAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 58L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeColorPointBXAttribute(DefaultClusterCallback callback, Integer value) {
        writeColorPointBXAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeColorPointBXAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeColorPointBXAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeColorPointBXAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeColorPointBXAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readColorPointBYAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 59L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeColorPointBYAttribute(DefaultClusterCallback callback, Integer value) {
        writeColorPointBYAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeColorPointBYAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeColorPointBYAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeColorPointBYAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeColorPointBYAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readColorPointBIntensityAttribute(
        ColorPointBIntensityAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 60L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeColorPointBIntensityAttribute(DefaultClusterCallback callback, Integer value) {
        writeColorPointBIntensityAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeColorPointBIntensityAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeColorPointBIntensityAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeColorPointBIntensityAttribute(
        ColorPointBIntensityAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeColorPointBIntensityAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEnhancedCurrentHueAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 16384L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEnhancedCurrentHueAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEnhancedCurrentHueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEnhancedColorModeAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 16385L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEnhancedColorModeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEnhancedColorModeAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readColorLoopActiveAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 16386L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeColorLoopActiveAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeColorLoopActiveAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readColorLoopDirectionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 16387L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeColorLoopDirectionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeColorLoopDirectionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readColorLoopTimeAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 16388L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeColorLoopTimeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeColorLoopTimeAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readColorLoopStartEnhancedHueAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 16389L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeColorLoopStartEnhancedHueAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeColorLoopStartEnhancedHueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readColorLoopStoredEnhancedHueAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 16390L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeColorLoopStoredEnhancedHueAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeColorLoopStoredEnhancedHueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readColorCapabilitiesAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 16394L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeColorCapabilitiesAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeColorCapabilitiesAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readColorTempPhysicalMinMiredsAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 16395L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeColorTempPhysicalMinMiredsAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeColorTempPhysicalMinMiredsAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readColorTempPhysicalMaxMiredsAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 16396L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeColorTempPhysicalMaxMiredsAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeColorTempPhysicalMaxMiredsAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readCoupleColorTempToLevelMinMiredsAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 16397L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeCoupleColorTempToLevelMinMiredsAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeCoupleColorTempToLevelMinMiredsAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readStartUpColorTemperatureMiredsAttribute(
        StartUpColorTemperatureMiredsAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 16400L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeStartUpColorTemperatureMiredsAttribute(DefaultClusterCallback callback, Integer value) {
        writeStartUpColorTemperatureMiredsAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeStartUpColorTemperatureMiredsAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeStartUpColorTemperatureMiredsAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeStartUpColorTemperatureMiredsAttribute(
        StartUpColorTemperatureMiredsAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeStartUpColorTemperatureMiredsAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeCurrentHueAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeCurrentSaturationAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeRemainingTimeAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeCurrentXAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeCurrentYAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeDriftCompensationAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeCompensationTextAttribute(long chipClusterPtr, CharStringAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeColorTemperatureMiredsAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeColorModeAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeOptionsAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeOptionsAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeNumberOfPrimariesAttribute(long chipClusterPtr, NumberOfPrimariesAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribePrimary1XAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribePrimary1YAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribePrimary1IntensityAttribute(long chipClusterPtr, Primary1IntensityAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribePrimary2XAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribePrimary2YAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribePrimary2IntensityAttribute(long chipClusterPtr, Primary2IntensityAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribePrimary3XAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribePrimary3YAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribePrimary3IntensityAttribute(long chipClusterPtr, Primary3IntensityAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribePrimary4XAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribePrimary4YAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribePrimary4IntensityAttribute(long chipClusterPtr, Primary4IntensityAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribePrimary5XAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribePrimary5YAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribePrimary5IntensityAttribute(long chipClusterPtr, Primary5IntensityAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribePrimary6XAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribePrimary6YAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribePrimary6IntensityAttribute(long chipClusterPtr, Primary6IntensityAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeWhitePointXAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeWhitePointXAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeWhitePointYAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeWhitePointYAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeColorPointRXAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeColorPointRXAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeColorPointRYAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeColorPointRYAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeColorPointRIntensityAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeColorPointRIntensityAttribute(long chipClusterPtr, ColorPointRIntensityAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeColorPointGXAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeColorPointGXAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeColorPointGYAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeColorPointGYAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeColorPointGIntensityAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeColorPointGIntensityAttribute(long chipClusterPtr, ColorPointGIntensityAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeColorPointBXAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeColorPointBXAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeColorPointBYAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeColorPointBYAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeColorPointBIntensityAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeColorPointBIntensityAttribute(long chipClusterPtr, ColorPointBIntensityAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEnhancedCurrentHueAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEnhancedColorModeAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeColorLoopActiveAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeColorLoopDirectionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeColorLoopTimeAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeColorLoopStartEnhancedHueAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeColorLoopStoredEnhancedHueAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeColorCapabilitiesAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeColorTempPhysicalMinMiredsAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeColorTempPhysicalMaxMiredsAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeCoupleColorTempToLevelMinMiredsAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeStartUpColorTemperatureMiredsAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeStartUpColorTemperatureMiredsAttribute(long chipClusterPtr, StartUpColorTemperatureMiredsAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class BallastConfigurationCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 769L;

    public BallastConfigurationCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface IntrinsicBallastFactorAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface BallastFactorAdjustmentAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface LampRatedHoursAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface LampBurnHoursAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface LampBurnHoursTripPointAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readPhysicalMinLevelAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribePhysicalMinLevelAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePhysicalMinLevelAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readPhysicalMaxLevelAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribePhysicalMaxLevelAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePhysicalMaxLevelAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readBallastStatusAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeBallastStatusAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeBallastStatusAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMinLevelAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 16L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeMinLevelAttribute(DefaultClusterCallback callback, Integer value) {
        writeMinLevelAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeMinLevelAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeMinLevelAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeMinLevelAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMinLevelAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMaxLevelAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 17L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeMaxLevelAttribute(DefaultClusterCallback callback, Integer value) {
        writeMaxLevelAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeMaxLevelAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeMaxLevelAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeMaxLevelAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMaxLevelAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readIntrinsicBallastFactorAttribute(
        IntrinsicBallastFactorAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 20L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeIntrinsicBallastFactorAttribute(DefaultClusterCallback callback, Integer value) {
        writeIntrinsicBallastFactorAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeIntrinsicBallastFactorAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeIntrinsicBallastFactorAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeIntrinsicBallastFactorAttribute(
        IntrinsicBallastFactorAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeIntrinsicBallastFactorAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readBallastFactorAdjustmentAttribute(
        BallastFactorAdjustmentAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 21L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeBallastFactorAdjustmentAttribute(DefaultClusterCallback callback, Integer value) {
        writeBallastFactorAdjustmentAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeBallastFactorAdjustmentAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeBallastFactorAdjustmentAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeBallastFactorAdjustmentAttribute(
        BallastFactorAdjustmentAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeBallastFactorAdjustmentAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readLampQuantityAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 32L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeLampQuantityAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeLampQuantityAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readLampTypeAttribute(
        CharStringAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 48L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeLampTypeAttribute(DefaultClusterCallback callback, String value) {
        writeLampTypeAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeLampTypeAttribute(DefaultClusterCallback callback, String value, int timedWriteTimeoutMs) {
        writeLampTypeAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeLampTypeAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeLampTypeAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readLampManufacturerAttribute(
        CharStringAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 49L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeLampManufacturerAttribute(DefaultClusterCallback callback, String value) {
        writeLampManufacturerAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeLampManufacturerAttribute(DefaultClusterCallback callback, String value, int timedWriteTimeoutMs) {
        writeLampManufacturerAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeLampManufacturerAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeLampManufacturerAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readLampRatedHoursAttribute(
        LampRatedHoursAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 50L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeLampRatedHoursAttribute(DefaultClusterCallback callback, Long value) {
        writeLampRatedHoursAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeLampRatedHoursAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
        writeLampRatedHoursAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeLampRatedHoursAttribute(
        LampRatedHoursAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeLampRatedHoursAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readLampBurnHoursAttribute(
        LampBurnHoursAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 51L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeLampBurnHoursAttribute(DefaultClusterCallback callback, Long value) {
        writeLampBurnHoursAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeLampBurnHoursAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
        writeLampBurnHoursAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeLampBurnHoursAttribute(
        LampBurnHoursAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeLampBurnHoursAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readLampAlarmModeAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 52L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeLampAlarmModeAttribute(DefaultClusterCallback callback, Integer value) {
        writeLampAlarmModeAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeLampAlarmModeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeLampAlarmModeAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeLampAlarmModeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeLampAlarmModeAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readLampBurnHoursTripPointAttribute(
        LampBurnHoursTripPointAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 53L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeLampBurnHoursTripPointAttribute(DefaultClusterCallback callback, Long value) {
        writeLampBurnHoursTripPointAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeLampBurnHoursTripPointAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
        writeLampBurnHoursTripPointAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeLampBurnHoursTripPointAttribute(
        LampBurnHoursTripPointAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeLampBurnHoursTripPointAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribePhysicalMinLevelAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribePhysicalMaxLevelAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeBallastStatusAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeMinLevelAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeMinLevelAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeMaxLevelAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeMaxLevelAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeIntrinsicBallastFactorAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeIntrinsicBallastFactorAttribute(long chipClusterPtr, IntrinsicBallastFactorAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeBallastFactorAdjustmentAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeBallastFactorAdjustmentAttribute(long chipClusterPtr, BallastFactorAdjustmentAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeLampQuantityAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeLampTypeAttribute(long chipClusterPtr, DefaultClusterCallback callback, String value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeLampTypeAttribute(long chipClusterPtr, CharStringAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeLampManufacturerAttribute(long chipClusterPtr, DefaultClusterCallback callback, String value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeLampManufacturerAttribute(long chipClusterPtr, CharStringAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeLampRatedHoursAttribute(long chipClusterPtr, DefaultClusterCallback callback, Long value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeLampRatedHoursAttribute(long chipClusterPtr, LampRatedHoursAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeLampBurnHoursAttribute(long chipClusterPtr, DefaultClusterCallback callback, Long value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeLampBurnHoursAttribute(long chipClusterPtr, LampBurnHoursAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeLampAlarmModeAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeLampAlarmModeAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeLampBurnHoursTripPointAttribute(long chipClusterPtr, DefaultClusterCallback callback, Long value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeLampBurnHoursTripPointAttribute(long chipClusterPtr, LampBurnHoursTripPointAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class IlluminanceMeasurementCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1024L;

    public IlluminanceMeasurementCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface MeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface MinMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface MaxMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface LightSensorTypeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMeasuredValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMinMeasuredValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMaxMeasuredValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readToleranceAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeToleranceAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeToleranceAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readLightSensorTypeAttribute(
        LightSensorTypeAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeLightSensorTypeAttribute(
        LightSensorTypeAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeLightSensorTypeAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeMeasuredValueAttribute(long chipClusterPtr, MeasuredValueAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMinMeasuredValueAttribute(long chipClusterPtr, MinMeasuredValueAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMaxMeasuredValueAttribute(long chipClusterPtr, MaxMeasuredValueAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeToleranceAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeLightSensorTypeAttribute(long chipClusterPtr, LightSensorTypeAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class TemperatureMeasurementCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1026L;

    public TemperatureMeasurementCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface MeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface MinMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface MaxMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMeasuredValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMinMeasuredValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMaxMeasuredValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readToleranceAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeToleranceAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeToleranceAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeMeasuredValueAttribute(long chipClusterPtr, MeasuredValueAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMinMeasuredValueAttribute(long chipClusterPtr, MinMeasuredValueAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMaxMeasuredValueAttribute(long chipClusterPtr, MaxMeasuredValueAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeToleranceAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class PressureMeasurementCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1027L;

    public PressureMeasurementCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface MeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface MinMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface MaxMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface ScaledValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface MinScaledValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface MaxScaledValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMeasuredValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMinMeasuredValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMaxMeasuredValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readToleranceAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeToleranceAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeToleranceAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readScaledValueAttribute(
        ScaledValueAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 16L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeScaledValueAttribute(
        ScaledValueAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeScaledValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMinScaledValueAttribute(
        MinScaledValueAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 17L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMinScaledValueAttribute(
        MinScaledValueAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMinScaledValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMaxScaledValueAttribute(
        MaxScaledValueAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 18L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMaxScaledValueAttribute(
        MaxScaledValueAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMaxScaledValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readScaledToleranceAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 19L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeScaledToleranceAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeScaledToleranceAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readScaleAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 20L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeScaleAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeScaleAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeMeasuredValueAttribute(long chipClusterPtr, MeasuredValueAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMinMeasuredValueAttribute(long chipClusterPtr, MinMeasuredValueAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMaxMeasuredValueAttribute(long chipClusterPtr, MaxMeasuredValueAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeToleranceAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeScaledValueAttribute(long chipClusterPtr, ScaledValueAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMinScaledValueAttribute(long chipClusterPtr, MinScaledValueAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMaxScaledValueAttribute(long chipClusterPtr, MaxScaledValueAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeScaledToleranceAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeScaleAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class FlowMeasurementCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1028L;

    public FlowMeasurementCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface MeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface MinMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface MaxMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMeasuredValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMinMeasuredValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMaxMeasuredValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readToleranceAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeToleranceAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeToleranceAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeMeasuredValueAttribute(long chipClusterPtr, MeasuredValueAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMinMeasuredValueAttribute(long chipClusterPtr, MinMeasuredValueAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMaxMeasuredValueAttribute(long chipClusterPtr, MaxMeasuredValueAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeToleranceAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class RelativeHumidityMeasurementCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1029L;

    public RelativeHumidityMeasurementCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface MeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface MinMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface MaxMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMeasuredValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMinMeasuredValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMaxMeasuredValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readToleranceAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeToleranceAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeToleranceAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeMeasuredValueAttribute(long chipClusterPtr, MeasuredValueAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMinMeasuredValueAttribute(long chipClusterPtr, MinMeasuredValueAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMaxMeasuredValueAttribute(long chipClusterPtr, MaxMeasuredValueAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeToleranceAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class OccupancySensingCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1030L;

    public OccupancySensingCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readOccupancyAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeOccupancyAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeOccupancyAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readOccupancySensorTypeAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeOccupancySensorTypeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeOccupancySensorTypeAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readOccupancySensorTypeBitmapAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeOccupancySensorTypeBitmapAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeOccupancySensorTypeBitmapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readPIROccupiedToUnoccupiedDelayAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 16L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writePIROccupiedToUnoccupiedDelayAttribute(DefaultClusterCallback callback, Integer value) {
        writePIROccupiedToUnoccupiedDelayAttribute(chipClusterPtr, callback, value, null);
    }

    public void writePIROccupiedToUnoccupiedDelayAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writePIROccupiedToUnoccupiedDelayAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribePIROccupiedToUnoccupiedDelayAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePIROccupiedToUnoccupiedDelayAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readPIRUnoccupiedToOccupiedDelayAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 17L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writePIRUnoccupiedToOccupiedDelayAttribute(DefaultClusterCallback callback, Integer value) {
        writePIRUnoccupiedToOccupiedDelayAttribute(chipClusterPtr, callback, value, null);
    }

    public void writePIRUnoccupiedToOccupiedDelayAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writePIRUnoccupiedToOccupiedDelayAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribePIRUnoccupiedToOccupiedDelayAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePIRUnoccupiedToOccupiedDelayAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readPIRUnoccupiedToOccupiedThresholdAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 18L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writePIRUnoccupiedToOccupiedThresholdAttribute(DefaultClusterCallback callback, Integer value) {
        writePIRUnoccupiedToOccupiedThresholdAttribute(chipClusterPtr, callback, value, null);
    }

    public void writePIRUnoccupiedToOccupiedThresholdAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writePIRUnoccupiedToOccupiedThresholdAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribePIRUnoccupiedToOccupiedThresholdAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePIRUnoccupiedToOccupiedThresholdAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readUltrasonicOccupiedToUnoccupiedDelayAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 32L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeUltrasonicOccupiedToUnoccupiedDelayAttribute(DefaultClusterCallback callback, Integer value) {
        writeUltrasonicOccupiedToUnoccupiedDelayAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeUltrasonicOccupiedToUnoccupiedDelayAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeUltrasonicOccupiedToUnoccupiedDelayAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeUltrasonicOccupiedToUnoccupiedDelayAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeUltrasonicOccupiedToUnoccupiedDelayAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readUltrasonicUnoccupiedToOccupiedDelayAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 33L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeUltrasonicUnoccupiedToOccupiedDelayAttribute(DefaultClusterCallback callback, Integer value) {
        writeUltrasonicUnoccupiedToOccupiedDelayAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeUltrasonicUnoccupiedToOccupiedDelayAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeUltrasonicUnoccupiedToOccupiedDelayAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeUltrasonicUnoccupiedToOccupiedDelayAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeUltrasonicUnoccupiedToOccupiedDelayAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readUltrasonicUnoccupiedToOccupiedThresholdAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 34L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeUltrasonicUnoccupiedToOccupiedThresholdAttribute(DefaultClusterCallback callback, Integer value) {
        writeUltrasonicUnoccupiedToOccupiedThresholdAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeUltrasonicUnoccupiedToOccupiedThresholdAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeUltrasonicUnoccupiedToOccupiedThresholdAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeUltrasonicUnoccupiedToOccupiedThresholdAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeUltrasonicUnoccupiedToOccupiedThresholdAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readPhysicalContactOccupiedToUnoccupiedDelayAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 48L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writePhysicalContactOccupiedToUnoccupiedDelayAttribute(DefaultClusterCallback callback, Integer value) {
        writePhysicalContactOccupiedToUnoccupiedDelayAttribute(chipClusterPtr, callback, value, null);
    }

    public void writePhysicalContactOccupiedToUnoccupiedDelayAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writePhysicalContactOccupiedToUnoccupiedDelayAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribePhysicalContactOccupiedToUnoccupiedDelayAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePhysicalContactOccupiedToUnoccupiedDelayAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readPhysicalContactUnoccupiedToOccupiedDelayAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 49L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writePhysicalContactUnoccupiedToOccupiedDelayAttribute(DefaultClusterCallback callback, Integer value) {
        writePhysicalContactUnoccupiedToOccupiedDelayAttribute(chipClusterPtr, callback, value, null);
    }

    public void writePhysicalContactUnoccupiedToOccupiedDelayAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writePhysicalContactUnoccupiedToOccupiedDelayAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribePhysicalContactUnoccupiedToOccupiedDelayAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePhysicalContactUnoccupiedToOccupiedDelayAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readPhysicalContactUnoccupiedToOccupiedThresholdAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 50L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writePhysicalContactUnoccupiedToOccupiedThresholdAttribute(DefaultClusterCallback callback, Integer value) {
        writePhysicalContactUnoccupiedToOccupiedThresholdAttribute(chipClusterPtr, callback, value, null);
    }

    public void writePhysicalContactUnoccupiedToOccupiedThresholdAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writePhysicalContactUnoccupiedToOccupiedThresholdAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribePhysicalContactUnoccupiedToOccupiedThresholdAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePhysicalContactUnoccupiedToOccupiedThresholdAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeOccupancyAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeOccupancySensorTypeAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeOccupancySensorTypeBitmapAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writePIROccupiedToUnoccupiedDelayAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribePIROccupiedToUnoccupiedDelayAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writePIRUnoccupiedToOccupiedDelayAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribePIRUnoccupiedToOccupiedDelayAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writePIRUnoccupiedToOccupiedThresholdAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribePIRUnoccupiedToOccupiedThresholdAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeUltrasonicOccupiedToUnoccupiedDelayAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeUltrasonicOccupiedToUnoccupiedDelayAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeUltrasonicUnoccupiedToOccupiedDelayAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeUltrasonicUnoccupiedToOccupiedDelayAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeUltrasonicUnoccupiedToOccupiedThresholdAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeUltrasonicUnoccupiedToOccupiedThresholdAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writePhysicalContactOccupiedToUnoccupiedDelayAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribePhysicalContactOccupiedToUnoccupiedDelayAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writePhysicalContactUnoccupiedToOccupiedDelayAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribePhysicalContactUnoccupiedToOccupiedDelayAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writePhysicalContactUnoccupiedToOccupiedThresholdAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribePhysicalContactUnoccupiedToOccupiedThresholdAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class CarbonMonoxideConcentrationMeasurementCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1036L;

    public CarbonMonoxideConcentrationMeasurementCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface MeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface MinMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface MaxMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface PeakMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface AverageMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMeasuredValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMinMeasuredValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMaxMeasuredValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readPeakMeasuredValueAttribute(
        PeakMeasuredValueAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribePeakMeasuredValueAttribute(
        PeakMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePeakMeasuredValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readPeakMeasuredValueWindowAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribePeakMeasuredValueWindowAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePeakMeasuredValueWindowAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAverageMeasuredValueAttribute(
        AverageMeasuredValueAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAverageMeasuredValueAttribute(
        AverageMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAverageMeasuredValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAverageMeasuredValueWindowAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAverageMeasuredValueWindowAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAverageMeasuredValueWindowAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readUncertaintyAttribute(
        FloatAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeUncertaintyAttribute(
        FloatAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeUncertaintyAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMeasurementUnitAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMeasurementUnitAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMeasurementUnitAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMeasurementMediumAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 9L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMeasurementMediumAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMeasurementMediumAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readLevelValueAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 10L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeLevelValueAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeLevelValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeMeasuredValueAttribute(long chipClusterPtr, MeasuredValueAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMinMeasuredValueAttribute(long chipClusterPtr, MinMeasuredValueAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMaxMeasuredValueAttribute(long chipClusterPtr, MaxMeasuredValueAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribePeakMeasuredValueAttribute(long chipClusterPtr, PeakMeasuredValueAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribePeakMeasuredValueWindowAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAverageMeasuredValueAttribute(long chipClusterPtr, AverageMeasuredValueAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAverageMeasuredValueWindowAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeUncertaintyAttribute(long chipClusterPtr, FloatAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMeasurementUnitAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMeasurementMediumAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeLevelValueAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class CarbonDioxideConcentrationMeasurementCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1037L;

    public CarbonDioxideConcentrationMeasurementCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface MeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface MinMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface MaxMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface PeakMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface AverageMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMeasuredValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMinMeasuredValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMaxMeasuredValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readPeakMeasuredValueAttribute(
        PeakMeasuredValueAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribePeakMeasuredValueAttribute(
        PeakMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePeakMeasuredValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readPeakMeasuredValueWindowAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribePeakMeasuredValueWindowAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePeakMeasuredValueWindowAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAverageMeasuredValueAttribute(
        AverageMeasuredValueAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAverageMeasuredValueAttribute(
        AverageMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAverageMeasuredValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAverageMeasuredValueWindowAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAverageMeasuredValueWindowAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAverageMeasuredValueWindowAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readUncertaintyAttribute(
        FloatAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeUncertaintyAttribute(
        FloatAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeUncertaintyAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMeasurementUnitAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMeasurementUnitAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMeasurementUnitAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMeasurementMediumAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 9L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMeasurementMediumAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMeasurementMediumAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readLevelValueAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 10L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeLevelValueAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeLevelValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeMeasuredValueAttribute(long chipClusterPtr, MeasuredValueAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMinMeasuredValueAttribute(long chipClusterPtr, MinMeasuredValueAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMaxMeasuredValueAttribute(long chipClusterPtr, MaxMeasuredValueAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribePeakMeasuredValueAttribute(long chipClusterPtr, PeakMeasuredValueAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribePeakMeasuredValueWindowAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAverageMeasuredValueAttribute(long chipClusterPtr, AverageMeasuredValueAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAverageMeasuredValueWindowAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeUncertaintyAttribute(long chipClusterPtr, FloatAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMeasurementUnitAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMeasurementMediumAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeLevelValueAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class NitrogenDioxideConcentrationMeasurementCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1043L;

    public NitrogenDioxideConcentrationMeasurementCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface MeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface MinMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface MaxMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface PeakMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface AverageMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMeasuredValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMinMeasuredValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMaxMeasuredValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readPeakMeasuredValueAttribute(
        PeakMeasuredValueAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribePeakMeasuredValueAttribute(
        PeakMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePeakMeasuredValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readPeakMeasuredValueWindowAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribePeakMeasuredValueWindowAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePeakMeasuredValueWindowAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAverageMeasuredValueAttribute(
        AverageMeasuredValueAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAverageMeasuredValueAttribute(
        AverageMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAverageMeasuredValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAverageMeasuredValueWindowAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAverageMeasuredValueWindowAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAverageMeasuredValueWindowAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readUncertaintyAttribute(
        FloatAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeUncertaintyAttribute(
        FloatAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeUncertaintyAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMeasurementUnitAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMeasurementUnitAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMeasurementUnitAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMeasurementMediumAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 9L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMeasurementMediumAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMeasurementMediumAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readLevelValueAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 10L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeLevelValueAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeLevelValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeMeasuredValueAttribute(long chipClusterPtr, MeasuredValueAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMinMeasuredValueAttribute(long chipClusterPtr, MinMeasuredValueAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMaxMeasuredValueAttribute(long chipClusterPtr, MaxMeasuredValueAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribePeakMeasuredValueAttribute(long chipClusterPtr, PeakMeasuredValueAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribePeakMeasuredValueWindowAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAverageMeasuredValueAttribute(long chipClusterPtr, AverageMeasuredValueAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAverageMeasuredValueWindowAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeUncertaintyAttribute(long chipClusterPtr, FloatAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMeasurementUnitAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMeasurementMediumAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeLevelValueAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class OzoneConcentrationMeasurementCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1045L;

    public OzoneConcentrationMeasurementCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface MeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface MinMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface MaxMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface PeakMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface AverageMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMeasuredValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMinMeasuredValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMaxMeasuredValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readPeakMeasuredValueAttribute(
        PeakMeasuredValueAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribePeakMeasuredValueAttribute(
        PeakMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePeakMeasuredValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readPeakMeasuredValueWindowAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribePeakMeasuredValueWindowAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePeakMeasuredValueWindowAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAverageMeasuredValueAttribute(
        AverageMeasuredValueAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAverageMeasuredValueAttribute(
        AverageMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAverageMeasuredValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAverageMeasuredValueWindowAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAverageMeasuredValueWindowAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAverageMeasuredValueWindowAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readUncertaintyAttribute(
        FloatAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeUncertaintyAttribute(
        FloatAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeUncertaintyAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMeasurementUnitAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMeasurementUnitAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMeasurementUnitAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMeasurementMediumAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 9L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMeasurementMediumAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMeasurementMediumAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readLevelValueAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 10L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeLevelValueAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeLevelValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeMeasuredValueAttribute(long chipClusterPtr, MeasuredValueAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMinMeasuredValueAttribute(long chipClusterPtr, MinMeasuredValueAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMaxMeasuredValueAttribute(long chipClusterPtr, MaxMeasuredValueAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribePeakMeasuredValueAttribute(long chipClusterPtr, PeakMeasuredValueAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribePeakMeasuredValueWindowAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAverageMeasuredValueAttribute(long chipClusterPtr, AverageMeasuredValueAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAverageMeasuredValueWindowAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeUncertaintyAttribute(long chipClusterPtr, FloatAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMeasurementUnitAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMeasurementMediumAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeLevelValueAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class Pm25ConcentrationMeasurementCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1066L;

    public Pm25ConcentrationMeasurementCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface MeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface MinMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface MaxMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface PeakMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface AverageMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMeasuredValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMinMeasuredValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMaxMeasuredValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readPeakMeasuredValueAttribute(
        PeakMeasuredValueAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribePeakMeasuredValueAttribute(
        PeakMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePeakMeasuredValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readPeakMeasuredValueWindowAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribePeakMeasuredValueWindowAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePeakMeasuredValueWindowAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAverageMeasuredValueAttribute(
        AverageMeasuredValueAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAverageMeasuredValueAttribute(
        AverageMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAverageMeasuredValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAverageMeasuredValueWindowAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAverageMeasuredValueWindowAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAverageMeasuredValueWindowAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readUncertaintyAttribute(
        FloatAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeUncertaintyAttribute(
        FloatAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeUncertaintyAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMeasurementUnitAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMeasurementUnitAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMeasurementUnitAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMeasurementMediumAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 9L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMeasurementMediumAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMeasurementMediumAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readLevelValueAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 10L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeLevelValueAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeLevelValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeMeasuredValueAttribute(long chipClusterPtr, MeasuredValueAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMinMeasuredValueAttribute(long chipClusterPtr, MinMeasuredValueAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMaxMeasuredValueAttribute(long chipClusterPtr, MaxMeasuredValueAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribePeakMeasuredValueAttribute(long chipClusterPtr, PeakMeasuredValueAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribePeakMeasuredValueWindowAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAverageMeasuredValueAttribute(long chipClusterPtr, AverageMeasuredValueAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAverageMeasuredValueWindowAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeUncertaintyAttribute(long chipClusterPtr, FloatAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMeasurementUnitAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMeasurementMediumAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeLevelValueAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class FormaldehydeConcentrationMeasurementCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1067L;

    public FormaldehydeConcentrationMeasurementCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface MeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface MinMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface MaxMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface PeakMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface AverageMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMeasuredValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMinMeasuredValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMaxMeasuredValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readPeakMeasuredValueAttribute(
        PeakMeasuredValueAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribePeakMeasuredValueAttribute(
        PeakMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePeakMeasuredValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readPeakMeasuredValueWindowAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribePeakMeasuredValueWindowAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePeakMeasuredValueWindowAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAverageMeasuredValueAttribute(
        AverageMeasuredValueAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAverageMeasuredValueAttribute(
        AverageMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAverageMeasuredValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAverageMeasuredValueWindowAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAverageMeasuredValueWindowAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAverageMeasuredValueWindowAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readUncertaintyAttribute(
        FloatAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeUncertaintyAttribute(
        FloatAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeUncertaintyAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMeasurementUnitAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMeasurementUnitAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMeasurementUnitAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMeasurementMediumAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 9L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMeasurementMediumAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMeasurementMediumAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readLevelValueAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 10L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeLevelValueAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeLevelValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeMeasuredValueAttribute(long chipClusterPtr, MeasuredValueAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMinMeasuredValueAttribute(long chipClusterPtr, MinMeasuredValueAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMaxMeasuredValueAttribute(long chipClusterPtr, MaxMeasuredValueAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribePeakMeasuredValueAttribute(long chipClusterPtr, PeakMeasuredValueAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribePeakMeasuredValueWindowAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAverageMeasuredValueAttribute(long chipClusterPtr, AverageMeasuredValueAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAverageMeasuredValueWindowAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeUncertaintyAttribute(long chipClusterPtr, FloatAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMeasurementUnitAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMeasurementMediumAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeLevelValueAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class Pm1ConcentrationMeasurementCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1068L;

    public Pm1ConcentrationMeasurementCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface MeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface MinMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface MaxMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface PeakMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface AverageMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMeasuredValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMinMeasuredValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMaxMeasuredValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readPeakMeasuredValueAttribute(
        PeakMeasuredValueAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribePeakMeasuredValueAttribute(
        PeakMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePeakMeasuredValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readPeakMeasuredValueWindowAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribePeakMeasuredValueWindowAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePeakMeasuredValueWindowAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAverageMeasuredValueAttribute(
        AverageMeasuredValueAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAverageMeasuredValueAttribute(
        AverageMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAverageMeasuredValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAverageMeasuredValueWindowAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAverageMeasuredValueWindowAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAverageMeasuredValueWindowAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readUncertaintyAttribute(
        FloatAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeUncertaintyAttribute(
        FloatAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeUncertaintyAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMeasurementUnitAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMeasurementUnitAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMeasurementUnitAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMeasurementMediumAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 9L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMeasurementMediumAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMeasurementMediumAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readLevelValueAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 10L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeLevelValueAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeLevelValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeMeasuredValueAttribute(long chipClusterPtr, MeasuredValueAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMinMeasuredValueAttribute(long chipClusterPtr, MinMeasuredValueAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMaxMeasuredValueAttribute(long chipClusterPtr, MaxMeasuredValueAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribePeakMeasuredValueAttribute(long chipClusterPtr, PeakMeasuredValueAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribePeakMeasuredValueWindowAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAverageMeasuredValueAttribute(long chipClusterPtr, AverageMeasuredValueAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAverageMeasuredValueWindowAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeUncertaintyAttribute(long chipClusterPtr, FloatAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMeasurementUnitAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMeasurementMediumAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeLevelValueAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class Pm10ConcentrationMeasurementCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1069L;

    public Pm10ConcentrationMeasurementCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface MeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface MinMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface MaxMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface PeakMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface AverageMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMeasuredValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMinMeasuredValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMaxMeasuredValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readPeakMeasuredValueAttribute(
        PeakMeasuredValueAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribePeakMeasuredValueAttribute(
        PeakMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePeakMeasuredValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readPeakMeasuredValueWindowAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribePeakMeasuredValueWindowAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePeakMeasuredValueWindowAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAverageMeasuredValueAttribute(
        AverageMeasuredValueAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAverageMeasuredValueAttribute(
        AverageMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAverageMeasuredValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAverageMeasuredValueWindowAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAverageMeasuredValueWindowAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAverageMeasuredValueWindowAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readUncertaintyAttribute(
        FloatAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeUncertaintyAttribute(
        FloatAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeUncertaintyAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMeasurementUnitAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMeasurementUnitAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMeasurementUnitAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMeasurementMediumAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 9L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMeasurementMediumAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMeasurementMediumAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readLevelValueAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 10L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeLevelValueAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeLevelValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeMeasuredValueAttribute(long chipClusterPtr, MeasuredValueAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMinMeasuredValueAttribute(long chipClusterPtr, MinMeasuredValueAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMaxMeasuredValueAttribute(long chipClusterPtr, MaxMeasuredValueAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribePeakMeasuredValueAttribute(long chipClusterPtr, PeakMeasuredValueAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribePeakMeasuredValueWindowAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAverageMeasuredValueAttribute(long chipClusterPtr, AverageMeasuredValueAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAverageMeasuredValueWindowAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeUncertaintyAttribute(long chipClusterPtr, FloatAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMeasurementUnitAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMeasurementMediumAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeLevelValueAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class TotalVolatileOrganicCompoundsConcentrationMeasurementCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1070L;

    public TotalVolatileOrganicCompoundsConcentrationMeasurementCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface MeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface MinMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface MaxMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface PeakMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface AverageMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMeasuredValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMinMeasuredValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMaxMeasuredValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readPeakMeasuredValueAttribute(
        PeakMeasuredValueAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribePeakMeasuredValueAttribute(
        PeakMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePeakMeasuredValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readPeakMeasuredValueWindowAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribePeakMeasuredValueWindowAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePeakMeasuredValueWindowAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAverageMeasuredValueAttribute(
        AverageMeasuredValueAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAverageMeasuredValueAttribute(
        AverageMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAverageMeasuredValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAverageMeasuredValueWindowAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAverageMeasuredValueWindowAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAverageMeasuredValueWindowAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readUncertaintyAttribute(
        FloatAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeUncertaintyAttribute(
        FloatAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeUncertaintyAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMeasurementUnitAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMeasurementUnitAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMeasurementUnitAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMeasurementMediumAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 9L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMeasurementMediumAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMeasurementMediumAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readLevelValueAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 10L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeLevelValueAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeLevelValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeMeasuredValueAttribute(long chipClusterPtr, MeasuredValueAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMinMeasuredValueAttribute(long chipClusterPtr, MinMeasuredValueAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMaxMeasuredValueAttribute(long chipClusterPtr, MaxMeasuredValueAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribePeakMeasuredValueAttribute(long chipClusterPtr, PeakMeasuredValueAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribePeakMeasuredValueWindowAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAverageMeasuredValueAttribute(long chipClusterPtr, AverageMeasuredValueAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAverageMeasuredValueWindowAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeUncertaintyAttribute(long chipClusterPtr, FloatAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMeasurementUnitAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMeasurementMediumAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeLevelValueAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class RadonConcentrationMeasurementCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1071L;

    public RadonConcentrationMeasurementCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface MeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface MinMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface MaxMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface PeakMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface AverageMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMeasuredValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMinMeasuredValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMaxMeasuredValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readPeakMeasuredValueAttribute(
        PeakMeasuredValueAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribePeakMeasuredValueAttribute(
        PeakMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePeakMeasuredValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readPeakMeasuredValueWindowAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribePeakMeasuredValueWindowAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePeakMeasuredValueWindowAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAverageMeasuredValueAttribute(
        AverageMeasuredValueAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAverageMeasuredValueAttribute(
        AverageMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAverageMeasuredValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAverageMeasuredValueWindowAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAverageMeasuredValueWindowAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAverageMeasuredValueWindowAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readUncertaintyAttribute(
        FloatAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeUncertaintyAttribute(
        FloatAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeUncertaintyAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMeasurementUnitAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMeasurementUnitAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMeasurementUnitAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMeasurementMediumAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 9L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMeasurementMediumAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMeasurementMediumAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readLevelValueAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 10L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeLevelValueAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeLevelValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeMeasuredValueAttribute(long chipClusterPtr, MeasuredValueAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMinMeasuredValueAttribute(long chipClusterPtr, MinMeasuredValueAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMaxMeasuredValueAttribute(long chipClusterPtr, MaxMeasuredValueAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribePeakMeasuredValueAttribute(long chipClusterPtr, PeakMeasuredValueAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribePeakMeasuredValueWindowAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAverageMeasuredValueAttribute(long chipClusterPtr, AverageMeasuredValueAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAverageMeasuredValueWindowAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeUncertaintyAttribute(long chipClusterPtr, FloatAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMeasurementUnitAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMeasurementMediumAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeLevelValueAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class WakeOnLanCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1283L;

    public WakeOnLanCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readMACAddressAttribute(
        CharStringAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMACAddressAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMACAddressAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeMACAddressAttribute(long chipClusterPtr, CharStringAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class ChannelCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1284L;

    public ChannelCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void changeChannel(ChangeChannelResponseCallback callback, String match) {
      changeChannel(chipClusterPtr, callback, match, null);
    }

    public void changeChannel(ChangeChannelResponseCallback callback, String match, int timedInvokeTimeoutMs) {
      changeChannel(chipClusterPtr, callback, match, timedInvokeTimeoutMs);
    }

    public void changeChannelByNumber(DefaultClusterCallback callback, Integer majorNumber, Integer minorNumber) {
      changeChannelByNumber(chipClusterPtr, callback, majorNumber, minorNumber, null);
    }

    public void changeChannelByNumber(DefaultClusterCallback callback, Integer majorNumber, Integer minorNumber, int timedInvokeTimeoutMs) {
      changeChannelByNumber(chipClusterPtr, callback, majorNumber, minorNumber, timedInvokeTimeoutMs);
    }

    public void skipChannel(DefaultClusterCallback callback, Integer count) {
      skipChannel(chipClusterPtr, callback, count, null);
    }

    public void skipChannel(DefaultClusterCallback callback, Integer count, int timedInvokeTimeoutMs) {
      skipChannel(chipClusterPtr, callback, count, timedInvokeTimeoutMs);
    }

    private native void changeChannel(long chipClusterPtr, ChangeChannelResponseCallback callback, String match, @Nullable Integer timedInvokeTimeoutMs);

    private native void changeChannelByNumber(long chipClusterPtr, DefaultClusterCallback callback, Integer majorNumber, Integer minorNumber, @Nullable Integer timedInvokeTimeoutMs);

    private native void skipChannel(long chipClusterPtr, DefaultClusterCallback callback, Integer count, @Nullable Integer timedInvokeTimeoutMs);

    public interface ChangeChannelResponseCallback {
      void onSuccess(Integer status, Optional<String> data);
      void onError(Exception error);
    }

    public interface ChannelListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.ChannelClusterChannelInfoStruct> value);
    }

    public interface LineupAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable ChipStructs.ChannelClusterLineupInfoStruct value);
    }

    public interface CurrentChannelAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable ChipStructs.ChannelClusterChannelInfoStruct value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readChannelListAttribute(
        ChannelListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.ChannelClusterChannelInfoStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeChannelListAttribute(
        ChannelListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeChannelListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readLineupAttribute(
        LineupAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable ChipStructs.ChannelClusterLineupInfoStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeLineupAttribute(
        LineupAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeLineupAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readCurrentChannelAttribute(
        CurrentChannelAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable ChipStructs.ChannelClusterChannelInfoStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeCurrentChannelAttribute(
        CurrentChannelAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeCurrentChannelAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeChannelListAttribute(long chipClusterPtr, ChannelListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeLineupAttribute(long chipClusterPtr, LineupAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeCurrentChannelAttribute(long chipClusterPtr, CurrentChannelAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class TargetNavigatorCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1285L;

    public TargetNavigatorCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void navigateTarget(NavigateTargetResponseCallback callback, Integer target, Optional<String> data) {
      navigateTarget(chipClusterPtr, callback, target, data, null);
    }

    public void navigateTarget(NavigateTargetResponseCallback callback, Integer target, Optional<String> data, int timedInvokeTimeoutMs) {
      navigateTarget(chipClusterPtr, callback, target, data, timedInvokeTimeoutMs);
    }

    private native void navigateTarget(long chipClusterPtr, NavigateTargetResponseCallback callback, Integer target, Optional<String> data, @Nullable Integer timedInvokeTimeoutMs);

    public interface NavigateTargetResponseCallback {
      void onSuccess(Integer status, Optional<String> data);
      void onError(Exception error);
    }

    public interface TargetListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.TargetNavigatorClusterTargetInfoStruct> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readTargetListAttribute(
        TargetListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.TargetNavigatorClusterTargetInfoStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeTargetListAttribute(
        TargetListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeTargetListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readCurrentTargetAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeCurrentTargetAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeCurrentTargetAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeTargetListAttribute(long chipClusterPtr, TargetListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeCurrentTargetAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class MediaPlaybackCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1286L;

    public MediaPlaybackCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void play(PlaybackResponseCallback callback) {
      play(chipClusterPtr, callback, null);
    }

    public void play(PlaybackResponseCallback callback, int timedInvokeTimeoutMs) {
      play(chipClusterPtr, callback, timedInvokeTimeoutMs);
    }

    public void pause(PlaybackResponseCallback callback) {
      pause(chipClusterPtr, callback, null);
    }

    public void pause(PlaybackResponseCallback callback, int timedInvokeTimeoutMs) {
      pause(chipClusterPtr, callback, timedInvokeTimeoutMs);
    }

    public void stop(PlaybackResponseCallback callback) {
      stop(chipClusterPtr, callback, null);
    }

    public void stop(PlaybackResponseCallback callback, int timedInvokeTimeoutMs) {
      stop(chipClusterPtr, callback, timedInvokeTimeoutMs);
    }

    public void startOver(PlaybackResponseCallback callback) {
      startOver(chipClusterPtr, callback, null);
    }

    public void startOver(PlaybackResponseCallback callback, int timedInvokeTimeoutMs) {
      startOver(chipClusterPtr, callback, timedInvokeTimeoutMs);
    }

    public void previous(PlaybackResponseCallback callback) {
      previous(chipClusterPtr, callback, null);
    }

    public void previous(PlaybackResponseCallback callback, int timedInvokeTimeoutMs) {
      previous(chipClusterPtr, callback, timedInvokeTimeoutMs);
    }

    public void next(PlaybackResponseCallback callback) {
      next(chipClusterPtr, callback, null);
    }

    public void next(PlaybackResponseCallback callback, int timedInvokeTimeoutMs) {
      next(chipClusterPtr, callback, timedInvokeTimeoutMs);
    }

    public void rewind(PlaybackResponseCallback callback) {
      rewind(chipClusterPtr, callback, null);
    }

    public void rewind(PlaybackResponseCallback callback, int timedInvokeTimeoutMs) {
      rewind(chipClusterPtr, callback, timedInvokeTimeoutMs);
    }

    public void fastForward(PlaybackResponseCallback callback) {
      fastForward(chipClusterPtr, callback, null);
    }

    public void fastForward(PlaybackResponseCallback callback, int timedInvokeTimeoutMs) {
      fastForward(chipClusterPtr, callback, timedInvokeTimeoutMs);
    }

    public void skipForward(PlaybackResponseCallback callback, Long deltaPositionMilliseconds) {
      skipForward(chipClusterPtr, callback, deltaPositionMilliseconds, null);
    }

    public void skipForward(PlaybackResponseCallback callback, Long deltaPositionMilliseconds, int timedInvokeTimeoutMs) {
      skipForward(chipClusterPtr, callback, deltaPositionMilliseconds, timedInvokeTimeoutMs);
    }

    public void skipBackward(PlaybackResponseCallback callback, Long deltaPositionMilliseconds) {
      skipBackward(chipClusterPtr, callback, deltaPositionMilliseconds, null);
    }

    public void skipBackward(PlaybackResponseCallback callback, Long deltaPositionMilliseconds, int timedInvokeTimeoutMs) {
      skipBackward(chipClusterPtr, callback, deltaPositionMilliseconds, timedInvokeTimeoutMs);
    }

    public void seek(PlaybackResponseCallback callback, Long position) {
      seek(chipClusterPtr, callback, position, null);
    }

    public void seek(PlaybackResponseCallback callback, Long position, int timedInvokeTimeoutMs) {
      seek(chipClusterPtr, callback, position, timedInvokeTimeoutMs);
    }

    private native void play(long chipClusterPtr, PlaybackResponseCallback callback, @Nullable Integer timedInvokeTimeoutMs);

    private native void pause(long chipClusterPtr, PlaybackResponseCallback callback, @Nullable Integer timedInvokeTimeoutMs);

    private native void stop(long chipClusterPtr, PlaybackResponseCallback callback, @Nullable Integer timedInvokeTimeoutMs);

    private native void startOver(long chipClusterPtr, PlaybackResponseCallback callback, @Nullable Integer timedInvokeTimeoutMs);

    private native void previous(long chipClusterPtr, PlaybackResponseCallback callback, @Nullable Integer timedInvokeTimeoutMs);

    private native void next(long chipClusterPtr, PlaybackResponseCallback callback, @Nullable Integer timedInvokeTimeoutMs);

    private native void rewind(long chipClusterPtr, PlaybackResponseCallback callback, @Nullable Integer timedInvokeTimeoutMs);

    private native void fastForward(long chipClusterPtr, PlaybackResponseCallback callback, @Nullable Integer timedInvokeTimeoutMs);

    private native void skipForward(long chipClusterPtr, PlaybackResponseCallback callback, Long deltaPositionMilliseconds, @Nullable Integer timedInvokeTimeoutMs);

    private native void skipBackward(long chipClusterPtr, PlaybackResponseCallback callback, Long deltaPositionMilliseconds, @Nullable Integer timedInvokeTimeoutMs);

    private native void seek(long chipClusterPtr, PlaybackResponseCallback callback, Long position, @Nullable Integer timedInvokeTimeoutMs);

    public interface PlaybackResponseCallback {
      void onSuccess(Integer status, Optional<String> data);
      void onError(Exception error);
    }

    public interface StartTimeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface DurationAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface SampledPositionAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable ChipStructs.MediaPlaybackClusterPlaybackPositionStruct value);
    }

    public interface SeekRangeEndAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface SeekRangeStartAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readCurrentStateAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeCurrentStateAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeCurrentStateAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readStartTimeAttribute(
        StartTimeAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeStartTimeAttribute(
        StartTimeAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeStartTimeAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readDurationAttribute(
        DurationAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeDurationAttribute(
        DurationAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeDurationAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readSampledPositionAttribute(
        SampledPositionAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable ChipStructs.MediaPlaybackClusterPlaybackPositionStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeSampledPositionAttribute(
        SampledPositionAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeSampledPositionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readPlaybackSpeedAttribute(
        FloatAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribePlaybackSpeedAttribute(
        FloatAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePlaybackSpeedAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readSeekRangeEndAttribute(
        SeekRangeEndAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeSeekRangeEndAttribute(
        SeekRangeEndAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeSeekRangeEndAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readSeekRangeStartAttribute(
        SeekRangeStartAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeSeekRangeStartAttribute(
        SeekRangeStartAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeSeekRangeStartAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeCurrentStateAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeStartTimeAttribute(long chipClusterPtr, StartTimeAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeDurationAttribute(long chipClusterPtr, DurationAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeSampledPositionAttribute(long chipClusterPtr, SampledPositionAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribePlaybackSpeedAttribute(long chipClusterPtr, FloatAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeSeekRangeEndAttribute(long chipClusterPtr, SeekRangeEndAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeSeekRangeStartAttribute(long chipClusterPtr, SeekRangeStartAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class MediaInputCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1287L;

    public MediaInputCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void selectInput(DefaultClusterCallback callback, Integer index) {
      selectInput(chipClusterPtr, callback, index, null);
    }

    public void selectInput(DefaultClusterCallback callback, Integer index, int timedInvokeTimeoutMs) {
      selectInput(chipClusterPtr, callback, index, timedInvokeTimeoutMs);
    }

    public void showInputStatus(DefaultClusterCallback callback) {
      showInputStatus(chipClusterPtr, callback, null);
    }

    public void showInputStatus(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      showInputStatus(chipClusterPtr, callback, timedInvokeTimeoutMs);
    }

    public void hideInputStatus(DefaultClusterCallback callback) {
      hideInputStatus(chipClusterPtr, callback, null);
    }

    public void hideInputStatus(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      hideInputStatus(chipClusterPtr, callback, timedInvokeTimeoutMs);
    }

    public void renameInput(DefaultClusterCallback callback, Integer index, String name) {
      renameInput(chipClusterPtr, callback, index, name, null);
    }

    public void renameInput(DefaultClusterCallback callback, Integer index, String name, int timedInvokeTimeoutMs) {
      renameInput(chipClusterPtr, callback, index, name, timedInvokeTimeoutMs);
    }

    private native void selectInput(long chipClusterPtr, DefaultClusterCallback callback, Integer index, @Nullable Integer timedInvokeTimeoutMs);

    private native void showInputStatus(long chipClusterPtr, DefaultClusterCallback callback, @Nullable Integer timedInvokeTimeoutMs);

    private native void hideInputStatus(long chipClusterPtr, DefaultClusterCallback callback, @Nullable Integer timedInvokeTimeoutMs);

    private native void renameInput(long chipClusterPtr, DefaultClusterCallback callback, Integer index, String name, @Nullable Integer timedInvokeTimeoutMs);

    public interface InputListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.MediaInputClusterInputInfoStruct> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readInputListAttribute(
        InputListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.MediaInputClusterInputInfoStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeInputListAttribute(
        InputListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeInputListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readCurrentInputAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeCurrentInputAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeCurrentInputAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeInputListAttribute(long chipClusterPtr, InputListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeCurrentInputAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class LowPowerCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1288L;

    public LowPowerCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void sleep(DefaultClusterCallback callback) {
      sleep(chipClusterPtr, callback, null);
    }

    public void sleep(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      sleep(chipClusterPtr, callback, timedInvokeTimeoutMs);
    }

    private native void sleep(long chipClusterPtr, DefaultClusterCallback callback, @Nullable Integer timedInvokeTimeoutMs);

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class KeypadInputCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1289L;

    public KeypadInputCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void sendKey(SendKeyResponseCallback callback, Integer keyCode) {
      sendKey(chipClusterPtr, callback, keyCode, null);
    }

    public void sendKey(SendKeyResponseCallback callback, Integer keyCode, int timedInvokeTimeoutMs) {
      sendKey(chipClusterPtr, callback, keyCode, timedInvokeTimeoutMs);
    }

    private native void sendKey(long chipClusterPtr, SendKeyResponseCallback callback, Integer keyCode, @Nullable Integer timedInvokeTimeoutMs);

    public interface SendKeyResponseCallback {
      void onSuccess(Integer status);
      void onError(Exception error);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class ContentLauncherCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1290L;

    public ContentLauncherCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void launchContent(LauncherResponseCallback callback, ChipStructs.ContentLauncherClusterContentSearchStruct search, Boolean autoPlay, Optional<String> data) {
      launchContent(chipClusterPtr, callback, search, autoPlay, data, null);
    }

    public void launchContent(LauncherResponseCallback callback, ChipStructs.ContentLauncherClusterContentSearchStruct search, Boolean autoPlay, Optional<String> data, int timedInvokeTimeoutMs) {
      launchContent(chipClusterPtr, callback, search, autoPlay, data, timedInvokeTimeoutMs);
    }

    public void launchURL(LauncherResponseCallback callback, String contentURL, Optional<String> displayString, Optional<ChipStructs.ContentLauncherClusterBrandingInformationStruct> brandingInformation) {
      launchURL(chipClusterPtr, callback, contentURL, displayString, brandingInformation, null);
    }

    public void launchURL(LauncherResponseCallback callback, String contentURL, Optional<String> displayString, Optional<ChipStructs.ContentLauncherClusterBrandingInformationStruct> brandingInformation, int timedInvokeTimeoutMs) {
      launchURL(chipClusterPtr, callback, contentURL, displayString, brandingInformation, timedInvokeTimeoutMs);
    }

    private native void launchContent(long chipClusterPtr, LauncherResponseCallback callback, ChipStructs.ContentLauncherClusterContentSearchStruct search, Boolean autoPlay, Optional<String> data, @Nullable Integer timedInvokeTimeoutMs);

    private native void launchURL(long chipClusterPtr, LauncherResponseCallback callback, String contentURL, Optional<String> displayString, Optional<ChipStructs.ContentLauncherClusterBrandingInformationStruct> brandingInformation, @Nullable Integer timedInvokeTimeoutMs);

    public interface LauncherResponseCallback {
      void onSuccess(Integer status, Optional<String> data);
      void onError(Exception error);
    }

    public interface AcceptHeaderAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<String> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readAcceptHeaderAttribute(
        AcceptHeaderAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<String> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptHeaderAttribute(
        AcceptHeaderAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptHeaderAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readSupportedStreamingProtocolsAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeSupportedStreamingProtocolsAttribute(DefaultClusterCallback callback, Long value) {
        writeSupportedStreamingProtocolsAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeSupportedStreamingProtocolsAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
        writeSupportedStreamingProtocolsAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeSupportedStreamingProtocolsAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeSupportedStreamingProtocolsAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeAcceptHeaderAttribute(long chipClusterPtr, AcceptHeaderAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeSupportedStreamingProtocolsAttribute(long chipClusterPtr, DefaultClusterCallback callback, Long value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeSupportedStreamingProtocolsAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class AudioOutputCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1291L;

    public AudioOutputCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void selectOutput(DefaultClusterCallback callback, Integer index) {
      selectOutput(chipClusterPtr, callback, index, null);
    }

    public void selectOutput(DefaultClusterCallback callback, Integer index, int timedInvokeTimeoutMs) {
      selectOutput(chipClusterPtr, callback, index, timedInvokeTimeoutMs);
    }

    public void renameOutput(DefaultClusterCallback callback, Integer index, String name) {
      renameOutput(chipClusterPtr, callback, index, name, null);
    }

    public void renameOutput(DefaultClusterCallback callback, Integer index, String name, int timedInvokeTimeoutMs) {
      renameOutput(chipClusterPtr, callback, index, name, timedInvokeTimeoutMs);
    }

    private native void selectOutput(long chipClusterPtr, DefaultClusterCallback callback, Integer index, @Nullable Integer timedInvokeTimeoutMs);

    private native void renameOutput(long chipClusterPtr, DefaultClusterCallback callback, Integer index, String name, @Nullable Integer timedInvokeTimeoutMs);

    public interface OutputListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.AudioOutputClusterOutputInfoStruct> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readOutputListAttribute(
        OutputListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.AudioOutputClusterOutputInfoStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeOutputListAttribute(
        OutputListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeOutputListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readCurrentOutputAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeCurrentOutputAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeCurrentOutputAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeOutputListAttribute(long chipClusterPtr, OutputListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeCurrentOutputAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class ApplicationLauncherCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1292L;

    public ApplicationLauncherCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void launchApp(LauncherResponseCallback callback, Optional<ChipStructs.ApplicationLauncherClusterApplicationStruct> application, Optional<byte[]> data) {
      launchApp(chipClusterPtr, callback, application, data, null);
    }

    public void launchApp(LauncherResponseCallback callback, Optional<ChipStructs.ApplicationLauncherClusterApplicationStruct> application, Optional<byte[]> data, int timedInvokeTimeoutMs) {
      launchApp(chipClusterPtr, callback, application, data, timedInvokeTimeoutMs);
    }

    public void stopApp(LauncherResponseCallback callback, Optional<ChipStructs.ApplicationLauncherClusterApplicationStruct> application) {
      stopApp(chipClusterPtr, callback, application, null);
    }

    public void stopApp(LauncherResponseCallback callback, Optional<ChipStructs.ApplicationLauncherClusterApplicationStruct> application, int timedInvokeTimeoutMs) {
      stopApp(chipClusterPtr, callback, application, timedInvokeTimeoutMs);
    }

    public void hideApp(LauncherResponseCallback callback, Optional<ChipStructs.ApplicationLauncherClusterApplicationStruct> application) {
      hideApp(chipClusterPtr, callback, application, null);
    }

    public void hideApp(LauncherResponseCallback callback, Optional<ChipStructs.ApplicationLauncherClusterApplicationStruct> application, int timedInvokeTimeoutMs) {
      hideApp(chipClusterPtr, callback, application, timedInvokeTimeoutMs);
    }

    private native void launchApp(long chipClusterPtr, LauncherResponseCallback callback, Optional<ChipStructs.ApplicationLauncherClusterApplicationStruct> application, Optional<byte[]> data, @Nullable Integer timedInvokeTimeoutMs);

    private native void stopApp(long chipClusterPtr, LauncherResponseCallback callback, Optional<ChipStructs.ApplicationLauncherClusterApplicationStruct> application, @Nullable Integer timedInvokeTimeoutMs);

    private native void hideApp(long chipClusterPtr, LauncherResponseCallback callback, Optional<ChipStructs.ApplicationLauncherClusterApplicationStruct> application, @Nullable Integer timedInvokeTimeoutMs);

    public interface LauncherResponseCallback {
      void onSuccess(Integer status, Optional<byte[]> data);
      void onError(Exception error);
    }

    public interface CatalogListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Integer> value);
    }

    public interface CurrentAppAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable ChipStructs.ApplicationLauncherClusterApplicationEPStruct value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readCatalogListAttribute(
        CatalogListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeCatalogListAttribute(
        CatalogListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeCatalogListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readCurrentAppAttribute(
        CurrentAppAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable ChipStructs.ApplicationLauncherClusterApplicationEPStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeCurrentAppAttribute(DefaultClusterCallback callback, ChipStructs.ApplicationLauncherClusterApplicationEPStruct value) {
        writeCurrentAppAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeCurrentAppAttribute(DefaultClusterCallback callback, ChipStructs.ApplicationLauncherClusterApplicationEPStruct value, int timedWriteTimeoutMs) {
        writeCurrentAppAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeCurrentAppAttribute(
        CurrentAppAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeCurrentAppAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeCatalogListAttribute(long chipClusterPtr, CatalogListAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeCurrentAppAttribute(long chipClusterPtr, DefaultClusterCallback callback, ChipStructs.ApplicationLauncherClusterApplicationEPStruct value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeCurrentAppAttribute(long chipClusterPtr, CurrentAppAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class ApplicationBasicCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1293L;

    public ApplicationBasicCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface ApplicationAttributeCallback extends BaseAttributeCallback {
      void onSuccess(ChipStructs.ApplicationBasicClusterApplicationStruct value);
    }

    public interface AllowedVendorListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Integer> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readVendorNameAttribute(
        CharStringAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeVendorNameAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeVendorNameAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readVendorIDAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeVendorIDAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeVendorIDAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readApplicationNameAttribute(
        CharStringAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeApplicationNameAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeApplicationNameAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readProductIDAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeProductIDAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeProductIDAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readApplicationAttribute(
        ApplicationAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            ChipStructs.ApplicationBasicClusterApplicationStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeApplicationAttribute(
        ApplicationAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeApplicationAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readStatusAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeStatusAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeStatusAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readApplicationVersionAttribute(
        CharStringAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeApplicationVersionAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeApplicationVersionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAllowedVendorListAttribute(
        AllowedVendorListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAllowedVendorListAttribute(
        AllowedVendorListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAllowedVendorListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeVendorNameAttribute(long chipClusterPtr, CharStringAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeVendorIDAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeApplicationNameAttribute(long chipClusterPtr, CharStringAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeProductIDAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeApplicationAttribute(long chipClusterPtr, ApplicationAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeStatusAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeApplicationVersionAttribute(long chipClusterPtr, CharStringAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAllowedVendorListAttribute(long chipClusterPtr, AllowedVendorListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class AccountLoginCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1294L;

    public AccountLoginCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);


    public void getSetupPIN(GetSetupPINResponseCallback callback, String tempAccountIdentifier, int timedInvokeTimeoutMs) {
      getSetupPIN(chipClusterPtr, callback, tempAccountIdentifier, timedInvokeTimeoutMs);
    }


    public void login(DefaultClusterCallback callback, String tempAccountIdentifier, String setupPIN, int timedInvokeTimeoutMs) {
      login(chipClusterPtr, callback, tempAccountIdentifier, setupPIN, timedInvokeTimeoutMs);
    }


    public void logout(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      logout(chipClusterPtr, callback, timedInvokeTimeoutMs);
    }

    private native void getSetupPIN(long chipClusterPtr, GetSetupPINResponseCallback callback, String tempAccountIdentifier, @Nullable Integer timedInvokeTimeoutMs);

    private native void login(long chipClusterPtr, DefaultClusterCallback callback, String tempAccountIdentifier, String setupPIN, @Nullable Integer timedInvokeTimeoutMs);

    private native void logout(long chipClusterPtr, DefaultClusterCallback callback, @Nullable Integer timedInvokeTimeoutMs);

    public interface GetSetupPINResponseCallback {
      void onSuccess(String setupPIN);
      void onError(Exception error);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class ElectricalMeasurementCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 2820L;

    public ElectricalMeasurementCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void getProfileInfoCommand(DefaultClusterCallback callback) {
      getProfileInfoCommand(chipClusterPtr, callback, null);
    }

    public void getProfileInfoCommand(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      getProfileInfoCommand(chipClusterPtr, callback, timedInvokeTimeoutMs);
    }

    public void getMeasurementProfileCommand(DefaultClusterCallback callback, Integer attributeId, Long startTime, Integer numberOfIntervals) {
      getMeasurementProfileCommand(chipClusterPtr, callback, attributeId, startTime, numberOfIntervals, null);
    }

    public void getMeasurementProfileCommand(DefaultClusterCallback callback, Integer attributeId, Long startTime, Integer numberOfIntervals, int timedInvokeTimeoutMs) {
      getMeasurementProfileCommand(chipClusterPtr, callback, attributeId, startTime, numberOfIntervals, timedInvokeTimeoutMs);
    }

    private native void getProfileInfoCommand(long chipClusterPtr, DefaultClusterCallback callback, @Nullable Integer timedInvokeTimeoutMs);

    private native void getMeasurementProfileCommand(long chipClusterPtr, DefaultClusterCallback callback, Integer attributeId, Long startTime, Integer numberOfIntervals, @Nullable Integer timedInvokeTimeoutMs);

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readMeasurementTypeAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMeasurementTypeAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMeasurementTypeAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readDcVoltageAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 256L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeDcVoltageAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeDcVoltageAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readDcVoltageMinAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 257L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeDcVoltageMinAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeDcVoltageMinAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readDcVoltageMaxAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 258L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeDcVoltageMaxAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeDcVoltageMaxAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readDcCurrentAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 259L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeDcCurrentAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeDcCurrentAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readDcCurrentMinAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 260L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeDcCurrentMinAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeDcCurrentMinAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readDcCurrentMaxAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 261L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeDcCurrentMaxAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeDcCurrentMaxAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readDcPowerAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 262L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeDcPowerAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeDcPowerAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readDcPowerMinAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 263L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeDcPowerMinAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeDcPowerMinAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readDcPowerMaxAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 264L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeDcPowerMaxAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeDcPowerMaxAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readDcVoltageMultiplierAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 512L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeDcVoltageMultiplierAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeDcVoltageMultiplierAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readDcVoltageDivisorAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 513L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeDcVoltageDivisorAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeDcVoltageDivisorAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readDcCurrentMultiplierAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 514L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeDcCurrentMultiplierAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeDcCurrentMultiplierAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readDcCurrentDivisorAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 515L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeDcCurrentDivisorAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeDcCurrentDivisorAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readDcPowerMultiplierAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 516L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeDcPowerMultiplierAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeDcPowerMultiplierAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readDcPowerDivisorAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 517L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeDcPowerDivisorAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeDcPowerDivisorAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcFrequencyAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 768L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcFrequencyAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcFrequencyAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcFrequencyMinAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 769L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcFrequencyMinAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcFrequencyMinAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcFrequencyMaxAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 770L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcFrequencyMaxAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcFrequencyMaxAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readNeutralCurrentAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 771L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeNeutralCurrentAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeNeutralCurrentAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readTotalActivePowerAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 772L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeTotalActivePowerAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeTotalActivePowerAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readTotalReactivePowerAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 773L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeTotalReactivePowerAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeTotalReactivePowerAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readTotalApparentPowerAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 774L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeTotalApparentPowerAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeTotalApparentPowerAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMeasured1stHarmonicCurrentAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 775L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMeasured1stHarmonicCurrentAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMeasured1stHarmonicCurrentAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMeasured3rdHarmonicCurrentAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 776L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMeasured3rdHarmonicCurrentAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMeasured3rdHarmonicCurrentAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMeasured5thHarmonicCurrentAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 777L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMeasured5thHarmonicCurrentAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMeasured5thHarmonicCurrentAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMeasured7thHarmonicCurrentAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 778L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMeasured7thHarmonicCurrentAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMeasured7thHarmonicCurrentAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMeasured9thHarmonicCurrentAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 779L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMeasured9thHarmonicCurrentAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMeasured9thHarmonicCurrentAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMeasured11thHarmonicCurrentAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 780L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMeasured11thHarmonicCurrentAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMeasured11thHarmonicCurrentAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMeasuredPhase1stHarmonicCurrentAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 781L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMeasuredPhase1stHarmonicCurrentAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMeasuredPhase1stHarmonicCurrentAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMeasuredPhase3rdHarmonicCurrentAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 782L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMeasuredPhase3rdHarmonicCurrentAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMeasuredPhase3rdHarmonicCurrentAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMeasuredPhase5thHarmonicCurrentAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 783L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMeasuredPhase5thHarmonicCurrentAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMeasuredPhase5thHarmonicCurrentAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMeasuredPhase7thHarmonicCurrentAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 784L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMeasuredPhase7thHarmonicCurrentAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMeasuredPhase7thHarmonicCurrentAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMeasuredPhase9thHarmonicCurrentAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 785L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMeasuredPhase9thHarmonicCurrentAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMeasuredPhase9thHarmonicCurrentAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readMeasuredPhase11thHarmonicCurrentAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 786L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeMeasuredPhase11thHarmonicCurrentAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeMeasuredPhase11thHarmonicCurrentAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcFrequencyMultiplierAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1024L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcFrequencyMultiplierAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcFrequencyMultiplierAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcFrequencyDivisorAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1025L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcFrequencyDivisorAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcFrequencyDivisorAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readPowerMultiplierAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1026L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribePowerMultiplierAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePowerMultiplierAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readPowerDivisorAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1027L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribePowerDivisorAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePowerDivisorAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readHarmonicCurrentMultiplierAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1028L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeHarmonicCurrentMultiplierAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeHarmonicCurrentMultiplierAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readPhaseHarmonicCurrentMultiplierAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1029L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribePhaseHarmonicCurrentMultiplierAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePhaseHarmonicCurrentMultiplierAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readInstantaneousVoltageAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1280L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeInstantaneousVoltageAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeInstantaneousVoltageAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readInstantaneousLineCurrentAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1281L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeInstantaneousLineCurrentAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeInstantaneousLineCurrentAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readInstantaneousActiveCurrentAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1282L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeInstantaneousActiveCurrentAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeInstantaneousActiveCurrentAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readInstantaneousReactiveCurrentAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1283L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeInstantaneousReactiveCurrentAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeInstantaneousReactiveCurrentAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readInstantaneousPowerAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1284L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeInstantaneousPowerAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeInstantaneousPowerAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readRmsVoltageAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1285L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeRmsVoltageAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeRmsVoltageAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readRmsVoltageMinAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1286L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeRmsVoltageMinAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeRmsVoltageMinAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readRmsVoltageMaxAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1287L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeRmsVoltageMaxAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeRmsVoltageMaxAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readRmsCurrentAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1288L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeRmsCurrentAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeRmsCurrentAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readRmsCurrentMinAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1289L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeRmsCurrentMinAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeRmsCurrentMinAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readRmsCurrentMaxAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1290L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeRmsCurrentMaxAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeRmsCurrentMaxAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readActivePowerAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1291L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeActivePowerAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeActivePowerAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readActivePowerMinAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1292L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeActivePowerMinAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeActivePowerMinAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readActivePowerMaxAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1293L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeActivePowerMaxAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeActivePowerMaxAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readReactivePowerAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1294L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeReactivePowerAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeReactivePowerAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readApparentPowerAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1295L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeApparentPowerAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeApparentPowerAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readPowerFactorAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1296L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribePowerFactorAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePowerFactorAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAverageRmsVoltageMeasurementPeriodAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1297L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeAverageRmsVoltageMeasurementPeriodAttribute(DefaultClusterCallback callback, Integer value) {
        writeAverageRmsVoltageMeasurementPeriodAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeAverageRmsVoltageMeasurementPeriodAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeAverageRmsVoltageMeasurementPeriodAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeAverageRmsVoltageMeasurementPeriodAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAverageRmsVoltageMeasurementPeriodAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAverageRmsUnderVoltageCounterAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1299L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeAverageRmsUnderVoltageCounterAttribute(DefaultClusterCallback callback, Integer value) {
        writeAverageRmsUnderVoltageCounterAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeAverageRmsUnderVoltageCounterAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeAverageRmsUnderVoltageCounterAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeAverageRmsUnderVoltageCounterAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAverageRmsUnderVoltageCounterAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readRmsExtremeOverVoltagePeriodAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1300L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeRmsExtremeOverVoltagePeriodAttribute(DefaultClusterCallback callback, Integer value) {
        writeRmsExtremeOverVoltagePeriodAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeRmsExtremeOverVoltagePeriodAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeRmsExtremeOverVoltagePeriodAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeRmsExtremeOverVoltagePeriodAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeRmsExtremeOverVoltagePeriodAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readRmsExtremeUnderVoltagePeriodAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1301L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeRmsExtremeUnderVoltagePeriodAttribute(DefaultClusterCallback callback, Integer value) {
        writeRmsExtremeUnderVoltagePeriodAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeRmsExtremeUnderVoltagePeriodAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeRmsExtremeUnderVoltagePeriodAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeRmsExtremeUnderVoltagePeriodAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeRmsExtremeUnderVoltagePeriodAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readRmsVoltageSagPeriodAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1302L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeRmsVoltageSagPeriodAttribute(DefaultClusterCallback callback, Integer value) {
        writeRmsVoltageSagPeriodAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeRmsVoltageSagPeriodAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeRmsVoltageSagPeriodAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeRmsVoltageSagPeriodAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeRmsVoltageSagPeriodAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readRmsVoltageSwellPeriodAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1303L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeRmsVoltageSwellPeriodAttribute(DefaultClusterCallback callback, Integer value) {
        writeRmsVoltageSwellPeriodAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeRmsVoltageSwellPeriodAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeRmsVoltageSwellPeriodAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeRmsVoltageSwellPeriodAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeRmsVoltageSwellPeriodAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcVoltageMultiplierAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1536L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcVoltageMultiplierAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcVoltageMultiplierAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcVoltageDivisorAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1537L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcVoltageDivisorAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcVoltageDivisorAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcCurrentMultiplierAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1538L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcCurrentMultiplierAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcCurrentMultiplierAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcCurrentDivisorAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1539L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcCurrentDivisorAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcCurrentDivisorAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcPowerMultiplierAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1540L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcPowerMultiplierAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcPowerMultiplierAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcPowerDivisorAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1541L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcPowerDivisorAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcPowerDivisorAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readOverloadAlarmsMaskAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1792L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeOverloadAlarmsMaskAttribute(DefaultClusterCallback callback, Integer value) {
        writeOverloadAlarmsMaskAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeOverloadAlarmsMaskAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeOverloadAlarmsMaskAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeOverloadAlarmsMaskAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeOverloadAlarmsMaskAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readVoltageOverloadAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1793L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeVoltageOverloadAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeVoltageOverloadAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readCurrentOverloadAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1794L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeCurrentOverloadAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeCurrentOverloadAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcOverloadAlarmsMaskAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2048L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeAcOverloadAlarmsMaskAttribute(DefaultClusterCallback callback, Integer value) {
        writeAcOverloadAlarmsMaskAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeAcOverloadAlarmsMaskAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeAcOverloadAlarmsMaskAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeAcOverloadAlarmsMaskAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcOverloadAlarmsMaskAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcVoltageOverloadAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2049L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcVoltageOverloadAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcVoltageOverloadAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcCurrentOverloadAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2050L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcCurrentOverloadAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcCurrentOverloadAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcActivePowerOverloadAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2051L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcActivePowerOverloadAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcActivePowerOverloadAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcReactivePowerOverloadAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2052L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcReactivePowerOverloadAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcReactivePowerOverloadAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAverageRmsOverVoltageAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2053L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAverageRmsOverVoltageAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAverageRmsOverVoltageAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAverageRmsUnderVoltageAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2054L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAverageRmsUnderVoltageAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAverageRmsUnderVoltageAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readRmsExtremeOverVoltageAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2055L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeRmsExtremeOverVoltageAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeRmsExtremeOverVoltageAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readRmsExtremeUnderVoltageAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2056L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeRmsExtremeUnderVoltageAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeRmsExtremeUnderVoltageAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readRmsVoltageSagAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2057L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeRmsVoltageSagAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeRmsVoltageSagAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readRmsVoltageSwellAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2058L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeRmsVoltageSwellAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeRmsVoltageSwellAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readLineCurrentPhaseBAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2305L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeLineCurrentPhaseBAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeLineCurrentPhaseBAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readActiveCurrentPhaseBAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2306L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeActiveCurrentPhaseBAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeActiveCurrentPhaseBAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readReactiveCurrentPhaseBAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2307L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeReactiveCurrentPhaseBAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeReactiveCurrentPhaseBAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readRmsVoltagePhaseBAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2309L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeRmsVoltagePhaseBAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeRmsVoltagePhaseBAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readRmsVoltageMinPhaseBAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2310L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeRmsVoltageMinPhaseBAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeRmsVoltageMinPhaseBAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readRmsVoltageMaxPhaseBAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2311L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeRmsVoltageMaxPhaseBAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeRmsVoltageMaxPhaseBAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readRmsCurrentPhaseBAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2312L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeRmsCurrentPhaseBAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeRmsCurrentPhaseBAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readRmsCurrentMinPhaseBAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2313L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeRmsCurrentMinPhaseBAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeRmsCurrentMinPhaseBAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readRmsCurrentMaxPhaseBAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2314L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeRmsCurrentMaxPhaseBAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeRmsCurrentMaxPhaseBAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readActivePowerPhaseBAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2315L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeActivePowerPhaseBAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeActivePowerPhaseBAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readActivePowerMinPhaseBAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2316L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeActivePowerMinPhaseBAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeActivePowerMinPhaseBAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readActivePowerMaxPhaseBAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2317L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeActivePowerMaxPhaseBAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeActivePowerMaxPhaseBAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readReactivePowerPhaseBAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2318L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeReactivePowerPhaseBAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeReactivePowerPhaseBAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readApparentPowerPhaseBAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2319L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeApparentPowerPhaseBAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeApparentPowerPhaseBAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readPowerFactorPhaseBAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2320L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribePowerFactorPhaseBAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePowerFactorPhaseBAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAverageRmsVoltageMeasurementPeriodPhaseBAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2321L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAverageRmsVoltageMeasurementPeriodPhaseBAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAverageRmsVoltageMeasurementPeriodPhaseBAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAverageRmsOverVoltageCounterPhaseBAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2322L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAverageRmsOverVoltageCounterPhaseBAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAverageRmsOverVoltageCounterPhaseBAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAverageRmsUnderVoltageCounterPhaseBAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2323L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAverageRmsUnderVoltageCounterPhaseBAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAverageRmsUnderVoltageCounterPhaseBAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readRmsExtremeOverVoltagePeriodPhaseBAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2324L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeRmsExtremeOverVoltagePeriodPhaseBAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeRmsExtremeOverVoltagePeriodPhaseBAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readRmsExtremeUnderVoltagePeriodPhaseBAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2325L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeRmsExtremeUnderVoltagePeriodPhaseBAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeRmsExtremeUnderVoltagePeriodPhaseBAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readRmsVoltageSagPeriodPhaseBAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2326L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeRmsVoltageSagPeriodPhaseBAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeRmsVoltageSagPeriodPhaseBAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readRmsVoltageSwellPeriodPhaseBAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2327L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeRmsVoltageSwellPeriodPhaseBAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeRmsVoltageSwellPeriodPhaseBAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readLineCurrentPhaseCAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2561L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeLineCurrentPhaseCAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeLineCurrentPhaseCAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readActiveCurrentPhaseCAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2562L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeActiveCurrentPhaseCAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeActiveCurrentPhaseCAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readReactiveCurrentPhaseCAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2563L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeReactiveCurrentPhaseCAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeReactiveCurrentPhaseCAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readRmsVoltagePhaseCAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2565L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeRmsVoltagePhaseCAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeRmsVoltagePhaseCAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readRmsVoltageMinPhaseCAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2566L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeRmsVoltageMinPhaseCAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeRmsVoltageMinPhaseCAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readRmsVoltageMaxPhaseCAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2567L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeRmsVoltageMaxPhaseCAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeRmsVoltageMaxPhaseCAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readRmsCurrentPhaseCAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2568L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeRmsCurrentPhaseCAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeRmsCurrentPhaseCAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readRmsCurrentMinPhaseCAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2569L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeRmsCurrentMinPhaseCAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeRmsCurrentMinPhaseCAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readRmsCurrentMaxPhaseCAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2570L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeRmsCurrentMaxPhaseCAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeRmsCurrentMaxPhaseCAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readActivePowerPhaseCAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2571L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeActivePowerPhaseCAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeActivePowerPhaseCAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readActivePowerMinPhaseCAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2572L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeActivePowerMinPhaseCAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeActivePowerMinPhaseCAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readActivePowerMaxPhaseCAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2573L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeActivePowerMaxPhaseCAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeActivePowerMaxPhaseCAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readReactivePowerPhaseCAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2574L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeReactivePowerPhaseCAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeReactivePowerPhaseCAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readApparentPowerPhaseCAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2575L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeApparentPowerPhaseCAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeApparentPowerPhaseCAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readPowerFactorPhaseCAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2576L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribePowerFactorPhaseCAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribePowerFactorPhaseCAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAverageRmsVoltageMeasurementPeriodPhaseCAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2577L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAverageRmsVoltageMeasurementPeriodPhaseCAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAverageRmsVoltageMeasurementPeriodPhaseCAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAverageRmsOverVoltageCounterPhaseCAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2578L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAverageRmsOverVoltageCounterPhaseCAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAverageRmsOverVoltageCounterPhaseCAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAverageRmsUnderVoltageCounterPhaseCAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2579L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAverageRmsUnderVoltageCounterPhaseCAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAverageRmsUnderVoltageCounterPhaseCAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readRmsExtremeOverVoltagePeriodPhaseCAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2580L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeRmsExtremeOverVoltagePeriodPhaseCAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeRmsExtremeOverVoltagePeriodPhaseCAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readRmsExtremeUnderVoltagePeriodPhaseCAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2581L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeRmsExtremeUnderVoltagePeriodPhaseCAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeRmsExtremeUnderVoltagePeriodPhaseCAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readRmsVoltageSagPeriodPhaseCAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2582L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeRmsVoltageSagPeriodPhaseCAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeRmsVoltageSagPeriodPhaseCAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readRmsVoltageSwellPeriodPhaseCAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2583L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeRmsVoltageSwellPeriodPhaseCAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeRmsVoltageSwellPeriodPhaseCAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeMeasurementTypeAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeDcVoltageAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeDcVoltageMinAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeDcVoltageMaxAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeDcCurrentAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeDcCurrentMinAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeDcCurrentMaxAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeDcPowerAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeDcPowerMinAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeDcPowerMaxAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeDcVoltageMultiplierAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeDcVoltageDivisorAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeDcCurrentMultiplierAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeDcCurrentDivisorAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeDcPowerMultiplierAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeDcPowerDivisorAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcFrequencyAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcFrequencyMinAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcFrequencyMaxAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeNeutralCurrentAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeTotalActivePowerAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeTotalReactivePowerAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeTotalApparentPowerAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMeasured1stHarmonicCurrentAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMeasured3rdHarmonicCurrentAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMeasured5thHarmonicCurrentAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMeasured7thHarmonicCurrentAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMeasured9thHarmonicCurrentAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMeasured11thHarmonicCurrentAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMeasuredPhase1stHarmonicCurrentAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMeasuredPhase3rdHarmonicCurrentAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMeasuredPhase5thHarmonicCurrentAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMeasuredPhase7thHarmonicCurrentAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMeasuredPhase9thHarmonicCurrentAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeMeasuredPhase11thHarmonicCurrentAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcFrequencyMultiplierAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcFrequencyDivisorAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribePowerMultiplierAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribePowerDivisorAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeHarmonicCurrentMultiplierAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribePhaseHarmonicCurrentMultiplierAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeInstantaneousVoltageAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeInstantaneousLineCurrentAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeInstantaneousActiveCurrentAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeInstantaneousReactiveCurrentAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeInstantaneousPowerAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeRmsVoltageAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeRmsVoltageMinAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeRmsVoltageMaxAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeRmsCurrentAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeRmsCurrentMinAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeRmsCurrentMaxAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeActivePowerAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeActivePowerMinAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeActivePowerMaxAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeReactivePowerAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeApparentPowerAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribePowerFactorAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeAverageRmsVoltageMeasurementPeriodAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeAverageRmsVoltageMeasurementPeriodAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeAverageRmsUnderVoltageCounterAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeAverageRmsUnderVoltageCounterAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeRmsExtremeOverVoltagePeriodAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeRmsExtremeOverVoltagePeriodAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeRmsExtremeUnderVoltagePeriodAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeRmsExtremeUnderVoltagePeriodAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeRmsVoltageSagPeriodAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeRmsVoltageSagPeriodAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeRmsVoltageSwellPeriodAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeRmsVoltageSwellPeriodAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcVoltageMultiplierAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcVoltageDivisorAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcCurrentMultiplierAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcCurrentDivisorAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcPowerMultiplierAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcPowerDivisorAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeOverloadAlarmsMaskAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeOverloadAlarmsMaskAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeVoltageOverloadAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeCurrentOverloadAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeAcOverloadAlarmsMaskAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeAcOverloadAlarmsMaskAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcVoltageOverloadAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcCurrentOverloadAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcActivePowerOverloadAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcReactivePowerOverloadAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAverageRmsOverVoltageAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAverageRmsUnderVoltageAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeRmsExtremeOverVoltageAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeRmsExtremeUnderVoltageAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeRmsVoltageSagAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeRmsVoltageSwellAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeLineCurrentPhaseBAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeActiveCurrentPhaseBAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeReactiveCurrentPhaseBAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeRmsVoltagePhaseBAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeRmsVoltageMinPhaseBAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeRmsVoltageMaxPhaseBAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeRmsCurrentPhaseBAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeRmsCurrentMinPhaseBAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeRmsCurrentMaxPhaseBAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeActivePowerPhaseBAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeActivePowerMinPhaseBAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeActivePowerMaxPhaseBAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeReactivePowerPhaseBAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeApparentPowerPhaseBAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribePowerFactorPhaseBAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAverageRmsVoltageMeasurementPeriodPhaseBAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAverageRmsOverVoltageCounterPhaseBAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAverageRmsUnderVoltageCounterPhaseBAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeRmsExtremeOverVoltagePeriodPhaseBAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeRmsExtremeUnderVoltagePeriodPhaseBAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeRmsVoltageSagPeriodPhaseBAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeRmsVoltageSwellPeriodPhaseBAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeLineCurrentPhaseCAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeActiveCurrentPhaseCAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeReactiveCurrentPhaseCAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeRmsVoltagePhaseCAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeRmsVoltageMinPhaseCAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeRmsVoltageMaxPhaseCAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeRmsCurrentPhaseCAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeRmsCurrentMinPhaseCAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeRmsCurrentMaxPhaseCAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeActivePowerPhaseCAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeActivePowerMinPhaseCAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeActivePowerMaxPhaseCAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeReactivePowerPhaseCAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeApparentPowerPhaseCAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribePowerFactorPhaseCAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAverageRmsVoltageMeasurementPeriodPhaseCAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAverageRmsOverVoltageCounterPhaseCAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAverageRmsUnderVoltageCounterPhaseCAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeRmsExtremeOverVoltagePeriodPhaseCAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeRmsExtremeUnderVoltagePeriodPhaseCAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeRmsVoltageSagPeriodPhaseCAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeRmsVoltageSwellPeriodPhaseCAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class UnitTestingCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 4294048773L;

    public UnitTestingCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void test(DefaultClusterCallback callback) {
      test(chipClusterPtr, callback, null);
    }

    public void test(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      test(chipClusterPtr, callback, timedInvokeTimeoutMs);
    }

    public void testNotHandled(DefaultClusterCallback callback) {
      testNotHandled(chipClusterPtr, callback, null);
    }

    public void testNotHandled(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      testNotHandled(chipClusterPtr, callback, timedInvokeTimeoutMs);
    }

    public void testSpecific(TestSpecificResponseCallback callback) {
      testSpecific(chipClusterPtr, callback, null);
    }

    public void testSpecific(TestSpecificResponseCallback callback, int timedInvokeTimeoutMs) {
      testSpecific(chipClusterPtr, callback, timedInvokeTimeoutMs);
    }

    public void testUnknownCommand(DefaultClusterCallback callback) {
      testUnknownCommand(chipClusterPtr, callback, null);
    }

    public void testUnknownCommand(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      testUnknownCommand(chipClusterPtr, callback, timedInvokeTimeoutMs);
    }

    public void testAddArguments(TestAddArgumentsResponseCallback callback, Integer arg1, Integer arg2) {
      testAddArguments(chipClusterPtr, callback, arg1, arg2, null);
    }

    public void testAddArguments(TestAddArgumentsResponseCallback callback, Integer arg1, Integer arg2, int timedInvokeTimeoutMs) {
      testAddArguments(chipClusterPtr, callback, arg1, arg2, timedInvokeTimeoutMs);
    }

    public void testSimpleArgumentRequest(TestSimpleArgumentResponseCallback callback, Boolean arg1) {
      testSimpleArgumentRequest(chipClusterPtr, callback, arg1, null);
    }

    public void testSimpleArgumentRequest(TestSimpleArgumentResponseCallback callback, Boolean arg1, int timedInvokeTimeoutMs) {
      testSimpleArgumentRequest(chipClusterPtr, callback, arg1, timedInvokeTimeoutMs);
    }

    public void testStructArrayArgumentRequest(TestStructArrayArgumentResponseCallback callback, ArrayList<ChipStructs.UnitTestingClusterNestedStructList> arg1, ArrayList<ChipStructs.UnitTestingClusterSimpleStruct> arg2, ArrayList<Integer> arg3, ArrayList<Boolean> arg4, Integer arg5, Boolean arg6) {
      testStructArrayArgumentRequest(chipClusterPtr, callback, arg1, arg2, arg3, arg4, arg5, arg6, null);
    }

    public void testStructArrayArgumentRequest(TestStructArrayArgumentResponseCallback callback, ArrayList<ChipStructs.UnitTestingClusterNestedStructList> arg1, ArrayList<ChipStructs.UnitTestingClusterSimpleStruct> arg2, ArrayList<Integer> arg3, ArrayList<Boolean> arg4, Integer arg5, Boolean arg6, int timedInvokeTimeoutMs) {
      testStructArrayArgumentRequest(chipClusterPtr, callback, arg1, arg2, arg3, arg4, arg5, arg6, timedInvokeTimeoutMs);
    }

    public void testStructArgumentRequest(BooleanResponseCallback callback, ChipStructs.UnitTestingClusterSimpleStruct arg1) {
      testStructArgumentRequest(chipClusterPtr, callback, arg1, null);
    }

    public void testStructArgumentRequest(BooleanResponseCallback callback, ChipStructs.UnitTestingClusterSimpleStruct arg1, int timedInvokeTimeoutMs) {
      testStructArgumentRequest(chipClusterPtr, callback, arg1, timedInvokeTimeoutMs);
    }

    public void testNestedStructArgumentRequest(BooleanResponseCallback callback, ChipStructs.UnitTestingClusterNestedStruct arg1) {
      testNestedStructArgumentRequest(chipClusterPtr, callback, arg1, null);
    }

    public void testNestedStructArgumentRequest(BooleanResponseCallback callback, ChipStructs.UnitTestingClusterNestedStruct arg1, int timedInvokeTimeoutMs) {
      testNestedStructArgumentRequest(chipClusterPtr, callback, arg1, timedInvokeTimeoutMs);
    }

    public void testListStructArgumentRequest(BooleanResponseCallback callback, ArrayList<ChipStructs.UnitTestingClusterSimpleStruct> arg1) {
      testListStructArgumentRequest(chipClusterPtr, callback, arg1, null);
    }

    public void testListStructArgumentRequest(BooleanResponseCallback callback, ArrayList<ChipStructs.UnitTestingClusterSimpleStruct> arg1, int timedInvokeTimeoutMs) {
      testListStructArgumentRequest(chipClusterPtr, callback, arg1, timedInvokeTimeoutMs);
    }

    public void testListInt8UArgumentRequest(BooleanResponseCallback callback, ArrayList<Integer> arg1) {
      testListInt8UArgumentRequest(chipClusterPtr, callback, arg1, null);
    }

    public void testListInt8UArgumentRequest(BooleanResponseCallback callback, ArrayList<Integer> arg1, int timedInvokeTimeoutMs) {
      testListInt8UArgumentRequest(chipClusterPtr, callback, arg1, timedInvokeTimeoutMs);
    }

    public void testNestedStructListArgumentRequest(BooleanResponseCallback callback, ChipStructs.UnitTestingClusterNestedStructList arg1) {
      testNestedStructListArgumentRequest(chipClusterPtr, callback, arg1, null);
    }

    public void testNestedStructListArgumentRequest(BooleanResponseCallback callback, ChipStructs.UnitTestingClusterNestedStructList arg1, int timedInvokeTimeoutMs) {
      testNestedStructListArgumentRequest(chipClusterPtr, callback, arg1, timedInvokeTimeoutMs);
    }

    public void testListNestedStructListArgumentRequest(BooleanResponseCallback callback, ArrayList<ChipStructs.UnitTestingClusterNestedStructList> arg1) {
      testListNestedStructListArgumentRequest(chipClusterPtr, callback, arg1, null);
    }

    public void testListNestedStructListArgumentRequest(BooleanResponseCallback callback, ArrayList<ChipStructs.UnitTestingClusterNestedStructList> arg1, int timedInvokeTimeoutMs) {
      testListNestedStructListArgumentRequest(chipClusterPtr, callback, arg1, timedInvokeTimeoutMs);
    }

    public void testListInt8UReverseRequest(TestListInt8UReverseResponseCallback callback, ArrayList<Integer> arg1) {
      testListInt8UReverseRequest(chipClusterPtr, callback, arg1, null);
    }

    public void testListInt8UReverseRequest(TestListInt8UReverseResponseCallback callback, ArrayList<Integer> arg1, int timedInvokeTimeoutMs) {
      testListInt8UReverseRequest(chipClusterPtr, callback, arg1, timedInvokeTimeoutMs);
    }

    public void testEnumsRequest(TestEnumsResponseCallback callback, Integer arg1, Integer arg2) {
      testEnumsRequest(chipClusterPtr, callback, arg1, arg2, null);
    }

    public void testEnumsRequest(TestEnumsResponseCallback callback, Integer arg1, Integer arg2, int timedInvokeTimeoutMs) {
      testEnumsRequest(chipClusterPtr, callback, arg1, arg2, timedInvokeTimeoutMs);
    }

    public void testNullableOptionalRequest(TestNullableOptionalResponseCallback callback, @Nullable Optional<Integer> arg1) {
      testNullableOptionalRequest(chipClusterPtr, callback, arg1, null);
    }

    public void testNullableOptionalRequest(TestNullableOptionalResponseCallback callback, @Nullable Optional<Integer> arg1, int timedInvokeTimeoutMs) {
      testNullableOptionalRequest(chipClusterPtr, callback, arg1, timedInvokeTimeoutMs);
    }

    public void testComplexNullableOptionalRequest(TestComplexNullableOptionalResponseCallback callback, @Nullable Integer nullableInt, Optional<Integer> optionalInt, @Nullable Optional<Integer> nullableOptionalInt, @Nullable String nullableString, Optional<String> optionalString, @Nullable Optional<String> nullableOptionalString, @Nullable ChipStructs.UnitTestingClusterSimpleStruct nullableStruct, Optional<ChipStructs.UnitTestingClusterSimpleStruct> optionalStruct, @Nullable Optional<ChipStructs.UnitTestingClusterSimpleStruct> nullableOptionalStruct, @Nullable ArrayList<Integer> nullableList, Optional<ArrayList<Integer>> optionalList, @Nullable Optional<ArrayList<Integer>> nullableOptionalList) {
      testComplexNullableOptionalRequest(chipClusterPtr, callback, nullableInt, optionalInt, nullableOptionalInt, nullableString, optionalString, nullableOptionalString, nullableStruct, optionalStruct, nullableOptionalStruct, nullableList, optionalList, nullableOptionalList, null);
    }

    public void testComplexNullableOptionalRequest(TestComplexNullableOptionalResponseCallback callback, @Nullable Integer nullableInt, Optional<Integer> optionalInt, @Nullable Optional<Integer> nullableOptionalInt, @Nullable String nullableString, Optional<String> optionalString, @Nullable Optional<String> nullableOptionalString, @Nullable ChipStructs.UnitTestingClusterSimpleStruct nullableStruct, Optional<ChipStructs.UnitTestingClusterSimpleStruct> optionalStruct, @Nullable Optional<ChipStructs.UnitTestingClusterSimpleStruct> nullableOptionalStruct, @Nullable ArrayList<Integer> nullableList, Optional<ArrayList<Integer>> optionalList, @Nullable Optional<ArrayList<Integer>> nullableOptionalList, int timedInvokeTimeoutMs) {
      testComplexNullableOptionalRequest(chipClusterPtr, callback, nullableInt, optionalInt, nullableOptionalInt, nullableString, optionalString, nullableOptionalString, nullableStruct, optionalStruct, nullableOptionalStruct, nullableList, optionalList, nullableOptionalList, timedInvokeTimeoutMs);
    }

    public void simpleStructEchoRequest(SimpleStructResponseCallback callback, ChipStructs.UnitTestingClusterSimpleStruct arg1) {
      simpleStructEchoRequest(chipClusterPtr, callback, arg1, null);
    }

    public void simpleStructEchoRequest(SimpleStructResponseCallback callback, ChipStructs.UnitTestingClusterSimpleStruct arg1, int timedInvokeTimeoutMs) {
      simpleStructEchoRequest(chipClusterPtr, callback, arg1, timedInvokeTimeoutMs);
    }


    public void timedInvokeRequest(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      timedInvokeRequest(chipClusterPtr, callback, timedInvokeTimeoutMs);
    }

    public void testSimpleOptionalArgumentRequest(DefaultClusterCallback callback, Optional<Boolean> arg1) {
      testSimpleOptionalArgumentRequest(chipClusterPtr, callback, arg1, null);
    }

    public void testSimpleOptionalArgumentRequest(DefaultClusterCallback callback, Optional<Boolean> arg1, int timedInvokeTimeoutMs) {
      testSimpleOptionalArgumentRequest(chipClusterPtr, callback, arg1, timedInvokeTimeoutMs);
    }

    public void testEmitTestEventRequest(TestEmitTestEventResponseCallback callback, Integer arg1, Integer arg2, Boolean arg3) {
      testEmitTestEventRequest(chipClusterPtr, callback, arg1, arg2, arg3, null);
    }

    public void testEmitTestEventRequest(TestEmitTestEventResponseCallback callback, Integer arg1, Integer arg2, Boolean arg3, int timedInvokeTimeoutMs) {
      testEmitTestEventRequest(chipClusterPtr, callback, arg1, arg2, arg3, timedInvokeTimeoutMs);
    }

    public void testEmitTestFabricScopedEventRequest(TestEmitTestFabricScopedEventResponseCallback callback, Integer arg1) {
      testEmitTestFabricScopedEventRequest(chipClusterPtr, callback, arg1, null);
    }

    public void testEmitTestFabricScopedEventRequest(TestEmitTestFabricScopedEventResponseCallback callback, Integer arg1, int timedInvokeTimeoutMs) {
      testEmitTestFabricScopedEventRequest(chipClusterPtr, callback, arg1, timedInvokeTimeoutMs);
    }

    private native void test(long chipClusterPtr, DefaultClusterCallback callback, @Nullable Integer timedInvokeTimeoutMs);

    private native void testNotHandled(long chipClusterPtr, DefaultClusterCallback callback, @Nullable Integer timedInvokeTimeoutMs);

    private native void testSpecific(long chipClusterPtr, TestSpecificResponseCallback callback, @Nullable Integer timedInvokeTimeoutMs);

    private native void testUnknownCommand(long chipClusterPtr, DefaultClusterCallback callback, @Nullable Integer timedInvokeTimeoutMs);

    private native void testAddArguments(long chipClusterPtr, TestAddArgumentsResponseCallback callback, Integer arg1, Integer arg2, @Nullable Integer timedInvokeTimeoutMs);

    private native void testSimpleArgumentRequest(long chipClusterPtr, TestSimpleArgumentResponseCallback callback, Boolean arg1, @Nullable Integer timedInvokeTimeoutMs);

    private native void testStructArrayArgumentRequest(long chipClusterPtr, TestStructArrayArgumentResponseCallback callback, ArrayList<ChipStructs.UnitTestingClusterNestedStructList> arg1, ArrayList<ChipStructs.UnitTestingClusterSimpleStruct> arg2, ArrayList<Integer> arg3, ArrayList<Boolean> arg4, Integer arg5, Boolean arg6, @Nullable Integer timedInvokeTimeoutMs);

    private native void testStructArgumentRequest(long chipClusterPtr, BooleanResponseCallback callback, ChipStructs.UnitTestingClusterSimpleStruct arg1, @Nullable Integer timedInvokeTimeoutMs);

    private native void testNestedStructArgumentRequest(long chipClusterPtr, BooleanResponseCallback callback, ChipStructs.UnitTestingClusterNestedStruct arg1, @Nullable Integer timedInvokeTimeoutMs);

    private native void testListStructArgumentRequest(long chipClusterPtr, BooleanResponseCallback callback, ArrayList<ChipStructs.UnitTestingClusterSimpleStruct> arg1, @Nullable Integer timedInvokeTimeoutMs);

    private native void testListInt8UArgumentRequest(long chipClusterPtr, BooleanResponseCallback callback, ArrayList<Integer> arg1, @Nullable Integer timedInvokeTimeoutMs);

    private native void testNestedStructListArgumentRequest(long chipClusterPtr, BooleanResponseCallback callback, ChipStructs.UnitTestingClusterNestedStructList arg1, @Nullable Integer timedInvokeTimeoutMs);

    private native void testListNestedStructListArgumentRequest(long chipClusterPtr, BooleanResponseCallback callback, ArrayList<ChipStructs.UnitTestingClusterNestedStructList> arg1, @Nullable Integer timedInvokeTimeoutMs);

    private native void testListInt8UReverseRequest(long chipClusterPtr, TestListInt8UReverseResponseCallback callback, ArrayList<Integer> arg1, @Nullable Integer timedInvokeTimeoutMs);

    private native void testEnumsRequest(long chipClusterPtr, TestEnumsResponseCallback callback, Integer arg1, Integer arg2, @Nullable Integer timedInvokeTimeoutMs);

    private native void testNullableOptionalRequest(long chipClusterPtr, TestNullableOptionalResponseCallback callback, @Nullable Optional<Integer> arg1, @Nullable Integer timedInvokeTimeoutMs);

    private native void testComplexNullableOptionalRequest(long chipClusterPtr, TestComplexNullableOptionalResponseCallback callback, @Nullable Integer nullableInt, Optional<Integer> optionalInt, @Nullable Optional<Integer> nullableOptionalInt, @Nullable String nullableString, Optional<String> optionalString, @Nullable Optional<String> nullableOptionalString, @Nullable ChipStructs.UnitTestingClusterSimpleStruct nullableStruct, Optional<ChipStructs.UnitTestingClusterSimpleStruct> optionalStruct, @Nullable Optional<ChipStructs.UnitTestingClusterSimpleStruct> nullableOptionalStruct, @Nullable ArrayList<Integer> nullableList, Optional<ArrayList<Integer>> optionalList, @Nullable Optional<ArrayList<Integer>> nullableOptionalList, @Nullable Integer timedInvokeTimeoutMs);

    private native void simpleStructEchoRequest(long chipClusterPtr, SimpleStructResponseCallback callback, ChipStructs.UnitTestingClusterSimpleStruct arg1, @Nullable Integer timedInvokeTimeoutMs);

    private native void timedInvokeRequest(long chipClusterPtr, DefaultClusterCallback callback, @Nullable Integer timedInvokeTimeoutMs);

    private native void testSimpleOptionalArgumentRequest(long chipClusterPtr, DefaultClusterCallback callback, Optional<Boolean> arg1, @Nullable Integer timedInvokeTimeoutMs);

    private native void testEmitTestEventRequest(long chipClusterPtr, TestEmitTestEventResponseCallback callback, Integer arg1, Integer arg2, Boolean arg3, @Nullable Integer timedInvokeTimeoutMs);

    private native void testEmitTestFabricScopedEventRequest(long chipClusterPtr, TestEmitTestFabricScopedEventResponseCallback callback, Integer arg1, @Nullable Integer timedInvokeTimeoutMs);

    public interface TestSpecificResponseCallback {
      void onSuccess(Integer returnValue);
      void onError(Exception error);
    }

    public interface TestAddArgumentsResponseCallback {
      void onSuccess(Integer returnValue);
      void onError(Exception error);
    }

    public interface TestSimpleArgumentResponseCallback {
      void onSuccess(Boolean returnValue);
      void onError(Exception error);
    }

    public interface TestStructArrayArgumentResponseCallback {
      void onSuccess(ArrayList<ChipStructs.UnitTestingClusterNestedStructList> arg1, ArrayList<ChipStructs.UnitTestingClusterSimpleStruct> arg2, ArrayList<Integer> arg3, ArrayList<Boolean> arg4, Integer arg5, Boolean arg6);
      void onError(Exception error);
    }

    public interface BooleanResponseCallback {
      void onSuccess(Boolean value);
      void onError(Exception error);
    }

    public interface TestListInt8UReverseResponseCallback {
      void onSuccess(ArrayList<Integer> arg1);
      void onError(Exception error);
    }

    public interface TestEnumsResponseCallback {
      void onSuccess(Integer arg1, Integer arg2);
      void onError(Exception error);
    }

    public interface TestNullableOptionalResponseCallback {
      void onSuccess(Boolean wasPresent, Optional<Boolean> wasNull, Optional<Integer> value, @Nullable Optional<Integer> originalValue);
      void onError(Exception error);
    }

    public interface TestComplexNullableOptionalResponseCallback {
      void onSuccess(Boolean nullableIntWasNull, Optional<Integer> nullableIntValue, Boolean optionalIntWasPresent, Optional<Integer> optionalIntValue, Boolean nullableOptionalIntWasPresent, Optional<Boolean> nullableOptionalIntWasNull, Optional<Integer> nullableOptionalIntValue, Boolean nullableStringWasNull, Optional<String> nullableStringValue, Boolean optionalStringWasPresent, Optional<String> optionalStringValue, Boolean nullableOptionalStringWasPresent, Optional<Boolean> nullableOptionalStringWasNull, Optional<String> nullableOptionalStringValue, Boolean nullableStructWasNull, Optional<ChipStructs.UnitTestingClusterSimpleStruct> nullableStructValue, Boolean optionalStructWasPresent, Optional<ChipStructs.UnitTestingClusterSimpleStruct> optionalStructValue, Boolean nullableOptionalStructWasPresent, Optional<Boolean> nullableOptionalStructWasNull, Optional<ChipStructs.UnitTestingClusterSimpleStruct> nullableOptionalStructValue, Boolean nullableListWasNull, Optional<ArrayList<Integer>> nullableListValue, Boolean optionalListWasPresent, Optional<ArrayList<Integer>> optionalListValue, Boolean nullableOptionalListWasPresent, Optional<Boolean> nullableOptionalListWasNull, Optional<ArrayList<Integer>> nullableOptionalListValue);
      void onError(Exception error);
    }

    public interface SimpleStructResponseCallback {
      void onSuccess(ChipStructs.UnitTestingClusterSimpleStruct arg1);
      void onError(Exception error);
    }

    public interface TestEmitTestEventResponseCallback {
      void onSuccess(Long value);
      void onError(Exception error);
    }

    public interface TestEmitTestFabricScopedEventResponseCallback {
      void onSuccess(Long value);
      void onError(Exception error);
    }

    public interface ListInt8uAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Integer> value);
    }

    public interface ListOctetStringAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<byte[]> value);
    }

    public interface ListStructOctetStringAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.UnitTestingClusterTestListStructOctet> value);
    }

    public interface ListNullablesAndOptionalsStructAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.UnitTestingClusterNullablesAndOptionalsStruct> value);
    }

    public interface StructAttrAttributeCallback extends BaseAttributeCallback {
      void onSuccess(ChipStructs.UnitTestingClusterSimpleStruct value);
    }

    public interface ListLongOctetStringAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<byte[]> value);
    }

    public interface ListFabricScopedAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.UnitTestingClusterTestFabricScoped> value);
    }

    public interface NullableBooleanAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Boolean value);
    }

    public interface NullableBitmap8AttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface NullableBitmap16AttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface NullableBitmap32AttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface NullableBitmap64AttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface NullableInt8uAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface NullableInt16uAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface NullableInt24uAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface NullableInt32uAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface NullableInt40uAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface NullableInt48uAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface NullableInt56uAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface NullableInt64uAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface NullableInt8sAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface NullableInt16sAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface NullableInt24sAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface NullableInt32sAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface NullableInt40sAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface NullableInt48sAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface NullableInt56sAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface NullableInt64sAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface NullableEnum8AttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface NullableEnum16AttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface NullableFloatSingleAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface NullableFloatDoubleAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Double value);
    }

    public interface NullableOctetStringAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable byte[] value);
    }

    public interface NullableCharStringAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable String value);
    }

    public interface NullableEnumAttrAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface NullableStructAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable ChipStructs.UnitTestingClusterSimpleStruct value);
    }

    public interface NullableRangeRestrictedInt8uAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface NullableRangeRestrictedInt8sAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface NullableRangeRestrictedInt16uAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface NullableRangeRestrictedInt16sAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readBooleanAttribute(
        BooleanAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeBooleanAttribute(DefaultClusterCallback callback, Boolean value) {
        writeBooleanAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeBooleanAttribute(DefaultClusterCallback callback, Boolean value, int timedWriteTimeoutMs) {
        writeBooleanAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeBooleanAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeBooleanAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readBitmap8Attribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeBitmap8Attribute(DefaultClusterCallback callback, Integer value) {
        writeBitmap8Attribute(chipClusterPtr, callback, value, null);
    }

    public void writeBitmap8Attribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeBitmap8Attribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeBitmap8Attribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeBitmap8Attribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readBitmap16Attribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeBitmap16Attribute(DefaultClusterCallback callback, Integer value) {
        writeBitmap16Attribute(chipClusterPtr, callback, value, null);
    }

    public void writeBitmap16Attribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeBitmap16Attribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeBitmap16Attribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeBitmap16Attribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readBitmap32Attribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeBitmap32Attribute(DefaultClusterCallback callback, Long value) {
        writeBitmap32Attribute(chipClusterPtr, callback, value, null);
    }

    public void writeBitmap32Attribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
        writeBitmap32Attribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeBitmap32Attribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeBitmap32Attribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readBitmap64Attribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeBitmap64Attribute(DefaultClusterCallback callback, Long value) {
        writeBitmap64Attribute(chipClusterPtr, callback, value, null);
    }

    public void writeBitmap64Attribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
        writeBitmap64Attribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeBitmap64Attribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeBitmap64Attribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readInt8uAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeInt8uAttribute(DefaultClusterCallback callback, Integer value) {
        writeInt8uAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeInt8uAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeInt8uAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeInt8uAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeInt8uAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readInt16uAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeInt16uAttribute(DefaultClusterCallback callback, Integer value) {
        writeInt16uAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeInt16uAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeInt16uAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeInt16uAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeInt16uAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readInt24uAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeInt24uAttribute(DefaultClusterCallback callback, Long value) {
        writeInt24uAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeInt24uAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
        writeInt24uAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeInt24uAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeInt24uAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readInt32uAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeInt32uAttribute(DefaultClusterCallback callback, Long value) {
        writeInt32uAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeInt32uAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
        writeInt32uAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeInt32uAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeInt32uAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readInt40uAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 9L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeInt40uAttribute(DefaultClusterCallback callback, Long value) {
        writeInt40uAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeInt40uAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
        writeInt40uAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeInt40uAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeInt40uAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readInt48uAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 10L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeInt48uAttribute(DefaultClusterCallback callback, Long value) {
        writeInt48uAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeInt48uAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
        writeInt48uAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeInt48uAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeInt48uAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readInt56uAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 11L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeInt56uAttribute(DefaultClusterCallback callback, Long value) {
        writeInt56uAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeInt56uAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
        writeInt56uAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeInt56uAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeInt56uAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readInt64uAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 12L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeInt64uAttribute(DefaultClusterCallback callback, Long value) {
        writeInt64uAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeInt64uAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
        writeInt64uAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeInt64uAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeInt64uAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readInt8sAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 13L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeInt8sAttribute(DefaultClusterCallback callback, Integer value) {
        writeInt8sAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeInt8sAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeInt8sAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeInt8sAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeInt8sAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readInt16sAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 14L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeInt16sAttribute(DefaultClusterCallback callback, Integer value) {
        writeInt16sAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeInt16sAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeInt16sAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeInt16sAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeInt16sAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readInt24sAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 15L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeInt24sAttribute(DefaultClusterCallback callback, Long value) {
        writeInt24sAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeInt24sAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
        writeInt24sAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeInt24sAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeInt24sAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readInt32sAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 16L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeInt32sAttribute(DefaultClusterCallback callback, Long value) {
        writeInt32sAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeInt32sAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
        writeInt32sAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeInt32sAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeInt32sAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readInt40sAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 17L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeInt40sAttribute(DefaultClusterCallback callback, Long value) {
        writeInt40sAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeInt40sAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
        writeInt40sAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeInt40sAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeInt40sAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readInt48sAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 18L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeInt48sAttribute(DefaultClusterCallback callback, Long value) {
        writeInt48sAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeInt48sAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
        writeInt48sAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeInt48sAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeInt48sAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readInt56sAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 19L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeInt56sAttribute(DefaultClusterCallback callback, Long value) {
        writeInt56sAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeInt56sAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
        writeInt56sAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeInt56sAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeInt56sAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readInt64sAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 20L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeInt64sAttribute(DefaultClusterCallback callback, Long value) {
        writeInt64sAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeInt64sAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
        writeInt64sAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeInt64sAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeInt64sAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEnum8Attribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 21L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeEnum8Attribute(DefaultClusterCallback callback, Integer value) {
        writeEnum8Attribute(chipClusterPtr, callback, value, null);
    }

    public void writeEnum8Attribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeEnum8Attribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeEnum8Attribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEnum8Attribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEnum16Attribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 22L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeEnum16Attribute(DefaultClusterCallback callback, Integer value) {
        writeEnum16Attribute(chipClusterPtr, callback, value, null);
    }

    public void writeEnum16Attribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeEnum16Attribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeEnum16Attribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEnum16Attribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFloatSingleAttribute(
        FloatAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 23L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeFloatSingleAttribute(DefaultClusterCallback callback, Float value) {
        writeFloatSingleAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeFloatSingleAttribute(DefaultClusterCallback callback, Float value, int timedWriteTimeoutMs) {
        writeFloatSingleAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeFloatSingleAttribute(
        FloatAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFloatSingleAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFloatDoubleAttribute(
        DoubleAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 24L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Double value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeFloatDoubleAttribute(DefaultClusterCallback callback, Double value) {
        writeFloatDoubleAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeFloatDoubleAttribute(DefaultClusterCallback callback, Double value, int timedWriteTimeoutMs) {
        writeFloatDoubleAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeFloatDoubleAttribute(
        DoubleAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFloatDoubleAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readOctetStringAttribute(
        OctetStringAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 25L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            byte[] value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeOctetStringAttribute(DefaultClusterCallback callback, byte[] value) {
        writeOctetStringAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeOctetStringAttribute(DefaultClusterCallback callback, byte[] value, int timedWriteTimeoutMs) {
        writeOctetStringAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeOctetStringAttribute(
        OctetStringAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeOctetStringAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readListInt8uAttribute(
        ListInt8uAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 26L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeListInt8uAttribute(DefaultClusterCallback callback, ArrayList<Integer> value) {
        writeListInt8uAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeListInt8uAttribute(DefaultClusterCallback callback, ArrayList<Integer> value, int timedWriteTimeoutMs) {
        writeListInt8uAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeListInt8uAttribute(
        ListInt8uAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeListInt8uAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readListOctetStringAttribute(
        ListOctetStringAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 27L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<byte[]> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeListOctetStringAttribute(DefaultClusterCallback callback, ArrayList<byte[]> value) {
        writeListOctetStringAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeListOctetStringAttribute(DefaultClusterCallback callback, ArrayList<byte[]> value, int timedWriteTimeoutMs) {
        writeListOctetStringAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeListOctetStringAttribute(
        ListOctetStringAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeListOctetStringAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readListStructOctetStringAttribute(
        ListStructOctetStringAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 28L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.UnitTestingClusterTestListStructOctet> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeListStructOctetStringAttribute(DefaultClusterCallback callback, ArrayList<ChipStructs.UnitTestingClusterTestListStructOctet> value) {
        writeListStructOctetStringAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeListStructOctetStringAttribute(DefaultClusterCallback callback, ArrayList<ChipStructs.UnitTestingClusterTestListStructOctet> value, int timedWriteTimeoutMs) {
        writeListStructOctetStringAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeListStructOctetStringAttribute(
        ListStructOctetStringAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeListStructOctetStringAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readLongOctetStringAttribute(
        OctetStringAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 29L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            byte[] value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeLongOctetStringAttribute(DefaultClusterCallback callback, byte[] value) {
        writeLongOctetStringAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeLongOctetStringAttribute(DefaultClusterCallback callback, byte[] value, int timedWriteTimeoutMs) {
        writeLongOctetStringAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeLongOctetStringAttribute(
        OctetStringAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeLongOctetStringAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readCharStringAttribute(
        CharStringAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 30L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeCharStringAttribute(DefaultClusterCallback callback, String value) {
        writeCharStringAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeCharStringAttribute(DefaultClusterCallback callback, String value, int timedWriteTimeoutMs) {
        writeCharStringAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeCharStringAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeCharStringAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readLongCharStringAttribute(
        CharStringAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 31L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeLongCharStringAttribute(DefaultClusterCallback callback, String value) {
        writeLongCharStringAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeLongCharStringAttribute(DefaultClusterCallback callback, String value, int timedWriteTimeoutMs) {
        writeLongCharStringAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeLongCharStringAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeLongCharStringAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEpochUsAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 32L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeEpochUsAttribute(DefaultClusterCallback callback, Long value) {
        writeEpochUsAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeEpochUsAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
        writeEpochUsAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeEpochUsAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEpochUsAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEpochSAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 33L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeEpochSAttribute(DefaultClusterCallback callback, Long value) {
        writeEpochSAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeEpochSAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
        writeEpochSAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeEpochSAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEpochSAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readVendorIdAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 34L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeVendorIdAttribute(DefaultClusterCallback callback, Integer value) {
        writeVendorIdAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeVendorIdAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeVendorIdAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeVendorIdAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeVendorIdAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readListNullablesAndOptionalsStructAttribute(
        ListNullablesAndOptionalsStructAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 35L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.UnitTestingClusterNullablesAndOptionalsStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeListNullablesAndOptionalsStructAttribute(DefaultClusterCallback callback, ArrayList<ChipStructs.UnitTestingClusterNullablesAndOptionalsStruct> value) {
        writeListNullablesAndOptionalsStructAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeListNullablesAndOptionalsStructAttribute(DefaultClusterCallback callback, ArrayList<ChipStructs.UnitTestingClusterNullablesAndOptionalsStruct> value, int timedWriteTimeoutMs) {
        writeListNullablesAndOptionalsStructAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeListNullablesAndOptionalsStructAttribute(
        ListNullablesAndOptionalsStructAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeListNullablesAndOptionalsStructAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEnumAttrAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 36L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeEnumAttrAttribute(DefaultClusterCallback callback, Integer value) {
        writeEnumAttrAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeEnumAttrAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeEnumAttrAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeEnumAttrAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEnumAttrAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readStructAttrAttribute(
        StructAttrAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 37L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            ChipStructs.UnitTestingClusterSimpleStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeStructAttrAttribute(DefaultClusterCallback callback, ChipStructs.UnitTestingClusterSimpleStruct value) {
        writeStructAttrAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeStructAttrAttribute(DefaultClusterCallback callback, ChipStructs.UnitTestingClusterSimpleStruct value, int timedWriteTimeoutMs) {
        writeStructAttrAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeStructAttrAttribute(
        StructAttrAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeStructAttrAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readRangeRestrictedInt8uAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 38L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeRangeRestrictedInt8uAttribute(DefaultClusterCallback callback, Integer value) {
        writeRangeRestrictedInt8uAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeRangeRestrictedInt8uAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeRangeRestrictedInt8uAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeRangeRestrictedInt8uAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeRangeRestrictedInt8uAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readRangeRestrictedInt8sAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 39L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeRangeRestrictedInt8sAttribute(DefaultClusterCallback callback, Integer value) {
        writeRangeRestrictedInt8sAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeRangeRestrictedInt8sAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeRangeRestrictedInt8sAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeRangeRestrictedInt8sAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeRangeRestrictedInt8sAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readRangeRestrictedInt16uAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 40L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeRangeRestrictedInt16uAttribute(DefaultClusterCallback callback, Integer value) {
        writeRangeRestrictedInt16uAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeRangeRestrictedInt16uAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeRangeRestrictedInt16uAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeRangeRestrictedInt16uAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeRangeRestrictedInt16uAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readRangeRestrictedInt16sAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 41L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeRangeRestrictedInt16sAttribute(DefaultClusterCallback callback, Integer value) {
        writeRangeRestrictedInt16sAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeRangeRestrictedInt16sAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeRangeRestrictedInt16sAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeRangeRestrictedInt16sAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeRangeRestrictedInt16sAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readListLongOctetStringAttribute(
        ListLongOctetStringAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 42L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<byte[]> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeListLongOctetStringAttribute(DefaultClusterCallback callback, ArrayList<byte[]> value) {
        writeListLongOctetStringAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeListLongOctetStringAttribute(DefaultClusterCallback callback, ArrayList<byte[]> value, int timedWriteTimeoutMs) {
        writeListLongOctetStringAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeListLongOctetStringAttribute(
        ListLongOctetStringAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeListLongOctetStringAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readListFabricScopedAttribute(
        ListFabricScopedAttributeCallback callback) {
        readListFabricScopedAttributeWithFabricFilter(callback, true);
    }

    public void readListFabricScopedAttributeWithFabricFilter(
        ListFabricScopedAttributeCallback callback, boolean isFabricFiltered) {
      long clusterId = CLUSTER_ID;
      long attributeId = 43L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.UnitTestingClusterTestFabricScoped> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, isFabricFiltered, 0);
    }

    public void writeListFabricScopedAttribute(DefaultClusterCallback callback, ArrayList<ChipStructs.UnitTestingClusterTestFabricScoped> value) {
        writeListFabricScopedAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeListFabricScopedAttribute(DefaultClusterCallback callback, ArrayList<ChipStructs.UnitTestingClusterTestFabricScoped> value, int timedWriteTimeoutMs) {
        writeListFabricScopedAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeListFabricScopedAttribute(
        ListFabricScopedAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeListFabricScopedAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readTimedWriteBooleanAttribute(
        BooleanAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 48L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeTimedWriteBooleanAttribute(DefaultClusterCallback callback, Boolean value, int timedWriteTimeoutMs) {
        writeTimedWriteBooleanAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeTimedWriteBooleanAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeTimedWriteBooleanAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneralErrorBooleanAttribute(
        BooleanAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 49L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeGeneralErrorBooleanAttribute(DefaultClusterCallback callback, Boolean value) {
        writeGeneralErrorBooleanAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeGeneralErrorBooleanAttribute(DefaultClusterCallback callback, Boolean value, int timedWriteTimeoutMs) {
        writeGeneralErrorBooleanAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeGeneralErrorBooleanAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneralErrorBooleanAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterErrorBooleanAttribute(
        BooleanAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 50L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeClusterErrorBooleanAttribute(DefaultClusterCallback callback, Boolean value) {
        writeClusterErrorBooleanAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeClusterErrorBooleanAttribute(DefaultClusterCallback callback, Boolean value, int timedWriteTimeoutMs) {
        writeClusterErrorBooleanAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeClusterErrorBooleanAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterErrorBooleanAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readUnsupportedAttribute(
        BooleanAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 255L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeUnsupportedAttribute(DefaultClusterCallback callback, Boolean value) {
        writeUnsupportedAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeUnsupportedAttribute(DefaultClusterCallback callback, Boolean value, int timedWriteTimeoutMs) {
        writeUnsupportedAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeUnsupportedAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeUnsupportedAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readNullableBooleanAttribute(
        NullableBooleanAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 16384L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeNullableBooleanAttribute(DefaultClusterCallback callback, Boolean value) {
        writeNullableBooleanAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeNullableBooleanAttribute(DefaultClusterCallback callback, Boolean value, int timedWriteTimeoutMs) {
        writeNullableBooleanAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeNullableBooleanAttribute(
        NullableBooleanAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeNullableBooleanAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readNullableBitmap8Attribute(
        NullableBitmap8AttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 16385L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeNullableBitmap8Attribute(DefaultClusterCallback callback, Integer value) {
        writeNullableBitmap8Attribute(chipClusterPtr, callback, value, null);
    }

    public void writeNullableBitmap8Attribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeNullableBitmap8Attribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeNullableBitmap8Attribute(
        NullableBitmap8AttributeCallback callback, int minInterval, int maxInterval) {
        subscribeNullableBitmap8Attribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readNullableBitmap16Attribute(
        NullableBitmap16AttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 16386L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeNullableBitmap16Attribute(DefaultClusterCallback callback, Integer value) {
        writeNullableBitmap16Attribute(chipClusterPtr, callback, value, null);
    }

    public void writeNullableBitmap16Attribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeNullableBitmap16Attribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeNullableBitmap16Attribute(
        NullableBitmap16AttributeCallback callback, int minInterval, int maxInterval) {
        subscribeNullableBitmap16Attribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readNullableBitmap32Attribute(
        NullableBitmap32AttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 16387L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeNullableBitmap32Attribute(DefaultClusterCallback callback, Long value) {
        writeNullableBitmap32Attribute(chipClusterPtr, callback, value, null);
    }

    public void writeNullableBitmap32Attribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
        writeNullableBitmap32Attribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeNullableBitmap32Attribute(
        NullableBitmap32AttributeCallback callback, int minInterval, int maxInterval) {
        subscribeNullableBitmap32Attribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readNullableBitmap64Attribute(
        NullableBitmap64AttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 16388L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeNullableBitmap64Attribute(DefaultClusterCallback callback, Long value) {
        writeNullableBitmap64Attribute(chipClusterPtr, callback, value, null);
    }

    public void writeNullableBitmap64Attribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
        writeNullableBitmap64Attribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeNullableBitmap64Attribute(
        NullableBitmap64AttributeCallback callback, int minInterval, int maxInterval) {
        subscribeNullableBitmap64Attribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readNullableInt8uAttribute(
        NullableInt8uAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 16389L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeNullableInt8uAttribute(DefaultClusterCallback callback, Integer value) {
        writeNullableInt8uAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeNullableInt8uAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeNullableInt8uAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeNullableInt8uAttribute(
        NullableInt8uAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeNullableInt8uAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readNullableInt16uAttribute(
        NullableInt16uAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 16390L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeNullableInt16uAttribute(DefaultClusterCallback callback, Integer value) {
        writeNullableInt16uAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeNullableInt16uAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeNullableInt16uAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeNullableInt16uAttribute(
        NullableInt16uAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeNullableInt16uAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readNullableInt24uAttribute(
        NullableInt24uAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 16391L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeNullableInt24uAttribute(DefaultClusterCallback callback, Long value) {
        writeNullableInt24uAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeNullableInt24uAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
        writeNullableInt24uAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeNullableInt24uAttribute(
        NullableInt24uAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeNullableInt24uAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readNullableInt32uAttribute(
        NullableInt32uAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 16392L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeNullableInt32uAttribute(DefaultClusterCallback callback, Long value) {
        writeNullableInt32uAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeNullableInt32uAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
        writeNullableInt32uAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeNullableInt32uAttribute(
        NullableInt32uAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeNullableInt32uAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readNullableInt40uAttribute(
        NullableInt40uAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 16393L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeNullableInt40uAttribute(DefaultClusterCallback callback, Long value) {
        writeNullableInt40uAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeNullableInt40uAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
        writeNullableInt40uAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeNullableInt40uAttribute(
        NullableInt40uAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeNullableInt40uAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readNullableInt48uAttribute(
        NullableInt48uAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 16394L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeNullableInt48uAttribute(DefaultClusterCallback callback, Long value) {
        writeNullableInt48uAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeNullableInt48uAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
        writeNullableInt48uAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeNullableInt48uAttribute(
        NullableInt48uAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeNullableInt48uAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readNullableInt56uAttribute(
        NullableInt56uAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 16395L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeNullableInt56uAttribute(DefaultClusterCallback callback, Long value) {
        writeNullableInt56uAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeNullableInt56uAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
        writeNullableInt56uAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeNullableInt56uAttribute(
        NullableInt56uAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeNullableInt56uAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readNullableInt64uAttribute(
        NullableInt64uAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 16396L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeNullableInt64uAttribute(DefaultClusterCallback callback, Long value) {
        writeNullableInt64uAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeNullableInt64uAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
        writeNullableInt64uAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeNullableInt64uAttribute(
        NullableInt64uAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeNullableInt64uAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readNullableInt8sAttribute(
        NullableInt8sAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 16397L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeNullableInt8sAttribute(DefaultClusterCallback callback, Integer value) {
        writeNullableInt8sAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeNullableInt8sAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeNullableInt8sAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeNullableInt8sAttribute(
        NullableInt8sAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeNullableInt8sAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readNullableInt16sAttribute(
        NullableInt16sAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 16398L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeNullableInt16sAttribute(DefaultClusterCallback callback, Integer value) {
        writeNullableInt16sAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeNullableInt16sAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeNullableInt16sAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeNullableInt16sAttribute(
        NullableInt16sAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeNullableInt16sAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readNullableInt24sAttribute(
        NullableInt24sAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 16399L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeNullableInt24sAttribute(DefaultClusterCallback callback, Long value) {
        writeNullableInt24sAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeNullableInt24sAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
        writeNullableInt24sAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeNullableInt24sAttribute(
        NullableInt24sAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeNullableInt24sAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readNullableInt32sAttribute(
        NullableInt32sAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 16400L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeNullableInt32sAttribute(DefaultClusterCallback callback, Long value) {
        writeNullableInt32sAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeNullableInt32sAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
        writeNullableInt32sAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeNullableInt32sAttribute(
        NullableInt32sAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeNullableInt32sAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readNullableInt40sAttribute(
        NullableInt40sAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 16401L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeNullableInt40sAttribute(DefaultClusterCallback callback, Long value) {
        writeNullableInt40sAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeNullableInt40sAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
        writeNullableInt40sAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeNullableInt40sAttribute(
        NullableInt40sAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeNullableInt40sAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readNullableInt48sAttribute(
        NullableInt48sAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 16402L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeNullableInt48sAttribute(DefaultClusterCallback callback, Long value) {
        writeNullableInt48sAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeNullableInt48sAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
        writeNullableInt48sAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeNullableInt48sAttribute(
        NullableInt48sAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeNullableInt48sAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readNullableInt56sAttribute(
        NullableInt56sAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 16403L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeNullableInt56sAttribute(DefaultClusterCallback callback, Long value) {
        writeNullableInt56sAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeNullableInt56sAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
        writeNullableInt56sAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeNullableInt56sAttribute(
        NullableInt56sAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeNullableInt56sAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readNullableInt64sAttribute(
        NullableInt64sAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 16404L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeNullableInt64sAttribute(DefaultClusterCallback callback, Long value) {
        writeNullableInt64sAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeNullableInt64sAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
        writeNullableInt64sAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeNullableInt64sAttribute(
        NullableInt64sAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeNullableInt64sAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readNullableEnum8Attribute(
        NullableEnum8AttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 16405L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeNullableEnum8Attribute(DefaultClusterCallback callback, Integer value) {
        writeNullableEnum8Attribute(chipClusterPtr, callback, value, null);
    }

    public void writeNullableEnum8Attribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeNullableEnum8Attribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeNullableEnum8Attribute(
        NullableEnum8AttributeCallback callback, int minInterval, int maxInterval) {
        subscribeNullableEnum8Attribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readNullableEnum16Attribute(
        NullableEnum16AttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 16406L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeNullableEnum16Attribute(DefaultClusterCallback callback, Integer value) {
        writeNullableEnum16Attribute(chipClusterPtr, callback, value, null);
    }

    public void writeNullableEnum16Attribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeNullableEnum16Attribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeNullableEnum16Attribute(
        NullableEnum16AttributeCallback callback, int minInterval, int maxInterval) {
        subscribeNullableEnum16Attribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readNullableFloatSingleAttribute(
        NullableFloatSingleAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 16407L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeNullableFloatSingleAttribute(DefaultClusterCallback callback, Float value) {
        writeNullableFloatSingleAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeNullableFloatSingleAttribute(DefaultClusterCallback callback, Float value, int timedWriteTimeoutMs) {
        writeNullableFloatSingleAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeNullableFloatSingleAttribute(
        NullableFloatSingleAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeNullableFloatSingleAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readNullableFloatDoubleAttribute(
        NullableFloatDoubleAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 16408L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Double value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeNullableFloatDoubleAttribute(DefaultClusterCallback callback, Double value) {
        writeNullableFloatDoubleAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeNullableFloatDoubleAttribute(DefaultClusterCallback callback, Double value, int timedWriteTimeoutMs) {
        writeNullableFloatDoubleAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeNullableFloatDoubleAttribute(
        NullableFloatDoubleAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeNullableFloatDoubleAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readNullableOctetStringAttribute(
        NullableOctetStringAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 16409L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable byte[] value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeNullableOctetStringAttribute(DefaultClusterCallback callback, byte[] value) {
        writeNullableOctetStringAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeNullableOctetStringAttribute(DefaultClusterCallback callback, byte[] value, int timedWriteTimeoutMs) {
        writeNullableOctetStringAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeNullableOctetStringAttribute(
        NullableOctetStringAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeNullableOctetStringAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readNullableCharStringAttribute(
        NullableCharStringAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 16414L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeNullableCharStringAttribute(DefaultClusterCallback callback, String value) {
        writeNullableCharStringAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeNullableCharStringAttribute(DefaultClusterCallback callback, String value, int timedWriteTimeoutMs) {
        writeNullableCharStringAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeNullableCharStringAttribute(
        NullableCharStringAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeNullableCharStringAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readNullableEnumAttrAttribute(
        NullableEnumAttrAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 16420L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeNullableEnumAttrAttribute(DefaultClusterCallback callback, Integer value) {
        writeNullableEnumAttrAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeNullableEnumAttrAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeNullableEnumAttrAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeNullableEnumAttrAttribute(
        NullableEnumAttrAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeNullableEnumAttrAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readNullableStructAttribute(
        NullableStructAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 16421L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable ChipStructs.UnitTestingClusterSimpleStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeNullableStructAttribute(DefaultClusterCallback callback, ChipStructs.UnitTestingClusterSimpleStruct value) {
        writeNullableStructAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeNullableStructAttribute(DefaultClusterCallback callback, ChipStructs.UnitTestingClusterSimpleStruct value, int timedWriteTimeoutMs) {
        writeNullableStructAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeNullableStructAttribute(
        NullableStructAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeNullableStructAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readNullableRangeRestrictedInt8uAttribute(
        NullableRangeRestrictedInt8uAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 16422L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeNullableRangeRestrictedInt8uAttribute(DefaultClusterCallback callback, Integer value) {
        writeNullableRangeRestrictedInt8uAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeNullableRangeRestrictedInt8uAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeNullableRangeRestrictedInt8uAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeNullableRangeRestrictedInt8uAttribute(
        NullableRangeRestrictedInt8uAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeNullableRangeRestrictedInt8uAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readNullableRangeRestrictedInt8sAttribute(
        NullableRangeRestrictedInt8sAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 16423L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeNullableRangeRestrictedInt8sAttribute(DefaultClusterCallback callback, Integer value) {
        writeNullableRangeRestrictedInt8sAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeNullableRangeRestrictedInt8sAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeNullableRangeRestrictedInt8sAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeNullableRangeRestrictedInt8sAttribute(
        NullableRangeRestrictedInt8sAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeNullableRangeRestrictedInt8sAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readNullableRangeRestrictedInt16uAttribute(
        NullableRangeRestrictedInt16uAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 16424L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeNullableRangeRestrictedInt16uAttribute(DefaultClusterCallback callback, Integer value) {
        writeNullableRangeRestrictedInt16uAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeNullableRangeRestrictedInt16uAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeNullableRangeRestrictedInt16uAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeNullableRangeRestrictedInt16uAttribute(
        NullableRangeRestrictedInt16uAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeNullableRangeRestrictedInt16uAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readNullableRangeRestrictedInt16sAttribute(
        NullableRangeRestrictedInt16sAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 16425L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeNullableRangeRestrictedInt16sAttribute(DefaultClusterCallback callback, Integer value) {
        writeNullableRangeRestrictedInt16sAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeNullableRangeRestrictedInt16sAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeNullableRangeRestrictedInt16sAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeNullableRangeRestrictedInt16sAttribute(
        NullableRangeRestrictedInt16sAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeNullableRangeRestrictedInt16sAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readWriteOnlyInt8uAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 16426L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeWriteOnlyInt8uAttribute(DefaultClusterCallback callback, Integer value) {
        writeWriteOnlyInt8uAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeWriteOnlyInt8uAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
        writeWriteOnlyInt8uAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeWriteOnlyInt8uAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeWriteOnlyInt8uAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void writeBooleanAttribute(long chipClusterPtr, DefaultClusterCallback callback, Boolean value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeBooleanAttribute(long chipClusterPtr, BooleanAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeBitmap8Attribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeBitmap8Attribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeBitmap16Attribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeBitmap16Attribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeBitmap32Attribute(long chipClusterPtr, DefaultClusterCallback callback, Long value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeBitmap32Attribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeBitmap64Attribute(long chipClusterPtr, DefaultClusterCallback callback, Long value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeBitmap64Attribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeInt8uAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeInt8uAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeInt16uAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeInt16uAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeInt24uAttribute(long chipClusterPtr, DefaultClusterCallback callback, Long value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeInt24uAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeInt32uAttribute(long chipClusterPtr, DefaultClusterCallback callback, Long value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeInt32uAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeInt40uAttribute(long chipClusterPtr, DefaultClusterCallback callback, Long value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeInt40uAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeInt48uAttribute(long chipClusterPtr, DefaultClusterCallback callback, Long value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeInt48uAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeInt56uAttribute(long chipClusterPtr, DefaultClusterCallback callback, Long value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeInt56uAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeInt64uAttribute(long chipClusterPtr, DefaultClusterCallback callback, Long value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeInt64uAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeInt8sAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeInt8sAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeInt16sAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeInt16sAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeInt24sAttribute(long chipClusterPtr, DefaultClusterCallback callback, Long value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeInt24sAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeInt32sAttribute(long chipClusterPtr, DefaultClusterCallback callback, Long value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeInt32sAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeInt40sAttribute(long chipClusterPtr, DefaultClusterCallback callback, Long value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeInt40sAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeInt48sAttribute(long chipClusterPtr, DefaultClusterCallback callback, Long value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeInt48sAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeInt56sAttribute(long chipClusterPtr, DefaultClusterCallback callback, Long value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeInt56sAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeInt64sAttribute(long chipClusterPtr, DefaultClusterCallback callback, Long value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeInt64sAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeEnum8Attribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeEnum8Attribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeEnum16Attribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeEnum16Attribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeFloatSingleAttribute(long chipClusterPtr, DefaultClusterCallback callback, Float value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeFloatSingleAttribute(long chipClusterPtr, FloatAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeFloatDoubleAttribute(long chipClusterPtr, DefaultClusterCallback callback, Double value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeFloatDoubleAttribute(long chipClusterPtr, DoubleAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeOctetStringAttribute(long chipClusterPtr, DefaultClusterCallback callback, byte[] value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeOctetStringAttribute(long chipClusterPtr, OctetStringAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeListInt8uAttribute(long chipClusterPtr, DefaultClusterCallback callback, ArrayList<Integer> value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeListInt8uAttribute(long chipClusterPtr, ListInt8uAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeListOctetStringAttribute(long chipClusterPtr, DefaultClusterCallback callback, ArrayList<byte[]> value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeListOctetStringAttribute(long chipClusterPtr, ListOctetStringAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeListStructOctetStringAttribute(long chipClusterPtr, DefaultClusterCallback callback, ArrayList<ChipStructs.UnitTestingClusterTestListStructOctet> value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeListStructOctetStringAttribute(long chipClusterPtr, ListStructOctetStringAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeLongOctetStringAttribute(long chipClusterPtr, DefaultClusterCallback callback, byte[] value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeLongOctetStringAttribute(long chipClusterPtr, OctetStringAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeCharStringAttribute(long chipClusterPtr, DefaultClusterCallback callback, String value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeCharStringAttribute(long chipClusterPtr, CharStringAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeLongCharStringAttribute(long chipClusterPtr, DefaultClusterCallback callback, String value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeLongCharStringAttribute(long chipClusterPtr, CharStringAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeEpochUsAttribute(long chipClusterPtr, DefaultClusterCallback callback, Long value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeEpochUsAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeEpochSAttribute(long chipClusterPtr, DefaultClusterCallback callback, Long value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeEpochSAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeVendorIdAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeVendorIdAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeListNullablesAndOptionalsStructAttribute(long chipClusterPtr, DefaultClusterCallback callback, ArrayList<ChipStructs.UnitTestingClusterNullablesAndOptionalsStruct> value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeListNullablesAndOptionalsStructAttribute(long chipClusterPtr, ListNullablesAndOptionalsStructAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeEnumAttrAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeEnumAttrAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeStructAttrAttribute(long chipClusterPtr, DefaultClusterCallback callback, ChipStructs.UnitTestingClusterSimpleStruct value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeStructAttrAttribute(long chipClusterPtr, StructAttrAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeRangeRestrictedInt8uAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeRangeRestrictedInt8uAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeRangeRestrictedInt8sAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeRangeRestrictedInt8sAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeRangeRestrictedInt16uAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeRangeRestrictedInt16uAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeRangeRestrictedInt16sAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeRangeRestrictedInt16sAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeListLongOctetStringAttribute(long chipClusterPtr, DefaultClusterCallback callback, ArrayList<byte[]> value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeListLongOctetStringAttribute(long chipClusterPtr, ListLongOctetStringAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeListFabricScopedAttribute(long chipClusterPtr, DefaultClusterCallback callback, ArrayList<ChipStructs.UnitTestingClusterTestFabricScoped> value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeListFabricScopedAttribute(long chipClusterPtr, ListFabricScopedAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeTimedWriteBooleanAttribute(long chipClusterPtr, DefaultClusterCallback callback, Boolean value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeTimedWriteBooleanAttribute(long chipClusterPtr, BooleanAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeGeneralErrorBooleanAttribute(long chipClusterPtr, DefaultClusterCallback callback, Boolean value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeGeneralErrorBooleanAttribute(long chipClusterPtr, BooleanAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeClusterErrorBooleanAttribute(long chipClusterPtr, DefaultClusterCallback callback, Boolean value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeClusterErrorBooleanAttribute(long chipClusterPtr, BooleanAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeUnsupportedAttribute(long chipClusterPtr, DefaultClusterCallback callback, Boolean value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeUnsupportedAttribute(long chipClusterPtr, BooleanAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeNullableBooleanAttribute(long chipClusterPtr, DefaultClusterCallback callback, Boolean value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeNullableBooleanAttribute(long chipClusterPtr, NullableBooleanAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeNullableBitmap8Attribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeNullableBitmap8Attribute(long chipClusterPtr, NullableBitmap8AttributeCallback callback, int minInterval, int maxInterval);

    private native void writeNullableBitmap16Attribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeNullableBitmap16Attribute(long chipClusterPtr, NullableBitmap16AttributeCallback callback, int minInterval, int maxInterval);

    private native void writeNullableBitmap32Attribute(long chipClusterPtr, DefaultClusterCallback callback, Long value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeNullableBitmap32Attribute(long chipClusterPtr, NullableBitmap32AttributeCallback callback, int minInterval, int maxInterval);

    private native void writeNullableBitmap64Attribute(long chipClusterPtr, DefaultClusterCallback callback, Long value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeNullableBitmap64Attribute(long chipClusterPtr, NullableBitmap64AttributeCallback callback, int minInterval, int maxInterval);

    private native void writeNullableInt8uAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeNullableInt8uAttribute(long chipClusterPtr, NullableInt8uAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeNullableInt16uAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeNullableInt16uAttribute(long chipClusterPtr, NullableInt16uAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeNullableInt24uAttribute(long chipClusterPtr, DefaultClusterCallback callback, Long value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeNullableInt24uAttribute(long chipClusterPtr, NullableInt24uAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeNullableInt32uAttribute(long chipClusterPtr, DefaultClusterCallback callback, Long value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeNullableInt32uAttribute(long chipClusterPtr, NullableInt32uAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeNullableInt40uAttribute(long chipClusterPtr, DefaultClusterCallback callback, Long value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeNullableInt40uAttribute(long chipClusterPtr, NullableInt40uAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeNullableInt48uAttribute(long chipClusterPtr, DefaultClusterCallback callback, Long value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeNullableInt48uAttribute(long chipClusterPtr, NullableInt48uAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeNullableInt56uAttribute(long chipClusterPtr, DefaultClusterCallback callback, Long value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeNullableInt56uAttribute(long chipClusterPtr, NullableInt56uAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeNullableInt64uAttribute(long chipClusterPtr, DefaultClusterCallback callback, Long value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeNullableInt64uAttribute(long chipClusterPtr, NullableInt64uAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeNullableInt8sAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeNullableInt8sAttribute(long chipClusterPtr, NullableInt8sAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeNullableInt16sAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeNullableInt16sAttribute(long chipClusterPtr, NullableInt16sAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeNullableInt24sAttribute(long chipClusterPtr, DefaultClusterCallback callback, Long value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeNullableInt24sAttribute(long chipClusterPtr, NullableInt24sAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeNullableInt32sAttribute(long chipClusterPtr, DefaultClusterCallback callback, Long value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeNullableInt32sAttribute(long chipClusterPtr, NullableInt32sAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeNullableInt40sAttribute(long chipClusterPtr, DefaultClusterCallback callback, Long value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeNullableInt40sAttribute(long chipClusterPtr, NullableInt40sAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeNullableInt48sAttribute(long chipClusterPtr, DefaultClusterCallback callback, Long value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeNullableInt48sAttribute(long chipClusterPtr, NullableInt48sAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeNullableInt56sAttribute(long chipClusterPtr, DefaultClusterCallback callback, Long value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeNullableInt56sAttribute(long chipClusterPtr, NullableInt56sAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeNullableInt64sAttribute(long chipClusterPtr, DefaultClusterCallback callback, Long value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeNullableInt64sAttribute(long chipClusterPtr, NullableInt64sAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeNullableEnum8Attribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeNullableEnum8Attribute(long chipClusterPtr, NullableEnum8AttributeCallback callback, int minInterval, int maxInterval);

    private native void writeNullableEnum16Attribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeNullableEnum16Attribute(long chipClusterPtr, NullableEnum16AttributeCallback callback, int minInterval, int maxInterval);

    private native void writeNullableFloatSingleAttribute(long chipClusterPtr, DefaultClusterCallback callback, Float value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeNullableFloatSingleAttribute(long chipClusterPtr, NullableFloatSingleAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeNullableFloatDoubleAttribute(long chipClusterPtr, DefaultClusterCallback callback, Double value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeNullableFloatDoubleAttribute(long chipClusterPtr, NullableFloatDoubleAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeNullableOctetStringAttribute(long chipClusterPtr, DefaultClusterCallback callback, byte[] value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeNullableOctetStringAttribute(long chipClusterPtr, NullableOctetStringAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeNullableCharStringAttribute(long chipClusterPtr, DefaultClusterCallback callback, String value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeNullableCharStringAttribute(long chipClusterPtr, NullableCharStringAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeNullableEnumAttrAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeNullableEnumAttrAttribute(long chipClusterPtr, NullableEnumAttrAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeNullableStructAttribute(long chipClusterPtr, DefaultClusterCallback callback, ChipStructs.UnitTestingClusterSimpleStruct value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeNullableStructAttribute(long chipClusterPtr, NullableStructAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeNullableRangeRestrictedInt8uAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeNullableRangeRestrictedInt8uAttribute(long chipClusterPtr, NullableRangeRestrictedInt8uAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeNullableRangeRestrictedInt8sAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeNullableRangeRestrictedInt8sAttribute(long chipClusterPtr, NullableRangeRestrictedInt8sAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeNullableRangeRestrictedInt16uAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeNullableRangeRestrictedInt16uAttribute(long chipClusterPtr, NullableRangeRestrictedInt16uAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeNullableRangeRestrictedInt16sAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeNullableRangeRestrictedInt16sAttribute(long chipClusterPtr, NullableRangeRestrictedInt16sAttributeCallback callback, int minInterval, int maxInterval);

    private native void writeWriteOnlyInt8uAttribute(long chipClusterPtr, DefaultClusterCallback callback, Integer value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeWriteOnlyInt8uAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class FaultInjectionCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 4294048774L;

    public FaultInjectionCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void failAtFault(DefaultClusterCallback callback, Integer type, Long id, Long numCallsToSkip, Long numCallsToFail, Boolean takeMutex) {
      failAtFault(chipClusterPtr, callback, type, id, numCallsToSkip, numCallsToFail, takeMutex, null);
    }

    public void failAtFault(DefaultClusterCallback callback, Integer type, Long id, Long numCallsToSkip, Long numCallsToFail, Boolean takeMutex, int timedInvokeTimeoutMs) {
      failAtFault(chipClusterPtr, callback, type, id, numCallsToSkip, numCallsToFail, takeMutex, timedInvokeTimeoutMs);
    }

    public void failRandomlyAtFault(DefaultClusterCallback callback, Integer type, Long id, Integer percentage) {
      failRandomlyAtFault(chipClusterPtr, callback, type, id, percentage, null);
    }

    public void failRandomlyAtFault(DefaultClusterCallback callback, Integer type, Long id, Integer percentage, int timedInvokeTimeoutMs) {
      failRandomlyAtFault(chipClusterPtr, callback, type, id, percentage, timedInvokeTimeoutMs);
    }

    private native void failAtFault(long chipClusterPtr, DefaultClusterCallback callback, Integer type, Long id, Long numCallsToSkip, Long numCallsToFail, Boolean takeMutex, @Nullable Integer timedInvokeTimeoutMs);

    private native void failRandomlyAtFault(long chipClusterPtr, DefaultClusterCallback callback, Integer type, Long id, Integer percentage, @Nullable Integer timedInvokeTimeoutMs);

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }

  public static class SampleMeiCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 4294048800L;

    public SampleMeiCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void ping(DefaultClusterCallback callback) {
      ping(chipClusterPtr, callback, null);
    }

    public void ping(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      ping(chipClusterPtr, callback, timedInvokeTimeoutMs);
    }

    public void addArguments(AddArgumentsResponseCallback callback, Integer arg1, Integer arg2) {
      addArguments(chipClusterPtr, callback, arg1, arg2, null);
    }

    public void addArguments(AddArgumentsResponseCallback callback, Integer arg1, Integer arg2, int timedInvokeTimeoutMs) {
      addArguments(chipClusterPtr, callback, arg1, arg2, timedInvokeTimeoutMs);
    }

    private native void ping(long chipClusterPtr, DefaultClusterCallback callback, @Nullable Integer timedInvokeTimeoutMs);

    private native void addArguments(long chipClusterPtr, AddArgumentsResponseCallback callback, Integer arg1, Integer arg2, @Nullable Integer timedInvokeTimeoutMs);

    public interface AddArgumentsResponseCallback {
      void onSuccess(Integer returnValue);
      void onError(Exception error);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readFlipFlopAttribute(
        BooleanAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void writeFlipFlopAttribute(DefaultClusterCallback callback, Boolean value) {
        writeFlipFlopAttribute(chipClusterPtr, callback, value, null);
    }

    public void writeFlipFlopAttribute(DefaultClusterCallback callback, Boolean value, int timedWriteTimeoutMs) {
        writeFlipFlopAttribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }

    public void subscribeFlipFlopAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFlipFlopAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeGeneratedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAcceptedCommandListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeEventListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeAttributeListAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeFeatureMapAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      long clusterId = CLUSTER_ID;
      long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        } , clusterId, attributeId, true, 0);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
        subscribeClusterRevisionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    private native void writeFlipFlopAttribute(long chipClusterPtr, DefaultClusterCallback callback, Boolean value, @Nullable Integer timedWriteTimeoutMs);

    private native void subscribeFlipFlopAttribute(long chipClusterPtr, BooleanAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeGeneratedCommandListAttribute(long chipClusterPtr, GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAcceptedCommandListAttribute(long chipClusterPtr, AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeEventListAttribute(long chipClusterPtr, EventListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeAttributeListAttribute(long chipClusterPtr, AttributeListAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeFeatureMapAttribute(long chipClusterPtr, LongAttributeCallback callback, int minInterval, int maxInterval);

    private native void subscribeClusterRevisionAttribute(long chipClusterPtr, IntegerAttributeCallback callback, int minInterval, int maxInterval);
  }
}
