/*
 *
 *    Copyright (c) 2023 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

package chip.devicecontroller;

import chip.devicecontroller.model.AttributeState;
import chip.devicecontroller.model.ChipAttributePath;
import chip.devicecontroller.model.ChipEventPath;
import chip.devicecontroller.model.ClusterState;
import chip.devicecontroller.model.EndpointState;
import chip.devicecontroller.model.InvokeElement;
import chip.devicecontroller.model.NodeState;

import javax.annotation.Nullable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;

import static chip.devicecontroller.ChipTLVType.*;

public class ChipClusters {

  public interface BaseClusterCallback {
    void onError(Exception error);
  }

  public interface DefaultClusterCallback extends BaseClusterCallback {
    void onSuccess();
  }

  public interface BaseAttributeCallback {
    void onError(Exception error);
    default void onSubscriptionEstablished(long subscriptionId) {}
  }

  public interface CharStringAttributeCallback extends BaseAttributeCallback {
    /** Indicates a successful read for a CHAR_STRING attribute. */
    void onSuccess(String value);
  }

  public interface OctetStringAttributeCallback extends BaseAttributeCallback {
    /** Indicates a successful read for an OCTET_STRING attribute. */
    void onSuccess(byte[] value);
  }

  public interface IntegerAttributeCallback extends BaseAttributeCallback {
    void onSuccess(int value);
  }

  public interface LongAttributeCallback extends BaseAttributeCallback {
    void onSuccess(long value);
  }

  public interface BooleanAttributeCallback extends BaseAttributeCallback {
    void onSuccess(boolean value);
  }

  public interface FloatAttributeCallback extends BaseAttributeCallback {
    void onSuccess(float value);
  }

  public interface DoubleAttributeCallback extends BaseAttributeCallback {
    void onSuccess(double value);
  }

  public static abstract class BaseChipCluster {
    protected long chipClusterPtr;

    protected long devicePtr;
    protected int endpointId;

    private Optional<Long> timeoutMillis = Optional.empty();

    public BaseChipCluster(long devicePtr, int endpointId) {
      chipClusterPtr = initWithDevice(devicePtr, endpointId);

      this.devicePtr = devicePtr;
      this.endpointId = endpointId;
    }

    /**
     * Sets the timeout, in milliseconds, after which commands sent through this cluster will fail
     * with a timeout (regardless of whether or not a response has been received). If set to an
     * empty optional, the default timeout will be used.
     */
    public void setCommandTimeout(Optional<Long> timeoutMillis) {
      this.timeoutMillis = timeoutMillis;
    }

    /** Returns the current timeout (in milliseconds) for commands sent through this cluster. */
    public Optional<Long> getCommandTimeout() {
      return timeoutMillis == null ? Optional.empty() : timeoutMillis;
    }

    public abstract long initWithDevice(long devicePtr, int endpointId);

    protected void readAttribute(
        ReportCallbackImpl callback,
        long clusterId,
        long attributeId,
        boolean isFabricFiltered) {
      ReportCallbackJni jniCallback = new ReportCallbackJni(null, callback, null);
      readAttribute(jniCallback.getCallbackHandle(), devicePtr, endpointId, clusterId, attributeId, isFabricFiltered, timeoutMillis.orElse(0L));
    }

    protected void writeAttribute(
        WriteAttributesCallbackImpl callback,
        long clusterId,
        long attributeId,
        BaseTLVType value,
        int timedRequestTimeoutMs) {
      WriteAttributesCallbackJni jniCallback = new WriteAttributesCallbackJni(callback);
      byte[] tlv = encodeToTlv(value);
      writeAttribute(jniCallback.getCallbackHandle(), devicePtr, endpointId, clusterId, attributeId, tlv, timedRequestTimeoutMs, timeoutMillis.orElse(0L));
    }

    protected void subscribeAttribute(
        ReportCallbackImpl callback,
        long clusterId,
        long attributeId,
        int minInterval,
        int maxInterval) {
      ReportCallbackJni jniCallback = new ReportCallbackJni(callback, callback, null);
      subscribeAttribute(jniCallback.getCallbackHandle(), devicePtr, endpointId, clusterId, attributeId, minInterval, maxInterval, false, true, timeoutMillis.orElse(0L));
    }

    protected void invoke(
        InvokeCallbackImpl callback,
        long clusterId,
        long commandId,
        BaseTLVType value,
        int timedRequestTimeoutMs) {
      InvokeCallbackJni jniCallback = new InvokeCallbackJni(callback);
      byte[] tlv = encodeToTlv(value);
      invoke(jniCallback.getCallbackHandle(), devicePtr, endpointId, clusterId, commandId, tlv, timedRequestTimeoutMs, timeoutMillis.orElse(0L));
    }

    private native void readAttribute(long callbackHandle, long devicePtr, int endpointId, long clusterId, long attributeId, boolean isFabricFiltered, long imTimeoutMs);

    private native void writeAttribute(long callbackHandle, long devicePtr, int endpointId, long clusterId, long attributeId, byte[] tlv, int timedRequestTimeoutMs, long imTimeoutMs);

    private native void subscribeAttribute(long callbackHaandle, long devicePtr, int endpointId, long clusterId, long attributeId, int minInterval, int maxInterval, boolean keepSubscriptions, boolean isFabricFiltered, long imTimeoutMs);

    private native void invoke(long callbackHaandle, long devicePtr, int endpointId, long clusterId, long commandId, byte[] tlv, int timedRequestTimeoutMs, long imTimeoutMs);

    private static native byte[] encodeToTlv(BaseTLVType value);

    static native BaseTLVType decodeFromTlv(byte[] tlv);

    @Deprecated
    public void deleteCluster(long chipClusterPtr) {}
    
    @SuppressWarnings("deprecation")
    protected void finalize() throws Throwable {
      super.finalize();

      if (chipClusterPtr != 0) {
        deleteCluster(chipClusterPtr);
        chipClusterPtr = 0;
      }
    }
  }

  abstract static class ReportCallbackImpl implements ReportCallback, SubscriptionEstablishedCallback {
    private BaseAttributeCallback callback;
    private ChipAttributePath path;

    private static final long CHIP_ERROR_UNSUPPORTED_ATTRIBUTE = 0x86;

    ReportCallbackImpl(BaseAttributeCallback callback, ChipAttributePath path) {
      this.callback = callback;
      this.path = path;
    }

    @Override
    public void onError(
        @Nullable ChipAttributePath attributePath,
        @Nullable ChipEventPath eventPath,
        @Nonnull Exception e) {
      callback.onError(e);
    }

    @Override
    public void onReport(NodeState nodeState) {
      if (nodeState == null) {
        callback.onError(new ChipClusterException());
        return;
      }

      EndpointState endpointState = nodeState.getEndpointState((int)path.getEndpointId().getId());
      if (endpointState == null) {
        callback.onError(new ChipClusterException(CHIP_ERROR_UNSUPPORTED_ATTRIBUTE));
        return;
      }

      ClusterState clusterState = endpointState.getClusterState(path.getClusterId().getId());
      if (clusterState == null) {
        callback.onError(new ChipClusterException(CHIP_ERROR_UNSUPPORTED_ATTRIBUTE));
        return;
      }

      AttributeState attributeState = clusterState.getAttributeState(path.getAttributeId().getId());
      if (attributeState == null) {
        callback.onError(new ChipClusterException(CHIP_ERROR_UNSUPPORTED_ATTRIBUTE));
        return;
      }

      byte[] tlv = attributeState.getTlv();
      if (tlv == null) {
          callback.onError(new ChipClusterException(CHIP_ERROR_UNSUPPORTED_ATTRIBUTE));
          return;
      }

      onSuccess(tlv);
    }

    @Override
    public void onSubscriptionEstablished(long subscriptionId) {
      callback.onSubscriptionEstablished(subscriptionId);
    }

    public abstract void onSuccess(byte[] tlv);
  }

  static class WriteAttributesCallbackImpl implements WriteAttributesCallback {
    private DefaultClusterCallback callback;

    WriteAttributesCallbackImpl(DefaultClusterCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onResponse(ChipAttributePath attributePath) {
      callback.onSuccess();
    }

    @Override
    public void onError(@Nullable ChipAttributePath attributePath, Exception e) {
      callback.onError(e);
    }
  }

  abstract static class InvokeCallbackImpl implements InvokeCallback {
    private BaseClusterCallback callback;

    private static final long CHIP_ERROR_UNSUPPORTED_COMMAND = 0x81;

    InvokeCallbackImpl(BaseClusterCallback callback) {
      this.callback = callback;
    }

    public void onError(Exception e) {
      callback.onError(e);
    }

    public void onResponse(InvokeElement invokeElement, long successCode) {
      byte[] tlv = invokeElement.getTlvByteArray();
      if (tlv == null) {
        callback.onError(new ChipClusterException(CHIP_ERROR_UNSUPPORTED_COMMAND));
        return;
      }
      BaseTLVType value = BaseChipCluster.decodeFromTlv(tlv);
      if (value == null || value.type() != TLVType.Struct) {
        callback.onError(new ChipClusterException(CHIP_ERROR_UNSUPPORTED_COMMAND));
        return;
      }
      onResponse((StructType)value);
    }

    public abstract void onResponse(StructType value);
  }

  public static class IdentifyCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 3L;

    public IdentifyCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void identify(DefaultClusterCallback callback, Integer identifyTime) {
      identify(callback, identifyTime, 0);
    }

    public void identify(DefaultClusterCallback callback, Integer identifyTime, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long identifyTimeFieldID = 0L;
      BaseTLVType identifyTimetlvValue = new UIntType(identifyTime);
      elements.add(new StructElement(identifyTimeFieldID, identifyTimetlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void triggerEffect(DefaultClusterCallback callback, Integer effectIdentifier, Integer effectVariant) {
      triggerEffect(callback, effectIdentifier, effectVariant, 0);
    }

    public void triggerEffect(DefaultClusterCallback callback, Integer effectIdentifier, Integer effectVariant, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 64L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long effectIdentifierFieldID = 0L;
      BaseTLVType effectIdentifiertlvValue = new UIntType(effectIdentifier);
      elements.add(new StructElement(effectIdentifierFieldID, effectIdentifiertlvValue));

      final long effectVariantFieldID = 1L;
      BaseTLVType effectVarianttlvValue = new UIntType(effectVariant);
      elements.add(new StructElement(effectVariantFieldID, effectVarianttlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readIdentifyTimeAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeIdentifyTimeAttribute(DefaultClusterCallback callback, Integer value) {
      writeIdentifyTimeAttribute(callback, value, 0);
    }

    public void writeIdentifyTimeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeIdentifyTimeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readIdentifyTypeAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeIdentifyTypeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class GroupsCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 4L;

    public GroupsCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void addGroup(AddGroupResponseCallback callback, Integer groupID, String groupName) {
      addGroup(callback, groupID, groupName, 0);
    }

    public void addGroup(AddGroupResponseCallback callback, Integer groupID, String groupName, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long groupIDFieldID = 0L;
      BaseTLVType groupIDtlvValue = new UIntType(groupID);
      elements.add(new StructElement(groupIDFieldID, groupIDtlvValue));

      final long groupNameFieldID = 1L;
      BaseTLVType groupNametlvValue = new StringType(groupName);
      elements.add(new StructElement(groupNameFieldID, groupNametlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long groupIDFieldID = 1L;
          Integer groupID = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == groupIDFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                groupID = castingValue.value(Integer.class);
              }
            }
          }
          callback.onSuccess(status, groupID);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void viewGroup(ViewGroupResponseCallback callback, Integer groupID) {
      viewGroup(callback, groupID, 0);
    }

    public void viewGroup(ViewGroupResponseCallback callback, Integer groupID, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 1L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long groupIDFieldID = 0L;
      BaseTLVType groupIDtlvValue = new UIntType(groupID);
      elements.add(new StructElement(groupIDFieldID, groupIDtlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long groupIDFieldID = 1L;
          Integer groupID = null;
          final long groupNameFieldID = 2L;
          String groupName = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == groupIDFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                groupID = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == groupNameFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                groupName = castingValue.value(String.class);
              }
            }
          }
          callback.onSuccess(status, groupID, groupName);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void getGroupMembership(GetGroupMembershipResponseCallback callback, ArrayList<Integer> groupList) {
      getGroupMembership(callback, groupList, 0);
    }

    public void getGroupMembership(GetGroupMembershipResponseCallback callback, ArrayList<Integer> groupList, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 2L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long groupListFieldID = 0L;
      BaseTLVType groupListtlvValue = ArrayType.generateArrayType(groupList, (elementgroupList) -> new UIntType(elementgroupList));
      elements.add(new StructElement(groupListFieldID, groupListtlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long capacityFieldID = 0L;
          @Nullable Integer capacity = null;
          final long groupListFieldID = 1L;
          ArrayList<Integer> groupList = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == capacityFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                capacity = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == groupListFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Array) {
                ArrayType castingValue = element.value(ArrayType.class);
                groupList = castingValue.map((elementcastingValue) -> elementcastingValue.value(Integer.class));
              }
            }
          }
          callback.onSuccess(capacity, groupList);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void removeGroup(RemoveGroupResponseCallback callback, Integer groupID) {
      removeGroup(callback, groupID, 0);
    }

    public void removeGroup(RemoveGroupResponseCallback callback, Integer groupID, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 3L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long groupIDFieldID = 0L;
      BaseTLVType groupIDtlvValue = new UIntType(groupID);
      elements.add(new StructElement(groupIDFieldID, groupIDtlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long groupIDFieldID = 1L;
          Integer groupID = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == groupIDFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                groupID = castingValue.value(Integer.class);
              }
            }
          }
          callback.onSuccess(status, groupID);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void removeAllGroups(DefaultClusterCallback callback) {
      removeAllGroups(callback, 0);
    }

    public void removeAllGroups(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 4L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void addGroupIfIdentifying(DefaultClusterCallback callback, Integer groupID, String groupName) {
      addGroupIfIdentifying(callback, groupID, groupName, 0);
    }

    public void addGroupIfIdentifying(DefaultClusterCallback callback, Integer groupID, String groupName, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 5L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long groupIDFieldID = 0L;
      BaseTLVType groupIDtlvValue = new UIntType(groupID);
      elements.add(new StructElement(groupIDFieldID, groupIDtlvValue));

      final long groupNameFieldID = 1L;
      BaseTLVType groupNametlvValue = new StringType(groupName);
      elements.add(new StructElement(groupNameFieldID, groupNametlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public interface AddGroupResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer status, Integer groupID);
    }

    public interface ViewGroupResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer status, Integer groupID, String groupName);
    }

    public interface GetGroupMembershipResponseCallback extends BaseClusterCallback {
      void onSuccess(@Nullable Integer capacity, ArrayList<Integer> groupList);
    }

    public interface RemoveGroupResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer status, Integer groupID);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readNameSupportAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeNameSupportAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class ScenesCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 5L;

    public ScenesCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void addScene(AddSceneResponseCallback callback, Integer groupID, Integer sceneID, Integer transitionTime, String sceneName, ArrayList<ChipStructs.ScenesClusterExtensionFieldSet> extensionFieldSets) {
      addScene(callback, groupID, sceneID, transitionTime, sceneName, extensionFieldSets, 0);
    }

    public void addScene(AddSceneResponseCallback callback, Integer groupID, Integer sceneID, Integer transitionTime, String sceneName, ArrayList<ChipStructs.ScenesClusterExtensionFieldSet> extensionFieldSets, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long groupIDFieldID = 0L;
      BaseTLVType groupIDtlvValue = new UIntType(groupID);
      elements.add(new StructElement(groupIDFieldID, groupIDtlvValue));

      final long sceneIDFieldID = 1L;
      BaseTLVType sceneIDtlvValue = new UIntType(sceneID);
      elements.add(new StructElement(sceneIDFieldID, sceneIDtlvValue));

      final long transitionTimeFieldID = 2L;
      BaseTLVType transitionTimetlvValue = new UIntType(transitionTime);
      elements.add(new StructElement(transitionTimeFieldID, transitionTimetlvValue));

      final long sceneNameFieldID = 3L;
      BaseTLVType sceneNametlvValue = new StringType(sceneName);
      elements.add(new StructElement(sceneNameFieldID, sceneNametlvValue));

      final long extensionFieldSetsFieldID = 4L;
      BaseTLVType extensionFieldSetstlvValue = ArrayType.generateArrayType(extensionFieldSets, (elementextensionFieldSets) -> elementextensionFieldSets.encodeTlv());
      elements.add(new StructElement(extensionFieldSetsFieldID, extensionFieldSetstlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long groupIDFieldID = 1L;
          Integer groupID = null;
          final long sceneIDFieldID = 2L;
          Integer sceneID = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == groupIDFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                groupID = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == sceneIDFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                sceneID = castingValue.value(Integer.class);
              }
            }
          }
          callback.onSuccess(status, groupID, sceneID);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void viewScene(ViewSceneResponseCallback callback, Integer groupID, Integer sceneID) {
      viewScene(callback, groupID, sceneID, 0);
    }

    public void viewScene(ViewSceneResponseCallback callback, Integer groupID, Integer sceneID, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 1L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long groupIDFieldID = 0L;
      BaseTLVType groupIDtlvValue = new UIntType(groupID);
      elements.add(new StructElement(groupIDFieldID, groupIDtlvValue));

      final long sceneIDFieldID = 1L;
      BaseTLVType sceneIDtlvValue = new UIntType(sceneID);
      elements.add(new StructElement(sceneIDFieldID, sceneIDtlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long groupIDFieldID = 1L;
          Integer groupID = null;
          final long sceneIDFieldID = 2L;
          Integer sceneID = null;
          final long transitionTimeFieldID = 3L;
          Optional<Integer> transitionTime = Optional.empty();
          final long sceneNameFieldID = 4L;
          Optional<String> sceneName = Optional.empty();
          final long extensionFieldSetsFieldID = 5L;
          Optional<ArrayList<ChipStructs.ScenesClusterExtensionFieldSet>> extensionFieldSets = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == groupIDFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                groupID = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == sceneIDFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                sceneID = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == transitionTimeFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                transitionTime = Optional.of(castingValue.value(Integer.class));
              }
            } else if (element.contextTagNum() == sceneNameFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                sceneName = Optional.of(castingValue.value(String.class));
              }
            } else if (element.contextTagNum() == extensionFieldSetsFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Array) {
                ArrayType castingValue = element.value(ArrayType.class);
                extensionFieldSets = Optional.of(castingValue.map((elementcastingValue) -> ChipStructs.ScenesClusterExtensionFieldSet.decodeTlv(elementcastingValue)));
              }
            }
          }
          callback.onSuccess(status, groupID, sceneID, transitionTime, sceneName, extensionFieldSets);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void removeScene(RemoveSceneResponseCallback callback, Integer groupID, Integer sceneID) {
      removeScene(callback, groupID, sceneID, 0);
    }

    public void removeScene(RemoveSceneResponseCallback callback, Integer groupID, Integer sceneID, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 2L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long groupIDFieldID = 0L;
      BaseTLVType groupIDtlvValue = new UIntType(groupID);
      elements.add(new StructElement(groupIDFieldID, groupIDtlvValue));

      final long sceneIDFieldID = 1L;
      BaseTLVType sceneIDtlvValue = new UIntType(sceneID);
      elements.add(new StructElement(sceneIDFieldID, sceneIDtlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long groupIDFieldID = 1L;
          Integer groupID = null;
          final long sceneIDFieldID = 2L;
          Integer sceneID = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == groupIDFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                groupID = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == sceneIDFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                sceneID = castingValue.value(Integer.class);
              }
            }
          }
          callback.onSuccess(status, groupID, sceneID);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void removeAllScenes(RemoveAllScenesResponseCallback callback, Integer groupID) {
      removeAllScenes(callback, groupID, 0);
    }

    public void removeAllScenes(RemoveAllScenesResponseCallback callback, Integer groupID, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 3L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long groupIDFieldID = 0L;
      BaseTLVType groupIDtlvValue = new UIntType(groupID);
      elements.add(new StructElement(groupIDFieldID, groupIDtlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long groupIDFieldID = 1L;
          Integer groupID = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == groupIDFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                groupID = castingValue.value(Integer.class);
              }
            }
          }
          callback.onSuccess(status, groupID);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void storeScene(StoreSceneResponseCallback callback, Integer groupID, Integer sceneID) {
      storeScene(callback, groupID, sceneID, 0);
    }

    public void storeScene(StoreSceneResponseCallback callback, Integer groupID, Integer sceneID, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 4L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long groupIDFieldID = 0L;
      BaseTLVType groupIDtlvValue = new UIntType(groupID);
      elements.add(new StructElement(groupIDFieldID, groupIDtlvValue));

      final long sceneIDFieldID = 1L;
      BaseTLVType sceneIDtlvValue = new UIntType(sceneID);
      elements.add(new StructElement(sceneIDFieldID, sceneIDtlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long groupIDFieldID = 1L;
          Integer groupID = null;
          final long sceneIDFieldID = 2L;
          Integer sceneID = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == groupIDFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                groupID = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == sceneIDFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                sceneID = castingValue.value(Integer.class);
              }
            }
          }
          callback.onSuccess(status, groupID, sceneID);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void recallScene(DefaultClusterCallback callback, Integer groupID, Integer sceneID, @Nullable Optional<Integer> transitionTime) {
      recallScene(callback, groupID, sceneID, transitionTime, 0);
    }

    public void recallScene(DefaultClusterCallback callback, Integer groupID, Integer sceneID, @Nullable Optional<Integer> transitionTime, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 5L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long groupIDFieldID = 0L;
      BaseTLVType groupIDtlvValue = new UIntType(groupID);
      elements.add(new StructElement(groupIDFieldID, groupIDtlvValue));

      final long sceneIDFieldID = 1L;
      BaseTLVType sceneIDtlvValue = new UIntType(sceneID);
      elements.add(new StructElement(sceneIDFieldID, sceneIDtlvValue));

      final long transitionTimeFieldID = 2L;
      BaseTLVType transitionTimetlvValue = transitionTime != null ? transitionTime.<BaseTLVType>map((nonOptionaltransitionTime) -> new UIntType(nonOptionaltransitionTime)).orElse(new EmptyType()) : new NullType();
      elements.add(new StructElement(transitionTimeFieldID, transitionTimetlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void getSceneMembership(GetSceneMembershipResponseCallback callback, Integer groupID) {
      getSceneMembership(callback, groupID, 0);
    }

    public void getSceneMembership(GetSceneMembershipResponseCallback callback, Integer groupID, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 6L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long groupIDFieldID = 0L;
      BaseTLVType groupIDtlvValue = new UIntType(groupID);
      elements.add(new StructElement(groupIDFieldID, groupIDtlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long capacityFieldID = 1L;
          @Nullable Integer capacity = null;
          final long groupIDFieldID = 2L;
          Integer groupID = null;
          final long sceneListFieldID = 3L;
          Optional<ArrayList<Integer>> sceneList = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == capacityFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                capacity = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == groupIDFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                groupID = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == sceneListFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Array) {
                ArrayType castingValue = element.value(ArrayType.class);
                sceneList = Optional.of(castingValue.map((elementcastingValue) -> elementcastingValue.value(Integer.class)));
              }
            }
          }
          callback.onSuccess(status, capacity, groupID, sceneList);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void enhancedAddScene(EnhancedAddSceneResponseCallback callback, Integer groupID, Integer sceneID, Integer transitionTime, String sceneName, ArrayList<ChipStructs.ScenesClusterExtensionFieldSet> extensionFieldSets) {
      enhancedAddScene(callback, groupID, sceneID, transitionTime, sceneName, extensionFieldSets, 0);
    }

    public void enhancedAddScene(EnhancedAddSceneResponseCallback callback, Integer groupID, Integer sceneID, Integer transitionTime, String sceneName, ArrayList<ChipStructs.ScenesClusterExtensionFieldSet> extensionFieldSets, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 64L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long groupIDFieldID = 0L;
      BaseTLVType groupIDtlvValue = new UIntType(groupID);
      elements.add(new StructElement(groupIDFieldID, groupIDtlvValue));

      final long sceneIDFieldID = 1L;
      BaseTLVType sceneIDtlvValue = new UIntType(sceneID);
      elements.add(new StructElement(sceneIDFieldID, sceneIDtlvValue));

      final long transitionTimeFieldID = 2L;
      BaseTLVType transitionTimetlvValue = new UIntType(transitionTime);
      elements.add(new StructElement(transitionTimeFieldID, transitionTimetlvValue));

      final long sceneNameFieldID = 3L;
      BaseTLVType sceneNametlvValue = new StringType(sceneName);
      elements.add(new StructElement(sceneNameFieldID, sceneNametlvValue));

      final long extensionFieldSetsFieldID = 4L;
      BaseTLVType extensionFieldSetstlvValue = ArrayType.generateArrayType(extensionFieldSets, (elementextensionFieldSets) -> elementextensionFieldSets.encodeTlv());
      elements.add(new StructElement(extensionFieldSetsFieldID, extensionFieldSetstlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long groupIDFieldID = 1L;
          Integer groupID = null;
          final long sceneIDFieldID = 2L;
          Integer sceneID = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == groupIDFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                groupID = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == sceneIDFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                sceneID = castingValue.value(Integer.class);
              }
            }
          }
          callback.onSuccess(status, groupID, sceneID);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void enhancedViewScene(EnhancedViewSceneResponseCallback callback, Integer groupID, Integer sceneID) {
      enhancedViewScene(callback, groupID, sceneID, 0);
    }

    public void enhancedViewScene(EnhancedViewSceneResponseCallback callback, Integer groupID, Integer sceneID, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 65L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long groupIDFieldID = 0L;
      BaseTLVType groupIDtlvValue = new UIntType(groupID);
      elements.add(new StructElement(groupIDFieldID, groupIDtlvValue));

      final long sceneIDFieldID = 1L;
      BaseTLVType sceneIDtlvValue = new UIntType(sceneID);
      elements.add(new StructElement(sceneIDFieldID, sceneIDtlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long groupIDFieldID = 1L;
          Integer groupID = null;
          final long sceneIDFieldID = 2L;
          Integer sceneID = null;
          final long transitionTimeFieldID = 3L;
          Optional<Integer> transitionTime = Optional.empty();
          final long sceneNameFieldID = 4L;
          Optional<String> sceneName = Optional.empty();
          final long extensionFieldSetsFieldID = 5L;
          Optional<ArrayList<ChipStructs.ScenesClusterExtensionFieldSet>> extensionFieldSets = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == groupIDFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                groupID = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == sceneIDFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                sceneID = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == transitionTimeFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                transitionTime = Optional.of(castingValue.value(Integer.class));
              }
            } else if (element.contextTagNum() == sceneNameFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                sceneName = Optional.of(castingValue.value(String.class));
              }
            } else if (element.contextTagNum() == extensionFieldSetsFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Array) {
                ArrayType castingValue = element.value(ArrayType.class);
                extensionFieldSets = Optional.of(castingValue.map((elementcastingValue) -> ChipStructs.ScenesClusterExtensionFieldSet.decodeTlv(elementcastingValue)));
              }
            }
          }
          callback.onSuccess(status, groupID, sceneID, transitionTime, sceneName, extensionFieldSets);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void copyScene(CopySceneResponseCallback callback, Integer mode, Integer groupIdentifierFrom, Integer sceneIdentifierFrom, Integer groupIdentifierTo, Integer sceneIdentifierTo) {
      copyScene(callback, mode, groupIdentifierFrom, sceneIdentifierFrom, groupIdentifierTo, sceneIdentifierTo, 0);
    }

    public void copyScene(CopySceneResponseCallback callback, Integer mode, Integer groupIdentifierFrom, Integer sceneIdentifierFrom, Integer groupIdentifierTo, Integer sceneIdentifierTo, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 66L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long modeFieldID = 0L;
      BaseTLVType modetlvValue = new UIntType(mode);
      elements.add(new StructElement(modeFieldID, modetlvValue));

      final long groupIdentifierFromFieldID = 1L;
      BaseTLVType groupIdentifierFromtlvValue = new UIntType(groupIdentifierFrom);
      elements.add(new StructElement(groupIdentifierFromFieldID, groupIdentifierFromtlvValue));

      final long sceneIdentifierFromFieldID = 2L;
      BaseTLVType sceneIdentifierFromtlvValue = new UIntType(sceneIdentifierFrom);
      elements.add(new StructElement(sceneIdentifierFromFieldID, sceneIdentifierFromtlvValue));

      final long groupIdentifierToFieldID = 3L;
      BaseTLVType groupIdentifierTotlvValue = new UIntType(groupIdentifierTo);
      elements.add(new StructElement(groupIdentifierToFieldID, groupIdentifierTotlvValue));

      final long sceneIdentifierToFieldID = 4L;
      BaseTLVType sceneIdentifierTotlvValue = new UIntType(sceneIdentifierTo);
      elements.add(new StructElement(sceneIdentifierToFieldID, sceneIdentifierTotlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long groupIdentifierFromFieldID = 1L;
          Integer groupIdentifierFrom = null;
          final long sceneIdentifierFromFieldID = 2L;
          Integer sceneIdentifierFrom = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == groupIdentifierFromFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                groupIdentifierFrom = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == sceneIdentifierFromFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                sceneIdentifierFrom = castingValue.value(Integer.class);
              }
            }
          }
          callback.onSuccess(status, groupIdentifierFrom, sceneIdentifierFrom);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public interface AddSceneResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer status, Integer groupID, Integer sceneID);
    }

    public interface ViewSceneResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer status, Integer groupID, Integer sceneID, Optional<Integer> transitionTime, Optional<String> sceneName, Optional<ArrayList<ChipStructs.ScenesClusterExtensionFieldSet>> extensionFieldSets);
    }

    public interface RemoveSceneResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer status, Integer groupID, Integer sceneID);
    }

    public interface RemoveAllScenesResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer status, Integer groupID);
    }

    public interface StoreSceneResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer status, Integer groupID, Integer sceneID);
    }

    public interface GetSceneMembershipResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer status, @Nullable Integer capacity, Integer groupID, Optional<ArrayList<Integer>> sceneList);
    }

    public interface EnhancedAddSceneResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer status, Integer groupID, Integer sceneID);
    }

    public interface EnhancedViewSceneResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer status, Integer groupID, Integer sceneID, Optional<Integer> transitionTime, Optional<String> sceneName, Optional<ArrayList<ChipStructs.ScenesClusterExtensionFieldSet>> extensionFieldSets);
    }

    public interface CopySceneResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer status, Integer groupIdentifierFrom, Integer sceneIdentifierFrom);
    }

    public interface LastConfiguredByAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readSceneCountAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeSceneCountAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readCurrentSceneAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeCurrentSceneAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readCurrentGroupAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeCurrentGroupAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readSceneValidAttribute(
        BooleanAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeSceneValidAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readNameSupportAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeNameSupportAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readLastConfiguredByAttribute(
        LastConfiguredByAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeLastConfiguredByAttribute(
        LastConfiguredByAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readSceneTableSizeAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeSceneTableSizeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readRemainingCapacityAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeRemainingCapacityAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class OnOffCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 6L;

    public OnOffCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void off(DefaultClusterCallback callback) {
      off(callback, 0);
    }

    public void off(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void on(DefaultClusterCallback callback) {
      on(callback, 0);
    }

    public void on(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 1L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void toggle(DefaultClusterCallback callback) {
      toggle(callback, 0);
    }

    public void toggle(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 2L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void offWithEffect(DefaultClusterCallback callback, Integer effectIdentifier, Integer effectVariant) {
      offWithEffect(callback, effectIdentifier, effectVariant, 0);
    }

    public void offWithEffect(DefaultClusterCallback callback, Integer effectIdentifier, Integer effectVariant, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 64L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long effectIdentifierFieldID = 0L;
      BaseTLVType effectIdentifiertlvValue = new UIntType(effectIdentifier);
      elements.add(new StructElement(effectIdentifierFieldID, effectIdentifiertlvValue));

      final long effectVariantFieldID = 1L;
      BaseTLVType effectVarianttlvValue = new UIntType(effectVariant);
      elements.add(new StructElement(effectVariantFieldID, effectVarianttlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void onWithRecallGlobalScene(DefaultClusterCallback callback) {
      onWithRecallGlobalScene(callback, 0);
    }

    public void onWithRecallGlobalScene(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 65L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void onWithTimedOff(DefaultClusterCallback callback, Integer onOffControl, Integer onTime, Integer offWaitTime) {
      onWithTimedOff(callback, onOffControl, onTime, offWaitTime, 0);
    }

    public void onWithTimedOff(DefaultClusterCallback callback, Integer onOffControl, Integer onTime, Integer offWaitTime, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 66L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long onOffControlFieldID = 0L;
      BaseTLVType onOffControltlvValue = new UIntType(onOffControl);
      elements.add(new StructElement(onOffControlFieldID, onOffControltlvValue));

      final long onTimeFieldID = 1L;
      BaseTLVType onTimetlvValue = new UIntType(onTime);
      elements.add(new StructElement(onTimeFieldID, onTimetlvValue));

      final long offWaitTimeFieldID = 2L;
      BaseTLVType offWaitTimetlvValue = new UIntType(offWaitTime);
      elements.add(new StructElement(offWaitTimeFieldID, offWaitTimetlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public interface StartUpOnOffAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readOnOffAttribute(
        BooleanAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeOnOffAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGlobalSceneControlAttribute(
        BooleanAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16384L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGlobalSceneControlAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16384L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readOnTimeAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16385L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeOnTimeAttribute(DefaultClusterCallback callback, Integer value) {
      writeOnTimeAttribute(callback, value, 0);
    }

    public void writeOnTimeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16385L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeOnTimeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16385L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readOffWaitTimeAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16386L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeOffWaitTimeAttribute(DefaultClusterCallback callback, Integer value) {
      writeOffWaitTimeAttribute(callback, value, 0);
    }

    public void writeOffWaitTimeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16386L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeOffWaitTimeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16386L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readStartUpOnOffAttribute(
        StartUpOnOffAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16387L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeStartUpOnOffAttribute(DefaultClusterCallback callback, Integer value) {
      writeStartUpOnOffAttribute(callback, value, 0);
    }

    public void writeStartUpOnOffAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16387L;
      
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeStartUpOnOffAttribute(
        StartUpOnOffAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16387L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class OnOffSwitchConfigurationCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 7L;

    public OnOffSwitchConfigurationCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readSwitchTypeAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeSwitchTypeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readSwitchActionsAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeSwitchActionsAttribute(DefaultClusterCallback callback, Integer value) {
      writeSwitchActionsAttribute(callback, value, 0);
    }

    public void writeSwitchActionsAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeSwitchActionsAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class LevelControlCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 8L;

    public LevelControlCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void moveToLevel(DefaultClusterCallback callback, Integer level, @Nullable Integer transitionTime, Integer optionsMask, Integer optionsOverride) {
      moveToLevel(callback, level, transitionTime, optionsMask, optionsOverride, 0);
    }

    public void moveToLevel(DefaultClusterCallback callback, Integer level, @Nullable Integer transitionTime, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long levelFieldID = 0L;
      BaseTLVType leveltlvValue = new UIntType(level);
      elements.add(new StructElement(levelFieldID, leveltlvValue));

      final long transitionTimeFieldID = 1L;
      BaseTLVType transitionTimetlvValue = transitionTime != null ? new UIntType(transitionTime) : new NullType();
      elements.add(new StructElement(transitionTimeFieldID, transitionTimetlvValue));

      final long optionsMaskFieldID = 2L;
      BaseTLVType optionsMasktlvValue = new UIntType(optionsMask);
      elements.add(new StructElement(optionsMaskFieldID, optionsMasktlvValue));

      final long optionsOverrideFieldID = 3L;
      BaseTLVType optionsOverridetlvValue = new UIntType(optionsOverride);
      elements.add(new StructElement(optionsOverrideFieldID, optionsOverridetlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void move(DefaultClusterCallback callback, Integer moveMode, @Nullable Integer rate, Integer optionsMask, Integer optionsOverride) {
      move(callback, moveMode, rate, optionsMask, optionsOverride, 0);
    }

    public void move(DefaultClusterCallback callback, Integer moveMode, @Nullable Integer rate, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 1L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long moveModeFieldID = 0L;
      BaseTLVType moveModetlvValue = new UIntType(moveMode);
      elements.add(new StructElement(moveModeFieldID, moveModetlvValue));

      final long rateFieldID = 1L;
      BaseTLVType ratetlvValue = rate != null ? new UIntType(rate) : new NullType();
      elements.add(new StructElement(rateFieldID, ratetlvValue));

      final long optionsMaskFieldID = 2L;
      BaseTLVType optionsMasktlvValue = new UIntType(optionsMask);
      elements.add(new StructElement(optionsMaskFieldID, optionsMasktlvValue));

      final long optionsOverrideFieldID = 3L;
      BaseTLVType optionsOverridetlvValue = new UIntType(optionsOverride);
      elements.add(new StructElement(optionsOverrideFieldID, optionsOverridetlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void step(DefaultClusterCallback callback, Integer stepMode, Integer stepSize, @Nullable Integer transitionTime, Integer optionsMask, Integer optionsOverride) {
      step(callback, stepMode, stepSize, transitionTime, optionsMask, optionsOverride, 0);
    }

    public void step(DefaultClusterCallback callback, Integer stepMode, Integer stepSize, @Nullable Integer transitionTime, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 2L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long stepModeFieldID = 0L;
      BaseTLVType stepModetlvValue = new UIntType(stepMode);
      elements.add(new StructElement(stepModeFieldID, stepModetlvValue));

      final long stepSizeFieldID = 1L;
      BaseTLVType stepSizetlvValue = new UIntType(stepSize);
      elements.add(new StructElement(stepSizeFieldID, stepSizetlvValue));

      final long transitionTimeFieldID = 2L;
      BaseTLVType transitionTimetlvValue = transitionTime != null ? new UIntType(transitionTime) : new NullType();
      elements.add(new StructElement(transitionTimeFieldID, transitionTimetlvValue));

      final long optionsMaskFieldID = 3L;
      BaseTLVType optionsMasktlvValue = new UIntType(optionsMask);
      elements.add(new StructElement(optionsMaskFieldID, optionsMasktlvValue));

      final long optionsOverrideFieldID = 4L;
      BaseTLVType optionsOverridetlvValue = new UIntType(optionsOverride);
      elements.add(new StructElement(optionsOverrideFieldID, optionsOverridetlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void stop(DefaultClusterCallback callback, Integer optionsMask, Integer optionsOverride) {
      stop(callback, optionsMask, optionsOverride, 0);
    }

    public void stop(DefaultClusterCallback callback, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 3L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long optionsMaskFieldID = 0L;
      BaseTLVType optionsMasktlvValue = new UIntType(optionsMask);
      elements.add(new StructElement(optionsMaskFieldID, optionsMasktlvValue));

      final long optionsOverrideFieldID = 1L;
      BaseTLVType optionsOverridetlvValue = new UIntType(optionsOverride);
      elements.add(new StructElement(optionsOverrideFieldID, optionsOverridetlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void moveToLevelWithOnOff(DefaultClusterCallback callback, Integer level, @Nullable Integer transitionTime, Integer optionsMask, Integer optionsOverride) {
      moveToLevelWithOnOff(callback, level, transitionTime, optionsMask, optionsOverride, 0);
    }

    public void moveToLevelWithOnOff(DefaultClusterCallback callback, Integer level, @Nullable Integer transitionTime, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 4L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long levelFieldID = 0L;
      BaseTLVType leveltlvValue = new UIntType(level);
      elements.add(new StructElement(levelFieldID, leveltlvValue));

      final long transitionTimeFieldID = 1L;
      BaseTLVType transitionTimetlvValue = transitionTime != null ? new UIntType(transitionTime) : new NullType();
      elements.add(new StructElement(transitionTimeFieldID, transitionTimetlvValue));

      final long optionsMaskFieldID = 2L;
      BaseTLVType optionsMasktlvValue = new UIntType(optionsMask);
      elements.add(new StructElement(optionsMaskFieldID, optionsMasktlvValue));

      final long optionsOverrideFieldID = 3L;
      BaseTLVType optionsOverridetlvValue = new UIntType(optionsOverride);
      elements.add(new StructElement(optionsOverrideFieldID, optionsOverridetlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void moveWithOnOff(DefaultClusterCallback callback, Integer moveMode, @Nullable Integer rate, Integer optionsMask, Integer optionsOverride) {
      moveWithOnOff(callback, moveMode, rate, optionsMask, optionsOverride, 0);
    }

    public void moveWithOnOff(DefaultClusterCallback callback, Integer moveMode, @Nullable Integer rate, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 5L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long moveModeFieldID = 0L;
      BaseTLVType moveModetlvValue = new UIntType(moveMode);
      elements.add(new StructElement(moveModeFieldID, moveModetlvValue));

      final long rateFieldID = 1L;
      BaseTLVType ratetlvValue = rate != null ? new UIntType(rate) : new NullType();
      elements.add(new StructElement(rateFieldID, ratetlvValue));

      final long optionsMaskFieldID = 2L;
      BaseTLVType optionsMasktlvValue = new UIntType(optionsMask);
      elements.add(new StructElement(optionsMaskFieldID, optionsMasktlvValue));

      final long optionsOverrideFieldID = 3L;
      BaseTLVType optionsOverridetlvValue = new UIntType(optionsOverride);
      elements.add(new StructElement(optionsOverrideFieldID, optionsOverridetlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void stepWithOnOff(DefaultClusterCallback callback, Integer stepMode, Integer stepSize, @Nullable Integer transitionTime, Integer optionsMask, Integer optionsOverride) {
      stepWithOnOff(callback, stepMode, stepSize, transitionTime, optionsMask, optionsOverride, 0);
    }

    public void stepWithOnOff(DefaultClusterCallback callback, Integer stepMode, Integer stepSize, @Nullable Integer transitionTime, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 6L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long stepModeFieldID = 0L;
      BaseTLVType stepModetlvValue = new UIntType(stepMode);
      elements.add(new StructElement(stepModeFieldID, stepModetlvValue));

      final long stepSizeFieldID = 1L;
      BaseTLVType stepSizetlvValue = new UIntType(stepSize);
      elements.add(new StructElement(stepSizeFieldID, stepSizetlvValue));

      final long transitionTimeFieldID = 2L;
      BaseTLVType transitionTimetlvValue = transitionTime != null ? new UIntType(transitionTime) : new NullType();
      elements.add(new StructElement(transitionTimeFieldID, transitionTimetlvValue));

      final long optionsMaskFieldID = 3L;
      BaseTLVType optionsMasktlvValue = new UIntType(optionsMask);
      elements.add(new StructElement(optionsMaskFieldID, optionsMasktlvValue));

      final long optionsOverrideFieldID = 4L;
      BaseTLVType optionsOverridetlvValue = new UIntType(optionsOverride);
      elements.add(new StructElement(optionsOverrideFieldID, optionsOverridetlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void stopWithOnOff(DefaultClusterCallback callback, Integer optionsMask, Integer optionsOverride) {
      stopWithOnOff(callback, optionsMask, optionsOverride, 0);
    }

    public void stopWithOnOff(DefaultClusterCallback callback, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 7L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long optionsMaskFieldID = 0L;
      BaseTLVType optionsMasktlvValue = new UIntType(optionsMask);
      elements.add(new StructElement(optionsMaskFieldID, optionsMasktlvValue));

      final long optionsOverrideFieldID = 1L;
      BaseTLVType optionsOverridetlvValue = new UIntType(optionsOverride);
      elements.add(new StructElement(optionsOverrideFieldID, optionsOverridetlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void moveToClosestFrequency(DefaultClusterCallback callback, Integer frequency) {
      moveToClosestFrequency(callback, frequency, 0);
    }

    public void moveToClosestFrequency(DefaultClusterCallback callback, Integer frequency, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 8L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long frequencyFieldID = 0L;
      BaseTLVType frequencytlvValue = new UIntType(frequency);
      elements.add(new StructElement(frequencyFieldID, frequencytlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public interface CurrentLevelAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface OnLevelAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface OnTransitionTimeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface OffTransitionTimeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface DefaultMoveRateAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface StartUpCurrentLevelAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readCurrentLevelAttribute(
        CurrentLevelAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeCurrentLevelAttribute(
        CurrentLevelAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readRemainingTimeAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeRemainingTimeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMinLevelAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMinLevelAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMaxLevelAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMaxLevelAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readCurrentFrequencyAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeCurrentFrequencyAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMinFrequencyAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMinFrequencyAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMaxFrequencyAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMaxFrequencyAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readOptionsAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 15L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeOptionsAttribute(DefaultClusterCallback callback, Integer value) {
      writeOptionsAttribute(callback, value, 0);
    }

    public void writeOptionsAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 15L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeOptionsAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 15L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readOnOffTransitionTimeAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeOnOffTransitionTimeAttribute(DefaultClusterCallback callback, Integer value) {
      writeOnOffTransitionTimeAttribute(callback, value, 0);
    }

    public void writeOnOffTransitionTimeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeOnOffTransitionTimeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readOnLevelAttribute(
        OnLevelAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 17L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeOnLevelAttribute(DefaultClusterCallback callback, Integer value) {
      writeOnLevelAttribute(callback, value, 0);
    }

    public void writeOnLevelAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 17L;
      
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeOnLevelAttribute(
        OnLevelAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 17L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readOnTransitionTimeAttribute(
        OnTransitionTimeAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 18L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeOnTransitionTimeAttribute(DefaultClusterCallback callback, Integer value) {
      writeOnTransitionTimeAttribute(callback, value, 0);
    }

    public void writeOnTransitionTimeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 18L;
      
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeOnTransitionTimeAttribute(
        OnTransitionTimeAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 18L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readOffTransitionTimeAttribute(
        OffTransitionTimeAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 19L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeOffTransitionTimeAttribute(DefaultClusterCallback callback, Integer value) {
      writeOffTransitionTimeAttribute(callback, value, 0);
    }

    public void writeOffTransitionTimeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 19L;
      
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeOffTransitionTimeAttribute(
        OffTransitionTimeAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 19L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readDefaultMoveRateAttribute(
        DefaultMoveRateAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 20L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeDefaultMoveRateAttribute(DefaultClusterCallback callback, Integer value) {
      writeDefaultMoveRateAttribute(callback, value, 0);
    }

    public void writeDefaultMoveRateAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 20L;
      
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeDefaultMoveRateAttribute(
        DefaultMoveRateAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 20L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readStartUpCurrentLevelAttribute(
        StartUpCurrentLevelAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16384L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeStartUpCurrentLevelAttribute(DefaultClusterCallback callback, Integer value) {
      writeStartUpCurrentLevelAttribute(callback, value, 0);
    }

    public void writeStartUpCurrentLevelAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16384L;
      
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeStartUpCurrentLevelAttribute(
        StartUpCurrentLevelAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16384L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class BinaryInputBasicCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 15L;

    public BinaryInputBasicCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readActiveTextAttribute(
        CharStringAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeActiveTextAttribute(DefaultClusterCallback callback, String value) {
      writeActiveTextAttribute(callback, value, 0);
    }

    public void writeActiveTextAttribute(DefaultClusterCallback callback, String value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      
      BaseTLVType tlvValue = new StringType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeActiveTextAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readDescriptionAttribute(
        CharStringAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 28L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeDescriptionAttribute(DefaultClusterCallback callback, String value) {
      writeDescriptionAttribute(callback, value, 0);
    }

    public void writeDescriptionAttribute(DefaultClusterCallback callback, String value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 28L;
      
      BaseTLVType tlvValue = new StringType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeDescriptionAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 28L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readInactiveTextAttribute(
        CharStringAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 46L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeInactiveTextAttribute(DefaultClusterCallback callback, String value) {
      writeInactiveTextAttribute(callback, value, 0);
    }

    public void writeInactiveTextAttribute(DefaultClusterCallback callback, String value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 46L;
      
      BaseTLVType tlvValue = new StringType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeInactiveTextAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 46L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readOutOfServiceAttribute(
        BooleanAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 81L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeOutOfServiceAttribute(DefaultClusterCallback callback, Boolean value) {
      writeOutOfServiceAttribute(callback, value, 0);
    }

    public void writeOutOfServiceAttribute(DefaultClusterCallback callback, Boolean value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 81L;
      
      BaseTLVType tlvValue = new BooleanType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeOutOfServiceAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 81L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readPolarityAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 84L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribePolarityAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 84L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readPresentValueAttribute(
        BooleanAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 85L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writePresentValueAttribute(DefaultClusterCallback callback, Boolean value) {
      writePresentValueAttribute(callback, value, 0);
    }

    public void writePresentValueAttribute(DefaultClusterCallback callback, Boolean value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 85L;
      
      BaseTLVType tlvValue = new BooleanType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribePresentValueAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 85L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readReliabilityAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 103L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeReliabilityAttribute(DefaultClusterCallback callback, Integer value) {
      writeReliabilityAttribute(callback, value, 0);
    }

    public void writeReliabilityAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 103L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeReliabilityAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 103L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readStatusFlagsAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 111L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeStatusFlagsAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 111L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readApplicationTypeAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 256L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeApplicationTypeAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 256L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class PulseWidthModulationCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 28L;

    public PulseWidthModulationCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class DescriptorCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 29L;

    public DescriptorCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface DeviceTypeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.DescriptorClusterDeviceTypeStruct> value);
    }

    public interface ServerListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface ClientListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface PartsListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Integer> value);
    }

    public interface TagListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.DescriptorClusterSemanticTagStruct> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readDeviceTypeListAttribute(
        DeviceTypeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.DescriptorClusterDeviceTypeStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeDeviceTypeListAttribute(
        DeviceTypeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.DescriptorClusterDeviceTypeStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readServerListAttribute(
        ServerListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeServerListAttribute(
        ServerListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClientListAttribute(
        ClientListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClientListAttribute(
        ClientListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readPartsListAttribute(
        PartsListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribePartsListAttribute(
        PartsListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readTagListAttribute(
        TagListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.DescriptorClusterSemanticTagStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeTagListAttribute(
        TagListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.DescriptorClusterSemanticTagStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class BindingCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 30L;

    public BindingCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface BindingAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.BindingClusterTargetStruct> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readBindingAttribute(
        BindingAttributeCallback callback) {
      readBindingAttributeWithFabricFilter(callback, true);
    }

    public void readBindingAttributeWithFabricFilter(
        BindingAttributeCallback callback, boolean isFabricFiltered) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.BindingClusterTargetStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, isFabricFiltered);
    }

    public void writeBindingAttribute(DefaultClusterCallback callback, ArrayList<ChipStructs.BindingClusterTargetStruct> value) {
      writeBindingAttribute(callback, value, 0);
    }

    public void writeBindingAttribute(DefaultClusterCallback callback, ArrayList<ChipStructs.BindingClusterTargetStruct> value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      
      BaseTLVType tlvValue = ArrayType.generateArrayType(value, (elementvalue) -> elementvalue.encodeTlv());
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeBindingAttribute(
        BindingAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.BindingClusterTargetStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class AccessControlCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 31L;

    public AccessControlCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface AclAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.AccessControlClusterAccessControlEntryStruct> value);
    }

    public interface ExtensionAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.AccessControlClusterAccessControlExtensionStruct> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readAclAttribute(
        AclAttributeCallback callback) {
      readAclAttributeWithFabricFilter(callback, true);
    }

    public void readAclAttributeWithFabricFilter(
        AclAttributeCallback callback, boolean isFabricFiltered) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.AccessControlClusterAccessControlEntryStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, isFabricFiltered);
    }

    public void writeAclAttribute(DefaultClusterCallback callback, ArrayList<ChipStructs.AccessControlClusterAccessControlEntryStruct> value) {
      writeAclAttribute(callback, value, 0);
    }

    public void writeAclAttribute(DefaultClusterCallback callback, ArrayList<ChipStructs.AccessControlClusterAccessControlEntryStruct> value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      
      BaseTLVType tlvValue = ArrayType.generateArrayType(value, (elementvalue) -> elementvalue.encodeTlv());
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeAclAttribute(
        AclAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.AccessControlClusterAccessControlEntryStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readExtensionAttribute(
        ExtensionAttributeCallback callback) {
      readExtensionAttributeWithFabricFilter(callback, true);
    }

    public void readExtensionAttributeWithFabricFilter(
        ExtensionAttributeCallback callback, boolean isFabricFiltered) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.AccessControlClusterAccessControlExtensionStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, isFabricFiltered);
    }

    public void writeExtensionAttribute(DefaultClusterCallback callback, ArrayList<ChipStructs.AccessControlClusterAccessControlExtensionStruct> value) {
      writeExtensionAttribute(callback, value, 0);
    }

    public void writeExtensionAttribute(DefaultClusterCallback callback, ArrayList<ChipStructs.AccessControlClusterAccessControlExtensionStruct> value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      
      BaseTLVType tlvValue = ArrayType.generateArrayType(value, (elementvalue) -> elementvalue.encodeTlv());
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeExtensionAttribute(
        ExtensionAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.AccessControlClusterAccessControlExtensionStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readSubjectsPerAccessControlEntryAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeSubjectsPerAccessControlEntryAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readTargetsPerAccessControlEntryAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeTargetsPerAccessControlEntryAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAccessControlEntriesPerFabricAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAccessControlEntriesPerFabricAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class ActionsCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 37L;

    public ActionsCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void instantAction(DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID) {
      instantAction(callback, actionID, invokeID, 0);
    }

    public void instantAction(DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long actionIDFieldID = 0L;
      BaseTLVType actionIDtlvValue = new UIntType(actionID);
      elements.add(new StructElement(actionIDFieldID, actionIDtlvValue));

      final long invokeIDFieldID = 1L;
      BaseTLVType invokeIDtlvValue = invokeID.<BaseTLVType>map((nonOptionalinvokeID) -> new UIntType(nonOptionalinvokeID)).orElse(new EmptyType());
      elements.add(new StructElement(invokeIDFieldID, invokeIDtlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void instantActionWithTransition(DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID, Integer transitionTime) {
      instantActionWithTransition(callback, actionID, invokeID, transitionTime, 0);
    }

    public void instantActionWithTransition(DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID, Integer transitionTime, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 1L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long actionIDFieldID = 0L;
      BaseTLVType actionIDtlvValue = new UIntType(actionID);
      elements.add(new StructElement(actionIDFieldID, actionIDtlvValue));

      final long invokeIDFieldID = 1L;
      BaseTLVType invokeIDtlvValue = invokeID.<BaseTLVType>map((nonOptionalinvokeID) -> new UIntType(nonOptionalinvokeID)).orElse(new EmptyType());
      elements.add(new StructElement(invokeIDFieldID, invokeIDtlvValue));

      final long transitionTimeFieldID = 2L;
      BaseTLVType transitionTimetlvValue = new UIntType(transitionTime);
      elements.add(new StructElement(transitionTimeFieldID, transitionTimetlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void startAction(DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID) {
      startAction(callback, actionID, invokeID, 0);
    }

    public void startAction(DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 2L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long actionIDFieldID = 0L;
      BaseTLVType actionIDtlvValue = new UIntType(actionID);
      elements.add(new StructElement(actionIDFieldID, actionIDtlvValue));

      final long invokeIDFieldID = 1L;
      BaseTLVType invokeIDtlvValue = invokeID.<BaseTLVType>map((nonOptionalinvokeID) -> new UIntType(nonOptionalinvokeID)).orElse(new EmptyType());
      elements.add(new StructElement(invokeIDFieldID, invokeIDtlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void startActionWithDuration(DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID, Long duration) {
      startActionWithDuration(callback, actionID, invokeID, duration, 0);
    }

    public void startActionWithDuration(DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID, Long duration, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 3L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long actionIDFieldID = 0L;
      BaseTLVType actionIDtlvValue = new UIntType(actionID);
      elements.add(new StructElement(actionIDFieldID, actionIDtlvValue));

      final long invokeIDFieldID = 1L;
      BaseTLVType invokeIDtlvValue = invokeID.<BaseTLVType>map((nonOptionalinvokeID) -> new UIntType(nonOptionalinvokeID)).orElse(new EmptyType());
      elements.add(new StructElement(invokeIDFieldID, invokeIDtlvValue));

      final long durationFieldID = 2L;
      BaseTLVType durationtlvValue = new UIntType(duration);
      elements.add(new StructElement(durationFieldID, durationtlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void stopAction(DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID) {
      stopAction(callback, actionID, invokeID, 0);
    }

    public void stopAction(DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 4L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long actionIDFieldID = 0L;
      BaseTLVType actionIDtlvValue = new UIntType(actionID);
      elements.add(new StructElement(actionIDFieldID, actionIDtlvValue));

      final long invokeIDFieldID = 1L;
      BaseTLVType invokeIDtlvValue = invokeID.<BaseTLVType>map((nonOptionalinvokeID) -> new UIntType(nonOptionalinvokeID)).orElse(new EmptyType());
      elements.add(new StructElement(invokeIDFieldID, invokeIDtlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void pauseAction(DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID) {
      pauseAction(callback, actionID, invokeID, 0);
    }

    public void pauseAction(DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 5L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long actionIDFieldID = 0L;
      BaseTLVType actionIDtlvValue = new UIntType(actionID);
      elements.add(new StructElement(actionIDFieldID, actionIDtlvValue));

      final long invokeIDFieldID = 1L;
      BaseTLVType invokeIDtlvValue = invokeID.<BaseTLVType>map((nonOptionalinvokeID) -> new UIntType(nonOptionalinvokeID)).orElse(new EmptyType());
      elements.add(new StructElement(invokeIDFieldID, invokeIDtlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void pauseActionWithDuration(DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID, Long duration) {
      pauseActionWithDuration(callback, actionID, invokeID, duration, 0);
    }

    public void pauseActionWithDuration(DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID, Long duration, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 6L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long actionIDFieldID = 0L;
      BaseTLVType actionIDtlvValue = new UIntType(actionID);
      elements.add(new StructElement(actionIDFieldID, actionIDtlvValue));

      final long invokeIDFieldID = 1L;
      BaseTLVType invokeIDtlvValue = invokeID.<BaseTLVType>map((nonOptionalinvokeID) -> new UIntType(nonOptionalinvokeID)).orElse(new EmptyType());
      elements.add(new StructElement(invokeIDFieldID, invokeIDtlvValue));

      final long durationFieldID = 2L;
      BaseTLVType durationtlvValue = new UIntType(duration);
      elements.add(new StructElement(durationFieldID, durationtlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void resumeAction(DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID) {
      resumeAction(callback, actionID, invokeID, 0);
    }

    public void resumeAction(DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 7L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long actionIDFieldID = 0L;
      BaseTLVType actionIDtlvValue = new UIntType(actionID);
      elements.add(new StructElement(actionIDFieldID, actionIDtlvValue));

      final long invokeIDFieldID = 1L;
      BaseTLVType invokeIDtlvValue = invokeID.<BaseTLVType>map((nonOptionalinvokeID) -> new UIntType(nonOptionalinvokeID)).orElse(new EmptyType());
      elements.add(new StructElement(invokeIDFieldID, invokeIDtlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void enableAction(DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID) {
      enableAction(callback, actionID, invokeID, 0);
    }

    public void enableAction(DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 8L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long actionIDFieldID = 0L;
      BaseTLVType actionIDtlvValue = new UIntType(actionID);
      elements.add(new StructElement(actionIDFieldID, actionIDtlvValue));

      final long invokeIDFieldID = 1L;
      BaseTLVType invokeIDtlvValue = invokeID.<BaseTLVType>map((nonOptionalinvokeID) -> new UIntType(nonOptionalinvokeID)).orElse(new EmptyType());
      elements.add(new StructElement(invokeIDFieldID, invokeIDtlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void enableActionWithDuration(DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID, Long duration) {
      enableActionWithDuration(callback, actionID, invokeID, duration, 0);
    }

    public void enableActionWithDuration(DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID, Long duration, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 9L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long actionIDFieldID = 0L;
      BaseTLVType actionIDtlvValue = new UIntType(actionID);
      elements.add(new StructElement(actionIDFieldID, actionIDtlvValue));

      final long invokeIDFieldID = 1L;
      BaseTLVType invokeIDtlvValue = invokeID.<BaseTLVType>map((nonOptionalinvokeID) -> new UIntType(nonOptionalinvokeID)).orElse(new EmptyType());
      elements.add(new StructElement(invokeIDFieldID, invokeIDtlvValue));

      final long durationFieldID = 2L;
      BaseTLVType durationtlvValue = new UIntType(duration);
      elements.add(new StructElement(durationFieldID, durationtlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void disableAction(DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID) {
      disableAction(callback, actionID, invokeID, 0);
    }

    public void disableAction(DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 10L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long actionIDFieldID = 0L;
      BaseTLVType actionIDtlvValue = new UIntType(actionID);
      elements.add(new StructElement(actionIDFieldID, actionIDtlvValue));

      final long invokeIDFieldID = 1L;
      BaseTLVType invokeIDtlvValue = invokeID.<BaseTLVType>map((nonOptionalinvokeID) -> new UIntType(nonOptionalinvokeID)).orElse(new EmptyType());
      elements.add(new StructElement(invokeIDFieldID, invokeIDtlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void disableActionWithDuration(DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID, Long duration) {
      disableActionWithDuration(callback, actionID, invokeID, duration, 0);
    }

    public void disableActionWithDuration(DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID, Long duration, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 11L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long actionIDFieldID = 0L;
      BaseTLVType actionIDtlvValue = new UIntType(actionID);
      elements.add(new StructElement(actionIDFieldID, actionIDtlvValue));

      final long invokeIDFieldID = 1L;
      BaseTLVType invokeIDtlvValue = invokeID.<BaseTLVType>map((nonOptionalinvokeID) -> new UIntType(nonOptionalinvokeID)).orElse(new EmptyType());
      elements.add(new StructElement(invokeIDFieldID, invokeIDtlvValue));

      final long durationFieldID = 2L;
      BaseTLVType durationtlvValue = new UIntType(duration);
      elements.add(new StructElement(durationFieldID, durationtlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public interface ActionListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.ActionsClusterActionStruct> value);
    }

    public interface EndpointListsAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.ActionsClusterEndpointListStruct> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readActionListAttribute(
        ActionListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.ActionsClusterActionStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeActionListAttribute(
        ActionListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.ActionsClusterActionStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEndpointListsAttribute(
        EndpointListsAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.ActionsClusterEndpointListStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEndpointListsAttribute(
        EndpointListsAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.ActionsClusterEndpointListStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readSetupURLAttribute(
        CharStringAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeSetupURLAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class BasicInformationCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 40L;

    public BasicInformationCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void mfgSpecificPing(DefaultClusterCallback callback) {
      mfgSpecificPing(callback, 0);
    }

    public void mfgSpecificPing(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public interface CapabilityMinimaAttributeCallback extends BaseAttributeCallback {
      void onSuccess(ChipStructs.BasicInformationClusterCapabilityMinimaStruct value);
    }

    public interface ProductAppearanceAttributeCallback extends BaseAttributeCallback {
      void onSuccess(ChipStructs.BasicInformationClusterProductAppearanceStruct value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readDataModelRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeDataModelRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readVendorNameAttribute(
        CharStringAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeVendorNameAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readVendorIDAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeVendorIDAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readProductNameAttribute(
        CharStringAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeProductNameAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readProductIDAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeProductIDAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readNodeLabelAttribute(
        CharStringAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeNodeLabelAttribute(DefaultClusterCallback callback, String value) {
      writeNodeLabelAttribute(callback, value, 0);
    }

    public void writeNodeLabelAttribute(DefaultClusterCallback callback, String value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      
      BaseTLVType tlvValue = new StringType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeNodeLabelAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readLocationAttribute(
        CharStringAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeLocationAttribute(DefaultClusterCallback callback, String value) {
      writeLocationAttribute(callback, value, 0);
    }

    public void writeLocationAttribute(DefaultClusterCallback callback, String value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 6L;
      
      BaseTLVType tlvValue = new StringType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeLocationAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readHardwareVersionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeHardwareVersionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readHardwareVersionStringAttribute(
        CharStringAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeHardwareVersionStringAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readSoftwareVersionAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 9L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeSoftwareVersionAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 9L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readSoftwareVersionStringAttribute(
        CharStringAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 10L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeSoftwareVersionStringAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 10L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readManufacturingDateAttribute(
        CharStringAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 11L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeManufacturingDateAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 11L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readPartNumberAttribute(
        CharStringAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 12L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribePartNumberAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 12L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readProductURLAttribute(
        CharStringAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 13L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeProductURLAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 13L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readProductLabelAttribute(
        CharStringAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 14L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeProductLabelAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 14L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readSerialNumberAttribute(
        CharStringAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 15L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeSerialNumberAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 15L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readLocalConfigDisabledAttribute(
        BooleanAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeLocalConfigDisabledAttribute(DefaultClusterCallback callback, Boolean value) {
      writeLocalConfigDisabledAttribute(callback, value, 0);
    }

    public void writeLocalConfigDisabledAttribute(DefaultClusterCallback callback, Boolean value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16L;
      
      BaseTLVType tlvValue = new BooleanType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeLocalConfigDisabledAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readReachableAttribute(
        BooleanAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 17L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeReachableAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 17L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readUniqueIDAttribute(
        CharStringAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 18L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeUniqueIDAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 18L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readCapabilityMinimaAttribute(
        CapabilityMinimaAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 19L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            ChipStructs.BasicInformationClusterCapabilityMinimaStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeCapabilityMinimaAttribute(
        CapabilityMinimaAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 19L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            ChipStructs.BasicInformationClusterCapabilityMinimaStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readProductAppearanceAttribute(
        ProductAppearanceAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 20L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            ChipStructs.BasicInformationClusterProductAppearanceStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeProductAppearanceAttribute(
        ProductAppearanceAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 20L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            ChipStructs.BasicInformationClusterProductAppearanceStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class OtaSoftwareUpdateProviderCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 41L;

    public OtaSoftwareUpdateProviderCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void queryImage(QueryImageResponseCallback callback, Integer vendorID, Integer productID, Long softwareVersion, ArrayList<Integer> protocolsSupported, Optional<Integer> hardwareVersion, Optional<String> location, Optional<Boolean> requestorCanConsent, Optional<byte[]> metadataForProvider) {
      queryImage(callback, vendorID, productID, softwareVersion, protocolsSupported, hardwareVersion, location, requestorCanConsent, metadataForProvider, 0);
    }

    public void queryImage(QueryImageResponseCallback callback, Integer vendorID, Integer productID, Long softwareVersion, ArrayList<Integer> protocolsSupported, Optional<Integer> hardwareVersion, Optional<String> location, Optional<Boolean> requestorCanConsent, Optional<byte[]> metadataForProvider, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long vendorIDFieldID = 0L;
      BaseTLVType vendorIDtlvValue = new UIntType(vendorID);
      elements.add(new StructElement(vendorIDFieldID, vendorIDtlvValue));

      final long productIDFieldID = 1L;
      BaseTLVType productIDtlvValue = new UIntType(productID);
      elements.add(new StructElement(productIDFieldID, productIDtlvValue));

      final long softwareVersionFieldID = 2L;
      BaseTLVType softwareVersiontlvValue = new UIntType(softwareVersion);
      elements.add(new StructElement(softwareVersionFieldID, softwareVersiontlvValue));

      final long protocolsSupportedFieldID = 3L;
      BaseTLVType protocolsSupportedtlvValue = ArrayType.generateArrayType(protocolsSupported, (elementprotocolsSupported) -> new UIntType(elementprotocolsSupported));
      elements.add(new StructElement(protocolsSupportedFieldID, protocolsSupportedtlvValue));

      final long hardwareVersionFieldID = 4L;
      BaseTLVType hardwareVersiontlvValue = hardwareVersion.<BaseTLVType>map((nonOptionalhardwareVersion) -> new UIntType(nonOptionalhardwareVersion)).orElse(new EmptyType());
      elements.add(new StructElement(hardwareVersionFieldID, hardwareVersiontlvValue));

      final long locationFieldID = 5L;
      BaseTLVType locationtlvValue = location.<BaseTLVType>map((nonOptionallocation) -> new StringType(nonOptionallocation)).orElse(new EmptyType());
      elements.add(new StructElement(locationFieldID, locationtlvValue));

      final long requestorCanConsentFieldID = 6L;
      BaseTLVType requestorCanConsenttlvValue = requestorCanConsent.<BaseTLVType>map((nonOptionalrequestorCanConsent) -> new BooleanType(nonOptionalrequestorCanConsent)).orElse(new EmptyType());
      elements.add(new StructElement(requestorCanConsentFieldID, requestorCanConsenttlvValue));

      final long metadataForProviderFieldID = 7L;
      BaseTLVType metadataForProvidertlvValue = metadataForProvider.<BaseTLVType>map((nonOptionalmetadataForProvider) -> new ByteArrayType(nonOptionalmetadataForProvider)).orElse(new EmptyType());
      elements.add(new StructElement(metadataForProviderFieldID, metadataForProvidertlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long delayedActionTimeFieldID = 1L;
          Optional<Long> delayedActionTime = Optional.empty();
          final long imageURIFieldID = 2L;
          Optional<String> imageURI = Optional.empty();
          final long softwareVersionFieldID = 3L;
          Optional<Long> softwareVersion = Optional.empty();
          final long softwareVersionStringFieldID = 4L;
          Optional<String> softwareVersionString = Optional.empty();
          final long updateTokenFieldID = 5L;
          Optional<byte[]> updateToken = Optional.empty();
          final long userConsentNeededFieldID = 6L;
          Optional<Boolean> userConsentNeeded = Optional.empty();
          final long metadataForRequestorFieldID = 7L;
          Optional<byte[]> metadataForRequestor = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == delayedActionTimeFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                delayedActionTime = Optional.of(castingValue.value(Long.class));
              }
            } else if (element.contextTagNum() == imageURIFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                imageURI = Optional.of(castingValue.value(String.class));
              }
            } else if (element.contextTagNum() == softwareVersionFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                softwareVersion = Optional.of(castingValue.value(Long.class));
              }
            } else if (element.contextTagNum() == softwareVersionStringFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                softwareVersionString = Optional.of(castingValue.value(String.class));
              }
            } else if (element.contextTagNum() == updateTokenFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.ByteArray) {
                ByteArrayType castingValue = element.value(ByteArrayType.class);
                updateToken = Optional.of(castingValue.value(byte[].class));
              }
            } else if (element.contextTagNum() == userConsentNeededFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Boolean) {
                BooleanType castingValue = element.value(BooleanType.class);
                userConsentNeeded = Optional.of(castingValue.value(Boolean.class));
              }
            } else if (element.contextTagNum() == metadataForRequestorFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.ByteArray) {
                ByteArrayType castingValue = element.value(ByteArrayType.class);
                metadataForRequestor = Optional.of(castingValue.value(byte[].class));
              }
            }
          }
          callback.onSuccess(status, delayedActionTime, imageURI, softwareVersion, softwareVersionString, updateToken, userConsentNeeded, metadataForRequestor);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void applyUpdateRequest(ApplyUpdateResponseCallback callback, byte[] updateToken, Long newVersion) {
      applyUpdateRequest(callback, updateToken, newVersion, 0);
    }

    public void applyUpdateRequest(ApplyUpdateResponseCallback callback, byte[] updateToken, Long newVersion, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 2L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long updateTokenFieldID = 0L;
      BaseTLVType updateTokentlvValue = new ByteArrayType(updateToken);
      elements.add(new StructElement(updateTokenFieldID, updateTokentlvValue));

      final long newVersionFieldID = 1L;
      BaseTLVType newVersiontlvValue = new UIntType(newVersion);
      elements.add(new StructElement(newVersionFieldID, newVersiontlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long actionFieldID = 0L;
          Integer action = null;
          final long delayedActionTimeFieldID = 1L;
          Long delayedActionTime = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == actionFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                action = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == delayedActionTimeFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                delayedActionTime = castingValue.value(Long.class);
              }
            }
          }
          callback.onSuccess(action, delayedActionTime);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void notifyUpdateApplied(DefaultClusterCallback callback, byte[] updateToken, Long softwareVersion) {
      notifyUpdateApplied(callback, updateToken, softwareVersion, 0);
    }

    public void notifyUpdateApplied(DefaultClusterCallback callback, byte[] updateToken, Long softwareVersion, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 4L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long updateTokenFieldID = 0L;
      BaseTLVType updateTokentlvValue = new ByteArrayType(updateToken);
      elements.add(new StructElement(updateTokenFieldID, updateTokentlvValue));

      final long softwareVersionFieldID = 1L;
      BaseTLVType softwareVersiontlvValue = new UIntType(softwareVersion);
      elements.add(new StructElement(softwareVersionFieldID, softwareVersiontlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public interface QueryImageResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer status, Optional<Long> delayedActionTime, Optional<String> imageURI, Optional<Long> softwareVersion, Optional<String> softwareVersionString, Optional<byte[]> updateToken, Optional<Boolean> userConsentNeeded, Optional<byte[]> metadataForRequestor);
    }

    public interface ApplyUpdateResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer action, Long delayedActionTime);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class OtaSoftwareUpdateRequestorCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 42L;

    public OtaSoftwareUpdateRequestorCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void announceOTAProvider(DefaultClusterCallback callback, Long providerNodeID, Integer vendorID, Integer announcementReason, Optional<byte[]> metadataForNode, Integer endpoint) {
      announceOTAProvider(callback, providerNodeID, vendorID, announcementReason, metadataForNode, endpoint, 0);
    }

    public void announceOTAProvider(DefaultClusterCallback callback, Long providerNodeID, Integer vendorID, Integer announcementReason, Optional<byte[]> metadataForNode, Integer endpoint, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long providerNodeIDFieldID = 0L;
      BaseTLVType providerNodeIDtlvValue = new UIntType(providerNodeID);
      elements.add(new StructElement(providerNodeIDFieldID, providerNodeIDtlvValue));

      final long vendorIDFieldID = 1L;
      BaseTLVType vendorIDtlvValue = new UIntType(vendorID);
      elements.add(new StructElement(vendorIDFieldID, vendorIDtlvValue));

      final long announcementReasonFieldID = 2L;
      BaseTLVType announcementReasontlvValue = new UIntType(announcementReason);
      elements.add(new StructElement(announcementReasonFieldID, announcementReasontlvValue));

      final long metadataForNodeFieldID = 3L;
      BaseTLVType metadataForNodetlvValue = metadataForNode.<BaseTLVType>map((nonOptionalmetadataForNode) -> new ByteArrayType(nonOptionalmetadataForNode)).orElse(new EmptyType());
      elements.add(new StructElement(metadataForNodeFieldID, metadataForNodetlvValue));

      final long endpointFieldID = 4L;
      BaseTLVType endpointtlvValue = new UIntType(endpoint);
      elements.add(new StructElement(endpointFieldID, endpointtlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public interface DefaultOTAProvidersAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.OtaSoftwareUpdateRequestorClusterProviderLocation> value);
    }

    public interface UpdateStateProgressAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readDefaultOTAProvidersAttribute(
        DefaultOTAProvidersAttributeCallback callback) {
      readDefaultOTAProvidersAttributeWithFabricFilter(callback, true);
    }

    public void readDefaultOTAProvidersAttributeWithFabricFilter(
        DefaultOTAProvidersAttributeCallback callback, boolean isFabricFiltered) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.OtaSoftwareUpdateRequestorClusterProviderLocation> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, isFabricFiltered);
    }

    public void writeDefaultOTAProvidersAttribute(DefaultClusterCallback callback, ArrayList<ChipStructs.OtaSoftwareUpdateRequestorClusterProviderLocation> value) {
      writeDefaultOTAProvidersAttribute(callback, value, 0);
    }

    public void writeDefaultOTAProvidersAttribute(DefaultClusterCallback callback, ArrayList<ChipStructs.OtaSoftwareUpdateRequestorClusterProviderLocation> value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      
      BaseTLVType tlvValue = ArrayType.generateArrayType(value, (elementvalue) -> elementvalue.encodeTlv());
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeDefaultOTAProvidersAttribute(
        DefaultOTAProvidersAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.OtaSoftwareUpdateRequestorClusterProviderLocation> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readUpdatePossibleAttribute(
        BooleanAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeUpdatePossibleAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readUpdateStateAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeUpdateStateAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readUpdateStateProgressAttribute(
        UpdateStateProgressAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeUpdateStateProgressAttribute(
        UpdateStateProgressAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class LocalizationConfigurationCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 43L;

    public LocalizationConfigurationCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface SupportedLocalesAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<String> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readActiveLocaleAttribute(
        CharStringAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeActiveLocaleAttribute(DefaultClusterCallback callback, String value) {
      writeActiveLocaleAttribute(callback, value, 0);
    }

    public void writeActiveLocaleAttribute(DefaultClusterCallback callback, String value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      
      BaseTLVType tlvValue = new StringType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeActiveLocaleAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readSupportedLocalesAttribute(
        SupportedLocalesAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<String> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeSupportedLocalesAttribute(
        SupportedLocalesAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<String> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class TimeFormatLocalizationCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 44L;

    public TimeFormatLocalizationCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface SupportedCalendarTypesAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Integer> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readHourFormatAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeHourFormatAttribute(DefaultClusterCallback callback, Integer value) {
      writeHourFormatAttribute(callback, value, 0);
    }

    public void writeHourFormatAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeHourFormatAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readActiveCalendarTypeAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeActiveCalendarTypeAttribute(DefaultClusterCallback callback, Integer value) {
      writeActiveCalendarTypeAttribute(callback, value, 0);
    }

    public void writeActiveCalendarTypeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeActiveCalendarTypeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readSupportedCalendarTypesAttribute(
        SupportedCalendarTypesAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeSupportedCalendarTypesAttribute(
        SupportedCalendarTypesAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class UnitLocalizationCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 45L;

    public UnitLocalizationCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readTemperatureUnitAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeTemperatureUnitAttribute(DefaultClusterCallback callback, Integer value) {
      writeTemperatureUnitAttribute(callback, value, 0);
    }

    public void writeTemperatureUnitAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeTemperatureUnitAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class PowerSourceConfigurationCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 46L;

    public PowerSourceConfigurationCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface SourcesAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Integer> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readSourcesAttribute(
        SourcesAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeSourcesAttribute(
        SourcesAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class PowerSourceCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 47L;

    public PowerSourceCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface WiredAssessedInputVoltageAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface WiredAssessedInputFrequencyAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface WiredAssessedCurrentAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface ActiveWiredFaultsAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Integer> value);
    }

    public interface BatVoltageAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface BatPercentRemainingAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface BatTimeRemainingAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface ActiveBatFaultsAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Integer> value);
    }

    public interface BatTimeToFullChargeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface BatChargingCurrentAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface ActiveBatChargeFaultsAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Integer> value);
    }

    public interface EndpointListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Integer> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readStatusAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeStatusAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readOrderAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeOrderAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readDescriptionAttribute(
        CharStringAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeDescriptionAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readWiredAssessedInputVoltageAttribute(
        WiredAssessedInputVoltageAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeWiredAssessedInputVoltageAttribute(
        WiredAssessedInputVoltageAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readWiredAssessedInputFrequencyAttribute(
        WiredAssessedInputFrequencyAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeWiredAssessedInputFrequencyAttribute(
        WiredAssessedInputFrequencyAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readWiredCurrentTypeAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeWiredCurrentTypeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readWiredAssessedCurrentAttribute(
        WiredAssessedCurrentAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeWiredAssessedCurrentAttribute(
        WiredAssessedCurrentAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readWiredNominalVoltageAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeWiredNominalVoltageAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readWiredMaximumCurrentAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeWiredMaximumCurrentAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readWiredPresentAttribute(
        BooleanAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 9L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeWiredPresentAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 9L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readActiveWiredFaultsAttribute(
        ActiveWiredFaultsAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 10L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeActiveWiredFaultsAttribute(
        ActiveWiredFaultsAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 10L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readBatVoltageAttribute(
        BatVoltageAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 11L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeBatVoltageAttribute(
        BatVoltageAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 11L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readBatPercentRemainingAttribute(
        BatPercentRemainingAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 12L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeBatPercentRemainingAttribute(
        BatPercentRemainingAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 12L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readBatTimeRemainingAttribute(
        BatTimeRemainingAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 13L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeBatTimeRemainingAttribute(
        BatTimeRemainingAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 13L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readBatChargeLevelAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 14L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeBatChargeLevelAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 14L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readBatReplacementNeededAttribute(
        BooleanAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 15L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeBatReplacementNeededAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 15L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readBatReplaceabilityAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeBatReplaceabilityAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readBatPresentAttribute(
        BooleanAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 17L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeBatPresentAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 17L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readActiveBatFaultsAttribute(
        ActiveBatFaultsAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 18L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeActiveBatFaultsAttribute(
        ActiveBatFaultsAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 18L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readBatReplacementDescriptionAttribute(
        CharStringAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 19L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeBatReplacementDescriptionAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 19L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readBatCommonDesignationAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 20L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeBatCommonDesignationAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 20L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readBatANSIDesignationAttribute(
        CharStringAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 21L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeBatANSIDesignationAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 21L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readBatIECDesignationAttribute(
        CharStringAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 22L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeBatIECDesignationAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 22L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readBatApprovedChemistryAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 23L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeBatApprovedChemistryAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 23L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readBatCapacityAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 24L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeBatCapacityAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 24L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readBatQuantityAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 25L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeBatQuantityAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 25L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readBatChargeStateAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 26L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeBatChargeStateAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 26L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readBatTimeToFullChargeAttribute(
        BatTimeToFullChargeAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 27L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeBatTimeToFullChargeAttribute(
        BatTimeToFullChargeAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 27L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readBatFunctionalWhileChargingAttribute(
        BooleanAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 28L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeBatFunctionalWhileChargingAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 28L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readBatChargingCurrentAttribute(
        BatChargingCurrentAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 29L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeBatChargingCurrentAttribute(
        BatChargingCurrentAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 29L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readActiveBatChargeFaultsAttribute(
        ActiveBatChargeFaultsAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 30L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeActiveBatChargeFaultsAttribute(
        ActiveBatChargeFaultsAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 30L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEndpointListAttribute(
        EndpointListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 31L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEndpointListAttribute(
        EndpointListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 31L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class GeneralCommissioningCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 48L;

    public GeneralCommissioningCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void armFailSafe(ArmFailSafeResponseCallback callback, Integer expiryLengthSeconds, Long breadcrumb) {
      armFailSafe(callback, expiryLengthSeconds, breadcrumb, 0);
    }

    public void armFailSafe(ArmFailSafeResponseCallback callback, Integer expiryLengthSeconds, Long breadcrumb, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long expiryLengthSecondsFieldID = 0L;
      BaseTLVType expiryLengthSecondstlvValue = new UIntType(expiryLengthSeconds);
      elements.add(new StructElement(expiryLengthSecondsFieldID, expiryLengthSecondstlvValue));

      final long breadcrumbFieldID = 1L;
      BaseTLVType breadcrumbtlvValue = new UIntType(breadcrumb);
      elements.add(new StructElement(breadcrumbFieldID, breadcrumbtlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long errorCodeFieldID = 0L;
          Integer errorCode = null;
          final long debugTextFieldID = 1L;
          String debugText = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == errorCodeFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                errorCode = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == debugTextFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                debugText = castingValue.value(String.class);
              }
            }
          }
          callback.onSuccess(errorCode, debugText);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void setRegulatoryConfig(SetRegulatoryConfigResponseCallback callback, Integer newRegulatoryConfig, String countryCode, Long breadcrumb) {
      setRegulatoryConfig(callback, newRegulatoryConfig, countryCode, breadcrumb, 0);
    }

    public void setRegulatoryConfig(SetRegulatoryConfigResponseCallback callback, Integer newRegulatoryConfig, String countryCode, Long breadcrumb, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 2L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long newRegulatoryConfigFieldID = 0L;
      BaseTLVType newRegulatoryConfigtlvValue = new UIntType(newRegulatoryConfig);
      elements.add(new StructElement(newRegulatoryConfigFieldID, newRegulatoryConfigtlvValue));

      final long countryCodeFieldID = 1L;
      BaseTLVType countryCodetlvValue = new StringType(countryCode);
      elements.add(new StructElement(countryCodeFieldID, countryCodetlvValue));

      final long breadcrumbFieldID = 2L;
      BaseTLVType breadcrumbtlvValue = new UIntType(breadcrumb);
      elements.add(new StructElement(breadcrumbFieldID, breadcrumbtlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long errorCodeFieldID = 0L;
          Integer errorCode = null;
          final long debugTextFieldID = 1L;
          String debugText = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == errorCodeFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                errorCode = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == debugTextFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                debugText = castingValue.value(String.class);
              }
            }
          }
          callback.onSuccess(errorCode, debugText);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void commissioningComplete(CommissioningCompleteResponseCallback callback) {
      commissioningComplete(callback, 0);
    }

    public void commissioningComplete(CommissioningCompleteResponseCallback callback, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 4L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long errorCodeFieldID = 0L;
          Integer errorCode = null;
          final long debugTextFieldID = 1L;
          String debugText = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == errorCodeFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                errorCode = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == debugTextFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                debugText = castingValue.value(String.class);
              }
            }
          }
          callback.onSuccess(errorCode, debugText);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public interface ArmFailSafeResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer errorCode, String debugText);
    }

    public interface SetRegulatoryConfigResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer errorCode, String debugText);
    }

    public interface CommissioningCompleteResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer errorCode, String debugText);
    }

    public interface BasicCommissioningInfoAttributeCallback extends BaseAttributeCallback {
      void onSuccess(ChipStructs.GeneralCommissioningClusterBasicCommissioningInfo value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readBreadcrumbAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeBreadcrumbAttribute(DefaultClusterCallback callback, Long value) {
      writeBreadcrumbAttribute(callback, value, 0);
    }

    public void writeBreadcrumbAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeBreadcrumbAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readBasicCommissioningInfoAttribute(
        BasicCommissioningInfoAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            ChipStructs.GeneralCommissioningClusterBasicCommissioningInfo value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeBasicCommissioningInfoAttribute(
        BasicCommissioningInfoAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            ChipStructs.GeneralCommissioningClusterBasicCommissioningInfo value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readRegulatoryConfigAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeRegulatoryConfigAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readLocationCapabilityAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeLocationCapabilityAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readSupportsConcurrentConnectionAttribute(
        BooleanAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeSupportsConcurrentConnectionAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class NetworkCommissioningCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 49L;

    public NetworkCommissioningCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void scanNetworks(ScanNetworksResponseCallback callback, @Nullable Optional<byte[]> ssid, Optional<Long> breadcrumb) {
      scanNetworks(callback, ssid, breadcrumb, 0);
    }

    public void scanNetworks(ScanNetworksResponseCallback callback, @Nullable Optional<byte[]> ssid, Optional<Long> breadcrumb, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long ssidFieldID = 0L;
      BaseTLVType ssidtlvValue = ssid != null ? ssid.<BaseTLVType>map((nonOptionalssid) -> new ByteArrayType(nonOptionalssid)).orElse(new EmptyType()) : new NullType();
      elements.add(new StructElement(ssidFieldID, ssidtlvValue));

      final long breadcrumbFieldID = 1L;
      BaseTLVType breadcrumbtlvValue = breadcrumb.<BaseTLVType>map((nonOptionalbreadcrumb) -> new UIntType(nonOptionalbreadcrumb)).orElse(new EmptyType());
      elements.add(new StructElement(breadcrumbFieldID, breadcrumbtlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long networkingStatusFieldID = 0L;
          Integer networkingStatus = null;
          final long debugTextFieldID = 1L;
          Optional<String> debugText = Optional.empty();
          final long wiFiScanResultsFieldID = 2L;
          Optional<ArrayList<ChipStructs.NetworkCommissioningClusterWiFiInterfaceScanResultStruct>> wiFiScanResults = Optional.empty();
          final long threadScanResultsFieldID = 3L;
          Optional<ArrayList<ChipStructs.NetworkCommissioningClusterThreadInterfaceScanResultStruct>> threadScanResults = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == networkingStatusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                networkingStatus = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == debugTextFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                debugText = Optional.of(castingValue.value(String.class));
              }
            } else if (element.contextTagNum() == wiFiScanResultsFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Array) {
                ArrayType castingValue = element.value(ArrayType.class);
                wiFiScanResults = Optional.of(castingValue.map((elementcastingValue) -> ChipStructs.NetworkCommissioningClusterWiFiInterfaceScanResultStruct.decodeTlv(elementcastingValue)));
              }
            } else if (element.contextTagNum() == threadScanResultsFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Array) {
                ArrayType castingValue = element.value(ArrayType.class);
                threadScanResults = Optional.of(castingValue.map((elementcastingValue) -> ChipStructs.NetworkCommissioningClusterThreadInterfaceScanResultStruct.decodeTlv(elementcastingValue)));
              }
            }
          }
          callback.onSuccess(networkingStatus, debugText, wiFiScanResults, threadScanResults);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void addOrUpdateWiFiNetwork(NetworkConfigResponseCallback callback, byte[] ssid, byte[] credentials, Optional<Long> breadcrumb) {
      addOrUpdateWiFiNetwork(callback, ssid, credentials, breadcrumb, 0);
    }

    public void addOrUpdateWiFiNetwork(NetworkConfigResponseCallback callback, byte[] ssid, byte[] credentials, Optional<Long> breadcrumb, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 2L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long ssidFieldID = 0L;
      BaseTLVType ssidtlvValue = new ByteArrayType(ssid);
      elements.add(new StructElement(ssidFieldID, ssidtlvValue));

      final long credentialsFieldID = 1L;
      BaseTLVType credentialstlvValue = new ByteArrayType(credentials);
      elements.add(new StructElement(credentialsFieldID, credentialstlvValue));

      final long breadcrumbFieldID = 2L;
      BaseTLVType breadcrumbtlvValue = breadcrumb.<BaseTLVType>map((nonOptionalbreadcrumb) -> new UIntType(nonOptionalbreadcrumb)).orElse(new EmptyType());
      elements.add(new StructElement(breadcrumbFieldID, breadcrumbtlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long networkingStatusFieldID = 0L;
          Integer networkingStatus = null;
          final long debugTextFieldID = 1L;
          Optional<String> debugText = Optional.empty();
          final long networkIndexFieldID = 2L;
          Optional<Integer> networkIndex = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == networkingStatusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                networkingStatus = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == debugTextFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                debugText = Optional.of(castingValue.value(String.class));
              }
            } else if (element.contextTagNum() == networkIndexFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                networkIndex = Optional.of(castingValue.value(Integer.class));
              }
            }
          }
          callback.onSuccess(networkingStatus, debugText, networkIndex);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void addOrUpdateThreadNetwork(NetworkConfigResponseCallback callback, byte[] operationalDataset, Optional<Long> breadcrumb) {
      addOrUpdateThreadNetwork(callback, operationalDataset, breadcrumb, 0);
    }

    public void addOrUpdateThreadNetwork(NetworkConfigResponseCallback callback, byte[] operationalDataset, Optional<Long> breadcrumb, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 3L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long operationalDatasetFieldID = 0L;
      BaseTLVType operationalDatasettlvValue = new ByteArrayType(operationalDataset);
      elements.add(new StructElement(operationalDatasetFieldID, operationalDatasettlvValue));

      final long breadcrumbFieldID = 1L;
      BaseTLVType breadcrumbtlvValue = breadcrumb.<BaseTLVType>map((nonOptionalbreadcrumb) -> new UIntType(nonOptionalbreadcrumb)).orElse(new EmptyType());
      elements.add(new StructElement(breadcrumbFieldID, breadcrumbtlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long networkingStatusFieldID = 0L;
          Integer networkingStatus = null;
          final long debugTextFieldID = 1L;
          Optional<String> debugText = Optional.empty();
          final long networkIndexFieldID = 2L;
          Optional<Integer> networkIndex = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == networkingStatusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                networkingStatus = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == debugTextFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                debugText = Optional.of(castingValue.value(String.class));
              }
            } else if (element.contextTagNum() == networkIndexFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                networkIndex = Optional.of(castingValue.value(Integer.class));
              }
            }
          }
          callback.onSuccess(networkingStatus, debugText, networkIndex);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void removeNetwork(NetworkConfigResponseCallback callback, byte[] networkID, Optional<Long> breadcrumb) {
      removeNetwork(callback, networkID, breadcrumb, 0);
    }

    public void removeNetwork(NetworkConfigResponseCallback callback, byte[] networkID, Optional<Long> breadcrumb, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 4L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long networkIDFieldID = 0L;
      BaseTLVType networkIDtlvValue = new ByteArrayType(networkID);
      elements.add(new StructElement(networkIDFieldID, networkIDtlvValue));

      final long breadcrumbFieldID = 1L;
      BaseTLVType breadcrumbtlvValue = breadcrumb.<BaseTLVType>map((nonOptionalbreadcrumb) -> new UIntType(nonOptionalbreadcrumb)).orElse(new EmptyType());
      elements.add(new StructElement(breadcrumbFieldID, breadcrumbtlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long networkingStatusFieldID = 0L;
          Integer networkingStatus = null;
          final long debugTextFieldID = 1L;
          Optional<String> debugText = Optional.empty();
          final long networkIndexFieldID = 2L;
          Optional<Integer> networkIndex = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == networkingStatusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                networkingStatus = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == debugTextFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                debugText = Optional.of(castingValue.value(String.class));
              }
            } else if (element.contextTagNum() == networkIndexFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                networkIndex = Optional.of(castingValue.value(Integer.class));
              }
            }
          }
          callback.onSuccess(networkingStatus, debugText, networkIndex);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void connectNetwork(ConnectNetworkResponseCallback callback, byte[] networkID, Optional<Long> breadcrumb) {
      connectNetwork(callback, networkID, breadcrumb, 0);
    }

    public void connectNetwork(ConnectNetworkResponseCallback callback, byte[] networkID, Optional<Long> breadcrumb, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 6L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long networkIDFieldID = 0L;
      BaseTLVType networkIDtlvValue = new ByteArrayType(networkID);
      elements.add(new StructElement(networkIDFieldID, networkIDtlvValue));

      final long breadcrumbFieldID = 1L;
      BaseTLVType breadcrumbtlvValue = breadcrumb.<BaseTLVType>map((nonOptionalbreadcrumb) -> new UIntType(nonOptionalbreadcrumb)).orElse(new EmptyType());
      elements.add(new StructElement(breadcrumbFieldID, breadcrumbtlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long networkingStatusFieldID = 0L;
          Integer networkingStatus = null;
          final long debugTextFieldID = 1L;
          Optional<String> debugText = Optional.empty();
          final long errorValueFieldID = 2L;
          @Nullable Long errorValue = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == networkingStatusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                networkingStatus = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == debugTextFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                debugText = Optional.of(castingValue.value(String.class));
              }
            } else if (element.contextTagNum() == errorValueFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Int) {
                IntType castingValue = element.value(IntType.class);
                errorValue = castingValue.value(Long.class);
              }
            }
          }
          callback.onSuccess(networkingStatus, debugText, errorValue);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void reorderNetwork(NetworkConfigResponseCallback callback, byte[] networkID, Integer networkIndex, Optional<Long> breadcrumb) {
      reorderNetwork(callback, networkID, networkIndex, breadcrumb, 0);
    }

    public void reorderNetwork(NetworkConfigResponseCallback callback, byte[] networkID, Integer networkIndex, Optional<Long> breadcrumb, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 8L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long networkIDFieldID = 0L;
      BaseTLVType networkIDtlvValue = new ByteArrayType(networkID);
      elements.add(new StructElement(networkIDFieldID, networkIDtlvValue));

      final long networkIndexFieldID = 1L;
      BaseTLVType networkIndextlvValue = new UIntType(networkIndex);
      elements.add(new StructElement(networkIndexFieldID, networkIndextlvValue));

      final long breadcrumbFieldID = 2L;
      BaseTLVType breadcrumbtlvValue = breadcrumb.<BaseTLVType>map((nonOptionalbreadcrumb) -> new UIntType(nonOptionalbreadcrumb)).orElse(new EmptyType());
      elements.add(new StructElement(breadcrumbFieldID, breadcrumbtlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long networkingStatusFieldID = 0L;
          Integer networkingStatus = null;
          final long debugTextFieldID = 1L;
          Optional<String> debugText = Optional.empty();
          final long networkIndexFieldID = 2L;
          Optional<Integer> networkIndex = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == networkingStatusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                networkingStatus = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == debugTextFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                debugText = Optional.of(castingValue.value(String.class));
              }
            } else if (element.contextTagNum() == networkIndexFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                networkIndex = Optional.of(castingValue.value(Integer.class));
              }
            }
          }
          callback.onSuccess(networkingStatus, debugText, networkIndex);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public interface ScanNetworksResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer networkingStatus, Optional<String> debugText, Optional<ArrayList<ChipStructs.NetworkCommissioningClusterWiFiInterfaceScanResultStruct>> wiFiScanResults, Optional<ArrayList<ChipStructs.NetworkCommissioningClusterThreadInterfaceScanResultStruct>> threadScanResults);
    }

    public interface NetworkConfigResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer networkingStatus, Optional<String> debugText, Optional<Integer> networkIndex);
    }

    public interface ConnectNetworkResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer networkingStatus, Optional<String> debugText, @Nullable Long errorValue);
    }

    public interface NetworksAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.NetworkCommissioningClusterNetworkInfoStruct> value);
    }

    public interface LastNetworkingStatusAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface LastNetworkIDAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable byte[] value);
    }

    public interface LastConnectErrorValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readMaxNetworksAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMaxNetworksAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readNetworksAttribute(
        NetworksAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.NetworkCommissioningClusterNetworkInfoStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeNetworksAttribute(
        NetworksAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.NetworkCommissioningClusterNetworkInfoStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readScanMaxTimeSecondsAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeScanMaxTimeSecondsAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readConnectMaxTimeSecondsAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeConnectMaxTimeSecondsAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readInterfaceEnabledAttribute(
        BooleanAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeInterfaceEnabledAttribute(DefaultClusterCallback callback, Boolean value) {
      writeInterfaceEnabledAttribute(callback, value, 0);
    }

    public void writeInterfaceEnabledAttribute(DefaultClusterCallback callback, Boolean value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      
      BaseTLVType tlvValue = new BooleanType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeInterfaceEnabledAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readLastNetworkingStatusAttribute(
        LastNetworkingStatusAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeLastNetworkingStatusAttribute(
        LastNetworkingStatusAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readLastNetworkIDAttribute(
        LastNetworkIDAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable byte[] value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeLastNetworkIDAttribute(
        LastNetworkIDAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable byte[] value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readLastConnectErrorValueAttribute(
        LastConnectErrorValueAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeLastConnectErrorValueAttribute(
        LastConnectErrorValueAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class DiagnosticLogsCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 50L;

    public DiagnosticLogsCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void retrieveLogsRequest(RetrieveLogsResponseCallback callback, Integer intent, Integer requestedProtocol, Optional<String> transferFileDesignator) {
      retrieveLogsRequest(callback, intent, requestedProtocol, transferFileDesignator, 0);
    }

    public void retrieveLogsRequest(RetrieveLogsResponseCallback callback, Integer intent, Integer requestedProtocol, Optional<String> transferFileDesignator, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long intentFieldID = 0L;
      BaseTLVType intenttlvValue = new UIntType(intent);
      elements.add(new StructElement(intentFieldID, intenttlvValue));

      final long requestedProtocolFieldID = 1L;
      BaseTLVType requestedProtocoltlvValue = new UIntType(requestedProtocol);
      elements.add(new StructElement(requestedProtocolFieldID, requestedProtocoltlvValue));

      final long transferFileDesignatorFieldID = 2L;
      BaseTLVType transferFileDesignatortlvValue = transferFileDesignator.<BaseTLVType>map((nonOptionaltransferFileDesignator) -> new StringType(nonOptionaltransferFileDesignator)).orElse(new EmptyType());
      elements.add(new StructElement(transferFileDesignatorFieldID, transferFileDesignatortlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long logContentFieldID = 1L;
          byte[] logContent = null;
          final long UTCTimeStampFieldID = 2L;
          Optional<Long> UTCTimeStamp = Optional.empty();
          final long timeSinceBootFieldID = 3L;
          Optional<Long> timeSinceBoot = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == logContentFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.ByteArray) {
                ByteArrayType castingValue = element.value(ByteArrayType.class);
                logContent = castingValue.value(byte[].class);
              }
            } else if (element.contextTagNum() == UTCTimeStampFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                UTCTimeStamp = Optional.of(castingValue.value(Long.class));
              }
            } else if (element.contextTagNum() == timeSinceBootFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                timeSinceBoot = Optional.of(castingValue.value(Long.class));
              }
            }
          }
          callback.onSuccess(status, logContent, UTCTimeStamp, timeSinceBoot);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public interface RetrieveLogsResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer status, byte[] logContent, Optional<Long> UTCTimeStamp, Optional<Long> timeSinceBoot);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class GeneralDiagnosticsCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 51L;

    public GeneralDiagnosticsCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void testEventTrigger(DefaultClusterCallback callback, byte[] enableKey, Long eventTrigger) {
      testEventTrigger(callback, enableKey, eventTrigger, 0);
    }

    public void testEventTrigger(DefaultClusterCallback callback, byte[] enableKey, Long eventTrigger, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long enableKeyFieldID = 0L;
      BaseTLVType enableKeytlvValue = new ByteArrayType(enableKey);
      elements.add(new StructElement(enableKeyFieldID, enableKeytlvValue));

      final long eventTriggerFieldID = 1L;
      BaseTLVType eventTriggertlvValue = new UIntType(eventTrigger);
      elements.add(new StructElement(eventTriggerFieldID, eventTriggertlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public interface NetworkInterfacesAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.GeneralDiagnosticsClusterNetworkInterface> value);
    }

    public interface ActiveHardwareFaultsAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Integer> value);
    }

    public interface ActiveRadioFaultsAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Integer> value);
    }

    public interface ActiveNetworkFaultsAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Integer> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readNetworkInterfacesAttribute(
        NetworkInterfacesAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.GeneralDiagnosticsClusterNetworkInterface> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeNetworkInterfacesAttribute(
        NetworkInterfacesAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.GeneralDiagnosticsClusterNetworkInterface> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readRebootCountAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeRebootCountAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readUpTimeAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeUpTimeAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readTotalOperationalHoursAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeTotalOperationalHoursAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readBootReasonAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeBootReasonAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readActiveHardwareFaultsAttribute(
        ActiveHardwareFaultsAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeActiveHardwareFaultsAttribute(
        ActiveHardwareFaultsAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readActiveRadioFaultsAttribute(
        ActiveRadioFaultsAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeActiveRadioFaultsAttribute(
        ActiveRadioFaultsAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readActiveNetworkFaultsAttribute(
        ActiveNetworkFaultsAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeActiveNetworkFaultsAttribute(
        ActiveNetworkFaultsAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readTestEventTriggersEnabledAttribute(
        BooleanAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeTestEventTriggersEnabledAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAverageWearCountAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 9L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAverageWearCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 9L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class SoftwareDiagnosticsCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 52L;

    public SoftwareDiagnosticsCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void resetWatermarks(DefaultClusterCallback callback) {
      resetWatermarks(callback, 0);
    }

    public void resetWatermarks(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public interface ThreadMetricsAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.SoftwareDiagnosticsClusterThreadMetricsStruct> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readThreadMetricsAttribute(
        ThreadMetricsAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.SoftwareDiagnosticsClusterThreadMetricsStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeThreadMetricsAttribute(
        ThreadMetricsAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.SoftwareDiagnosticsClusterThreadMetricsStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readCurrentHeapFreeAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeCurrentHeapFreeAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readCurrentHeapUsedAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeCurrentHeapUsedAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readCurrentHeapHighWatermarkAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeCurrentHeapHighWatermarkAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class ThreadNetworkDiagnosticsCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 53L;

    public ThreadNetworkDiagnosticsCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void resetCounts(DefaultClusterCallback callback) {
      resetCounts(callback, 0);
    }

    public void resetCounts(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public interface ChannelAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface RoutingRoleAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface NetworkNameAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable String value);
    }

    public interface PanIdAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface ExtendedPanIdAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface MeshLocalPrefixAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable byte[] value);
    }

    public interface NeighborTableAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.ThreadNetworkDiagnosticsClusterNeighborTableStruct> value);
    }

    public interface RouteTableAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.ThreadNetworkDiagnosticsClusterRouteTableStruct> value);
    }

    public interface PartitionIdAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface WeightingAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface DataVersionAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface StableDataVersionAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface LeaderRouterIdAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface ActiveTimestampAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface PendingTimestampAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface DelayAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface SecurityPolicyAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable ChipStructs.ThreadNetworkDiagnosticsClusterSecurityPolicy value);
    }

    public interface ChannelPage0MaskAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable byte[] value);
    }

    public interface OperationalDatasetComponentsAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable ChipStructs.ThreadNetworkDiagnosticsClusterOperationalDatasetComponents value);
    }

    public interface ActiveNetworkFaultsListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Integer> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readChannelAttribute(
        ChannelAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeChannelAttribute(
        ChannelAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readRoutingRoleAttribute(
        RoutingRoleAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeRoutingRoleAttribute(
        RoutingRoleAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readNetworkNameAttribute(
        NetworkNameAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeNetworkNameAttribute(
        NetworkNameAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readPanIdAttribute(
        PanIdAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribePanIdAttribute(
        PanIdAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readExtendedPanIdAttribute(
        ExtendedPanIdAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeExtendedPanIdAttribute(
        ExtendedPanIdAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMeshLocalPrefixAttribute(
        MeshLocalPrefixAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable byte[] value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMeshLocalPrefixAttribute(
        MeshLocalPrefixAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable byte[] value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readOverrunCountAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeOverrunCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readNeighborTableAttribute(
        NeighborTableAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.ThreadNetworkDiagnosticsClusterNeighborTableStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeNeighborTableAttribute(
        NeighborTableAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.ThreadNetworkDiagnosticsClusterNeighborTableStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readRouteTableAttribute(
        RouteTableAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.ThreadNetworkDiagnosticsClusterRouteTableStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeRouteTableAttribute(
        RouteTableAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.ThreadNetworkDiagnosticsClusterRouteTableStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readPartitionIdAttribute(
        PartitionIdAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 9L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribePartitionIdAttribute(
        PartitionIdAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 9L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readWeightingAttribute(
        WeightingAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 10L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeWeightingAttribute(
        WeightingAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 10L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readDataVersionAttribute(
        DataVersionAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 11L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeDataVersionAttribute(
        DataVersionAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 11L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readStableDataVersionAttribute(
        StableDataVersionAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 12L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeStableDataVersionAttribute(
        StableDataVersionAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 12L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readLeaderRouterIdAttribute(
        LeaderRouterIdAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 13L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeLeaderRouterIdAttribute(
        LeaderRouterIdAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 13L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readDetachedRoleCountAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 14L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeDetachedRoleCountAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 14L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readChildRoleCountAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 15L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeChildRoleCountAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 15L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readRouterRoleCountAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeRouterRoleCountAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readLeaderRoleCountAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 17L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeLeaderRoleCountAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 17L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttachAttemptCountAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 18L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttachAttemptCountAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 18L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readPartitionIdChangeCountAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 19L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribePartitionIdChangeCountAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 19L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readBetterPartitionAttachAttemptCountAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 20L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeBetterPartitionAttachAttemptCountAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 20L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readParentChangeCountAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 21L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeParentChangeCountAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 21L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readTxTotalCountAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 22L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeTxTotalCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 22L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readTxUnicastCountAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 23L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeTxUnicastCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 23L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readTxBroadcastCountAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 24L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeTxBroadcastCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 24L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readTxAckRequestedCountAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 25L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeTxAckRequestedCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 25L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readTxAckedCountAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 26L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeTxAckedCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 26L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readTxNoAckRequestedCountAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 27L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeTxNoAckRequestedCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 27L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readTxDataCountAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 28L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeTxDataCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 28L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readTxDataPollCountAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 29L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeTxDataPollCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 29L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readTxBeaconCountAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 30L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeTxBeaconCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 30L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readTxBeaconRequestCountAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 31L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeTxBeaconRequestCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 31L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readTxOtherCountAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 32L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeTxOtherCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 32L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readTxRetryCountAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 33L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeTxRetryCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 33L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readTxDirectMaxRetryExpiryCountAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 34L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeTxDirectMaxRetryExpiryCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 34L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readTxIndirectMaxRetryExpiryCountAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 35L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeTxIndirectMaxRetryExpiryCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 35L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readTxErrCcaCountAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 36L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeTxErrCcaCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 36L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readTxErrAbortCountAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 37L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeTxErrAbortCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 37L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readTxErrBusyChannelCountAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 38L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeTxErrBusyChannelCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 38L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readRxTotalCountAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 39L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeRxTotalCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 39L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readRxUnicastCountAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 40L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeRxUnicastCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 40L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readRxBroadcastCountAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 41L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeRxBroadcastCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 41L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readRxDataCountAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 42L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeRxDataCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 42L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readRxDataPollCountAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 43L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeRxDataPollCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 43L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readRxBeaconCountAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 44L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeRxBeaconCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 44L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readRxBeaconRequestCountAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 45L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeRxBeaconRequestCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 45L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readRxOtherCountAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 46L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeRxOtherCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 46L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readRxAddressFilteredCountAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 47L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeRxAddressFilteredCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 47L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readRxDestAddrFilteredCountAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 48L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeRxDestAddrFilteredCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 48L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readRxDuplicatedCountAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 49L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeRxDuplicatedCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 49L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readRxErrNoFrameCountAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 50L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeRxErrNoFrameCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 50L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readRxErrUnknownNeighborCountAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 51L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeRxErrUnknownNeighborCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 51L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readRxErrInvalidSrcAddrCountAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 52L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeRxErrInvalidSrcAddrCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 52L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readRxErrSecCountAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 53L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeRxErrSecCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 53L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readRxErrFcsCountAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 54L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeRxErrFcsCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 54L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readRxErrOtherCountAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 55L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeRxErrOtherCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 55L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readActiveTimestampAttribute(
        ActiveTimestampAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 56L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeActiveTimestampAttribute(
        ActiveTimestampAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 56L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readPendingTimestampAttribute(
        PendingTimestampAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 57L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribePendingTimestampAttribute(
        PendingTimestampAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 57L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readDelayAttribute(
        DelayAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 58L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeDelayAttribute(
        DelayAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 58L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readSecurityPolicyAttribute(
        SecurityPolicyAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 59L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable ChipStructs.ThreadNetworkDiagnosticsClusterSecurityPolicy value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeSecurityPolicyAttribute(
        SecurityPolicyAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 59L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable ChipStructs.ThreadNetworkDiagnosticsClusterSecurityPolicy value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readChannelPage0MaskAttribute(
        ChannelPage0MaskAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 60L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable byte[] value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeChannelPage0MaskAttribute(
        ChannelPage0MaskAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 60L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable byte[] value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readOperationalDatasetComponentsAttribute(
        OperationalDatasetComponentsAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 61L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable ChipStructs.ThreadNetworkDiagnosticsClusterOperationalDatasetComponents value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeOperationalDatasetComponentsAttribute(
        OperationalDatasetComponentsAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 61L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable ChipStructs.ThreadNetworkDiagnosticsClusterOperationalDatasetComponents value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readActiveNetworkFaultsListAttribute(
        ActiveNetworkFaultsListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 62L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeActiveNetworkFaultsListAttribute(
        ActiveNetworkFaultsListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 62L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class WiFiNetworkDiagnosticsCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 54L;

    public WiFiNetworkDiagnosticsCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void resetCounts(DefaultClusterCallback callback) {
      resetCounts(callback, 0);
    }

    public void resetCounts(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public interface BssidAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable byte[] value);
    }

    public interface SecurityTypeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface WiFiVersionAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface ChannelNumberAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface RssiAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface BeaconLostCountAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface BeaconRxCountAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface PacketMulticastRxCountAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface PacketMulticastTxCountAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface PacketUnicastRxCountAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface PacketUnicastTxCountAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface CurrentMaxRateAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface OverrunCountAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readBssidAttribute(
        BssidAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable byte[] value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeBssidAttribute(
        BssidAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable byte[] value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readSecurityTypeAttribute(
        SecurityTypeAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeSecurityTypeAttribute(
        SecurityTypeAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readWiFiVersionAttribute(
        WiFiVersionAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeWiFiVersionAttribute(
        WiFiVersionAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readChannelNumberAttribute(
        ChannelNumberAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeChannelNumberAttribute(
        ChannelNumberAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readRssiAttribute(
        RssiAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeRssiAttribute(
        RssiAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readBeaconLostCountAttribute(
        BeaconLostCountAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeBeaconLostCountAttribute(
        BeaconLostCountAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readBeaconRxCountAttribute(
        BeaconRxCountAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeBeaconRxCountAttribute(
        BeaconRxCountAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readPacketMulticastRxCountAttribute(
        PacketMulticastRxCountAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribePacketMulticastRxCountAttribute(
        PacketMulticastRxCountAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readPacketMulticastTxCountAttribute(
        PacketMulticastTxCountAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribePacketMulticastTxCountAttribute(
        PacketMulticastTxCountAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readPacketUnicastRxCountAttribute(
        PacketUnicastRxCountAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 9L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribePacketUnicastRxCountAttribute(
        PacketUnicastRxCountAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 9L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readPacketUnicastTxCountAttribute(
        PacketUnicastTxCountAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 10L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribePacketUnicastTxCountAttribute(
        PacketUnicastTxCountAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 10L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readCurrentMaxRateAttribute(
        CurrentMaxRateAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 11L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeCurrentMaxRateAttribute(
        CurrentMaxRateAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 11L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readOverrunCountAttribute(
        OverrunCountAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 12L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeOverrunCountAttribute(
        OverrunCountAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 12L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class EthernetNetworkDiagnosticsCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 55L;

    public EthernetNetworkDiagnosticsCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void resetCounts(DefaultClusterCallback callback) {
      resetCounts(callback, 0);
    }

    public void resetCounts(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public interface PHYRateAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface FullDuplexAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Boolean value);
    }

    public interface CarrierDetectAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Boolean value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readPHYRateAttribute(
        PHYRateAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribePHYRateAttribute(
        PHYRateAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFullDuplexAttribute(
        FullDuplexAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFullDuplexAttribute(
        FullDuplexAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readPacketRxCountAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribePacketRxCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readPacketTxCountAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribePacketTxCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readTxErrCountAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeTxErrCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readCollisionCountAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeCollisionCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readOverrunCountAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeOverrunCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readCarrierDetectAttribute(
        CarrierDetectAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeCarrierDetectAttribute(
        CarrierDetectAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readTimeSinceResetAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeTimeSinceResetAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class TimeSynchronizationCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 56L;

    public TimeSynchronizationCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void setUTCTime(DefaultClusterCallback callback, Long UTCTime, Integer granularity, Optional<Integer> timeSource) {
      setUTCTime(callback, UTCTime, granularity, timeSource, 0);
    }

    public void setUTCTime(DefaultClusterCallback callback, Long UTCTime, Integer granularity, Optional<Integer> timeSource, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long UTCTimeFieldID = 0L;
      BaseTLVType UTCTimetlvValue = new UIntType(UTCTime);
      elements.add(new StructElement(UTCTimeFieldID, UTCTimetlvValue));

      final long granularityFieldID = 1L;
      BaseTLVType granularitytlvValue = new UIntType(granularity);
      elements.add(new StructElement(granularityFieldID, granularitytlvValue));

      final long timeSourceFieldID = 2L;
      BaseTLVType timeSourcetlvValue = timeSource.<BaseTLVType>map((nonOptionaltimeSource) -> new UIntType(nonOptionaltimeSource)).orElse(new EmptyType());
      elements.add(new StructElement(timeSourceFieldID, timeSourcetlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void setTrustedTimeSource(DefaultClusterCallback callback, @Nullable ChipStructs.TimeSynchronizationClusterFabricScopedTrustedTimeSourceStruct trustedTimeSource) {
      setTrustedTimeSource(callback, trustedTimeSource, 0);
    }

    public void setTrustedTimeSource(DefaultClusterCallback callback, @Nullable ChipStructs.TimeSynchronizationClusterFabricScopedTrustedTimeSourceStruct trustedTimeSource, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 1L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long trustedTimeSourceFieldID = 0L;
      BaseTLVType trustedTimeSourcetlvValue = trustedTimeSource != null ? trustedTimeSource.encodeTlv() : new NullType();
      elements.add(new StructElement(trustedTimeSourceFieldID, trustedTimeSourcetlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void setTimeZone(SetTimeZoneResponseCallback callback, ArrayList<ChipStructs.TimeSynchronizationClusterTimeZoneStruct> timeZone) {
      setTimeZone(callback, timeZone, 0);
    }

    public void setTimeZone(SetTimeZoneResponseCallback callback, ArrayList<ChipStructs.TimeSynchronizationClusterTimeZoneStruct> timeZone, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 2L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long timeZoneFieldID = 0L;
      BaseTLVType timeZonetlvValue = ArrayType.generateArrayType(timeZone, (elementtimeZone) -> elementtimeZone.encodeTlv());
      elements.add(new StructElement(timeZoneFieldID, timeZonetlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long DSTOffsetRequiredFieldID = 0L;
          Boolean DSTOffsetRequired = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == DSTOffsetRequiredFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Boolean) {
                BooleanType castingValue = element.value(BooleanType.class);
                DSTOffsetRequired = castingValue.value(Boolean.class);
              }
            }
          }
          callback.onSuccess(DSTOffsetRequired);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void setDSTOffset(DefaultClusterCallback callback, ArrayList<ChipStructs.TimeSynchronizationClusterDSTOffsetStruct> DSTOffset) {
      setDSTOffset(callback, DSTOffset, 0);
    }

    public void setDSTOffset(DefaultClusterCallback callback, ArrayList<ChipStructs.TimeSynchronizationClusterDSTOffsetStruct> DSTOffset, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 4L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long DSTOffsetFieldID = 0L;
      BaseTLVType DSTOffsettlvValue = ArrayType.generateArrayType(DSTOffset, (elementDSTOffset) -> elementDSTOffset.encodeTlv());
      elements.add(new StructElement(DSTOffsetFieldID, DSTOffsettlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void setDefaultNTP(DefaultClusterCallback callback, @Nullable String defaultNTP) {
      setDefaultNTP(callback, defaultNTP, 0);
    }

    public void setDefaultNTP(DefaultClusterCallback callback, @Nullable String defaultNTP, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 5L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long defaultNTPFieldID = 0L;
      BaseTLVType defaultNTPtlvValue = defaultNTP != null ? new StringType(defaultNTP) : new NullType();
      elements.add(new StructElement(defaultNTPFieldID, defaultNTPtlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public interface SetTimeZoneResponseCallback extends BaseClusterCallback {
      void onSuccess(Boolean DSTOffsetRequired);
    }

    public interface UTCTimeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface TrustedTimeSourceAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable ChipStructs.TimeSynchronizationClusterTrustedTimeSourceStruct value);
    }

    public interface DefaultNTPAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable String value);
    }

    public interface TimeZoneAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.TimeSynchronizationClusterTimeZoneStruct> value);
    }

    public interface DSTOffsetAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.TimeSynchronizationClusterDSTOffsetStruct> value);
    }

    public interface LocalTimeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readUTCTimeAttribute(
        UTCTimeAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeUTCTimeAttribute(
        UTCTimeAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGranularityAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGranularityAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readTimeSourceAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeTimeSourceAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readTrustedTimeSourceAttribute(
        TrustedTimeSourceAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable ChipStructs.TimeSynchronizationClusterTrustedTimeSourceStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeTrustedTimeSourceAttribute(
        TrustedTimeSourceAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable ChipStructs.TimeSynchronizationClusterTrustedTimeSourceStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readDefaultNTPAttribute(
        DefaultNTPAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeDefaultNTPAttribute(
        DefaultNTPAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readTimeZoneAttribute(
        TimeZoneAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.TimeSynchronizationClusterTimeZoneStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeTimeZoneAttribute(
        TimeZoneAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.TimeSynchronizationClusterTimeZoneStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readDSTOffsetAttribute(
        DSTOffsetAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.TimeSynchronizationClusterDSTOffsetStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeDSTOffsetAttribute(
        DSTOffsetAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.TimeSynchronizationClusterDSTOffsetStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readLocalTimeAttribute(
        LocalTimeAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeLocalTimeAttribute(
        LocalTimeAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readTimeZoneDatabaseAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeTimeZoneDatabaseAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readNTPServerAvailableAttribute(
        BooleanAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 9L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeNTPServerAvailableAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 9L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readTimeZoneListMaxSizeAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 10L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeTimeZoneListMaxSizeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 10L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readDSTOffsetListMaxSizeAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 11L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeDSTOffsetListMaxSizeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 11L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readSupportsDNSResolveAttribute(
        BooleanAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 12L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeSupportsDNSResolveAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 12L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class BridgedDeviceBasicInformationCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 57L;

    public BridgedDeviceBasicInformationCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface ProductAppearanceAttributeCallback extends BaseAttributeCallback {
      void onSuccess(ChipStructs.BridgedDeviceBasicInformationClusterProductAppearanceStruct value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readVendorNameAttribute(
        CharStringAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeVendorNameAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readVendorIDAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeVendorIDAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readProductNameAttribute(
        CharStringAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeProductNameAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readNodeLabelAttribute(
        CharStringAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeNodeLabelAttribute(DefaultClusterCallback callback, String value) {
      writeNodeLabelAttribute(callback, value, 0);
    }

    public void writeNodeLabelAttribute(DefaultClusterCallback callback, String value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      
      BaseTLVType tlvValue = new StringType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeNodeLabelAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readHardwareVersionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeHardwareVersionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readHardwareVersionStringAttribute(
        CharStringAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeHardwareVersionStringAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readSoftwareVersionAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 9L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeSoftwareVersionAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 9L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readSoftwareVersionStringAttribute(
        CharStringAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 10L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeSoftwareVersionStringAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 10L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readManufacturingDateAttribute(
        CharStringAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 11L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeManufacturingDateAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 11L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readPartNumberAttribute(
        CharStringAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 12L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribePartNumberAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 12L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readProductURLAttribute(
        CharStringAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 13L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeProductURLAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 13L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readProductLabelAttribute(
        CharStringAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 14L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeProductLabelAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 14L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readSerialNumberAttribute(
        CharStringAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 15L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeSerialNumberAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 15L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readReachableAttribute(
        BooleanAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 17L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeReachableAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 17L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readUniqueIDAttribute(
        CharStringAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 18L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeUniqueIDAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 18L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readProductAppearanceAttribute(
        ProductAppearanceAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 20L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            ChipStructs.BridgedDeviceBasicInformationClusterProductAppearanceStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeProductAppearanceAttribute(
        ProductAppearanceAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 20L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            ChipStructs.BridgedDeviceBasicInformationClusterProductAppearanceStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class SwitchCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 59L;

    public SwitchCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readNumberOfPositionsAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeNumberOfPositionsAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readCurrentPositionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeCurrentPositionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMultiPressMaxAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMultiPressMaxAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class AdministratorCommissioningCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 60L;

    public AdministratorCommissioningCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);


    public void openCommissioningWindow(DefaultClusterCallback callback, Integer commissioningTimeout, byte[] PAKEPasscodeVerifier, Integer discriminator, Long iterations, byte[] salt, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long commissioningTimeoutFieldID = 0L;
      BaseTLVType commissioningTimeouttlvValue = new UIntType(commissioningTimeout);
      elements.add(new StructElement(commissioningTimeoutFieldID, commissioningTimeouttlvValue));

      final long PAKEPasscodeVerifierFieldID = 1L;
      BaseTLVType PAKEPasscodeVerifiertlvValue = new ByteArrayType(PAKEPasscodeVerifier);
      elements.add(new StructElement(PAKEPasscodeVerifierFieldID, PAKEPasscodeVerifiertlvValue));

      final long discriminatorFieldID = 2L;
      BaseTLVType discriminatortlvValue = new UIntType(discriminator);
      elements.add(new StructElement(discriminatorFieldID, discriminatortlvValue));

      final long iterationsFieldID = 3L;
      BaseTLVType iterationstlvValue = new UIntType(iterations);
      elements.add(new StructElement(iterationsFieldID, iterationstlvValue));

      final long saltFieldID = 4L;
      BaseTLVType salttlvValue = new ByteArrayType(salt);
      elements.add(new StructElement(saltFieldID, salttlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }


    public void openBasicCommissioningWindow(DefaultClusterCallback callback, Integer commissioningTimeout, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 1L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long commissioningTimeoutFieldID = 0L;
      BaseTLVType commissioningTimeouttlvValue = new UIntType(commissioningTimeout);
      elements.add(new StructElement(commissioningTimeoutFieldID, commissioningTimeouttlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }


    public void revokeCommissioning(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 2L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public interface AdminFabricIndexAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface AdminVendorIdAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readWindowStatusAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeWindowStatusAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAdminFabricIndexAttribute(
        AdminFabricIndexAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAdminFabricIndexAttribute(
        AdminFabricIndexAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAdminVendorIdAttribute(
        AdminVendorIdAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAdminVendorIdAttribute(
        AdminVendorIdAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class OperationalCredentialsCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 62L;

    public OperationalCredentialsCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void attestationRequest(AttestationResponseCallback callback, byte[] attestationNonce) {
      attestationRequest(callback, attestationNonce, 0);
    }

    public void attestationRequest(AttestationResponseCallback callback, byte[] attestationNonce, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long attestationNonceFieldID = 0L;
      BaseTLVType attestationNoncetlvValue = new ByteArrayType(attestationNonce);
      elements.add(new StructElement(attestationNonceFieldID, attestationNoncetlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long attestationElementsFieldID = 0L;
          byte[] attestationElements = null;
          final long attestationSignatureFieldID = 1L;
          byte[] attestationSignature = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == attestationElementsFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.ByteArray) {
                ByteArrayType castingValue = element.value(ByteArrayType.class);
                attestationElements = castingValue.value(byte[].class);
              }
            } else if (element.contextTagNum() == attestationSignatureFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.ByteArray) {
                ByteArrayType castingValue = element.value(ByteArrayType.class);
                attestationSignature = castingValue.value(byte[].class);
              }
            }
          }
          callback.onSuccess(attestationElements, attestationSignature);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void certificateChainRequest(CertificateChainResponseCallback callback, Integer certificateType) {
      certificateChainRequest(callback, certificateType, 0);
    }

    public void certificateChainRequest(CertificateChainResponseCallback callback, Integer certificateType, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 2L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long certificateTypeFieldID = 0L;
      BaseTLVType certificateTypetlvValue = new UIntType(certificateType);
      elements.add(new StructElement(certificateTypeFieldID, certificateTypetlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long certificateFieldID = 0L;
          byte[] certificate = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == certificateFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.ByteArray) {
                ByteArrayType castingValue = element.value(ByteArrayType.class);
                certificate = castingValue.value(byte[].class);
              }
            }
          }
          callback.onSuccess(certificate);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void CSRRequest(CSRResponseCallback callback, byte[] CSRNonce, Optional<Boolean> isForUpdateNOC) {
      CSRRequest(callback, CSRNonce, isForUpdateNOC, 0);
    }

    public void CSRRequest(CSRResponseCallback callback, byte[] CSRNonce, Optional<Boolean> isForUpdateNOC, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 4L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long CSRNonceFieldID = 0L;
      BaseTLVType CSRNoncetlvValue = new ByteArrayType(CSRNonce);
      elements.add(new StructElement(CSRNonceFieldID, CSRNoncetlvValue));

      final long isForUpdateNOCFieldID = 1L;
      BaseTLVType isForUpdateNOCtlvValue = isForUpdateNOC.<BaseTLVType>map((nonOptionalisForUpdateNOC) -> new BooleanType(nonOptionalisForUpdateNOC)).orElse(new EmptyType());
      elements.add(new StructElement(isForUpdateNOCFieldID, isForUpdateNOCtlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long NOCSRElementsFieldID = 0L;
          byte[] NOCSRElements = null;
          final long attestationSignatureFieldID = 1L;
          byte[] attestationSignature = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == NOCSRElementsFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.ByteArray) {
                ByteArrayType castingValue = element.value(ByteArrayType.class);
                NOCSRElements = castingValue.value(byte[].class);
              }
            } else if (element.contextTagNum() == attestationSignatureFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.ByteArray) {
                ByteArrayType castingValue = element.value(ByteArrayType.class);
                attestationSignature = castingValue.value(byte[].class);
              }
            }
          }
          callback.onSuccess(NOCSRElements, attestationSignature);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void addNOC(NOCResponseCallback callback, byte[] NOCValue, Optional<byte[]> ICACValue, byte[] IPKValue, Long caseAdminSubject, Integer adminVendorId) {
      addNOC(callback, NOCValue, ICACValue, IPKValue, caseAdminSubject, adminVendorId, 0);
    }

    public void addNOC(NOCResponseCallback callback, byte[] NOCValue, Optional<byte[]> ICACValue, byte[] IPKValue, Long caseAdminSubject, Integer adminVendorId, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 6L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long NOCValueFieldID = 0L;
      BaseTLVType NOCValuetlvValue = new ByteArrayType(NOCValue);
      elements.add(new StructElement(NOCValueFieldID, NOCValuetlvValue));

      final long ICACValueFieldID = 1L;
      BaseTLVType ICACValuetlvValue = ICACValue.<BaseTLVType>map((nonOptionalICACValue) -> new ByteArrayType(nonOptionalICACValue)).orElse(new EmptyType());
      elements.add(new StructElement(ICACValueFieldID, ICACValuetlvValue));

      final long IPKValueFieldID = 2L;
      BaseTLVType IPKValuetlvValue = new ByteArrayType(IPKValue);
      elements.add(new StructElement(IPKValueFieldID, IPKValuetlvValue));

      final long caseAdminSubjectFieldID = 3L;
      BaseTLVType caseAdminSubjecttlvValue = new UIntType(caseAdminSubject);
      elements.add(new StructElement(caseAdminSubjectFieldID, caseAdminSubjecttlvValue));

      final long adminVendorIdFieldID = 4L;
      BaseTLVType adminVendorIdtlvValue = new UIntType(adminVendorId);
      elements.add(new StructElement(adminVendorIdFieldID, adminVendorIdtlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusCodeFieldID = 0L;
          Integer statusCode = null;
          final long fabricIndexFieldID = 1L;
          Optional<Integer> fabricIndex = Optional.empty();
          final long debugTextFieldID = 2L;
          Optional<String> debugText = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusCodeFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                statusCode = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == fabricIndexFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                fabricIndex = Optional.of(castingValue.value(Integer.class));
              }
            } else if (element.contextTagNum() == debugTextFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                debugText = Optional.of(castingValue.value(String.class));
              }
            }
          }
          callback.onSuccess(statusCode, fabricIndex, debugText);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void updateNOC(NOCResponseCallback callback, byte[] NOCValue, Optional<byte[]> ICACValue) {
      updateNOC(callback, NOCValue, ICACValue, 0);
    }

    public void updateNOC(NOCResponseCallback callback, byte[] NOCValue, Optional<byte[]> ICACValue, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 7L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long NOCValueFieldID = 0L;
      BaseTLVType NOCValuetlvValue = new ByteArrayType(NOCValue);
      elements.add(new StructElement(NOCValueFieldID, NOCValuetlvValue));

      final long ICACValueFieldID = 1L;
      BaseTLVType ICACValuetlvValue = ICACValue.<BaseTLVType>map((nonOptionalICACValue) -> new ByteArrayType(nonOptionalICACValue)).orElse(new EmptyType());
      elements.add(new StructElement(ICACValueFieldID, ICACValuetlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusCodeFieldID = 0L;
          Integer statusCode = null;
          final long fabricIndexFieldID = 1L;
          Optional<Integer> fabricIndex = Optional.empty();
          final long debugTextFieldID = 2L;
          Optional<String> debugText = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusCodeFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                statusCode = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == fabricIndexFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                fabricIndex = Optional.of(castingValue.value(Integer.class));
              }
            } else if (element.contextTagNum() == debugTextFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                debugText = Optional.of(castingValue.value(String.class));
              }
            }
          }
          callback.onSuccess(statusCode, fabricIndex, debugText);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void updateFabricLabel(NOCResponseCallback callback, String label) {
      updateFabricLabel(callback, label, 0);
    }

    public void updateFabricLabel(NOCResponseCallback callback, String label, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 9L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long labelFieldID = 0L;
      BaseTLVType labeltlvValue = new StringType(label);
      elements.add(new StructElement(labelFieldID, labeltlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusCodeFieldID = 0L;
          Integer statusCode = null;
          final long fabricIndexFieldID = 1L;
          Optional<Integer> fabricIndex = Optional.empty();
          final long debugTextFieldID = 2L;
          Optional<String> debugText = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusCodeFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                statusCode = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == fabricIndexFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                fabricIndex = Optional.of(castingValue.value(Integer.class));
              }
            } else if (element.contextTagNum() == debugTextFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                debugText = Optional.of(castingValue.value(String.class));
              }
            }
          }
          callback.onSuccess(statusCode, fabricIndex, debugText);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void removeFabric(NOCResponseCallback callback, Integer fabricIndex) {
      removeFabric(callback, fabricIndex, 0);
    }

    public void removeFabric(NOCResponseCallback callback, Integer fabricIndex, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 10L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long fabricIndexFieldID = 0L;
      BaseTLVType fabricIndextlvValue = new UIntType(fabricIndex);
      elements.add(new StructElement(fabricIndexFieldID, fabricIndextlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusCodeFieldID = 0L;
          Integer statusCode = null;
          final long fabricIndexFieldID = 1L;
          Optional<Integer> fabricIndex = Optional.empty();
          final long debugTextFieldID = 2L;
          Optional<String> debugText = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusCodeFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                statusCode = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == fabricIndexFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                fabricIndex = Optional.of(castingValue.value(Integer.class));
              }
            } else if (element.contextTagNum() == debugTextFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                debugText = Optional.of(castingValue.value(String.class));
              }
            }
          }
          callback.onSuccess(statusCode, fabricIndex, debugText);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void addTrustedRootCertificate(DefaultClusterCallback callback, byte[] rootCACertificate) {
      addTrustedRootCertificate(callback, rootCACertificate, 0);
    }

    public void addTrustedRootCertificate(DefaultClusterCallback callback, byte[] rootCACertificate, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 11L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long rootCACertificateFieldID = 0L;
      BaseTLVType rootCACertificatetlvValue = new ByteArrayType(rootCACertificate);
      elements.add(new StructElement(rootCACertificateFieldID, rootCACertificatetlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public interface AttestationResponseCallback extends BaseClusterCallback {
      void onSuccess(byte[] attestationElements, byte[] attestationSignature);
    }

    public interface CertificateChainResponseCallback extends BaseClusterCallback {
      void onSuccess(byte[] certificate);
    }

    public interface CSRResponseCallback extends BaseClusterCallback {
      void onSuccess(byte[] NOCSRElements, byte[] attestationSignature);
    }

    public interface NOCResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer statusCode, Optional<Integer> fabricIndex, Optional<String> debugText);
    }

    public interface NOCsAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.OperationalCredentialsClusterNOCStruct> value);
    }

    public interface FabricsAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.OperationalCredentialsClusterFabricDescriptorStruct> value);
    }

    public interface TrustedRootCertificatesAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<byte[]> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readNOCsAttribute(
        NOCsAttributeCallback callback) {
      readNOCsAttributeWithFabricFilter(callback, true);
    }

    public void readNOCsAttributeWithFabricFilter(
        NOCsAttributeCallback callback, boolean isFabricFiltered) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.OperationalCredentialsClusterNOCStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, isFabricFiltered);
    }

    public void subscribeNOCsAttribute(
        NOCsAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.OperationalCredentialsClusterNOCStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFabricsAttribute(
        FabricsAttributeCallback callback) {
      readFabricsAttributeWithFabricFilter(callback, true);
    }

    public void readFabricsAttributeWithFabricFilter(
        FabricsAttributeCallback callback, boolean isFabricFiltered) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.OperationalCredentialsClusterFabricDescriptorStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, isFabricFiltered);
    }

    public void subscribeFabricsAttribute(
        FabricsAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.OperationalCredentialsClusterFabricDescriptorStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readSupportedFabricsAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeSupportedFabricsAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readCommissionedFabricsAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeCommissionedFabricsAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readTrustedRootCertificatesAttribute(
        TrustedRootCertificatesAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<byte[]> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeTrustedRootCertificatesAttribute(
        TrustedRootCertificatesAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<byte[]> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readCurrentFabricIndexAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeCurrentFabricIndexAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class GroupKeyManagementCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 63L;

    public GroupKeyManagementCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void keySetWrite(DefaultClusterCallback callback, ChipStructs.GroupKeyManagementClusterGroupKeySetStruct groupKeySet) {
      keySetWrite(callback, groupKeySet, 0);
    }

    public void keySetWrite(DefaultClusterCallback callback, ChipStructs.GroupKeyManagementClusterGroupKeySetStruct groupKeySet, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long groupKeySetFieldID = 0L;
      BaseTLVType groupKeySettlvValue = groupKeySet.encodeTlv();
      elements.add(new StructElement(groupKeySetFieldID, groupKeySettlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void keySetRead(KeySetReadResponseCallback callback, Integer groupKeySetID) {
      keySetRead(callback, groupKeySetID, 0);
    }

    public void keySetRead(KeySetReadResponseCallback callback, Integer groupKeySetID, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 1L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long groupKeySetIDFieldID = 0L;
      BaseTLVType groupKeySetIDtlvValue = new UIntType(groupKeySetID);
      elements.add(new StructElement(groupKeySetIDFieldID, groupKeySetIDtlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long groupKeySetFieldID = 0L;
          ChipStructs.GroupKeyManagementClusterGroupKeySetStruct groupKeySet = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == groupKeySetFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Struct) {
                StructType castingValue = element.value(StructType.class);
                groupKeySet = ChipStructs.GroupKeyManagementClusterGroupKeySetStruct.decodeTlv(castingValue);
              }
            }
          }
          callback.onSuccess(groupKeySet);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void keySetRemove(DefaultClusterCallback callback, Integer groupKeySetID) {
      keySetRemove(callback, groupKeySetID, 0);
    }

    public void keySetRemove(DefaultClusterCallback callback, Integer groupKeySetID, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 3L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long groupKeySetIDFieldID = 0L;
      BaseTLVType groupKeySetIDtlvValue = new UIntType(groupKeySetID);
      elements.add(new StructElement(groupKeySetIDFieldID, groupKeySetIDtlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void keySetReadAllIndices(KeySetReadAllIndicesResponseCallback callback) {
      keySetReadAllIndices(callback, 0);
    }

    public void keySetReadAllIndices(KeySetReadAllIndicesResponseCallback callback, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 4L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long groupKeySetIDsFieldID = 0L;
          ArrayList<Integer> groupKeySetIDs = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == groupKeySetIDsFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Array) {
                ArrayType castingValue = element.value(ArrayType.class);
                groupKeySetIDs = castingValue.map((elementcastingValue) -> elementcastingValue.value(Integer.class));
              }
            }
          }
          callback.onSuccess(groupKeySetIDs);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public interface KeySetReadResponseCallback extends BaseClusterCallback {
      void onSuccess(ChipStructs.GroupKeyManagementClusterGroupKeySetStruct groupKeySet);
    }

    public interface KeySetReadAllIndicesResponseCallback extends BaseClusterCallback {
      void onSuccess(ArrayList<Integer> groupKeySetIDs);
    }

    public interface GroupKeyMapAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.GroupKeyManagementClusterGroupKeyMapStruct> value);
    }

    public interface GroupTableAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.GroupKeyManagementClusterGroupInfoMapStruct> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readGroupKeyMapAttribute(
        GroupKeyMapAttributeCallback callback) {
      readGroupKeyMapAttributeWithFabricFilter(callback, true);
    }

    public void readGroupKeyMapAttributeWithFabricFilter(
        GroupKeyMapAttributeCallback callback, boolean isFabricFiltered) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.GroupKeyManagementClusterGroupKeyMapStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, isFabricFiltered);
    }

    public void writeGroupKeyMapAttribute(DefaultClusterCallback callback, ArrayList<ChipStructs.GroupKeyManagementClusterGroupKeyMapStruct> value) {
      writeGroupKeyMapAttribute(callback, value, 0);
    }

    public void writeGroupKeyMapAttribute(DefaultClusterCallback callback, ArrayList<ChipStructs.GroupKeyManagementClusterGroupKeyMapStruct> value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      
      BaseTLVType tlvValue = ArrayType.generateArrayType(value, (elementvalue) -> elementvalue.encodeTlv());
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeGroupKeyMapAttribute(
        GroupKeyMapAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.GroupKeyManagementClusterGroupKeyMapStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGroupTableAttribute(
        GroupTableAttributeCallback callback) {
      readGroupTableAttributeWithFabricFilter(callback, true);
    }

    public void readGroupTableAttributeWithFabricFilter(
        GroupTableAttributeCallback callback, boolean isFabricFiltered) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.GroupKeyManagementClusterGroupInfoMapStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, isFabricFiltered);
    }

    public void subscribeGroupTableAttribute(
        GroupTableAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.GroupKeyManagementClusterGroupInfoMapStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMaxGroupsPerFabricAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMaxGroupsPerFabricAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMaxGroupKeysPerFabricAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMaxGroupKeysPerFabricAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class FixedLabelCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 64L;

    public FixedLabelCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface LabelListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.FixedLabelClusterLabelStruct> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readLabelListAttribute(
        LabelListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.FixedLabelClusterLabelStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeLabelListAttribute(
        LabelListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.FixedLabelClusterLabelStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class UserLabelCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 65L;

    public UserLabelCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface LabelListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.UserLabelClusterLabelStruct> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readLabelListAttribute(
        LabelListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.UserLabelClusterLabelStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeLabelListAttribute(DefaultClusterCallback callback, ArrayList<ChipStructs.UserLabelClusterLabelStruct> value) {
      writeLabelListAttribute(callback, value, 0);
    }

    public void writeLabelListAttribute(DefaultClusterCallback callback, ArrayList<ChipStructs.UserLabelClusterLabelStruct> value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      
      BaseTLVType tlvValue = ArrayType.generateArrayType(value, (elementvalue) -> elementvalue.encodeTlv());
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeLabelListAttribute(
        LabelListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.UserLabelClusterLabelStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class ProxyConfigurationCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 66L;

    public ProxyConfigurationCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class ProxyDiscoveryCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 67L;

    public ProxyDiscoveryCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class ProxyValidCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 68L;

    public ProxyValidCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class BooleanStateCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 69L;

    public BooleanStateCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readStateValueAttribute(
        BooleanAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeStateValueAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class IcdManagementCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 70L;

    public IcdManagementCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void registerClient(RegisterClientResponseCallback callback, Long checkInNodeID, Long monitoredSubject, byte[] key, Optional<byte[]> verificationKey) {
      registerClient(callback, checkInNodeID, monitoredSubject, key, verificationKey, 0);
    }

    public void registerClient(RegisterClientResponseCallback callback, Long checkInNodeID, Long monitoredSubject, byte[] key, Optional<byte[]> verificationKey, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long checkInNodeIDFieldID = 0L;
      BaseTLVType checkInNodeIDtlvValue = new UIntType(checkInNodeID);
      elements.add(new StructElement(checkInNodeIDFieldID, checkInNodeIDtlvValue));

      final long monitoredSubjectFieldID = 1L;
      BaseTLVType monitoredSubjecttlvValue = new UIntType(monitoredSubject);
      elements.add(new StructElement(monitoredSubjectFieldID, monitoredSubjecttlvValue));

      final long keyFieldID = 2L;
      BaseTLVType keytlvValue = new ByteArrayType(key);
      elements.add(new StructElement(keyFieldID, keytlvValue));

      final long verificationKeyFieldID = 3L;
      BaseTLVType verificationKeytlvValue = verificationKey.<BaseTLVType>map((nonOptionalverificationKey) -> new ByteArrayType(nonOptionalverificationKey)).orElse(new EmptyType());
      elements.add(new StructElement(verificationKeyFieldID, verificationKeytlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long ICDCounterFieldID = 0L;
          Long ICDCounter = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == ICDCounterFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                ICDCounter = castingValue.value(Long.class);
              }
            }
          }
          callback.onSuccess(ICDCounter);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void unregisterClient(DefaultClusterCallback callback, Long checkInNodeID, Optional<byte[]> verificationKey) {
      unregisterClient(callback, checkInNodeID, verificationKey, 0);
    }

    public void unregisterClient(DefaultClusterCallback callback, Long checkInNodeID, Optional<byte[]> verificationKey, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 2L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long checkInNodeIDFieldID = 0L;
      BaseTLVType checkInNodeIDtlvValue = new UIntType(checkInNodeID);
      elements.add(new StructElement(checkInNodeIDFieldID, checkInNodeIDtlvValue));

      final long verificationKeyFieldID = 1L;
      BaseTLVType verificationKeytlvValue = verificationKey.<BaseTLVType>map((nonOptionalverificationKey) -> new ByteArrayType(nonOptionalverificationKey)).orElse(new EmptyType());
      elements.add(new StructElement(verificationKeyFieldID, verificationKeytlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void stayActiveRequest(DefaultClusterCallback callback) {
      stayActiveRequest(callback, 0);
    }

    public void stayActiveRequest(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 3L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public interface RegisterClientResponseCallback extends BaseClusterCallback {
      void onSuccess(Long ICDCounter);
    }

    public interface RegisteredClientsAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.IcdManagementClusterMonitoringRegistrationStruct> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readIdleModeIntervalAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeIdleModeIntervalAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readActiveModeIntervalAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeActiveModeIntervalAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readActiveModeThresholdAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeActiveModeThresholdAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readRegisteredClientsAttribute(
        RegisteredClientsAttributeCallback callback) {
      readRegisteredClientsAttributeWithFabricFilter(callback, true);
    }

    public void readRegisteredClientsAttributeWithFabricFilter(
        RegisteredClientsAttributeCallback callback, boolean isFabricFiltered) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.IcdManagementClusterMonitoringRegistrationStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, isFabricFiltered);
    }

    public void subscribeRegisteredClientsAttribute(
        RegisteredClientsAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.IcdManagementClusterMonitoringRegistrationStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readICDCounterAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeICDCounterAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClientsSupportedPerFabricAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClientsSupportedPerFabricAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class ModeSelectCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 80L;

    public ModeSelectCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void changeToMode(DefaultClusterCallback callback, Integer newMode) {
      changeToMode(callback, newMode, 0);
    }

    public void changeToMode(DefaultClusterCallback callback, Integer newMode, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long newModeFieldID = 0L;
      BaseTLVType newModetlvValue = new UIntType(newMode);
      elements.add(new StructElement(newModeFieldID, newModetlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public interface StandardNamespaceAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface SupportedModesAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.ModeSelectClusterModeOptionStruct> value);
    }

    public interface StartUpModeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface OnModeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readDescriptionAttribute(
        CharStringAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeDescriptionAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readStandardNamespaceAttribute(
        StandardNamespaceAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeStandardNamespaceAttribute(
        StandardNamespaceAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readSupportedModesAttribute(
        SupportedModesAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.ModeSelectClusterModeOptionStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeSupportedModesAttribute(
        SupportedModesAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.ModeSelectClusterModeOptionStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readCurrentModeAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeCurrentModeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readStartUpModeAttribute(
        StartUpModeAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeStartUpModeAttribute(DefaultClusterCallback callback, Integer value) {
      writeStartUpModeAttribute(callback, value, 0);
    }

    public void writeStartUpModeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeStartUpModeAttribute(
        StartUpModeAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readOnModeAttribute(
        OnModeAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeOnModeAttribute(DefaultClusterCallback callback, Integer value) {
      writeOnModeAttribute(callback, value, 0);
    }

    public void writeOnModeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeOnModeAttribute(
        OnModeAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class LaundryWasherModeCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 81L;

    public LaundryWasherModeCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void changeToMode(ChangeToModeResponseCallback callback, Integer newMode) {
      changeToMode(callback, newMode, 0);
    }

    public void changeToMode(ChangeToModeResponseCallback callback, Integer newMode, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long newModeFieldID = 0L;
      BaseTLVType newModetlvValue = new UIntType(newMode);
      elements.add(new StructElement(newModeFieldID, newModetlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long statusTextFieldID = 1L;
          Optional<String> statusText = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == statusTextFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                statusText = Optional.of(castingValue.value(String.class));
              }
            }
          }
          callback.onSuccess(status, statusText);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public interface ChangeToModeResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer status, Optional<String> statusText);
    }

    public interface SupportedModesAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.LaundryWasherModeClusterModeOptionStruct> value);
    }

    public interface StartUpModeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface OnModeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readSupportedModesAttribute(
        SupportedModesAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.LaundryWasherModeClusterModeOptionStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeSupportedModesAttribute(
        SupportedModesAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.LaundryWasherModeClusterModeOptionStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readCurrentModeAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeCurrentModeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readStartUpModeAttribute(
        StartUpModeAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeStartUpModeAttribute(DefaultClusterCallback callback, Integer value) {
      writeStartUpModeAttribute(callback, value, 0);
    }

    public void writeStartUpModeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeStartUpModeAttribute(
        StartUpModeAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readOnModeAttribute(
        OnModeAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeOnModeAttribute(DefaultClusterCallback callback, Integer value) {
      writeOnModeAttribute(callback, value, 0);
    }

    public void writeOnModeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeOnModeAttribute(
        OnModeAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class RefrigeratorAndTemperatureControlledCabinetModeCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 82L;

    public RefrigeratorAndTemperatureControlledCabinetModeCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void changeToMode(ChangeToModeResponseCallback callback, Integer newMode) {
      changeToMode(callback, newMode, 0);
    }

    public void changeToMode(ChangeToModeResponseCallback callback, Integer newMode, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long newModeFieldID = 0L;
      BaseTLVType newModetlvValue = new UIntType(newMode);
      elements.add(new StructElement(newModeFieldID, newModetlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long statusTextFieldID = 1L;
          Optional<String> statusText = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == statusTextFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                statusText = Optional.of(castingValue.value(String.class));
              }
            }
          }
          callback.onSuccess(status, statusText);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public interface ChangeToModeResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer status, Optional<String> statusText);
    }

    public interface SupportedModesAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.RefrigeratorAndTemperatureControlledCabinetModeClusterModeOptionStruct> value);
    }

    public interface StartUpModeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface OnModeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readSupportedModesAttribute(
        SupportedModesAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.RefrigeratorAndTemperatureControlledCabinetModeClusterModeOptionStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeSupportedModesAttribute(
        SupportedModesAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.RefrigeratorAndTemperatureControlledCabinetModeClusterModeOptionStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readCurrentModeAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeCurrentModeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readStartUpModeAttribute(
        StartUpModeAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeStartUpModeAttribute(DefaultClusterCallback callback, Integer value) {
      writeStartUpModeAttribute(callback, value, 0);
    }

    public void writeStartUpModeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeStartUpModeAttribute(
        StartUpModeAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readOnModeAttribute(
        OnModeAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeOnModeAttribute(DefaultClusterCallback callback, Integer value) {
      writeOnModeAttribute(callback, value, 0);
    }

    public void writeOnModeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeOnModeAttribute(
        OnModeAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class LaundryWasherControlsCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 83L;

    public LaundryWasherControlsCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface SpinSpeedsAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<String> value);
    }

    public interface SpinSpeedCurrentAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface SupportedRinsesAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Integer> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readSpinSpeedsAttribute(
        SpinSpeedsAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<String> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeSpinSpeedsAttribute(
        SpinSpeedsAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<String> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readSpinSpeedCurrentAttribute(
        SpinSpeedCurrentAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeSpinSpeedCurrentAttribute(DefaultClusterCallback callback, Integer value) {
      writeSpinSpeedCurrentAttribute(callback, value, 0);
    }

    public void writeSpinSpeedCurrentAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeSpinSpeedCurrentAttribute(
        SpinSpeedCurrentAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readNumberOfRinsesAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeNumberOfRinsesAttribute(DefaultClusterCallback callback, Integer value) {
      writeNumberOfRinsesAttribute(callback, value, 0);
    }

    public void writeNumberOfRinsesAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeNumberOfRinsesAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readSupportedRinsesAttribute(
        SupportedRinsesAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeSupportedRinsesAttribute(
        SupportedRinsesAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class RvcRunModeCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 84L;

    public RvcRunModeCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void changeToMode(ChangeToModeResponseCallback callback, Integer newMode) {
      changeToMode(callback, newMode, 0);
    }

    public void changeToMode(ChangeToModeResponseCallback callback, Integer newMode, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long newModeFieldID = 0L;
      BaseTLVType newModetlvValue = new UIntType(newMode);
      elements.add(new StructElement(newModeFieldID, newModetlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long statusTextFieldID = 1L;
          Optional<String> statusText = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == statusTextFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                statusText = Optional.of(castingValue.value(String.class));
              }
            }
          }
          callback.onSuccess(status, statusText);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public interface ChangeToModeResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer status, Optional<String> statusText);
    }

    public interface SupportedModesAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.RvcRunModeClusterModeOptionStruct> value);
    }

    public interface StartUpModeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface OnModeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readSupportedModesAttribute(
        SupportedModesAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.RvcRunModeClusterModeOptionStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeSupportedModesAttribute(
        SupportedModesAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.RvcRunModeClusterModeOptionStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readCurrentModeAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeCurrentModeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readStartUpModeAttribute(
        StartUpModeAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeStartUpModeAttribute(DefaultClusterCallback callback, Integer value) {
      writeStartUpModeAttribute(callback, value, 0);
    }

    public void writeStartUpModeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeStartUpModeAttribute(
        StartUpModeAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readOnModeAttribute(
        OnModeAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeOnModeAttribute(DefaultClusterCallback callback, Integer value) {
      writeOnModeAttribute(callback, value, 0);
    }

    public void writeOnModeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeOnModeAttribute(
        OnModeAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class RvcCleanModeCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 85L;

    public RvcCleanModeCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void changeToMode(ChangeToModeResponseCallback callback, Integer newMode) {
      changeToMode(callback, newMode, 0);
    }

    public void changeToMode(ChangeToModeResponseCallback callback, Integer newMode, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long newModeFieldID = 0L;
      BaseTLVType newModetlvValue = new UIntType(newMode);
      elements.add(new StructElement(newModeFieldID, newModetlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long statusTextFieldID = 1L;
          Optional<String> statusText = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == statusTextFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                statusText = Optional.of(castingValue.value(String.class));
              }
            }
          }
          callback.onSuccess(status, statusText);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public interface ChangeToModeResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer status, Optional<String> statusText);
    }

    public interface SupportedModesAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.RvcCleanModeClusterModeOptionStruct> value);
    }

    public interface StartUpModeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface OnModeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readSupportedModesAttribute(
        SupportedModesAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.RvcCleanModeClusterModeOptionStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeSupportedModesAttribute(
        SupportedModesAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.RvcCleanModeClusterModeOptionStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readCurrentModeAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeCurrentModeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readStartUpModeAttribute(
        StartUpModeAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeStartUpModeAttribute(DefaultClusterCallback callback, Integer value) {
      writeStartUpModeAttribute(callback, value, 0);
    }

    public void writeStartUpModeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeStartUpModeAttribute(
        StartUpModeAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readOnModeAttribute(
        OnModeAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeOnModeAttribute(DefaultClusterCallback callback, Integer value) {
      writeOnModeAttribute(callback, value, 0);
    }

    public void writeOnModeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeOnModeAttribute(
        OnModeAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class TemperatureControlCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 86L;

    public TemperatureControlCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void setTemperature(DefaultClusterCallback callback, Optional<Integer> targetTemperature, Optional<Integer> targetTemperatureLevel) {
      setTemperature(callback, targetTemperature, targetTemperatureLevel, 0);
    }

    public void setTemperature(DefaultClusterCallback callback, Optional<Integer> targetTemperature, Optional<Integer> targetTemperatureLevel, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long targetTemperatureFieldID = 0L;
      BaseTLVType targetTemperaturetlvValue = targetTemperature.<BaseTLVType>map((nonOptionaltargetTemperature) -> new IntType(nonOptionaltargetTemperature)).orElse(new EmptyType());
      elements.add(new StructElement(targetTemperatureFieldID, targetTemperaturetlvValue));

      final long targetTemperatureLevelFieldID = 1L;
      BaseTLVType targetTemperatureLeveltlvValue = targetTemperatureLevel.<BaseTLVType>map((nonOptionaltargetTemperatureLevel) -> new UIntType(nonOptionaltargetTemperatureLevel)).orElse(new EmptyType());
      elements.add(new StructElement(targetTemperatureLevelFieldID, targetTemperatureLeveltlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public interface SupportedTemperatureLevelsAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<String> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readTemperatureSetpointAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeTemperatureSetpointAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMinTemperatureAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMinTemperatureAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMaxTemperatureAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMaxTemperatureAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readStepAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeStepAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readSelectedTemperatureLevelAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeSelectedTemperatureLevelAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readSupportedTemperatureLevelsAttribute(
        SupportedTemperatureLevelsAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<String> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeSupportedTemperatureLevelsAttribute(
        SupportedTemperatureLevelsAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<String> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class RefrigeratorAlarmCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 87L;

    public RefrigeratorAlarmCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readMaskAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMaskAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readStateAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeStateAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readSupportedAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeSupportedAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class DishwasherModeCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 89L;

    public DishwasherModeCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void changeToMode(ChangeToModeResponseCallback callback, Integer newMode) {
      changeToMode(callback, newMode, 0);
    }

    public void changeToMode(ChangeToModeResponseCallback callback, Integer newMode, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long newModeFieldID = 0L;
      BaseTLVType newModetlvValue = new UIntType(newMode);
      elements.add(new StructElement(newModeFieldID, newModetlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long statusTextFieldID = 1L;
          Optional<String> statusText = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == statusTextFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                statusText = Optional.of(castingValue.value(String.class));
              }
            }
          }
          callback.onSuccess(status, statusText);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public interface ChangeToModeResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer status, Optional<String> statusText);
    }

    public interface SupportedModesAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.DishwasherModeClusterModeOptionStruct> value);
    }

    public interface StartUpModeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface OnModeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readSupportedModesAttribute(
        SupportedModesAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.DishwasherModeClusterModeOptionStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeSupportedModesAttribute(
        SupportedModesAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.DishwasherModeClusterModeOptionStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readCurrentModeAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeCurrentModeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readStartUpModeAttribute(
        StartUpModeAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeStartUpModeAttribute(DefaultClusterCallback callback, Integer value) {
      writeStartUpModeAttribute(callback, value, 0);
    }

    public void writeStartUpModeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeStartUpModeAttribute(
        StartUpModeAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readOnModeAttribute(
        OnModeAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeOnModeAttribute(DefaultClusterCallback callback, Integer value) {
      writeOnModeAttribute(callback, value, 0);
    }

    public void writeOnModeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeOnModeAttribute(
        OnModeAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class AirQualityCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 91L;

    public AirQualityCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readAirQualityAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAirQualityAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class SmokeCoAlarmCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 92L;

    public SmokeCoAlarmCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void selfTestRequest(DefaultClusterCallback callback) {
      selfTestRequest(callback, 0);
    }

    public void selfTestRequest(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readExpressedStateAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeExpressedStateAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readSmokeStateAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeSmokeStateAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readCOStateAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeCOStateAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readBatteryAlertAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeBatteryAlertAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readDeviceMutedAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeDeviceMutedAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readTestInProgressAttribute(
        BooleanAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeTestInProgressAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readHardwareFaultAlertAttribute(
        BooleanAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeHardwareFaultAlertAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEndOfServiceAlertAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEndOfServiceAlertAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readInterconnectSmokeAlarmAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeInterconnectSmokeAlarmAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readInterconnectCOAlarmAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 9L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeInterconnectCOAlarmAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 9L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readContaminationStateAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 10L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeContaminationStateAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 10L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readSmokeSensitivityLevelAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 11L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeSmokeSensitivityLevelAttribute(DefaultClusterCallback callback, Integer value) {
      writeSmokeSensitivityLevelAttribute(callback, value, 0);
    }

    public void writeSmokeSensitivityLevelAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 11L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeSmokeSensitivityLevelAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 11L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readExpiryDateAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 12L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeExpiryDateAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 12L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class DishwasherAlarmCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 93L;

    public DishwasherAlarmCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void reset(DefaultClusterCallback callback, Long alarms) {
      reset(callback, alarms, 0);
    }

    public void reset(DefaultClusterCallback callback, Long alarms, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long alarmsFieldID = 0L;
      BaseTLVType alarmstlvValue = new UIntType(alarms);
      elements.add(new StructElement(alarmsFieldID, alarmstlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void modifyEnabledAlarms(DefaultClusterCallback callback, Long mask) {
      modifyEnabledAlarms(callback, mask, 0);
    }

    public void modifyEnabledAlarms(DefaultClusterCallback callback, Long mask, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 1L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long maskFieldID = 0L;
      BaseTLVType masktlvValue = new UIntType(mask);
      elements.add(new StructElement(maskFieldID, masktlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readMaskAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMaskAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readLatchAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeLatchAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readStateAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeStateAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readSupportedAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeSupportedAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class OperationalStateCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 96L;

    public OperationalStateCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void pause(OperationalCommandResponseCallback callback) {
      pause(callback, 0);
    }

    public void pause(OperationalCommandResponseCallback callback, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long commandResponseStateFieldID = 0L;
          ChipStructs.OperationalStateClusterErrorStateStruct commandResponseState = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == commandResponseStateFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Struct) {
                StructType castingValue = element.value(StructType.class);
                commandResponseState = ChipStructs.OperationalStateClusterErrorStateStruct.decodeTlv(castingValue);
              }
            }
          }
          callback.onSuccess(commandResponseState);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void stop(OperationalCommandResponseCallback callback) {
      stop(callback, 0);
    }

    public void stop(OperationalCommandResponseCallback callback, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 1L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long commandResponseStateFieldID = 0L;
          ChipStructs.OperationalStateClusterErrorStateStruct commandResponseState = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == commandResponseStateFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Struct) {
                StructType castingValue = element.value(StructType.class);
                commandResponseState = ChipStructs.OperationalStateClusterErrorStateStruct.decodeTlv(castingValue);
              }
            }
          }
          callback.onSuccess(commandResponseState);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void start(OperationalCommandResponseCallback callback) {
      start(callback, 0);
    }

    public void start(OperationalCommandResponseCallback callback, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 2L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long commandResponseStateFieldID = 0L;
          ChipStructs.OperationalStateClusterErrorStateStruct commandResponseState = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == commandResponseStateFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Struct) {
                StructType castingValue = element.value(StructType.class);
                commandResponseState = ChipStructs.OperationalStateClusterErrorStateStruct.decodeTlv(castingValue);
              }
            }
          }
          callback.onSuccess(commandResponseState);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void resume(OperationalCommandResponseCallback callback) {
      resume(callback, 0);
    }

    public void resume(OperationalCommandResponseCallback callback, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 3L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long commandResponseStateFieldID = 0L;
          ChipStructs.OperationalStateClusterErrorStateStruct commandResponseState = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == commandResponseStateFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Struct) {
                StructType castingValue = element.value(StructType.class);
                commandResponseState = ChipStructs.OperationalStateClusterErrorStateStruct.decodeTlv(castingValue);
              }
            }
          }
          callback.onSuccess(commandResponseState);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public interface OperationalCommandResponseCallback extends BaseClusterCallback {
      void onSuccess(ChipStructs.OperationalStateClusterErrorStateStruct commandResponseState);
    }

    public interface PhaseListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable List<String> value);
    }

    public interface CurrentPhaseAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface CountdownTimeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface OperationalStateListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.OperationalStateClusterOperationalStateStruct> value);
    }

    public interface OperationalErrorAttributeCallback extends BaseAttributeCallback {
      void onSuccess(ChipStructs.OperationalStateClusterErrorStateStruct value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readPhaseListAttribute(
        PhaseListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable List<String> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribePhaseListAttribute(
        PhaseListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable List<String> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readCurrentPhaseAttribute(
        CurrentPhaseAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeCurrentPhaseAttribute(
        CurrentPhaseAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readCountdownTimeAttribute(
        CountdownTimeAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeCountdownTimeAttribute(
        CountdownTimeAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readOperationalStateListAttribute(
        OperationalStateListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.OperationalStateClusterOperationalStateStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeOperationalStateListAttribute(
        OperationalStateListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.OperationalStateClusterOperationalStateStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readOperationalStateAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeOperationalStateAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readOperationalErrorAttribute(
        OperationalErrorAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            ChipStructs.OperationalStateClusterErrorStateStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeOperationalErrorAttribute(
        OperationalErrorAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            ChipStructs.OperationalStateClusterErrorStateStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class RvcOperationalStateCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 97L;

    public RvcOperationalStateCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void pause(OperationalCommandResponseCallback callback) {
      pause(callback, 0);
    }

    public void pause(OperationalCommandResponseCallback callback, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long commandResponseStateFieldID = 0L;
          ChipStructs.RvcOperationalStateClusterErrorStateStruct commandResponseState = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == commandResponseStateFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Struct) {
                StructType castingValue = element.value(StructType.class);
                commandResponseState = ChipStructs.RvcOperationalStateClusterErrorStateStruct.decodeTlv(castingValue);
              }
            }
          }
          callback.onSuccess(commandResponseState);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void stop(OperationalCommandResponseCallback callback) {
      stop(callback, 0);
    }

    public void stop(OperationalCommandResponseCallback callback, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 1L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long commandResponseStateFieldID = 0L;
          ChipStructs.RvcOperationalStateClusterErrorStateStruct commandResponseState = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == commandResponseStateFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Struct) {
                StructType castingValue = element.value(StructType.class);
                commandResponseState = ChipStructs.RvcOperationalStateClusterErrorStateStruct.decodeTlv(castingValue);
              }
            }
          }
          callback.onSuccess(commandResponseState);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void start(OperationalCommandResponseCallback callback) {
      start(callback, 0);
    }

    public void start(OperationalCommandResponseCallback callback, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 2L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long commandResponseStateFieldID = 0L;
          ChipStructs.RvcOperationalStateClusterErrorStateStruct commandResponseState = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == commandResponseStateFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Struct) {
                StructType castingValue = element.value(StructType.class);
                commandResponseState = ChipStructs.RvcOperationalStateClusterErrorStateStruct.decodeTlv(castingValue);
              }
            }
          }
          callback.onSuccess(commandResponseState);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void resume(OperationalCommandResponseCallback callback) {
      resume(callback, 0);
    }

    public void resume(OperationalCommandResponseCallback callback, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 3L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long commandResponseStateFieldID = 0L;
          ChipStructs.RvcOperationalStateClusterErrorStateStruct commandResponseState = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == commandResponseStateFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Struct) {
                StructType castingValue = element.value(StructType.class);
                commandResponseState = ChipStructs.RvcOperationalStateClusterErrorStateStruct.decodeTlv(castingValue);
              }
            }
          }
          callback.onSuccess(commandResponseState);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public interface OperationalCommandResponseCallback extends BaseClusterCallback {
      void onSuccess(ChipStructs.RvcOperationalStateClusterErrorStateStruct commandResponseState);
    }

    public interface PhaseListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable List<String> value);
    }

    public interface CurrentPhaseAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface CountdownTimeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface OperationalStateListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.RvcOperationalStateClusterOperationalStateStruct> value);
    }

    public interface OperationalErrorAttributeCallback extends BaseAttributeCallback {
      void onSuccess(ChipStructs.RvcOperationalStateClusterErrorStateStruct value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readPhaseListAttribute(
        PhaseListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable List<String> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribePhaseListAttribute(
        PhaseListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable List<String> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readCurrentPhaseAttribute(
        CurrentPhaseAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeCurrentPhaseAttribute(
        CurrentPhaseAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readCountdownTimeAttribute(
        CountdownTimeAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeCountdownTimeAttribute(
        CountdownTimeAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readOperationalStateListAttribute(
        OperationalStateListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.RvcOperationalStateClusterOperationalStateStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeOperationalStateListAttribute(
        OperationalStateListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.RvcOperationalStateClusterOperationalStateStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readOperationalStateAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeOperationalStateAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readOperationalErrorAttribute(
        OperationalErrorAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            ChipStructs.RvcOperationalStateClusterErrorStateStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeOperationalErrorAttribute(
        OperationalErrorAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            ChipStructs.RvcOperationalStateClusterErrorStateStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class HepaFilterMonitoringCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 113L;

    public HepaFilterMonitoringCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void resetCondition(DefaultClusterCallback callback) {
      resetCondition(callback, 0);
    }

    public void resetCondition(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public interface LastChangedTimeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface ReplacementProductListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.HepaFilterMonitoringClusterReplacementProductStruct> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readConditionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeConditionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readDegradationDirectionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeDegradationDirectionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readChangeIndicationAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeChangeIndicationAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readInPlaceIndicatorAttribute(
        BooleanAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeInPlaceIndicatorAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readLastChangedTimeAttribute(
        LastChangedTimeAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeLastChangedTimeAttribute(DefaultClusterCallback callback, Long value) {
      writeLastChangedTimeAttribute(callback, value, 0);
    }

    public void writeLastChangedTimeAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeLastChangedTimeAttribute(
        LastChangedTimeAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readReplacementProductListAttribute(
        ReplacementProductListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.HepaFilterMonitoringClusterReplacementProductStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeReplacementProductListAttribute(
        ReplacementProductListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.HepaFilterMonitoringClusterReplacementProductStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class ActivatedCarbonFilterMonitoringCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 114L;

    public ActivatedCarbonFilterMonitoringCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void resetCondition(DefaultClusterCallback callback) {
      resetCondition(callback, 0);
    }

    public void resetCondition(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public interface LastChangedTimeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface ReplacementProductListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.ActivatedCarbonFilterMonitoringClusterReplacementProductStruct> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readConditionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeConditionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readDegradationDirectionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeDegradationDirectionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readChangeIndicationAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeChangeIndicationAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readInPlaceIndicatorAttribute(
        BooleanAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeInPlaceIndicatorAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readLastChangedTimeAttribute(
        LastChangedTimeAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeLastChangedTimeAttribute(DefaultClusterCallback callback, Long value) {
      writeLastChangedTimeAttribute(callback, value, 0);
    }

    public void writeLastChangedTimeAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeLastChangedTimeAttribute(
        LastChangedTimeAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readReplacementProductListAttribute(
        ReplacementProductListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.ActivatedCarbonFilterMonitoringClusterReplacementProductStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeReplacementProductListAttribute(
        ReplacementProductListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.ActivatedCarbonFilterMonitoringClusterReplacementProductStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class DoorLockCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 257L;

    public DoorLockCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);


    public void lockDoor(DefaultClusterCallback callback, Optional<byte[]> PINCode, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long PINCodeFieldID = 0L;
      BaseTLVType PINCodetlvValue = PINCode.<BaseTLVType>map((nonOptionalPINCode) -> new ByteArrayType(nonOptionalPINCode)).orElse(new EmptyType());
      elements.add(new StructElement(PINCodeFieldID, PINCodetlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }


    public void unlockDoor(DefaultClusterCallback callback, Optional<byte[]> PINCode, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 1L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long PINCodeFieldID = 0L;
      BaseTLVType PINCodetlvValue = PINCode.<BaseTLVType>map((nonOptionalPINCode) -> new ByteArrayType(nonOptionalPINCode)).orElse(new EmptyType());
      elements.add(new StructElement(PINCodeFieldID, PINCodetlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }


    public void unlockWithTimeout(DefaultClusterCallback callback, Integer timeout, Optional<byte[]> PINCode, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 3L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long timeoutFieldID = 0L;
      BaseTLVType timeouttlvValue = new UIntType(timeout);
      elements.add(new StructElement(timeoutFieldID, timeouttlvValue));

      final long PINCodeFieldID = 1L;
      BaseTLVType PINCodetlvValue = PINCode.<BaseTLVType>map((nonOptionalPINCode) -> new ByteArrayType(nonOptionalPINCode)).orElse(new EmptyType());
      elements.add(new StructElement(PINCodeFieldID, PINCodetlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void setWeekDaySchedule(DefaultClusterCallback callback, Integer weekDayIndex, Integer userIndex, Integer daysMask, Integer startHour, Integer startMinute, Integer endHour, Integer endMinute) {
      setWeekDaySchedule(callback, weekDayIndex, userIndex, daysMask, startHour, startMinute, endHour, endMinute, 0);
    }

    public void setWeekDaySchedule(DefaultClusterCallback callback, Integer weekDayIndex, Integer userIndex, Integer daysMask, Integer startHour, Integer startMinute, Integer endHour, Integer endMinute, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 11L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long weekDayIndexFieldID = 0L;
      BaseTLVType weekDayIndextlvValue = new UIntType(weekDayIndex);
      elements.add(new StructElement(weekDayIndexFieldID, weekDayIndextlvValue));

      final long userIndexFieldID = 1L;
      BaseTLVType userIndextlvValue = new UIntType(userIndex);
      elements.add(new StructElement(userIndexFieldID, userIndextlvValue));

      final long daysMaskFieldID = 2L;
      BaseTLVType daysMasktlvValue = new UIntType(daysMask);
      elements.add(new StructElement(daysMaskFieldID, daysMasktlvValue));

      final long startHourFieldID = 3L;
      BaseTLVType startHourtlvValue = new UIntType(startHour);
      elements.add(new StructElement(startHourFieldID, startHourtlvValue));

      final long startMinuteFieldID = 4L;
      BaseTLVType startMinutetlvValue = new UIntType(startMinute);
      elements.add(new StructElement(startMinuteFieldID, startMinutetlvValue));

      final long endHourFieldID = 5L;
      BaseTLVType endHourtlvValue = new UIntType(endHour);
      elements.add(new StructElement(endHourFieldID, endHourtlvValue));

      final long endMinuteFieldID = 6L;
      BaseTLVType endMinutetlvValue = new UIntType(endMinute);
      elements.add(new StructElement(endMinuteFieldID, endMinutetlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void getWeekDaySchedule(GetWeekDayScheduleResponseCallback callback, Integer weekDayIndex, Integer userIndex) {
      getWeekDaySchedule(callback, weekDayIndex, userIndex, 0);
    }

    public void getWeekDaySchedule(GetWeekDayScheduleResponseCallback callback, Integer weekDayIndex, Integer userIndex, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 12L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long weekDayIndexFieldID = 0L;
      BaseTLVType weekDayIndextlvValue = new UIntType(weekDayIndex);
      elements.add(new StructElement(weekDayIndexFieldID, weekDayIndextlvValue));

      final long userIndexFieldID = 1L;
      BaseTLVType userIndextlvValue = new UIntType(userIndex);
      elements.add(new StructElement(userIndexFieldID, userIndextlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long weekDayIndexFieldID = 0L;
          Integer weekDayIndex = null;
          final long userIndexFieldID = 1L;
          Integer userIndex = null;
          final long statusFieldID = 2L;
          Integer status = null;
          final long daysMaskFieldID = 3L;
          Optional<Integer> daysMask = Optional.empty();
          final long startHourFieldID = 4L;
          Optional<Integer> startHour = Optional.empty();
          final long startMinuteFieldID = 5L;
          Optional<Integer> startMinute = Optional.empty();
          final long endHourFieldID = 6L;
          Optional<Integer> endHour = Optional.empty();
          final long endMinuteFieldID = 7L;
          Optional<Integer> endMinute = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == weekDayIndexFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                weekDayIndex = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == userIndexFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                userIndex = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == daysMaskFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                daysMask = Optional.of(castingValue.value(Integer.class));
              }
            } else if (element.contextTagNum() == startHourFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                startHour = Optional.of(castingValue.value(Integer.class));
              }
            } else if (element.contextTagNum() == startMinuteFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                startMinute = Optional.of(castingValue.value(Integer.class));
              }
            } else if (element.contextTagNum() == endHourFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                endHour = Optional.of(castingValue.value(Integer.class));
              }
            } else if (element.contextTagNum() == endMinuteFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                endMinute = Optional.of(castingValue.value(Integer.class));
              }
            }
          }
          callback.onSuccess(weekDayIndex, userIndex, status, daysMask, startHour, startMinute, endHour, endMinute);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void clearWeekDaySchedule(DefaultClusterCallback callback, Integer weekDayIndex, Integer userIndex) {
      clearWeekDaySchedule(callback, weekDayIndex, userIndex, 0);
    }

    public void clearWeekDaySchedule(DefaultClusterCallback callback, Integer weekDayIndex, Integer userIndex, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 13L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long weekDayIndexFieldID = 0L;
      BaseTLVType weekDayIndextlvValue = new UIntType(weekDayIndex);
      elements.add(new StructElement(weekDayIndexFieldID, weekDayIndextlvValue));

      final long userIndexFieldID = 1L;
      BaseTLVType userIndextlvValue = new UIntType(userIndex);
      elements.add(new StructElement(userIndexFieldID, userIndextlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void setYearDaySchedule(DefaultClusterCallback callback, Integer yearDayIndex, Integer userIndex, Long localStartTime, Long localEndTime) {
      setYearDaySchedule(callback, yearDayIndex, userIndex, localStartTime, localEndTime, 0);
    }

    public void setYearDaySchedule(DefaultClusterCallback callback, Integer yearDayIndex, Integer userIndex, Long localStartTime, Long localEndTime, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 14L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long yearDayIndexFieldID = 0L;
      BaseTLVType yearDayIndextlvValue = new UIntType(yearDayIndex);
      elements.add(new StructElement(yearDayIndexFieldID, yearDayIndextlvValue));

      final long userIndexFieldID = 1L;
      BaseTLVType userIndextlvValue = new UIntType(userIndex);
      elements.add(new StructElement(userIndexFieldID, userIndextlvValue));

      final long localStartTimeFieldID = 2L;
      BaseTLVType localStartTimetlvValue = new UIntType(localStartTime);
      elements.add(new StructElement(localStartTimeFieldID, localStartTimetlvValue));

      final long localEndTimeFieldID = 3L;
      BaseTLVType localEndTimetlvValue = new UIntType(localEndTime);
      elements.add(new StructElement(localEndTimeFieldID, localEndTimetlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void getYearDaySchedule(GetYearDayScheduleResponseCallback callback, Integer yearDayIndex, Integer userIndex) {
      getYearDaySchedule(callback, yearDayIndex, userIndex, 0);
    }

    public void getYearDaySchedule(GetYearDayScheduleResponseCallback callback, Integer yearDayIndex, Integer userIndex, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 15L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long yearDayIndexFieldID = 0L;
      BaseTLVType yearDayIndextlvValue = new UIntType(yearDayIndex);
      elements.add(new StructElement(yearDayIndexFieldID, yearDayIndextlvValue));

      final long userIndexFieldID = 1L;
      BaseTLVType userIndextlvValue = new UIntType(userIndex);
      elements.add(new StructElement(userIndexFieldID, userIndextlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long yearDayIndexFieldID = 0L;
          Integer yearDayIndex = null;
          final long userIndexFieldID = 1L;
          Integer userIndex = null;
          final long statusFieldID = 2L;
          Integer status = null;
          final long localStartTimeFieldID = 3L;
          Optional<Long> localStartTime = Optional.empty();
          final long localEndTimeFieldID = 4L;
          Optional<Long> localEndTime = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == yearDayIndexFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                yearDayIndex = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == userIndexFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                userIndex = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == localStartTimeFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                localStartTime = Optional.of(castingValue.value(Long.class));
              }
            } else if (element.contextTagNum() == localEndTimeFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                localEndTime = Optional.of(castingValue.value(Long.class));
              }
            }
          }
          callback.onSuccess(yearDayIndex, userIndex, status, localStartTime, localEndTime);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void clearYearDaySchedule(DefaultClusterCallback callback, Integer yearDayIndex, Integer userIndex) {
      clearYearDaySchedule(callback, yearDayIndex, userIndex, 0);
    }

    public void clearYearDaySchedule(DefaultClusterCallback callback, Integer yearDayIndex, Integer userIndex, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 16L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long yearDayIndexFieldID = 0L;
      BaseTLVType yearDayIndextlvValue = new UIntType(yearDayIndex);
      elements.add(new StructElement(yearDayIndexFieldID, yearDayIndextlvValue));

      final long userIndexFieldID = 1L;
      BaseTLVType userIndextlvValue = new UIntType(userIndex);
      elements.add(new StructElement(userIndexFieldID, userIndextlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void setHolidaySchedule(DefaultClusterCallback callback, Integer holidayIndex, Long localStartTime, Long localEndTime, Integer operatingMode) {
      setHolidaySchedule(callback, holidayIndex, localStartTime, localEndTime, operatingMode, 0);
    }

    public void setHolidaySchedule(DefaultClusterCallback callback, Integer holidayIndex, Long localStartTime, Long localEndTime, Integer operatingMode, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 17L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long holidayIndexFieldID = 0L;
      BaseTLVType holidayIndextlvValue = new UIntType(holidayIndex);
      elements.add(new StructElement(holidayIndexFieldID, holidayIndextlvValue));

      final long localStartTimeFieldID = 1L;
      BaseTLVType localStartTimetlvValue = new UIntType(localStartTime);
      elements.add(new StructElement(localStartTimeFieldID, localStartTimetlvValue));

      final long localEndTimeFieldID = 2L;
      BaseTLVType localEndTimetlvValue = new UIntType(localEndTime);
      elements.add(new StructElement(localEndTimeFieldID, localEndTimetlvValue));

      final long operatingModeFieldID = 3L;
      BaseTLVType operatingModetlvValue = new UIntType(operatingMode);
      elements.add(new StructElement(operatingModeFieldID, operatingModetlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void getHolidaySchedule(GetHolidayScheduleResponseCallback callback, Integer holidayIndex) {
      getHolidaySchedule(callback, holidayIndex, 0);
    }

    public void getHolidaySchedule(GetHolidayScheduleResponseCallback callback, Integer holidayIndex, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 18L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long holidayIndexFieldID = 0L;
      BaseTLVType holidayIndextlvValue = new UIntType(holidayIndex);
      elements.add(new StructElement(holidayIndexFieldID, holidayIndextlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long holidayIndexFieldID = 0L;
          Integer holidayIndex = null;
          final long statusFieldID = 1L;
          Integer status = null;
          final long localStartTimeFieldID = 2L;
          Optional<Long> localStartTime = Optional.empty();
          final long localEndTimeFieldID = 3L;
          Optional<Long> localEndTime = Optional.empty();
          final long operatingModeFieldID = 4L;
          Optional<Integer> operatingMode = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == holidayIndexFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                holidayIndex = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == localStartTimeFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                localStartTime = Optional.of(castingValue.value(Long.class));
              }
            } else if (element.contextTagNum() == localEndTimeFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                localEndTime = Optional.of(castingValue.value(Long.class));
              }
            } else if (element.contextTagNum() == operatingModeFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                operatingMode = Optional.of(castingValue.value(Integer.class));
              }
            }
          }
          callback.onSuccess(holidayIndex, status, localStartTime, localEndTime, operatingMode);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void clearHolidaySchedule(DefaultClusterCallback callback, Integer holidayIndex) {
      clearHolidaySchedule(callback, holidayIndex, 0);
    }

    public void clearHolidaySchedule(DefaultClusterCallback callback, Integer holidayIndex, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 19L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long holidayIndexFieldID = 0L;
      BaseTLVType holidayIndextlvValue = new UIntType(holidayIndex);
      elements.add(new StructElement(holidayIndexFieldID, holidayIndextlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }


    public void setUser(DefaultClusterCallback callback, Integer operationType, Integer userIndex, @Nullable String userName, @Nullable Long userUniqueID, @Nullable Integer userStatus, @Nullable Integer userType, @Nullable Integer credentialRule, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 26L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long operationTypeFieldID = 0L;
      BaseTLVType operationTypetlvValue = new UIntType(operationType);
      elements.add(new StructElement(operationTypeFieldID, operationTypetlvValue));

      final long userIndexFieldID = 1L;
      BaseTLVType userIndextlvValue = new UIntType(userIndex);
      elements.add(new StructElement(userIndexFieldID, userIndextlvValue));

      final long userNameFieldID = 2L;
      BaseTLVType userNametlvValue = userName != null ? new StringType(userName) : new NullType();
      elements.add(new StructElement(userNameFieldID, userNametlvValue));

      final long userUniqueIDFieldID = 3L;
      BaseTLVType userUniqueIDtlvValue = userUniqueID != null ? new UIntType(userUniqueID) : new NullType();
      elements.add(new StructElement(userUniqueIDFieldID, userUniqueIDtlvValue));

      final long userStatusFieldID = 4L;
      BaseTLVType userStatustlvValue = userStatus != null ? new UIntType(userStatus) : new NullType();
      elements.add(new StructElement(userStatusFieldID, userStatustlvValue));

      final long userTypeFieldID = 5L;
      BaseTLVType userTypetlvValue = userType != null ? new UIntType(userType) : new NullType();
      elements.add(new StructElement(userTypeFieldID, userTypetlvValue));

      final long credentialRuleFieldID = 6L;
      BaseTLVType credentialRuletlvValue = credentialRule != null ? new UIntType(credentialRule) : new NullType();
      elements.add(new StructElement(credentialRuleFieldID, credentialRuletlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void getUser(GetUserResponseCallback callback, Integer userIndex) {
      getUser(callback, userIndex, 0);
    }

    public void getUser(GetUserResponseCallback callback, Integer userIndex, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 27L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long userIndexFieldID = 0L;
      BaseTLVType userIndextlvValue = new UIntType(userIndex);
      elements.add(new StructElement(userIndexFieldID, userIndextlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long userIndexFieldID = 0L;
          Integer userIndex = null;
          final long userNameFieldID = 1L;
          @Nullable String userName = null;
          final long userUniqueIDFieldID = 2L;
          @Nullable Long userUniqueID = null;
          final long userStatusFieldID = 3L;
          @Nullable Integer userStatus = null;
          final long userTypeFieldID = 4L;
          @Nullable Integer userType = null;
          final long credentialRuleFieldID = 5L;
          @Nullable Integer credentialRule = null;
          final long credentialsFieldID = 6L;
          @Nullable ArrayList<ChipStructs.DoorLockClusterCredentialStruct> credentials = null;
          final long creatorFabricIndexFieldID = 7L;
          @Nullable Integer creatorFabricIndex = null;
          final long lastModifiedFabricIndexFieldID = 8L;
          @Nullable Integer lastModifiedFabricIndex = null;
          final long nextUserIndexFieldID = 9L;
          @Nullable Integer nextUserIndex = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == userIndexFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                userIndex = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == userNameFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                userName = castingValue.value(String.class);
              }
            } else if (element.contextTagNum() == userUniqueIDFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                userUniqueID = castingValue.value(Long.class);
              }
            } else if (element.contextTagNum() == userStatusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                userStatus = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == userTypeFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                userType = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == credentialRuleFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                credentialRule = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == credentialsFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Array) {
                ArrayType castingValue = element.value(ArrayType.class);
                credentials = castingValue.map((elementcastingValue) -> ChipStructs.DoorLockClusterCredentialStruct.decodeTlv(elementcastingValue));
              }
            } else if (element.contextTagNum() == creatorFabricIndexFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                creatorFabricIndex = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == lastModifiedFabricIndexFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                lastModifiedFabricIndex = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == nextUserIndexFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                nextUserIndex = castingValue.value(Integer.class);
              }
            }
          }
          callback.onSuccess(userIndex, userName, userUniqueID, userStatus, userType, credentialRule, credentials, creatorFabricIndex, lastModifiedFabricIndex, nextUserIndex);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }


    public void clearUser(DefaultClusterCallback callback, Integer userIndex, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 29L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long userIndexFieldID = 0L;
      BaseTLVType userIndextlvValue = new UIntType(userIndex);
      elements.add(new StructElement(userIndexFieldID, userIndextlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }


    public void setCredential(SetCredentialResponseCallback callback, Integer operationType, ChipStructs.DoorLockClusterCredentialStruct credential, byte[] credentialData, @Nullable Integer userIndex, @Nullable Integer userStatus, @Nullable Integer userType, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 34L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long operationTypeFieldID = 0L;
      BaseTLVType operationTypetlvValue = new UIntType(operationType);
      elements.add(new StructElement(operationTypeFieldID, operationTypetlvValue));

      final long credentialFieldID = 1L;
      BaseTLVType credentialtlvValue = credential.encodeTlv();
      elements.add(new StructElement(credentialFieldID, credentialtlvValue));

      final long credentialDataFieldID = 2L;
      BaseTLVType credentialDatatlvValue = new ByteArrayType(credentialData);
      elements.add(new StructElement(credentialDataFieldID, credentialDatatlvValue));

      final long userIndexFieldID = 3L;
      BaseTLVType userIndextlvValue = userIndex != null ? new UIntType(userIndex) : new NullType();
      elements.add(new StructElement(userIndexFieldID, userIndextlvValue));

      final long userStatusFieldID = 4L;
      BaseTLVType userStatustlvValue = userStatus != null ? new UIntType(userStatus) : new NullType();
      elements.add(new StructElement(userStatusFieldID, userStatustlvValue));

      final long userTypeFieldID = 5L;
      BaseTLVType userTypetlvValue = userType != null ? new UIntType(userType) : new NullType();
      elements.add(new StructElement(userTypeFieldID, userTypetlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long userIndexFieldID = 1L;
          @Nullable Integer userIndex = null;
          final long nextCredentialIndexFieldID = 2L;
          @Nullable Integer nextCredentialIndex = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == userIndexFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                userIndex = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == nextCredentialIndexFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                nextCredentialIndex = castingValue.value(Integer.class);
              }
            }
          }
          callback.onSuccess(status, userIndex, nextCredentialIndex);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void getCredentialStatus(GetCredentialStatusResponseCallback callback, ChipStructs.DoorLockClusterCredentialStruct credential) {
      getCredentialStatus(callback, credential, 0);
    }

    public void getCredentialStatus(GetCredentialStatusResponseCallback callback, ChipStructs.DoorLockClusterCredentialStruct credential, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 36L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long credentialFieldID = 0L;
      BaseTLVType credentialtlvValue = credential.encodeTlv();
      elements.add(new StructElement(credentialFieldID, credentialtlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long credentialExistsFieldID = 0L;
          Boolean credentialExists = null;
          final long userIndexFieldID = 1L;
          @Nullable Integer userIndex = null;
          final long creatorFabricIndexFieldID = 2L;
          @Nullable Integer creatorFabricIndex = null;
          final long lastModifiedFabricIndexFieldID = 3L;
          @Nullable Integer lastModifiedFabricIndex = null;
          final long nextCredentialIndexFieldID = 4L;
          @Nullable Integer nextCredentialIndex = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == credentialExistsFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Boolean) {
                BooleanType castingValue = element.value(BooleanType.class);
                credentialExists = castingValue.value(Boolean.class);
              }
            } else if (element.contextTagNum() == userIndexFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                userIndex = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == creatorFabricIndexFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                creatorFabricIndex = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == lastModifiedFabricIndexFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                lastModifiedFabricIndex = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == nextCredentialIndexFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                nextCredentialIndex = castingValue.value(Integer.class);
              }
            }
          }
          callback.onSuccess(credentialExists, userIndex, creatorFabricIndex, lastModifiedFabricIndex, nextCredentialIndex);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }


    public void clearCredential(DefaultClusterCallback callback, @Nullable ChipStructs.DoorLockClusterCredentialStruct credential, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 38L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long credentialFieldID = 0L;
      BaseTLVType credentialtlvValue = credential != null ? credential.encodeTlv() : new NullType();
      elements.add(new StructElement(credentialFieldID, credentialtlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }


    public void unboltDoor(DefaultClusterCallback callback, Optional<byte[]> PINCode, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 39L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long PINCodeFieldID = 0L;
      BaseTLVType PINCodetlvValue = PINCode.<BaseTLVType>map((nonOptionalPINCode) -> new ByteArrayType(nonOptionalPINCode)).orElse(new EmptyType());
      elements.add(new StructElement(PINCodeFieldID, PINCodetlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public interface GetWeekDayScheduleResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer weekDayIndex, Integer userIndex, Integer status, Optional<Integer> daysMask, Optional<Integer> startHour, Optional<Integer> startMinute, Optional<Integer> endHour, Optional<Integer> endMinute);
    }

    public interface GetYearDayScheduleResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer yearDayIndex, Integer userIndex, Integer status, Optional<Long> localStartTime, Optional<Long> localEndTime);
    }

    public interface GetHolidayScheduleResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer holidayIndex, Integer status, Optional<Long> localStartTime, Optional<Long> localEndTime, Optional<Integer> operatingMode);
    }

    public interface GetUserResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer userIndex, @Nullable String userName, @Nullable Long userUniqueID, @Nullable Integer userStatus, @Nullable Integer userType, @Nullable Integer credentialRule, @Nullable ArrayList<ChipStructs.DoorLockClusterCredentialStruct> credentials, @Nullable Integer creatorFabricIndex, @Nullable Integer lastModifiedFabricIndex, @Nullable Integer nextUserIndex);
    }

    public interface SetCredentialResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer status, @Nullable Integer userIndex, @Nullable Integer nextCredentialIndex);
    }

    public interface GetCredentialStatusResponseCallback extends BaseClusterCallback {
      void onSuccess(Boolean credentialExists, @Nullable Integer userIndex, @Nullable Integer creatorFabricIndex, @Nullable Integer lastModifiedFabricIndex, @Nullable Integer nextCredentialIndex);
    }

    public interface LockStateAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface DoorStateAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readLockStateAttribute(
        LockStateAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeLockStateAttribute(
        LockStateAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readLockTypeAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeLockTypeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readActuatorEnabledAttribute(
        BooleanAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeActuatorEnabledAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readDoorStateAttribute(
        DoorStateAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeDoorStateAttribute(
        DoorStateAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readDoorOpenEventsAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeDoorOpenEventsAttribute(DefaultClusterCallback callback, Long value) {
      writeDoorOpenEventsAttribute(callback, value, 0);
    }

    public void writeDoorOpenEventsAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeDoorOpenEventsAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readDoorClosedEventsAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeDoorClosedEventsAttribute(DefaultClusterCallback callback, Long value) {
      writeDoorClosedEventsAttribute(callback, value, 0);
    }

    public void writeDoorClosedEventsAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeDoorClosedEventsAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readOpenPeriodAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeOpenPeriodAttribute(DefaultClusterCallback callback, Integer value) {
      writeOpenPeriodAttribute(callback, value, 0);
    }

    public void writeOpenPeriodAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 6L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeOpenPeriodAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readNumberOfTotalUsersSupportedAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 17L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeNumberOfTotalUsersSupportedAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 17L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readNumberOfPINUsersSupportedAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 18L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeNumberOfPINUsersSupportedAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 18L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readNumberOfRFIDUsersSupportedAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 19L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeNumberOfRFIDUsersSupportedAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 19L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readNumberOfWeekDaySchedulesSupportedPerUserAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 20L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeNumberOfWeekDaySchedulesSupportedPerUserAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 20L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readNumberOfYearDaySchedulesSupportedPerUserAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 21L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeNumberOfYearDaySchedulesSupportedPerUserAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 21L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readNumberOfHolidaySchedulesSupportedAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 22L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeNumberOfHolidaySchedulesSupportedAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 22L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMaxPINCodeLengthAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 23L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMaxPINCodeLengthAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 23L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMinPINCodeLengthAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 24L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMinPINCodeLengthAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 24L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMaxRFIDCodeLengthAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 25L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMaxRFIDCodeLengthAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 25L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMinRFIDCodeLengthAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 26L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMinRFIDCodeLengthAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 26L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readCredentialRulesSupportAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 27L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeCredentialRulesSupportAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 27L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readNumberOfCredentialsSupportedPerUserAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 28L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeNumberOfCredentialsSupportedPerUserAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 28L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readLanguageAttribute(
        CharStringAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 33L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeLanguageAttribute(DefaultClusterCallback callback, String value) {
      writeLanguageAttribute(callback, value, 0);
    }

    public void writeLanguageAttribute(DefaultClusterCallback callback, String value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 33L;
      
      BaseTLVType tlvValue = new StringType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeLanguageAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 33L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readLEDSettingsAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 34L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeLEDSettingsAttribute(DefaultClusterCallback callback, Integer value) {
      writeLEDSettingsAttribute(callback, value, 0);
    }

    public void writeLEDSettingsAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 34L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeLEDSettingsAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 34L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAutoRelockTimeAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 35L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeAutoRelockTimeAttribute(DefaultClusterCallback callback, Long value) {
      writeAutoRelockTimeAttribute(callback, value, 0);
    }

    public void writeAutoRelockTimeAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 35L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeAutoRelockTimeAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 35L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readSoundVolumeAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 36L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeSoundVolumeAttribute(DefaultClusterCallback callback, Integer value) {
      writeSoundVolumeAttribute(callback, value, 0);
    }

    public void writeSoundVolumeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 36L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeSoundVolumeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 36L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readOperatingModeAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 37L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeOperatingModeAttribute(DefaultClusterCallback callback, Integer value) {
      writeOperatingModeAttribute(callback, value, 0);
    }

    public void writeOperatingModeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 37L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeOperatingModeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 37L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readSupportedOperatingModesAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 38L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeSupportedOperatingModesAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 38L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readDefaultConfigurationRegisterAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 39L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeDefaultConfigurationRegisterAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 39L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEnableLocalProgrammingAttribute(
        BooleanAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 40L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeEnableLocalProgrammingAttribute(DefaultClusterCallback callback, Boolean value) {
      writeEnableLocalProgrammingAttribute(callback, value, 0);
    }

    public void writeEnableLocalProgrammingAttribute(DefaultClusterCallback callback, Boolean value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 40L;
      
      BaseTLVType tlvValue = new BooleanType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeEnableLocalProgrammingAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 40L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEnableOneTouchLockingAttribute(
        BooleanAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 41L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeEnableOneTouchLockingAttribute(DefaultClusterCallback callback, Boolean value) {
      writeEnableOneTouchLockingAttribute(callback, value, 0);
    }

    public void writeEnableOneTouchLockingAttribute(DefaultClusterCallback callback, Boolean value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 41L;
      
      BaseTLVType tlvValue = new BooleanType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeEnableOneTouchLockingAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 41L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEnableInsideStatusLEDAttribute(
        BooleanAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 42L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeEnableInsideStatusLEDAttribute(DefaultClusterCallback callback, Boolean value) {
      writeEnableInsideStatusLEDAttribute(callback, value, 0);
    }

    public void writeEnableInsideStatusLEDAttribute(DefaultClusterCallback callback, Boolean value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 42L;
      
      BaseTLVType tlvValue = new BooleanType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeEnableInsideStatusLEDAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 42L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEnablePrivacyModeButtonAttribute(
        BooleanAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 43L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeEnablePrivacyModeButtonAttribute(DefaultClusterCallback callback, Boolean value) {
      writeEnablePrivacyModeButtonAttribute(callback, value, 0);
    }

    public void writeEnablePrivacyModeButtonAttribute(DefaultClusterCallback callback, Boolean value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 43L;
      
      BaseTLVType tlvValue = new BooleanType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeEnablePrivacyModeButtonAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 43L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readLocalProgrammingFeaturesAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 44L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeLocalProgrammingFeaturesAttribute(DefaultClusterCallback callback, Integer value) {
      writeLocalProgrammingFeaturesAttribute(callback, value, 0);
    }

    public void writeLocalProgrammingFeaturesAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 44L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeLocalProgrammingFeaturesAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 44L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readWrongCodeEntryLimitAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 48L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeWrongCodeEntryLimitAttribute(DefaultClusterCallback callback, Integer value) {
      writeWrongCodeEntryLimitAttribute(callback, value, 0);
    }

    public void writeWrongCodeEntryLimitAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 48L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeWrongCodeEntryLimitAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 48L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readUserCodeTemporaryDisableTimeAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 49L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeUserCodeTemporaryDisableTimeAttribute(DefaultClusterCallback callback, Integer value) {
      writeUserCodeTemporaryDisableTimeAttribute(callback, value, 0);
    }

    public void writeUserCodeTemporaryDisableTimeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 49L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeUserCodeTemporaryDisableTimeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 49L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readSendPINOverTheAirAttribute(
        BooleanAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 50L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeSendPINOverTheAirAttribute(DefaultClusterCallback callback, Boolean value) {
      writeSendPINOverTheAirAttribute(callback, value, 0);
    }

    public void writeSendPINOverTheAirAttribute(DefaultClusterCallback callback, Boolean value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 50L;
      
      BaseTLVType tlvValue = new BooleanType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeSendPINOverTheAirAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 50L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readRequirePINforRemoteOperationAttribute(
        BooleanAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 51L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeRequirePINforRemoteOperationAttribute(DefaultClusterCallback callback, Boolean value) {
      writeRequirePINforRemoteOperationAttribute(callback, value, 0);
    }

    public void writeRequirePINforRemoteOperationAttribute(DefaultClusterCallback callback, Boolean value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 51L;
      
      BaseTLVType tlvValue = new BooleanType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeRequirePINforRemoteOperationAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 51L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readExpiringUserTimeoutAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 53L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeExpiringUserTimeoutAttribute(DefaultClusterCallback callback, Integer value) {
      writeExpiringUserTimeoutAttribute(callback, value, 0);
    }

    public void writeExpiringUserTimeoutAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 53L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeExpiringUserTimeoutAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 53L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class WindowCoveringCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 258L;

    public WindowCoveringCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void upOrOpen(DefaultClusterCallback callback) {
      upOrOpen(callback, 0);
    }

    public void upOrOpen(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void downOrClose(DefaultClusterCallback callback) {
      downOrClose(callback, 0);
    }

    public void downOrClose(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 1L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void stopMotion(DefaultClusterCallback callback) {
      stopMotion(callback, 0);
    }

    public void stopMotion(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 2L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void goToLiftValue(DefaultClusterCallback callback, Integer liftValue) {
      goToLiftValue(callback, liftValue, 0);
    }

    public void goToLiftValue(DefaultClusterCallback callback, Integer liftValue, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 4L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long liftValueFieldID = 0L;
      BaseTLVType liftValuetlvValue = new UIntType(liftValue);
      elements.add(new StructElement(liftValueFieldID, liftValuetlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void goToLiftPercentage(DefaultClusterCallback callback, Integer liftPercent100thsValue) {
      goToLiftPercentage(callback, liftPercent100thsValue, 0);
    }

    public void goToLiftPercentage(DefaultClusterCallback callback, Integer liftPercent100thsValue, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 5L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long liftPercent100thsValueFieldID = 0L;
      BaseTLVType liftPercent100thsValuetlvValue = new UIntType(liftPercent100thsValue);
      elements.add(new StructElement(liftPercent100thsValueFieldID, liftPercent100thsValuetlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void goToTiltValue(DefaultClusterCallback callback, Integer tiltValue) {
      goToTiltValue(callback, tiltValue, 0);
    }

    public void goToTiltValue(DefaultClusterCallback callback, Integer tiltValue, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 7L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long tiltValueFieldID = 0L;
      BaseTLVType tiltValuetlvValue = new UIntType(tiltValue);
      elements.add(new StructElement(tiltValueFieldID, tiltValuetlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void goToTiltPercentage(DefaultClusterCallback callback, Integer tiltPercent100thsValue) {
      goToTiltPercentage(callback, tiltPercent100thsValue, 0);
    }

    public void goToTiltPercentage(DefaultClusterCallback callback, Integer tiltPercent100thsValue, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 8L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long tiltPercent100thsValueFieldID = 0L;
      BaseTLVType tiltPercent100thsValuetlvValue = new UIntType(tiltPercent100thsValue);
      elements.add(new StructElement(tiltPercent100thsValueFieldID, tiltPercent100thsValuetlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public interface CurrentPositionLiftAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface CurrentPositionTiltAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface CurrentPositionLiftPercentageAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface CurrentPositionTiltPercentageAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface TargetPositionLiftPercent100thsAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface TargetPositionTiltPercent100thsAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface CurrentPositionLiftPercent100thsAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface CurrentPositionTiltPercent100thsAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readTypeAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeTypeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readPhysicalClosedLimitLiftAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribePhysicalClosedLimitLiftAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readPhysicalClosedLimitTiltAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribePhysicalClosedLimitTiltAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readCurrentPositionLiftAttribute(
        CurrentPositionLiftAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeCurrentPositionLiftAttribute(
        CurrentPositionLiftAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readCurrentPositionTiltAttribute(
        CurrentPositionTiltAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeCurrentPositionTiltAttribute(
        CurrentPositionTiltAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readNumberOfActuationsLiftAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeNumberOfActuationsLiftAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readNumberOfActuationsTiltAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeNumberOfActuationsTiltAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readConfigStatusAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeConfigStatusAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readCurrentPositionLiftPercentageAttribute(
        CurrentPositionLiftPercentageAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeCurrentPositionLiftPercentageAttribute(
        CurrentPositionLiftPercentageAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readCurrentPositionTiltPercentageAttribute(
        CurrentPositionTiltPercentageAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 9L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeCurrentPositionTiltPercentageAttribute(
        CurrentPositionTiltPercentageAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 9L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readOperationalStatusAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 10L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeOperationalStatusAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 10L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readTargetPositionLiftPercent100thsAttribute(
        TargetPositionLiftPercent100thsAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 11L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeTargetPositionLiftPercent100thsAttribute(
        TargetPositionLiftPercent100thsAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 11L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readTargetPositionTiltPercent100thsAttribute(
        TargetPositionTiltPercent100thsAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 12L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeTargetPositionTiltPercent100thsAttribute(
        TargetPositionTiltPercent100thsAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 12L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEndProductTypeAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 13L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEndProductTypeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 13L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readCurrentPositionLiftPercent100thsAttribute(
        CurrentPositionLiftPercent100thsAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 14L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeCurrentPositionLiftPercent100thsAttribute(
        CurrentPositionLiftPercent100thsAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 14L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readCurrentPositionTiltPercent100thsAttribute(
        CurrentPositionTiltPercent100thsAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 15L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeCurrentPositionTiltPercent100thsAttribute(
        CurrentPositionTiltPercent100thsAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 15L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readInstalledOpenLimitLiftAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeInstalledOpenLimitLiftAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readInstalledClosedLimitLiftAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 17L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeInstalledClosedLimitLiftAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 17L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readInstalledOpenLimitTiltAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 18L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeInstalledOpenLimitTiltAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 18L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readInstalledClosedLimitTiltAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 19L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeInstalledClosedLimitTiltAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 19L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readModeAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 23L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeModeAttribute(DefaultClusterCallback callback, Integer value) {
      writeModeAttribute(callback, value, 0);
    }

    public void writeModeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 23L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeModeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 23L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readSafetyStatusAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 26L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeSafetyStatusAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 26L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class BarrierControlCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 259L;

    public BarrierControlCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void barrierControlGoToPercent(DefaultClusterCallback callback, Integer percentOpen) {
      barrierControlGoToPercent(callback, percentOpen, 0);
    }

    public void barrierControlGoToPercent(DefaultClusterCallback callback, Integer percentOpen, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long percentOpenFieldID = 0L;
      BaseTLVType percentOpentlvValue = new UIntType(percentOpen);
      elements.add(new StructElement(percentOpenFieldID, percentOpentlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void barrierControlStop(DefaultClusterCallback callback) {
      barrierControlStop(callback, 0);
    }

    public void barrierControlStop(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 1L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readBarrierMovingStateAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeBarrierMovingStateAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readBarrierSafetyStatusAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeBarrierSafetyStatusAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readBarrierCapabilitiesAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeBarrierCapabilitiesAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readBarrierOpenEventsAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeBarrierOpenEventsAttribute(DefaultClusterCallback callback, Integer value) {
      writeBarrierOpenEventsAttribute(callback, value, 0);
    }

    public void writeBarrierOpenEventsAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeBarrierOpenEventsAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readBarrierCloseEventsAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeBarrierCloseEventsAttribute(DefaultClusterCallback callback, Integer value) {
      writeBarrierCloseEventsAttribute(callback, value, 0);
    }

    public void writeBarrierCloseEventsAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeBarrierCloseEventsAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readBarrierCommandOpenEventsAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeBarrierCommandOpenEventsAttribute(DefaultClusterCallback callback, Integer value) {
      writeBarrierCommandOpenEventsAttribute(callback, value, 0);
    }

    public void writeBarrierCommandOpenEventsAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 6L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeBarrierCommandOpenEventsAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readBarrierCommandCloseEventsAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeBarrierCommandCloseEventsAttribute(DefaultClusterCallback callback, Integer value) {
      writeBarrierCommandCloseEventsAttribute(callback, value, 0);
    }

    public void writeBarrierCommandCloseEventsAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 7L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeBarrierCommandCloseEventsAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readBarrierOpenPeriodAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeBarrierOpenPeriodAttribute(DefaultClusterCallback callback, Integer value) {
      writeBarrierOpenPeriodAttribute(callback, value, 0);
    }

    public void writeBarrierOpenPeriodAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 8L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeBarrierOpenPeriodAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readBarrierClosePeriodAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 9L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeBarrierClosePeriodAttribute(DefaultClusterCallback callback, Integer value) {
      writeBarrierClosePeriodAttribute(callback, value, 0);
    }

    public void writeBarrierClosePeriodAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 9L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeBarrierClosePeriodAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 9L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readBarrierPositionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 10L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeBarrierPositionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 10L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class PumpConfigurationAndControlCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 512L;

    public PumpConfigurationAndControlCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface MaxPressureAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface MaxSpeedAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface MaxFlowAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface MinConstPressureAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface MaxConstPressureAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface MinCompPressureAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface MaxCompPressureAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface MinConstSpeedAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface MaxConstSpeedAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface MinConstFlowAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface MaxConstFlowAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface MinConstTempAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface MaxConstTempAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface CapacityAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface SpeedAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface LifetimeRunningHoursAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface PowerAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface LifetimeEnergyConsumedAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readMaxPressureAttribute(
        MaxPressureAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMaxPressureAttribute(
        MaxPressureAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMaxSpeedAttribute(
        MaxSpeedAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMaxSpeedAttribute(
        MaxSpeedAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMaxFlowAttribute(
        MaxFlowAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMaxFlowAttribute(
        MaxFlowAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMinConstPressureAttribute(
        MinConstPressureAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMinConstPressureAttribute(
        MinConstPressureAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMaxConstPressureAttribute(
        MaxConstPressureAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMaxConstPressureAttribute(
        MaxConstPressureAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMinCompPressureAttribute(
        MinCompPressureAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMinCompPressureAttribute(
        MinCompPressureAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMaxCompPressureAttribute(
        MaxCompPressureAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMaxCompPressureAttribute(
        MaxCompPressureAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMinConstSpeedAttribute(
        MinConstSpeedAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMinConstSpeedAttribute(
        MinConstSpeedAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMaxConstSpeedAttribute(
        MaxConstSpeedAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMaxConstSpeedAttribute(
        MaxConstSpeedAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMinConstFlowAttribute(
        MinConstFlowAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 9L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMinConstFlowAttribute(
        MinConstFlowAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 9L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMaxConstFlowAttribute(
        MaxConstFlowAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 10L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMaxConstFlowAttribute(
        MaxConstFlowAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 10L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMinConstTempAttribute(
        MinConstTempAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 11L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMinConstTempAttribute(
        MinConstTempAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 11L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMaxConstTempAttribute(
        MaxConstTempAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 12L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMaxConstTempAttribute(
        MaxConstTempAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 12L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readPumpStatusAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribePumpStatusAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEffectiveOperationModeAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 17L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEffectiveOperationModeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 17L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEffectiveControlModeAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 18L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEffectiveControlModeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 18L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readCapacityAttribute(
        CapacityAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 19L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeCapacityAttribute(
        CapacityAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 19L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readSpeedAttribute(
        SpeedAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 20L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeSpeedAttribute(
        SpeedAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 20L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readLifetimeRunningHoursAttribute(
        LifetimeRunningHoursAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 21L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeLifetimeRunningHoursAttribute(DefaultClusterCallback callback, Long value) {
      writeLifetimeRunningHoursAttribute(callback, value, 0);
    }

    public void writeLifetimeRunningHoursAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 21L;
      
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeLifetimeRunningHoursAttribute(
        LifetimeRunningHoursAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 21L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readPowerAttribute(
        PowerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 22L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribePowerAttribute(
        PowerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 22L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readLifetimeEnergyConsumedAttribute(
        LifetimeEnergyConsumedAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 23L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeLifetimeEnergyConsumedAttribute(DefaultClusterCallback callback, Long value) {
      writeLifetimeEnergyConsumedAttribute(callback, value, 0);
    }

    public void writeLifetimeEnergyConsumedAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 23L;
      
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeLifetimeEnergyConsumedAttribute(
        LifetimeEnergyConsumedAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 23L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readOperationModeAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 32L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeOperationModeAttribute(DefaultClusterCallback callback, Integer value) {
      writeOperationModeAttribute(callback, value, 0);
    }

    public void writeOperationModeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 32L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeOperationModeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 32L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readControlModeAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 33L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeControlModeAttribute(DefaultClusterCallback callback, Integer value) {
      writeControlModeAttribute(callback, value, 0);
    }

    public void writeControlModeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 33L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeControlModeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 33L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class ThermostatCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 513L;

    public ThermostatCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void setpointRaiseLower(DefaultClusterCallback callback, Integer mode, Integer amount) {
      setpointRaiseLower(callback, mode, amount, 0);
    }

    public void setpointRaiseLower(DefaultClusterCallback callback, Integer mode, Integer amount, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long modeFieldID = 0L;
      BaseTLVType modetlvValue = new UIntType(mode);
      elements.add(new StructElement(modeFieldID, modetlvValue));

      final long amountFieldID = 1L;
      BaseTLVType amounttlvValue = new IntType(amount);
      elements.add(new StructElement(amountFieldID, amounttlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void setWeeklySchedule(DefaultClusterCallback callback, Integer numberOfTransitionsForSequence, Integer dayOfWeekForSequence, Integer modeForSequence, ArrayList<ChipStructs.ThermostatClusterThermostatScheduleTransition> transitions) {
      setWeeklySchedule(callback, numberOfTransitionsForSequence, dayOfWeekForSequence, modeForSequence, transitions, 0);
    }

    public void setWeeklySchedule(DefaultClusterCallback callback, Integer numberOfTransitionsForSequence, Integer dayOfWeekForSequence, Integer modeForSequence, ArrayList<ChipStructs.ThermostatClusterThermostatScheduleTransition> transitions, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 1L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long numberOfTransitionsForSequenceFieldID = 0L;
      BaseTLVType numberOfTransitionsForSequencetlvValue = new UIntType(numberOfTransitionsForSequence);
      elements.add(new StructElement(numberOfTransitionsForSequenceFieldID, numberOfTransitionsForSequencetlvValue));

      final long dayOfWeekForSequenceFieldID = 1L;
      BaseTLVType dayOfWeekForSequencetlvValue = new UIntType(dayOfWeekForSequence);
      elements.add(new StructElement(dayOfWeekForSequenceFieldID, dayOfWeekForSequencetlvValue));

      final long modeForSequenceFieldID = 2L;
      BaseTLVType modeForSequencetlvValue = new UIntType(modeForSequence);
      elements.add(new StructElement(modeForSequenceFieldID, modeForSequencetlvValue));

      final long transitionsFieldID = 3L;
      BaseTLVType transitionstlvValue = ArrayType.generateArrayType(transitions, (elementtransitions) -> elementtransitions.encodeTlv());
      elements.add(new StructElement(transitionsFieldID, transitionstlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void getWeeklySchedule(GetWeeklyScheduleResponseCallback callback, Integer daysToReturn, Integer modeToReturn) {
      getWeeklySchedule(callback, daysToReturn, modeToReturn, 0);
    }

    public void getWeeklySchedule(GetWeeklyScheduleResponseCallback callback, Integer daysToReturn, Integer modeToReturn, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 2L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long daysToReturnFieldID = 0L;
      BaseTLVType daysToReturntlvValue = new UIntType(daysToReturn);
      elements.add(new StructElement(daysToReturnFieldID, daysToReturntlvValue));

      final long modeToReturnFieldID = 1L;
      BaseTLVType modeToReturntlvValue = new UIntType(modeToReturn);
      elements.add(new StructElement(modeToReturnFieldID, modeToReturntlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long numberOfTransitionsForSequenceFieldID = 0L;
          Integer numberOfTransitionsForSequence = null;
          final long dayOfWeekForSequenceFieldID = 1L;
          Integer dayOfWeekForSequence = null;
          final long modeForSequenceFieldID = 2L;
          Integer modeForSequence = null;
          final long transitionsFieldID = 3L;
          ArrayList<ChipStructs.ThermostatClusterThermostatScheduleTransition> transitions = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == numberOfTransitionsForSequenceFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                numberOfTransitionsForSequence = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == dayOfWeekForSequenceFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                dayOfWeekForSequence = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == modeForSequenceFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                modeForSequence = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == transitionsFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Array) {
                ArrayType castingValue = element.value(ArrayType.class);
                transitions = castingValue.map((elementcastingValue) -> ChipStructs.ThermostatClusterThermostatScheduleTransition.decodeTlv(elementcastingValue));
              }
            }
          }
          callback.onSuccess(numberOfTransitionsForSequence, dayOfWeekForSequence, modeForSequence, transitions);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void clearWeeklySchedule(DefaultClusterCallback callback) {
      clearWeeklySchedule(callback, 0);
    }

    public void clearWeeklySchedule(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 3L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public interface GetWeeklyScheduleResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer numberOfTransitionsForSequence, Integer dayOfWeekForSequence, Integer modeForSequence, ArrayList<ChipStructs.ThermostatClusterThermostatScheduleTransition> transitions);
    }

    public interface LocalTemperatureAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface OutdoorTemperatureAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface TemperatureSetpointHoldDurationAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface SetpointChangeAmountAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface OccupiedSetbackAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface OccupiedSetbackMinAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface OccupiedSetbackMaxAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface UnoccupiedSetbackAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface UnoccupiedSetbackMinAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface UnoccupiedSetbackMaxAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface ACCoilTemperatureAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readLocalTemperatureAttribute(
        LocalTemperatureAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeLocalTemperatureAttribute(
        LocalTemperatureAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readOutdoorTemperatureAttribute(
        OutdoorTemperatureAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeOutdoorTemperatureAttribute(
        OutdoorTemperatureAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readOccupancyAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeOccupancyAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAbsMinHeatSetpointLimitAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAbsMinHeatSetpointLimitAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAbsMaxHeatSetpointLimitAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAbsMaxHeatSetpointLimitAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAbsMinCoolSetpointLimitAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAbsMinCoolSetpointLimitAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAbsMaxCoolSetpointLimitAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAbsMaxCoolSetpointLimitAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readPICoolingDemandAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribePICoolingDemandAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readPIHeatingDemandAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribePIHeatingDemandAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readHVACSystemTypeConfigurationAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 9L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeHVACSystemTypeConfigurationAttribute(DefaultClusterCallback callback, Integer value) {
      writeHVACSystemTypeConfigurationAttribute(callback, value, 0);
    }

    public void writeHVACSystemTypeConfigurationAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 9L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeHVACSystemTypeConfigurationAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 9L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readLocalTemperatureCalibrationAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeLocalTemperatureCalibrationAttribute(DefaultClusterCallback callback, Integer value) {
      writeLocalTemperatureCalibrationAttribute(callback, value, 0);
    }

    public void writeLocalTemperatureCalibrationAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16L;
      
      BaseTLVType tlvValue = new IntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeLocalTemperatureCalibrationAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readOccupiedCoolingSetpointAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 17L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeOccupiedCoolingSetpointAttribute(DefaultClusterCallback callback, Integer value) {
      writeOccupiedCoolingSetpointAttribute(callback, value, 0);
    }

    public void writeOccupiedCoolingSetpointAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 17L;
      
      BaseTLVType tlvValue = new IntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeOccupiedCoolingSetpointAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 17L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readOccupiedHeatingSetpointAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 18L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeOccupiedHeatingSetpointAttribute(DefaultClusterCallback callback, Integer value) {
      writeOccupiedHeatingSetpointAttribute(callback, value, 0);
    }

    public void writeOccupiedHeatingSetpointAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 18L;
      
      BaseTLVType tlvValue = new IntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeOccupiedHeatingSetpointAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 18L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readUnoccupiedCoolingSetpointAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 19L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeUnoccupiedCoolingSetpointAttribute(DefaultClusterCallback callback, Integer value) {
      writeUnoccupiedCoolingSetpointAttribute(callback, value, 0);
    }

    public void writeUnoccupiedCoolingSetpointAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 19L;
      
      BaseTLVType tlvValue = new IntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeUnoccupiedCoolingSetpointAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 19L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readUnoccupiedHeatingSetpointAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 20L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeUnoccupiedHeatingSetpointAttribute(DefaultClusterCallback callback, Integer value) {
      writeUnoccupiedHeatingSetpointAttribute(callback, value, 0);
    }

    public void writeUnoccupiedHeatingSetpointAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 20L;
      
      BaseTLVType tlvValue = new IntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeUnoccupiedHeatingSetpointAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 20L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMinHeatSetpointLimitAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 21L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeMinHeatSetpointLimitAttribute(DefaultClusterCallback callback, Integer value) {
      writeMinHeatSetpointLimitAttribute(callback, value, 0);
    }

    public void writeMinHeatSetpointLimitAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 21L;
      
      BaseTLVType tlvValue = new IntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeMinHeatSetpointLimitAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 21L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMaxHeatSetpointLimitAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 22L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeMaxHeatSetpointLimitAttribute(DefaultClusterCallback callback, Integer value) {
      writeMaxHeatSetpointLimitAttribute(callback, value, 0);
    }

    public void writeMaxHeatSetpointLimitAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 22L;
      
      BaseTLVType tlvValue = new IntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeMaxHeatSetpointLimitAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 22L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMinCoolSetpointLimitAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 23L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeMinCoolSetpointLimitAttribute(DefaultClusterCallback callback, Integer value) {
      writeMinCoolSetpointLimitAttribute(callback, value, 0);
    }

    public void writeMinCoolSetpointLimitAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 23L;
      
      BaseTLVType tlvValue = new IntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeMinCoolSetpointLimitAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 23L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMaxCoolSetpointLimitAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 24L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeMaxCoolSetpointLimitAttribute(DefaultClusterCallback callback, Integer value) {
      writeMaxCoolSetpointLimitAttribute(callback, value, 0);
    }

    public void writeMaxCoolSetpointLimitAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 24L;
      
      BaseTLVType tlvValue = new IntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeMaxCoolSetpointLimitAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 24L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMinSetpointDeadBandAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 25L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeMinSetpointDeadBandAttribute(DefaultClusterCallback callback, Integer value) {
      writeMinSetpointDeadBandAttribute(callback, value, 0);
    }

    public void writeMinSetpointDeadBandAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 25L;
      
      BaseTLVType tlvValue = new IntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeMinSetpointDeadBandAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 25L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readRemoteSensingAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 26L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeRemoteSensingAttribute(DefaultClusterCallback callback, Integer value) {
      writeRemoteSensingAttribute(callback, value, 0);
    }

    public void writeRemoteSensingAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 26L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeRemoteSensingAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 26L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readControlSequenceOfOperationAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 27L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeControlSequenceOfOperationAttribute(DefaultClusterCallback callback, Integer value) {
      writeControlSequenceOfOperationAttribute(callback, value, 0);
    }

    public void writeControlSequenceOfOperationAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 27L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeControlSequenceOfOperationAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 27L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readSystemModeAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 28L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeSystemModeAttribute(DefaultClusterCallback callback, Integer value) {
      writeSystemModeAttribute(callback, value, 0);
    }

    public void writeSystemModeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 28L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeSystemModeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 28L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readThermostatRunningModeAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 30L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeThermostatRunningModeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 30L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readStartOfWeekAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 32L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeStartOfWeekAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 32L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readNumberOfWeeklyTransitionsAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 33L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeNumberOfWeeklyTransitionsAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 33L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readNumberOfDailyTransitionsAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 34L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeNumberOfDailyTransitionsAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 34L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readTemperatureSetpointHoldAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 35L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeTemperatureSetpointHoldAttribute(DefaultClusterCallback callback, Integer value) {
      writeTemperatureSetpointHoldAttribute(callback, value, 0);
    }

    public void writeTemperatureSetpointHoldAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 35L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeTemperatureSetpointHoldAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 35L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readTemperatureSetpointHoldDurationAttribute(
        TemperatureSetpointHoldDurationAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 36L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeTemperatureSetpointHoldDurationAttribute(DefaultClusterCallback callback, Integer value) {
      writeTemperatureSetpointHoldDurationAttribute(callback, value, 0);
    }

    public void writeTemperatureSetpointHoldDurationAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 36L;
      
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeTemperatureSetpointHoldDurationAttribute(
        TemperatureSetpointHoldDurationAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 36L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readThermostatProgrammingOperationModeAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 37L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeThermostatProgrammingOperationModeAttribute(DefaultClusterCallback callback, Integer value) {
      writeThermostatProgrammingOperationModeAttribute(callback, value, 0);
    }

    public void writeThermostatProgrammingOperationModeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 37L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeThermostatProgrammingOperationModeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 37L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readThermostatRunningStateAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 41L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeThermostatRunningStateAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 41L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readSetpointChangeSourceAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 48L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeSetpointChangeSourceAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 48L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readSetpointChangeAmountAttribute(
        SetpointChangeAmountAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 49L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeSetpointChangeAmountAttribute(
        SetpointChangeAmountAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 49L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readSetpointChangeSourceTimestampAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 50L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeSetpointChangeSourceTimestampAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 50L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readOccupiedSetbackAttribute(
        OccupiedSetbackAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 52L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeOccupiedSetbackAttribute(DefaultClusterCallback callback, Integer value) {
      writeOccupiedSetbackAttribute(callback, value, 0);
    }

    public void writeOccupiedSetbackAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 52L;
      
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeOccupiedSetbackAttribute(
        OccupiedSetbackAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 52L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readOccupiedSetbackMinAttribute(
        OccupiedSetbackMinAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 53L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeOccupiedSetbackMinAttribute(
        OccupiedSetbackMinAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 53L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readOccupiedSetbackMaxAttribute(
        OccupiedSetbackMaxAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 54L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeOccupiedSetbackMaxAttribute(
        OccupiedSetbackMaxAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 54L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readUnoccupiedSetbackAttribute(
        UnoccupiedSetbackAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 55L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeUnoccupiedSetbackAttribute(DefaultClusterCallback callback, Integer value) {
      writeUnoccupiedSetbackAttribute(callback, value, 0);
    }

    public void writeUnoccupiedSetbackAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 55L;
      
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeUnoccupiedSetbackAttribute(
        UnoccupiedSetbackAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 55L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readUnoccupiedSetbackMinAttribute(
        UnoccupiedSetbackMinAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 56L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeUnoccupiedSetbackMinAttribute(
        UnoccupiedSetbackMinAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 56L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readUnoccupiedSetbackMaxAttribute(
        UnoccupiedSetbackMaxAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 57L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeUnoccupiedSetbackMaxAttribute(
        UnoccupiedSetbackMaxAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 57L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEmergencyHeatDeltaAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 58L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeEmergencyHeatDeltaAttribute(DefaultClusterCallback callback, Integer value) {
      writeEmergencyHeatDeltaAttribute(callback, value, 0);
    }

    public void writeEmergencyHeatDeltaAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 58L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeEmergencyHeatDeltaAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 58L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readACTypeAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 64L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeACTypeAttribute(DefaultClusterCallback callback, Integer value) {
      writeACTypeAttribute(callback, value, 0);
    }

    public void writeACTypeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 64L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeACTypeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 64L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readACCapacityAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeACCapacityAttribute(DefaultClusterCallback callback, Integer value) {
      writeACCapacityAttribute(callback, value, 0);
    }

    public void writeACCapacityAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeACCapacityAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readACRefrigerantTypeAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 66L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeACRefrigerantTypeAttribute(DefaultClusterCallback callback, Integer value) {
      writeACRefrigerantTypeAttribute(callback, value, 0);
    }

    public void writeACRefrigerantTypeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 66L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeACRefrigerantTypeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 66L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readACCompressorTypeAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 67L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeACCompressorTypeAttribute(DefaultClusterCallback callback, Integer value) {
      writeACCompressorTypeAttribute(callback, value, 0);
    }

    public void writeACCompressorTypeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 67L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeACCompressorTypeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 67L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readACErrorCodeAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 68L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeACErrorCodeAttribute(DefaultClusterCallback callback, Long value) {
      writeACErrorCodeAttribute(callback, value, 0);
    }

    public void writeACErrorCodeAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 68L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeACErrorCodeAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 68L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readACLouverPositionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 69L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeACLouverPositionAttribute(DefaultClusterCallback callback, Integer value) {
      writeACLouverPositionAttribute(callback, value, 0);
    }

    public void writeACLouverPositionAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 69L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeACLouverPositionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 69L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readACCoilTemperatureAttribute(
        ACCoilTemperatureAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 70L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeACCoilTemperatureAttribute(
        ACCoilTemperatureAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 70L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readACCapacityformatAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 71L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeACCapacityformatAttribute(DefaultClusterCallback callback, Integer value) {
      writeACCapacityformatAttribute(callback, value, 0);
    }

    public void writeACCapacityformatAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 71L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeACCapacityformatAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 71L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class FanControlCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 514L;

    public FanControlCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void step(DefaultClusterCallback callback, Integer direction, Optional<Boolean> wrap, Optional<Boolean> lowestOff) {
      step(callback, direction, wrap, lowestOff, 0);
    }

    public void step(DefaultClusterCallback callback, Integer direction, Optional<Boolean> wrap, Optional<Boolean> lowestOff, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long directionFieldID = 0L;
      BaseTLVType directiontlvValue = new UIntType(direction);
      elements.add(new StructElement(directionFieldID, directiontlvValue));

      final long wrapFieldID = 1L;
      BaseTLVType wraptlvValue = wrap.<BaseTLVType>map((nonOptionalwrap) -> new BooleanType(nonOptionalwrap)).orElse(new EmptyType());
      elements.add(new StructElement(wrapFieldID, wraptlvValue));

      final long lowestOffFieldID = 2L;
      BaseTLVType lowestOfftlvValue = lowestOff.<BaseTLVType>map((nonOptionallowestOff) -> new BooleanType(nonOptionallowestOff)).orElse(new EmptyType());
      elements.add(new StructElement(lowestOffFieldID, lowestOfftlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public interface PercentSettingAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface SpeedSettingAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readFanModeAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeFanModeAttribute(DefaultClusterCallback callback, Integer value) {
      writeFanModeAttribute(callback, value, 0);
    }

    public void writeFanModeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeFanModeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFanModeSequenceAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeFanModeSequenceAttribute(DefaultClusterCallback callback, Integer value) {
      writeFanModeSequenceAttribute(callback, value, 0);
    }

    public void writeFanModeSequenceAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeFanModeSequenceAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readPercentSettingAttribute(
        PercentSettingAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writePercentSettingAttribute(DefaultClusterCallback callback, Integer value) {
      writePercentSettingAttribute(callback, value, 0);
    }

    public void writePercentSettingAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribePercentSettingAttribute(
        PercentSettingAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readPercentCurrentAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribePercentCurrentAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readSpeedMaxAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeSpeedMaxAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readSpeedSettingAttribute(
        SpeedSettingAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeSpeedSettingAttribute(DefaultClusterCallback callback, Integer value) {
      writeSpeedSettingAttribute(callback, value, 0);
    }

    public void writeSpeedSettingAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeSpeedSettingAttribute(
        SpeedSettingAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readSpeedCurrentAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeSpeedCurrentAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readRockSupportAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeRockSupportAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readRockSettingAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeRockSettingAttribute(DefaultClusterCallback callback, Integer value) {
      writeRockSettingAttribute(callback, value, 0);
    }

    public void writeRockSettingAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 8L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeRockSettingAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readWindSupportAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 9L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeWindSupportAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 9L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readWindSettingAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 10L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeWindSettingAttribute(DefaultClusterCallback callback, Integer value) {
      writeWindSettingAttribute(callback, value, 0);
    }

    public void writeWindSettingAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 10L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeWindSettingAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 10L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAirflowDirectionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 11L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeAirflowDirectionAttribute(DefaultClusterCallback callback, Integer value) {
      writeAirflowDirectionAttribute(callback, value, 0);
    }

    public void writeAirflowDirectionAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 11L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeAirflowDirectionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 11L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class ThermostatUserInterfaceConfigurationCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 516L;

    public ThermostatUserInterfaceConfigurationCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readTemperatureDisplayModeAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeTemperatureDisplayModeAttribute(DefaultClusterCallback callback, Integer value) {
      writeTemperatureDisplayModeAttribute(callback, value, 0);
    }

    public void writeTemperatureDisplayModeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeTemperatureDisplayModeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readKeypadLockoutAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeKeypadLockoutAttribute(DefaultClusterCallback callback, Integer value) {
      writeKeypadLockoutAttribute(callback, value, 0);
    }

    public void writeKeypadLockoutAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeKeypadLockoutAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readScheduleProgrammingVisibilityAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeScheduleProgrammingVisibilityAttribute(DefaultClusterCallback callback, Integer value) {
      writeScheduleProgrammingVisibilityAttribute(callback, value, 0);
    }

    public void writeScheduleProgrammingVisibilityAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeScheduleProgrammingVisibilityAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class ColorControlCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 768L;

    public ColorControlCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void moveToHue(DefaultClusterCallback callback, Integer hue, Integer direction, Integer transitionTime, Integer optionsMask, Integer optionsOverride) {
      moveToHue(callback, hue, direction, transitionTime, optionsMask, optionsOverride, 0);
    }

    public void moveToHue(DefaultClusterCallback callback, Integer hue, Integer direction, Integer transitionTime, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long hueFieldID = 0L;
      BaseTLVType huetlvValue = new UIntType(hue);
      elements.add(new StructElement(hueFieldID, huetlvValue));

      final long directionFieldID = 1L;
      BaseTLVType directiontlvValue = new UIntType(direction);
      elements.add(new StructElement(directionFieldID, directiontlvValue));

      final long transitionTimeFieldID = 2L;
      BaseTLVType transitionTimetlvValue = new UIntType(transitionTime);
      elements.add(new StructElement(transitionTimeFieldID, transitionTimetlvValue));

      final long optionsMaskFieldID = 3L;
      BaseTLVType optionsMasktlvValue = new UIntType(optionsMask);
      elements.add(new StructElement(optionsMaskFieldID, optionsMasktlvValue));

      final long optionsOverrideFieldID = 4L;
      BaseTLVType optionsOverridetlvValue = new UIntType(optionsOverride);
      elements.add(new StructElement(optionsOverrideFieldID, optionsOverridetlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void moveHue(DefaultClusterCallback callback, Integer moveMode, Integer rate, Integer optionsMask, Integer optionsOverride) {
      moveHue(callback, moveMode, rate, optionsMask, optionsOverride, 0);
    }

    public void moveHue(DefaultClusterCallback callback, Integer moveMode, Integer rate, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 1L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long moveModeFieldID = 0L;
      BaseTLVType moveModetlvValue = new UIntType(moveMode);
      elements.add(new StructElement(moveModeFieldID, moveModetlvValue));

      final long rateFieldID = 1L;
      BaseTLVType ratetlvValue = new UIntType(rate);
      elements.add(new StructElement(rateFieldID, ratetlvValue));

      final long optionsMaskFieldID = 2L;
      BaseTLVType optionsMasktlvValue = new UIntType(optionsMask);
      elements.add(new StructElement(optionsMaskFieldID, optionsMasktlvValue));

      final long optionsOverrideFieldID = 3L;
      BaseTLVType optionsOverridetlvValue = new UIntType(optionsOverride);
      elements.add(new StructElement(optionsOverrideFieldID, optionsOverridetlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void stepHue(DefaultClusterCallback callback, Integer stepMode, Integer stepSize, Integer transitionTime, Integer optionsMask, Integer optionsOverride) {
      stepHue(callback, stepMode, stepSize, transitionTime, optionsMask, optionsOverride, 0);
    }

    public void stepHue(DefaultClusterCallback callback, Integer stepMode, Integer stepSize, Integer transitionTime, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 2L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long stepModeFieldID = 0L;
      BaseTLVType stepModetlvValue = new UIntType(stepMode);
      elements.add(new StructElement(stepModeFieldID, stepModetlvValue));

      final long stepSizeFieldID = 1L;
      BaseTLVType stepSizetlvValue = new UIntType(stepSize);
      elements.add(new StructElement(stepSizeFieldID, stepSizetlvValue));

      final long transitionTimeFieldID = 2L;
      BaseTLVType transitionTimetlvValue = new UIntType(transitionTime);
      elements.add(new StructElement(transitionTimeFieldID, transitionTimetlvValue));

      final long optionsMaskFieldID = 3L;
      BaseTLVType optionsMasktlvValue = new UIntType(optionsMask);
      elements.add(new StructElement(optionsMaskFieldID, optionsMasktlvValue));

      final long optionsOverrideFieldID = 4L;
      BaseTLVType optionsOverridetlvValue = new UIntType(optionsOverride);
      elements.add(new StructElement(optionsOverrideFieldID, optionsOverridetlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void moveToSaturation(DefaultClusterCallback callback, Integer saturation, Integer transitionTime, Integer optionsMask, Integer optionsOverride) {
      moveToSaturation(callback, saturation, transitionTime, optionsMask, optionsOverride, 0);
    }

    public void moveToSaturation(DefaultClusterCallback callback, Integer saturation, Integer transitionTime, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 3L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long saturationFieldID = 0L;
      BaseTLVType saturationtlvValue = new UIntType(saturation);
      elements.add(new StructElement(saturationFieldID, saturationtlvValue));

      final long transitionTimeFieldID = 1L;
      BaseTLVType transitionTimetlvValue = new UIntType(transitionTime);
      elements.add(new StructElement(transitionTimeFieldID, transitionTimetlvValue));

      final long optionsMaskFieldID = 2L;
      BaseTLVType optionsMasktlvValue = new UIntType(optionsMask);
      elements.add(new StructElement(optionsMaskFieldID, optionsMasktlvValue));

      final long optionsOverrideFieldID = 3L;
      BaseTLVType optionsOverridetlvValue = new UIntType(optionsOverride);
      elements.add(new StructElement(optionsOverrideFieldID, optionsOverridetlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void moveSaturation(DefaultClusterCallback callback, Integer moveMode, Integer rate, Integer optionsMask, Integer optionsOverride) {
      moveSaturation(callback, moveMode, rate, optionsMask, optionsOverride, 0);
    }

    public void moveSaturation(DefaultClusterCallback callback, Integer moveMode, Integer rate, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 4L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long moveModeFieldID = 0L;
      BaseTLVType moveModetlvValue = new UIntType(moveMode);
      elements.add(new StructElement(moveModeFieldID, moveModetlvValue));

      final long rateFieldID = 1L;
      BaseTLVType ratetlvValue = new UIntType(rate);
      elements.add(new StructElement(rateFieldID, ratetlvValue));

      final long optionsMaskFieldID = 2L;
      BaseTLVType optionsMasktlvValue = new UIntType(optionsMask);
      elements.add(new StructElement(optionsMaskFieldID, optionsMasktlvValue));

      final long optionsOverrideFieldID = 3L;
      BaseTLVType optionsOverridetlvValue = new UIntType(optionsOverride);
      elements.add(new StructElement(optionsOverrideFieldID, optionsOverridetlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void stepSaturation(DefaultClusterCallback callback, Integer stepMode, Integer stepSize, Integer transitionTime, Integer optionsMask, Integer optionsOverride) {
      stepSaturation(callback, stepMode, stepSize, transitionTime, optionsMask, optionsOverride, 0);
    }

    public void stepSaturation(DefaultClusterCallback callback, Integer stepMode, Integer stepSize, Integer transitionTime, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 5L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long stepModeFieldID = 0L;
      BaseTLVType stepModetlvValue = new UIntType(stepMode);
      elements.add(new StructElement(stepModeFieldID, stepModetlvValue));

      final long stepSizeFieldID = 1L;
      BaseTLVType stepSizetlvValue = new UIntType(stepSize);
      elements.add(new StructElement(stepSizeFieldID, stepSizetlvValue));

      final long transitionTimeFieldID = 2L;
      BaseTLVType transitionTimetlvValue = new UIntType(transitionTime);
      elements.add(new StructElement(transitionTimeFieldID, transitionTimetlvValue));

      final long optionsMaskFieldID = 3L;
      BaseTLVType optionsMasktlvValue = new UIntType(optionsMask);
      elements.add(new StructElement(optionsMaskFieldID, optionsMasktlvValue));

      final long optionsOverrideFieldID = 4L;
      BaseTLVType optionsOverridetlvValue = new UIntType(optionsOverride);
      elements.add(new StructElement(optionsOverrideFieldID, optionsOverridetlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void moveToHueAndSaturation(DefaultClusterCallback callback, Integer hue, Integer saturation, Integer transitionTime, Integer optionsMask, Integer optionsOverride) {
      moveToHueAndSaturation(callback, hue, saturation, transitionTime, optionsMask, optionsOverride, 0);
    }

    public void moveToHueAndSaturation(DefaultClusterCallback callback, Integer hue, Integer saturation, Integer transitionTime, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 6L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long hueFieldID = 0L;
      BaseTLVType huetlvValue = new UIntType(hue);
      elements.add(new StructElement(hueFieldID, huetlvValue));

      final long saturationFieldID = 1L;
      BaseTLVType saturationtlvValue = new UIntType(saturation);
      elements.add(new StructElement(saturationFieldID, saturationtlvValue));

      final long transitionTimeFieldID = 2L;
      BaseTLVType transitionTimetlvValue = new UIntType(transitionTime);
      elements.add(new StructElement(transitionTimeFieldID, transitionTimetlvValue));

      final long optionsMaskFieldID = 3L;
      BaseTLVType optionsMasktlvValue = new UIntType(optionsMask);
      elements.add(new StructElement(optionsMaskFieldID, optionsMasktlvValue));

      final long optionsOverrideFieldID = 4L;
      BaseTLVType optionsOverridetlvValue = new UIntType(optionsOverride);
      elements.add(new StructElement(optionsOverrideFieldID, optionsOverridetlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void moveToColor(DefaultClusterCallback callback, Integer colorX, Integer colorY, Integer transitionTime, Integer optionsMask, Integer optionsOverride) {
      moveToColor(callback, colorX, colorY, transitionTime, optionsMask, optionsOverride, 0);
    }

    public void moveToColor(DefaultClusterCallback callback, Integer colorX, Integer colorY, Integer transitionTime, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 7L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long colorXFieldID = 0L;
      BaseTLVType colorXtlvValue = new UIntType(colorX);
      elements.add(new StructElement(colorXFieldID, colorXtlvValue));

      final long colorYFieldID = 1L;
      BaseTLVType colorYtlvValue = new UIntType(colorY);
      elements.add(new StructElement(colorYFieldID, colorYtlvValue));

      final long transitionTimeFieldID = 2L;
      BaseTLVType transitionTimetlvValue = new UIntType(transitionTime);
      elements.add(new StructElement(transitionTimeFieldID, transitionTimetlvValue));

      final long optionsMaskFieldID = 3L;
      BaseTLVType optionsMasktlvValue = new UIntType(optionsMask);
      elements.add(new StructElement(optionsMaskFieldID, optionsMasktlvValue));

      final long optionsOverrideFieldID = 4L;
      BaseTLVType optionsOverridetlvValue = new UIntType(optionsOverride);
      elements.add(new StructElement(optionsOverrideFieldID, optionsOverridetlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void moveColor(DefaultClusterCallback callback, Integer rateX, Integer rateY, Integer optionsMask, Integer optionsOverride) {
      moveColor(callback, rateX, rateY, optionsMask, optionsOverride, 0);
    }

    public void moveColor(DefaultClusterCallback callback, Integer rateX, Integer rateY, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 8L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long rateXFieldID = 0L;
      BaseTLVType rateXtlvValue = new IntType(rateX);
      elements.add(new StructElement(rateXFieldID, rateXtlvValue));

      final long rateYFieldID = 1L;
      BaseTLVType rateYtlvValue = new IntType(rateY);
      elements.add(new StructElement(rateYFieldID, rateYtlvValue));

      final long optionsMaskFieldID = 2L;
      BaseTLVType optionsMasktlvValue = new UIntType(optionsMask);
      elements.add(new StructElement(optionsMaskFieldID, optionsMasktlvValue));

      final long optionsOverrideFieldID = 3L;
      BaseTLVType optionsOverridetlvValue = new UIntType(optionsOverride);
      elements.add(new StructElement(optionsOverrideFieldID, optionsOverridetlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void stepColor(DefaultClusterCallback callback, Integer stepX, Integer stepY, Integer transitionTime, Integer optionsMask, Integer optionsOverride) {
      stepColor(callback, stepX, stepY, transitionTime, optionsMask, optionsOverride, 0);
    }

    public void stepColor(DefaultClusterCallback callback, Integer stepX, Integer stepY, Integer transitionTime, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 9L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long stepXFieldID = 0L;
      BaseTLVType stepXtlvValue = new IntType(stepX);
      elements.add(new StructElement(stepXFieldID, stepXtlvValue));

      final long stepYFieldID = 1L;
      BaseTLVType stepYtlvValue = new IntType(stepY);
      elements.add(new StructElement(stepYFieldID, stepYtlvValue));

      final long transitionTimeFieldID = 2L;
      BaseTLVType transitionTimetlvValue = new UIntType(transitionTime);
      elements.add(new StructElement(transitionTimeFieldID, transitionTimetlvValue));

      final long optionsMaskFieldID = 3L;
      BaseTLVType optionsMasktlvValue = new UIntType(optionsMask);
      elements.add(new StructElement(optionsMaskFieldID, optionsMasktlvValue));

      final long optionsOverrideFieldID = 4L;
      BaseTLVType optionsOverridetlvValue = new UIntType(optionsOverride);
      elements.add(new StructElement(optionsOverrideFieldID, optionsOverridetlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void moveToColorTemperature(DefaultClusterCallback callback, Integer colorTemperatureMireds, Integer transitionTime, Integer optionsMask, Integer optionsOverride) {
      moveToColorTemperature(callback, colorTemperatureMireds, transitionTime, optionsMask, optionsOverride, 0);
    }

    public void moveToColorTemperature(DefaultClusterCallback callback, Integer colorTemperatureMireds, Integer transitionTime, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 10L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long colorTemperatureMiredsFieldID = 0L;
      BaseTLVType colorTemperatureMiredstlvValue = new UIntType(colorTemperatureMireds);
      elements.add(new StructElement(colorTemperatureMiredsFieldID, colorTemperatureMiredstlvValue));

      final long transitionTimeFieldID = 1L;
      BaseTLVType transitionTimetlvValue = new UIntType(transitionTime);
      elements.add(new StructElement(transitionTimeFieldID, transitionTimetlvValue));

      final long optionsMaskFieldID = 2L;
      BaseTLVType optionsMasktlvValue = new UIntType(optionsMask);
      elements.add(new StructElement(optionsMaskFieldID, optionsMasktlvValue));

      final long optionsOverrideFieldID = 3L;
      BaseTLVType optionsOverridetlvValue = new UIntType(optionsOverride);
      elements.add(new StructElement(optionsOverrideFieldID, optionsOverridetlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void enhancedMoveToHue(DefaultClusterCallback callback, Integer enhancedHue, Integer direction, Integer transitionTime, Integer optionsMask, Integer optionsOverride) {
      enhancedMoveToHue(callback, enhancedHue, direction, transitionTime, optionsMask, optionsOverride, 0);
    }

    public void enhancedMoveToHue(DefaultClusterCallback callback, Integer enhancedHue, Integer direction, Integer transitionTime, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 64L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long enhancedHueFieldID = 0L;
      BaseTLVType enhancedHuetlvValue = new UIntType(enhancedHue);
      elements.add(new StructElement(enhancedHueFieldID, enhancedHuetlvValue));

      final long directionFieldID = 1L;
      BaseTLVType directiontlvValue = new UIntType(direction);
      elements.add(new StructElement(directionFieldID, directiontlvValue));

      final long transitionTimeFieldID = 2L;
      BaseTLVType transitionTimetlvValue = new UIntType(transitionTime);
      elements.add(new StructElement(transitionTimeFieldID, transitionTimetlvValue));

      final long optionsMaskFieldID = 3L;
      BaseTLVType optionsMasktlvValue = new UIntType(optionsMask);
      elements.add(new StructElement(optionsMaskFieldID, optionsMasktlvValue));

      final long optionsOverrideFieldID = 4L;
      BaseTLVType optionsOverridetlvValue = new UIntType(optionsOverride);
      elements.add(new StructElement(optionsOverrideFieldID, optionsOverridetlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void enhancedMoveHue(DefaultClusterCallback callback, Integer moveMode, Integer rate, Integer optionsMask, Integer optionsOverride) {
      enhancedMoveHue(callback, moveMode, rate, optionsMask, optionsOverride, 0);
    }

    public void enhancedMoveHue(DefaultClusterCallback callback, Integer moveMode, Integer rate, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 65L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long moveModeFieldID = 0L;
      BaseTLVType moveModetlvValue = new UIntType(moveMode);
      elements.add(new StructElement(moveModeFieldID, moveModetlvValue));

      final long rateFieldID = 1L;
      BaseTLVType ratetlvValue = new UIntType(rate);
      elements.add(new StructElement(rateFieldID, ratetlvValue));

      final long optionsMaskFieldID = 2L;
      BaseTLVType optionsMasktlvValue = new UIntType(optionsMask);
      elements.add(new StructElement(optionsMaskFieldID, optionsMasktlvValue));

      final long optionsOverrideFieldID = 3L;
      BaseTLVType optionsOverridetlvValue = new UIntType(optionsOverride);
      elements.add(new StructElement(optionsOverrideFieldID, optionsOverridetlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void enhancedStepHue(DefaultClusterCallback callback, Integer stepMode, Integer stepSize, Integer transitionTime, Integer optionsMask, Integer optionsOverride) {
      enhancedStepHue(callback, stepMode, stepSize, transitionTime, optionsMask, optionsOverride, 0);
    }

    public void enhancedStepHue(DefaultClusterCallback callback, Integer stepMode, Integer stepSize, Integer transitionTime, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 66L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long stepModeFieldID = 0L;
      BaseTLVType stepModetlvValue = new UIntType(stepMode);
      elements.add(new StructElement(stepModeFieldID, stepModetlvValue));

      final long stepSizeFieldID = 1L;
      BaseTLVType stepSizetlvValue = new UIntType(stepSize);
      elements.add(new StructElement(stepSizeFieldID, stepSizetlvValue));

      final long transitionTimeFieldID = 2L;
      BaseTLVType transitionTimetlvValue = new UIntType(transitionTime);
      elements.add(new StructElement(transitionTimeFieldID, transitionTimetlvValue));

      final long optionsMaskFieldID = 3L;
      BaseTLVType optionsMasktlvValue = new UIntType(optionsMask);
      elements.add(new StructElement(optionsMaskFieldID, optionsMasktlvValue));

      final long optionsOverrideFieldID = 4L;
      BaseTLVType optionsOverridetlvValue = new UIntType(optionsOverride);
      elements.add(new StructElement(optionsOverrideFieldID, optionsOverridetlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void enhancedMoveToHueAndSaturation(DefaultClusterCallback callback, Integer enhancedHue, Integer saturation, Integer transitionTime, Integer optionsMask, Integer optionsOverride) {
      enhancedMoveToHueAndSaturation(callback, enhancedHue, saturation, transitionTime, optionsMask, optionsOverride, 0);
    }

    public void enhancedMoveToHueAndSaturation(DefaultClusterCallback callback, Integer enhancedHue, Integer saturation, Integer transitionTime, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 67L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long enhancedHueFieldID = 0L;
      BaseTLVType enhancedHuetlvValue = new UIntType(enhancedHue);
      elements.add(new StructElement(enhancedHueFieldID, enhancedHuetlvValue));

      final long saturationFieldID = 1L;
      BaseTLVType saturationtlvValue = new UIntType(saturation);
      elements.add(new StructElement(saturationFieldID, saturationtlvValue));

      final long transitionTimeFieldID = 2L;
      BaseTLVType transitionTimetlvValue = new UIntType(transitionTime);
      elements.add(new StructElement(transitionTimeFieldID, transitionTimetlvValue));

      final long optionsMaskFieldID = 3L;
      BaseTLVType optionsMasktlvValue = new UIntType(optionsMask);
      elements.add(new StructElement(optionsMaskFieldID, optionsMasktlvValue));

      final long optionsOverrideFieldID = 4L;
      BaseTLVType optionsOverridetlvValue = new UIntType(optionsOverride);
      elements.add(new StructElement(optionsOverrideFieldID, optionsOverridetlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void colorLoopSet(DefaultClusterCallback callback, Integer updateFlags, Integer action, Integer direction, Integer time, Integer startHue, Integer optionsMask, Integer optionsOverride) {
      colorLoopSet(callback, updateFlags, action, direction, time, startHue, optionsMask, optionsOverride, 0);
    }

    public void colorLoopSet(DefaultClusterCallback callback, Integer updateFlags, Integer action, Integer direction, Integer time, Integer startHue, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 68L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long updateFlagsFieldID = 0L;
      BaseTLVType updateFlagstlvValue = new UIntType(updateFlags);
      elements.add(new StructElement(updateFlagsFieldID, updateFlagstlvValue));

      final long actionFieldID = 1L;
      BaseTLVType actiontlvValue = new UIntType(action);
      elements.add(new StructElement(actionFieldID, actiontlvValue));

      final long directionFieldID = 2L;
      BaseTLVType directiontlvValue = new UIntType(direction);
      elements.add(new StructElement(directionFieldID, directiontlvValue));

      final long timeFieldID = 3L;
      BaseTLVType timetlvValue = new UIntType(time);
      elements.add(new StructElement(timeFieldID, timetlvValue));

      final long startHueFieldID = 4L;
      BaseTLVType startHuetlvValue = new UIntType(startHue);
      elements.add(new StructElement(startHueFieldID, startHuetlvValue));

      final long optionsMaskFieldID = 5L;
      BaseTLVType optionsMasktlvValue = new UIntType(optionsMask);
      elements.add(new StructElement(optionsMaskFieldID, optionsMasktlvValue));

      final long optionsOverrideFieldID = 6L;
      BaseTLVType optionsOverridetlvValue = new UIntType(optionsOverride);
      elements.add(new StructElement(optionsOverrideFieldID, optionsOverridetlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void stopMoveStep(DefaultClusterCallback callback, Integer optionsMask, Integer optionsOverride) {
      stopMoveStep(callback, optionsMask, optionsOverride, 0);
    }

    public void stopMoveStep(DefaultClusterCallback callback, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 71L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long optionsMaskFieldID = 0L;
      BaseTLVType optionsMasktlvValue = new UIntType(optionsMask);
      elements.add(new StructElement(optionsMaskFieldID, optionsMasktlvValue));

      final long optionsOverrideFieldID = 1L;
      BaseTLVType optionsOverridetlvValue = new UIntType(optionsOverride);
      elements.add(new StructElement(optionsOverrideFieldID, optionsOverridetlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void moveColorTemperature(DefaultClusterCallback callback, Integer moveMode, Integer rate, Integer colorTemperatureMinimumMireds, Integer colorTemperatureMaximumMireds, Integer optionsMask, Integer optionsOverride) {
      moveColorTemperature(callback, moveMode, rate, colorTemperatureMinimumMireds, colorTemperatureMaximumMireds, optionsMask, optionsOverride, 0);
    }

    public void moveColorTemperature(DefaultClusterCallback callback, Integer moveMode, Integer rate, Integer colorTemperatureMinimumMireds, Integer colorTemperatureMaximumMireds, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 75L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long moveModeFieldID = 0L;
      BaseTLVType moveModetlvValue = new UIntType(moveMode);
      elements.add(new StructElement(moveModeFieldID, moveModetlvValue));

      final long rateFieldID = 1L;
      BaseTLVType ratetlvValue = new UIntType(rate);
      elements.add(new StructElement(rateFieldID, ratetlvValue));

      final long colorTemperatureMinimumMiredsFieldID = 2L;
      BaseTLVType colorTemperatureMinimumMiredstlvValue = new UIntType(colorTemperatureMinimumMireds);
      elements.add(new StructElement(colorTemperatureMinimumMiredsFieldID, colorTemperatureMinimumMiredstlvValue));

      final long colorTemperatureMaximumMiredsFieldID = 3L;
      BaseTLVType colorTemperatureMaximumMiredstlvValue = new UIntType(colorTemperatureMaximumMireds);
      elements.add(new StructElement(colorTemperatureMaximumMiredsFieldID, colorTemperatureMaximumMiredstlvValue));

      final long optionsMaskFieldID = 4L;
      BaseTLVType optionsMasktlvValue = new UIntType(optionsMask);
      elements.add(new StructElement(optionsMaskFieldID, optionsMasktlvValue));

      final long optionsOverrideFieldID = 5L;
      BaseTLVType optionsOverridetlvValue = new UIntType(optionsOverride);
      elements.add(new StructElement(optionsOverrideFieldID, optionsOverridetlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void stepColorTemperature(DefaultClusterCallback callback, Integer stepMode, Integer stepSize, Integer transitionTime, Integer colorTemperatureMinimumMireds, Integer colorTemperatureMaximumMireds, Integer optionsMask, Integer optionsOverride) {
      stepColorTemperature(callback, stepMode, stepSize, transitionTime, colorTemperatureMinimumMireds, colorTemperatureMaximumMireds, optionsMask, optionsOverride, 0);
    }

    public void stepColorTemperature(DefaultClusterCallback callback, Integer stepMode, Integer stepSize, Integer transitionTime, Integer colorTemperatureMinimumMireds, Integer colorTemperatureMaximumMireds, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 76L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long stepModeFieldID = 0L;
      BaseTLVType stepModetlvValue = new UIntType(stepMode);
      elements.add(new StructElement(stepModeFieldID, stepModetlvValue));

      final long stepSizeFieldID = 1L;
      BaseTLVType stepSizetlvValue = new UIntType(stepSize);
      elements.add(new StructElement(stepSizeFieldID, stepSizetlvValue));

      final long transitionTimeFieldID = 2L;
      BaseTLVType transitionTimetlvValue = new UIntType(transitionTime);
      elements.add(new StructElement(transitionTimeFieldID, transitionTimetlvValue));

      final long colorTemperatureMinimumMiredsFieldID = 3L;
      BaseTLVType colorTemperatureMinimumMiredstlvValue = new UIntType(colorTemperatureMinimumMireds);
      elements.add(new StructElement(colorTemperatureMinimumMiredsFieldID, colorTemperatureMinimumMiredstlvValue));

      final long colorTemperatureMaximumMiredsFieldID = 4L;
      BaseTLVType colorTemperatureMaximumMiredstlvValue = new UIntType(colorTemperatureMaximumMireds);
      elements.add(new StructElement(colorTemperatureMaximumMiredsFieldID, colorTemperatureMaximumMiredstlvValue));

      final long optionsMaskFieldID = 5L;
      BaseTLVType optionsMasktlvValue = new UIntType(optionsMask);
      elements.add(new StructElement(optionsMaskFieldID, optionsMasktlvValue));

      final long optionsOverrideFieldID = 6L;
      BaseTLVType optionsOverridetlvValue = new UIntType(optionsOverride);
      elements.add(new StructElement(optionsOverrideFieldID, optionsOverridetlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public interface NumberOfPrimariesAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface Primary1IntensityAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface Primary2IntensityAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface Primary3IntensityAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface Primary4IntensityAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface Primary5IntensityAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface Primary6IntensityAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface ColorPointRIntensityAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface ColorPointGIntensityAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface ColorPointBIntensityAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface StartUpColorTemperatureMiredsAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readCurrentHueAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeCurrentHueAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readCurrentSaturationAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeCurrentSaturationAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readRemainingTimeAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeRemainingTimeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readCurrentXAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeCurrentXAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readCurrentYAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeCurrentYAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readDriftCompensationAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeDriftCompensationAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readCompensationTextAttribute(
        CharStringAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeCompensationTextAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readColorTemperatureMiredsAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeColorTemperatureMiredsAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readColorModeAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeColorModeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readOptionsAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 15L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeOptionsAttribute(DefaultClusterCallback callback, Integer value) {
      writeOptionsAttribute(callback, value, 0);
    }

    public void writeOptionsAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 15L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeOptionsAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 15L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readNumberOfPrimariesAttribute(
        NumberOfPrimariesAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeNumberOfPrimariesAttribute(
        NumberOfPrimariesAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readPrimary1XAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 17L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribePrimary1XAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 17L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readPrimary1YAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 18L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribePrimary1YAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 18L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readPrimary1IntensityAttribute(
        Primary1IntensityAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 19L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribePrimary1IntensityAttribute(
        Primary1IntensityAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 19L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readPrimary2XAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 21L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribePrimary2XAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 21L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readPrimary2YAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 22L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribePrimary2YAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 22L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readPrimary2IntensityAttribute(
        Primary2IntensityAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 23L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribePrimary2IntensityAttribute(
        Primary2IntensityAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 23L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readPrimary3XAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 25L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribePrimary3XAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 25L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readPrimary3YAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 26L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribePrimary3YAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 26L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readPrimary3IntensityAttribute(
        Primary3IntensityAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 27L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribePrimary3IntensityAttribute(
        Primary3IntensityAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 27L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readPrimary4XAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 32L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribePrimary4XAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 32L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readPrimary4YAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 33L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribePrimary4YAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 33L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readPrimary4IntensityAttribute(
        Primary4IntensityAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 34L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribePrimary4IntensityAttribute(
        Primary4IntensityAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 34L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readPrimary5XAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 36L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribePrimary5XAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 36L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readPrimary5YAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 37L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribePrimary5YAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 37L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readPrimary5IntensityAttribute(
        Primary5IntensityAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 38L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribePrimary5IntensityAttribute(
        Primary5IntensityAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 38L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readPrimary6XAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 40L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribePrimary6XAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 40L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readPrimary6YAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 41L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribePrimary6YAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 41L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readPrimary6IntensityAttribute(
        Primary6IntensityAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 42L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribePrimary6IntensityAttribute(
        Primary6IntensityAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 42L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readWhitePointXAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 48L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeWhitePointXAttribute(DefaultClusterCallback callback, Integer value) {
      writeWhitePointXAttribute(callback, value, 0);
    }

    public void writeWhitePointXAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 48L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeWhitePointXAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 48L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readWhitePointYAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 49L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeWhitePointYAttribute(DefaultClusterCallback callback, Integer value) {
      writeWhitePointYAttribute(callback, value, 0);
    }

    public void writeWhitePointYAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 49L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeWhitePointYAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 49L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readColorPointRXAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 50L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeColorPointRXAttribute(DefaultClusterCallback callback, Integer value) {
      writeColorPointRXAttribute(callback, value, 0);
    }

    public void writeColorPointRXAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 50L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeColorPointRXAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 50L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readColorPointRYAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 51L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeColorPointRYAttribute(DefaultClusterCallback callback, Integer value) {
      writeColorPointRYAttribute(callback, value, 0);
    }

    public void writeColorPointRYAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 51L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeColorPointRYAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 51L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readColorPointRIntensityAttribute(
        ColorPointRIntensityAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 52L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeColorPointRIntensityAttribute(DefaultClusterCallback callback, Integer value) {
      writeColorPointRIntensityAttribute(callback, value, 0);
    }

    public void writeColorPointRIntensityAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 52L;
      
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeColorPointRIntensityAttribute(
        ColorPointRIntensityAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 52L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readColorPointGXAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 54L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeColorPointGXAttribute(DefaultClusterCallback callback, Integer value) {
      writeColorPointGXAttribute(callback, value, 0);
    }

    public void writeColorPointGXAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 54L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeColorPointGXAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 54L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readColorPointGYAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 55L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeColorPointGYAttribute(DefaultClusterCallback callback, Integer value) {
      writeColorPointGYAttribute(callback, value, 0);
    }

    public void writeColorPointGYAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 55L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeColorPointGYAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 55L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readColorPointGIntensityAttribute(
        ColorPointGIntensityAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 56L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeColorPointGIntensityAttribute(DefaultClusterCallback callback, Integer value) {
      writeColorPointGIntensityAttribute(callback, value, 0);
    }

    public void writeColorPointGIntensityAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 56L;
      
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeColorPointGIntensityAttribute(
        ColorPointGIntensityAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 56L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readColorPointBXAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 58L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeColorPointBXAttribute(DefaultClusterCallback callback, Integer value) {
      writeColorPointBXAttribute(callback, value, 0);
    }

    public void writeColorPointBXAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 58L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeColorPointBXAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 58L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readColorPointBYAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 59L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeColorPointBYAttribute(DefaultClusterCallback callback, Integer value) {
      writeColorPointBYAttribute(callback, value, 0);
    }

    public void writeColorPointBYAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 59L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeColorPointBYAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 59L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readColorPointBIntensityAttribute(
        ColorPointBIntensityAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 60L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeColorPointBIntensityAttribute(DefaultClusterCallback callback, Integer value) {
      writeColorPointBIntensityAttribute(callback, value, 0);
    }

    public void writeColorPointBIntensityAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 60L;
      
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeColorPointBIntensityAttribute(
        ColorPointBIntensityAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 60L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEnhancedCurrentHueAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16384L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEnhancedCurrentHueAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16384L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEnhancedColorModeAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16385L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEnhancedColorModeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16385L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readColorLoopActiveAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16386L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeColorLoopActiveAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16386L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readColorLoopDirectionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16387L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeColorLoopDirectionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16387L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readColorLoopTimeAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16388L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeColorLoopTimeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16388L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readColorLoopStartEnhancedHueAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16389L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeColorLoopStartEnhancedHueAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16389L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readColorLoopStoredEnhancedHueAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16390L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeColorLoopStoredEnhancedHueAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16390L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readColorCapabilitiesAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16394L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeColorCapabilitiesAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16394L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readColorTempPhysicalMinMiredsAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16395L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeColorTempPhysicalMinMiredsAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16395L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readColorTempPhysicalMaxMiredsAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16396L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeColorTempPhysicalMaxMiredsAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16396L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readCoupleColorTempToLevelMinMiredsAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16397L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeCoupleColorTempToLevelMinMiredsAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16397L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readStartUpColorTemperatureMiredsAttribute(
        StartUpColorTemperatureMiredsAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16400L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeStartUpColorTemperatureMiredsAttribute(DefaultClusterCallback callback, Integer value) {
      writeStartUpColorTemperatureMiredsAttribute(callback, value, 0);
    }

    public void writeStartUpColorTemperatureMiredsAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16400L;
      
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeStartUpColorTemperatureMiredsAttribute(
        StartUpColorTemperatureMiredsAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16400L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class BallastConfigurationCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 769L;

    public BallastConfigurationCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface IntrinsicBallastFactorAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface BallastFactorAdjustmentAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface LampRatedHoursAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface LampBurnHoursAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface LampBurnHoursTripPointAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readPhysicalMinLevelAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribePhysicalMinLevelAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readPhysicalMaxLevelAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribePhysicalMaxLevelAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readBallastStatusAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeBallastStatusAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMinLevelAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeMinLevelAttribute(DefaultClusterCallback callback, Integer value) {
      writeMinLevelAttribute(callback, value, 0);
    }

    public void writeMinLevelAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeMinLevelAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMaxLevelAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 17L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeMaxLevelAttribute(DefaultClusterCallback callback, Integer value) {
      writeMaxLevelAttribute(callback, value, 0);
    }

    public void writeMaxLevelAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 17L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeMaxLevelAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 17L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readIntrinsicBallastFactorAttribute(
        IntrinsicBallastFactorAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 20L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeIntrinsicBallastFactorAttribute(DefaultClusterCallback callback, Integer value) {
      writeIntrinsicBallastFactorAttribute(callback, value, 0);
    }

    public void writeIntrinsicBallastFactorAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 20L;
      
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeIntrinsicBallastFactorAttribute(
        IntrinsicBallastFactorAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 20L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readBallastFactorAdjustmentAttribute(
        BallastFactorAdjustmentAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 21L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeBallastFactorAdjustmentAttribute(DefaultClusterCallback callback, Integer value) {
      writeBallastFactorAdjustmentAttribute(callback, value, 0);
    }

    public void writeBallastFactorAdjustmentAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 21L;
      
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeBallastFactorAdjustmentAttribute(
        BallastFactorAdjustmentAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 21L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readLampQuantityAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 32L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeLampQuantityAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 32L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readLampTypeAttribute(
        CharStringAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 48L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeLampTypeAttribute(DefaultClusterCallback callback, String value) {
      writeLampTypeAttribute(callback, value, 0);
    }

    public void writeLampTypeAttribute(DefaultClusterCallback callback, String value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 48L;
      
      BaseTLVType tlvValue = new StringType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeLampTypeAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 48L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readLampManufacturerAttribute(
        CharStringAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 49L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeLampManufacturerAttribute(DefaultClusterCallback callback, String value) {
      writeLampManufacturerAttribute(callback, value, 0);
    }

    public void writeLampManufacturerAttribute(DefaultClusterCallback callback, String value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 49L;
      
      BaseTLVType tlvValue = new StringType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeLampManufacturerAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 49L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readLampRatedHoursAttribute(
        LampRatedHoursAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 50L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeLampRatedHoursAttribute(DefaultClusterCallback callback, Long value) {
      writeLampRatedHoursAttribute(callback, value, 0);
    }

    public void writeLampRatedHoursAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 50L;
      
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeLampRatedHoursAttribute(
        LampRatedHoursAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 50L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readLampBurnHoursAttribute(
        LampBurnHoursAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 51L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeLampBurnHoursAttribute(DefaultClusterCallback callback, Long value) {
      writeLampBurnHoursAttribute(callback, value, 0);
    }

    public void writeLampBurnHoursAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 51L;
      
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeLampBurnHoursAttribute(
        LampBurnHoursAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 51L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readLampAlarmModeAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 52L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeLampAlarmModeAttribute(DefaultClusterCallback callback, Integer value) {
      writeLampAlarmModeAttribute(callback, value, 0);
    }

    public void writeLampAlarmModeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 52L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeLampAlarmModeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 52L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readLampBurnHoursTripPointAttribute(
        LampBurnHoursTripPointAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 53L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeLampBurnHoursTripPointAttribute(DefaultClusterCallback callback, Long value) {
      writeLampBurnHoursTripPointAttribute(callback, value, 0);
    }

    public void writeLampBurnHoursTripPointAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 53L;
      
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeLampBurnHoursTripPointAttribute(
        LampBurnHoursTripPointAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 53L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class IlluminanceMeasurementCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1024L;

    public IlluminanceMeasurementCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface MeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface MinMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface MaxMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface LightSensorTypeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readToleranceAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeToleranceAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readLightSensorTypeAttribute(
        LightSensorTypeAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeLightSensorTypeAttribute(
        LightSensorTypeAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class TemperatureMeasurementCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1026L;

    public TemperatureMeasurementCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface MeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface MinMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface MaxMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readToleranceAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeToleranceAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class PressureMeasurementCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1027L;

    public PressureMeasurementCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface MeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface MinMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface MaxMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface ScaledValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface MinScaledValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface MaxScaledValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readToleranceAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeToleranceAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readScaledValueAttribute(
        ScaledValueAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeScaledValueAttribute(
        ScaledValueAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMinScaledValueAttribute(
        MinScaledValueAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 17L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMinScaledValueAttribute(
        MinScaledValueAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 17L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMaxScaledValueAttribute(
        MaxScaledValueAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 18L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMaxScaledValueAttribute(
        MaxScaledValueAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 18L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readScaledToleranceAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 19L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeScaledToleranceAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 19L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readScaleAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 20L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeScaleAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 20L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class FlowMeasurementCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1028L;

    public FlowMeasurementCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface MeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface MinMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface MaxMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readToleranceAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeToleranceAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class RelativeHumidityMeasurementCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1029L;

    public RelativeHumidityMeasurementCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface MeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface MinMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface MaxMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readToleranceAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeToleranceAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class OccupancySensingCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1030L;

    public OccupancySensingCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readOccupancyAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeOccupancyAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readOccupancySensorTypeAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeOccupancySensorTypeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readOccupancySensorTypeBitmapAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeOccupancySensorTypeBitmapAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readPIROccupiedToUnoccupiedDelayAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writePIROccupiedToUnoccupiedDelayAttribute(DefaultClusterCallback callback, Integer value) {
      writePIROccupiedToUnoccupiedDelayAttribute(callback, value, 0);
    }

    public void writePIROccupiedToUnoccupiedDelayAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribePIROccupiedToUnoccupiedDelayAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readPIRUnoccupiedToOccupiedDelayAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 17L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writePIRUnoccupiedToOccupiedDelayAttribute(DefaultClusterCallback callback, Integer value) {
      writePIRUnoccupiedToOccupiedDelayAttribute(callback, value, 0);
    }

    public void writePIRUnoccupiedToOccupiedDelayAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 17L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribePIRUnoccupiedToOccupiedDelayAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 17L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readPIRUnoccupiedToOccupiedThresholdAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 18L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writePIRUnoccupiedToOccupiedThresholdAttribute(DefaultClusterCallback callback, Integer value) {
      writePIRUnoccupiedToOccupiedThresholdAttribute(callback, value, 0);
    }

    public void writePIRUnoccupiedToOccupiedThresholdAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 18L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribePIRUnoccupiedToOccupiedThresholdAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 18L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readUltrasonicOccupiedToUnoccupiedDelayAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 32L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeUltrasonicOccupiedToUnoccupiedDelayAttribute(DefaultClusterCallback callback, Integer value) {
      writeUltrasonicOccupiedToUnoccupiedDelayAttribute(callback, value, 0);
    }

    public void writeUltrasonicOccupiedToUnoccupiedDelayAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 32L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeUltrasonicOccupiedToUnoccupiedDelayAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 32L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readUltrasonicUnoccupiedToOccupiedDelayAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 33L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeUltrasonicUnoccupiedToOccupiedDelayAttribute(DefaultClusterCallback callback, Integer value) {
      writeUltrasonicUnoccupiedToOccupiedDelayAttribute(callback, value, 0);
    }

    public void writeUltrasonicUnoccupiedToOccupiedDelayAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 33L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeUltrasonicUnoccupiedToOccupiedDelayAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 33L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readUltrasonicUnoccupiedToOccupiedThresholdAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 34L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeUltrasonicUnoccupiedToOccupiedThresholdAttribute(DefaultClusterCallback callback, Integer value) {
      writeUltrasonicUnoccupiedToOccupiedThresholdAttribute(callback, value, 0);
    }

    public void writeUltrasonicUnoccupiedToOccupiedThresholdAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 34L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeUltrasonicUnoccupiedToOccupiedThresholdAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 34L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readPhysicalContactOccupiedToUnoccupiedDelayAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 48L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writePhysicalContactOccupiedToUnoccupiedDelayAttribute(DefaultClusterCallback callback, Integer value) {
      writePhysicalContactOccupiedToUnoccupiedDelayAttribute(callback, value, 0);
    }

    public void writePhysicalContactOccupiedToUnoccupiedDelayAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 48L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribePhysicalContactOccupiedToUnoccupiedDelayAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 48L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readPhysicalContactUnoccupiedToOccupiedDelayAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 49L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writePhysicalContactUnoccupiedToOccupiedDelayAttribute(DefaultClusterCallback callback, Integer value) {
      writePhysicalContactUnoccupiedToOccupiedDelayAttribute(callback, value, 0);
    }

    public void writePhysicalContactUnoccupiedToOccupiedDelayAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 49L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribePhysicalContactUnoccupiedToOccupiedDelayAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 49L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readPhysicalContactUnoccupiedToOccupiedThresholdAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 50L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writePhysicalContactUnoccupiedToOccupiedThresholdAttribute(DefaultClusterCallback callback, Integer value) {
      writePhysicalContactUnoccupiedToOccupiedThresholdAttribute(callback, value, 0);
    }

    public void writePhysicalContactUnoccupiedToOccupiedThresholdAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 50L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribePhysicalContactUnoccupiedToOccupiedThresholdAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 50L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class CarbonMonoxideConcentrationMeasurementCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1036L;

    public CarbonMonoxideConcentrationMeasurementCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface MeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface MinMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface MaxMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface PeakMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface AverageMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readPeakMeasuredValueAttribute(
        PeakMeasuredValueAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribePeakMeasuredValueAttribute(
        PeakMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readPeakMeasuredValueWindowAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribePeakMeasuredValueWindowAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAverageMeasuredValueAttribute(
        AverageMeasuredValueAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAverageMeasuredValueAttribute(
        AverageMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAverageMeasuredValueWindowAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAverageMeasuredValueWindowAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readUncertaintyAttribute(
        FloatAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeUncertaintyAttribute(
        FloatAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMeasurementUnitAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMeasurementUnitAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMeasurementMediumAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 9L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMeasurementMediumAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 9L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readLevelValueAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 10L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeLevelValueAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 10L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class CarbonDioxideConcentrationMeasurementCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1037L;

    public CarbonDioxideConcentrationMeasurementCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface MeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface MinMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface MaxMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface PeakMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface AverageMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readPeakMeasuredValueAttribute(
        PeakMeasuredValueAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribePeakMeasuredValueAttribute(
        PeakMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readPeakMeasuredValueWindowAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribePeakMeasuredValueWindowAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAverageMeasuredValueAttribute(
        AverageMeasuredValueAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAverageMeasuredValueAttribute(
        AverageMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAverageMeasuredValueWindowAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAverageMeasuredValueWindowAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readUncertaintyAttribute(
        FloatAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeUncertaintyAttribute(
        FloatAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMeasurementUnitAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMeasurementUnitAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMeasurementMediumAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 9L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMeasurementMediumAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 9L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readLevelValueAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 10L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeLevelValueAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 10L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class NitrogenDioxideConcentrationMeasurementCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1043L;

    public NitrogenDioxideConcentrationMeasurementCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface MeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface MinMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface MaxMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface PeakMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface AverageMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readPeakMeasuredValueAttribute(
        PeakMeasuredValueAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribePeakMeasuredValueAttribute(
        PeakMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readPeakMeasuredValueWindowAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribePeakMeasuredValueWindowAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAverageMeasuredValueAttribute(
        AverageMeasuredValueAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAverageMeasuredValueAttribute(
        AverageMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAverageMeasuredValueWindowAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAverageMeasuredValueWindowAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readUncertaintyAttribute(
        FloatAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeUncertaintyAttribute(
        FloatAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMeasurementUnitAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMeasurementUnitAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMeasurementMediumAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 9L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMeasurementMediumAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 9L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readLevelValueAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 10L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeLevelValueAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 10L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class OzoneConcentrationMeasurementCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1045L;

    public OzoneConcentrationMeasurementCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface MeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface MinMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface MaxMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface PeakMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface AverageMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readPeakMeasuredValueAttribute(
        PeakMeasuredValueAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribePeakMeasuredValueAttribute(
        PeakMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readPeakMeasuredValueWindowAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribePeakMeasuredValueWindowAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAverageMeasuredValueAttribute(
        AverageMeasuredValueAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAverageMeasuredValueAttribute(
        AverageMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAverageMeasuredValueWindowAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAverageMeasuredValueWindowAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readUncertaintyAttribute(
        FloatAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeUncertaintyAttribute(
        FloatAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMeasurementUnitAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMeasurementUnitAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMeasurementMediumAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 9L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMeasurementMediumAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 9L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readLevelValueAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 10L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeLevelValueAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 10L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class Pm25ConcentrationMeasurementCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1066L;

    public Pm25ConcentrationMeasurementCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface MeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface MinMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface MaxMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface PeakMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface AverageMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readPeakMeasuredValueAttribute(
        PeakMeasuredValueAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribePeakMeasuredValueAttribute(
        PeakMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readPeakMeasuredValueWindowAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribePeakMeasuredValueWindowAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAverageMeasuredValueAttribute(
        AverageMeasuredValueAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAverageMeasuredValueAttribute(
        AverageMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAverageMeasuredValueWindowAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAverageMeasuredValueWindowAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readUncertaintyAttribute(
        FloatAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeUncertaintyAttribute(
        FloatAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMeasurementUnitAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMeasurementUnitAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMeasurementMediumAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 9L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMeasurementMediumAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 9L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readLevelValueAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 10L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeLevelValueAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 10L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class FormaldehydeConcentrationMeasurementCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1067L;

    public FormaldehydeConcentrationMeasurementCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface MeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface MinMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface MaxMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface PeakMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface AverageMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readPeakMeasuredValueAttribute(
        PeakMeasuredValueAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribePeakMeasuredValueAttribute(
        PeakMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readPeakMeasuredValueWindowAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribePeakMeasuredValueWindowAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAverageMeasuredValueAttribute(
        AverageMeasuredValueAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAverageMeasuredValueAttribute(
        AverageMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAverageMeasuredValueWindowAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAverageMeasuredValueWindowAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readUncertaintyAttribute(
        FloatAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeUncertaintyAttribute(
        FloatAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMeasurementUnitAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMeasurementUnitAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMeasurementMediumAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 9L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMeasurementMediumAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 9L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readLevelValueAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 10L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeLevelValueAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 10L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class Pm1ConcentrationMeasurementCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1068L;

    public Pm1ConcentrationMeasurementCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface MeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface MinMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface MaxMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface PeakMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface AverageMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readPeakMeasuredValueAttribute(
        PeakMeasuredValueAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribePeakMeasuredValueAttribute(
        PeakMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readPeakMeasuredValueWindowAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribePeakMeasuredValueWindowAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAverageMeasuredValueAttribute(
        AverageMeasuredValueAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAverageMeasuredValueAttribute(
        AverageMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAverageMeasuredValueWindowAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAverageMeasuredValueWindowAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readUncertaintyAttribute(
        FloatAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeUncertaintyAttribute(
        FloatAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMeasurementUnitAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMeasurementUnitAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMeasurementMediumAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 9L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMeasurementMediumAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 9L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readLevelValueAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 10L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeLevelValueAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 10L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class Pm10ConcentrationMeasurementCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1069L;

    public Pm10ConcentrationMeasurementCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface MeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface MinMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface MaxMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface PeakMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface AverageMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readPeakMeasuredValueAttribute(
        PeakMeasuredValueAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribePeakMeasuredValueAttribute(
        PeakMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readPeakMeasuredValueWindowAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribePeakMeasuredValueWindowAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAverageMeasuredValueAttribute(
        AverageMeasuredValueAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAverageMeasuredValueAttribute(
        AverageMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAverageMeasuredValueWindowAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAverageMeasuredValueWindowAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readUncertaintyAttribute(
        FloatAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeUncertaintyAttribute(
        FloatAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMeasurementUnitAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMeasurementUnitAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMeasurementMediumAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 9L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMeasurementMediumAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 9L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readLevelValueAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 10L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeLevelValueAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 10L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class TotalVolatileOrganicCompoundsConcentrationMeasurementCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1070L;

    public TotalVolatileOrganicCompoundsConcentrationMeasurementCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface MeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface MinMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface MaxMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface PeakMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface AverageMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readPeakMeasuredValueAttribute(
        PeakMeasuredValueAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribePeakMeasuredValueAttribute(
        PeakMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readPeakMeasuredValueWindowAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribePeakMeasuredValueWindowAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAverageMeasuredValueAttribute(
        AverageMeasuredValueAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAverageMeasuredValueAttribute(
        AverageMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAverageMeasuredValueWindowAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAverageMeasuredValueWindowAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readUncertaintyAttribute(
        FloatAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeUncertaintyAttribute(
        FloatAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMeasurementUnitAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMeasurementUnitAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMeasurementMediumAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 9L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMeasurementMediumAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 9L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readLevelValueAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 10L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeLevelValueAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 10L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class RadonConcentrationMeasurementCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1071L;

    public RadonConcentrationMeasurementCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface MeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface MinMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface MaxMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface PeakMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface AverageMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readPeakMeasuredValueAttribute(
        PeakMeasuredValueAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribePeakMeasuredValueAttribute(
        PeakMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readPeakMeasuredValueWindowAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribePeakMeasuredValueWindowAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAverageMeasuredValueAttribute(
        AverageMeasuredValueAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAverageMeasuredValueAttribute(
        AverageMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAverageMeasuredValueWindowAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAverageMeasuredValueWindowAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readUncertaintyAttribute(
        FloatAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeUncertaintyAttribute(
        FloatAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMeasurementUnitAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMeasurementUnitAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMeasurementMediumAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 9L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMeasurementMediumAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 9L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readLevelValueAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 10L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeLevelValueAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 10L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class WakeOnLanCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1283L;

    public WakeOnLanCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readMACAddressAttribute(
        CharStringAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMACAddressAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class ChannelCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1284L;

    public ChannelCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void changeChannel(ChangeChannelResponseCallback callback, String match) {
      changeChannel(callback, match, 0);
    }

    public void changeChannel(ChangeChannelResponseCallback callback, String match, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long matchFieldID = 0L;
      BaseTLVType matchtlvValue = new StringType(match);
      elements.add(new StructElement(matchFieldID, matchtlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long dataFieldID = 1L;
          Optional<String> data = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == dataFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                data = Optional.of(castingValue.value(String.class));
              }
            }
          }
          callback.onSuccess(status, data);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void changeChannelByNumber(DefaultClusterCallback callback, Integer majorNumber, Integer minorNumber) {
      changeChannelByNumber(callback, majorNumber, minorNumber, 0);
    }

    public void changeChannelByNumber(DefaultClusterCallback callback, Integer majorNumber, Integer minorNumber, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 2L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long majorNumberFieldID = 0L;
      BaseTLVType majorNumbertlvValue = new UIntType(majorNumber);
      elements.add(new StructElement(majorNumberFieldID, majorNumbertlvValue));

      final long minorNumberFieldID = 1L;
      BaseTLVType minorNumbertlvValue = new UIntType(minorNumber);
      elements.add(new StructElement(minorNumberFieldID, minorNumbertlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void skipChannel(DefaultClusterCallback callback, Integer count) {
      skipChannel(callback, count, 0);
    }

    public void skipChannel(DefaultClusterCallback callback, Integer count, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 3L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long countFieldID = 0L;
      BaseTLVType counttlvValue = new IntType(count);
      elements.add(new StructElement(countFieldID, counttlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public interface ChangeChannelResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer status, Optional<String> data);
    }

    public interface ChannelListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.ChannelClusterChannelInfoStruct> value);
    }

    public interface LineupAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable ChipStructs.ChannelClusterLineupInfoStruct value);
    }

    public interface CurrentChannelAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable ChipStructs.ChannelClusterChannelInfoStruct value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readChannelListAttribute(
        ChannelListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.ChannelClusterChannelInfoStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeChannelListAttribute(
        ChannelListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.ChannelClusterChannelInfoStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readLineupAttribute(
        LineupAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable ChipStructs.ChannelClusterLineupInfoStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeLineupAttribute(
        LineupAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable ChipStructs.ChannelClusterLineupInfoStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readCurrentChannelAttribute(
        CurrentChannelAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable ChipStructs.ChannelClusterChannelInfoStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeCurrentChannelAttribute(
        CurrentChannelAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable ChipStructs.ChannelClusterChannelInfoStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class TargetNavigatorCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1285L;

    public TargetNavigatorCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void navigateTarget(NavigateTargetResponseCallback callback, Integer target, Optional<String> data) {
      navigateTarget(callback, target, data, 0);
    }

    public void navigateTarget(NavigateTargetResponseCallback callback, Integer target, Optional<String> data, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long targetFieldID = 0L;
      BaseTLVType targettlvValue = new UIntType(target);
      elements.add(new StructElement(targetFieldID, targettlvValue));

      final long dataFieldID = 1L;
      BaseTLVType datatlvValue = data.<BaseTLVType>map((nonOptionaldata) -> new StringType(nonOptionaldata)).orElse(new EmptyType());
      elements.add(new StructElement(dataFieldID, datatlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long dataFieldID = 1L;
          Optional<String> data = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == dataFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                data = Optional.of(castingValue.value(String.class));
              }
            }
          }
          callback.onSuccess(status, data);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public interface NavigateTargetResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer status, Optional<String> data);
    }

    public interface TargetListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.TargetNavigatorClusterTargetInfoStruct> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readTargetListAttribute(
        TargetListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.TargetNavigatorClusterTargetInfoStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeTargetListAttribute(
        TargetListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.TargetNavigatorClusterTargetInfoStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readCurrentTargetAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeCurrentTargetAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class MediaPlaybackCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1286L;

    public MediaPlaybackCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void play(PlaybackResponseCallback callback) {
      play(callback, 0);
    }

    public void play(PlaybackResponseCallback callback, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long dataFieldID = 1L;
          Optional<String> data = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == dataFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                data = Optional.of(castingValue.value(String.class));
              }
            }
          }
          callback.onSuccess(status, data);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void pause(PlaybackResponseCallback callback) {
      pause(callback, 0);
    }

    public void pause(PlaybackResponseCallback callback, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 1L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long dataFieldID = 1L;
          Optional<String> data = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == dataFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                data = Optional.of(castingValue.value(String.class));
              }
            }
          }
          callback.onSuccess(status, data);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void stop(PlaybackResponseCallback callback) {
      stop(callback, 0);
    }

    public void stop(PlaybackResponseCallback callback, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 2L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long dataFieldID = 1L;
          Optional<String> data = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == dataFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                data = Optional.of(castingValue.value(String.class));
              }
            }
          }
          callback.onSuccess(status, data);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void startOver(PlaybackResponseCallback callback) {
      startOver(callback, 0);
    }

    public void startOver(PlaybackResponseCallback callback, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 3L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long dataFieldID = 1L;
          Optional<String> data = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == dataFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                data = Optional.of(castingValue.value(String.class));
              }
            }
          }
          callback.onSuccess(status, data);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void previous(PlaybackResponseCallback callback) {
      previous(callback, 0);
    }

    public void previous(PlaybackResponseCallback callback, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 4L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long dataFieldID = 1L;
          Optional<String> data = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == dataFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                data = Optional.of(castingValue.value(String.class));
              }
            }
          }
          callback.onSuccess(status, data);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void next(PlaybackResponseCallback callback) {
      next(callback, 0);
    }

    public void next(PlaybackResponseCallback callback, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 5L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long dataFieldID = 1L;
          Optional<String> data = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == dataFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                data = Optional.of(castingValue.value(String.class));
              }
            }
          }
          callback.onSuccess(status, data);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void rewind(PlaybackResponseCallback callback) {
      rewind(callback, 0);
    }

    public void rewind(PlaybackResponseCallback callback, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 6L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long dataFieldID = 1L;
          Optional<String> data = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == dataFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                data = Optional.of(castingValue.value(String.class));
              }
            }
          }
          callback.onSuccess(status, data);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void fastForward(PlaybackResponseCallback callback) {
      fastForward(callback, 0);
    }

    public void fastForward(PlaybackResponseCallback callback, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 7L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long dataFieldID = 1L;
          Optional<String> data = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == dataFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                data = Optional.of(castingValue.value(String.class));
              }
            }
          }
          callback.onSuccess(status, data);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void skipForward(PlaybackResponseCallback callback, Long deltaPositionMilliseconds) {
      skipForward(callback, deltaPositionMilliseconds, 0);
    }

    public void skipForward(PlaybackResponseCallback callback, Long deltaPositionMilliseconds, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 8L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long deltaPositionMillisecondsFieldID = 0L;
      BaseTLVType deltaPositionMillisecondstlvValue = new UIntType(deltaPositionMilliseconds);
      elements.add(new StructElement(deltaPositionMillisecondsFieldID, deltaPositionMillisecondstlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long dataFieldID = 1L;
          Optional<String> data = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == dataFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                data = Optional.of(castingValue.value(String.class));
              }
            }
          }
          callback.onSuccess(status, data);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void skipBackward(PlaybackResponseCallback callback, Long deltaPositionMilliseconds) {
      skipBackward(callback, deltaPositionMilliseconds, 0);
    }

    public void skipBackward(PlaybackResponseCallback callback, Long deltaPositionMilliseconds, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 9L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long deltaPositionMillisecondsFieldID = 0L;
      BaseTLVType deltaPositionMillisecondstlvValue = new UIntType(deltaPositionMilliseconds);
      elements.add(new StructElement(deltaPositionMillisecondsFieldID, deltaPositionMillisecondstlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long dataFieldID = 1L;
          Optional<String> data = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == dataFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                data = Optional.of(castingValue.value(String.class));
              }
            }
          }
          callback.onSuccess(status, data);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void seek(PlaybackResponseCallback callback, Long position) {
      seek(callback, position, 0);
    }

    public void seek(PlaybackResponseCallback callback, Long position, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 11L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long positionFieldID = 0L;
      BaseTLVType positiontlvValue = new UIntType(position);
      elements.add(new StructElement(positionFieldID, positiontlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long dataFieldID = 1L;
          Optional<String> data = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == dataFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                data = Optional.of(castingValue.value(String.class));
              }
            }
          }
          callback.onSuccess(status, data);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public interface PlaybackResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer status, Optional<String> data);
    }

    public interface StartTimeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface DurationAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface SampledPositionAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable ChipStructs.MediaPlaybackClusterPlaybackPositionStruct value);
    }

    public interface SeekRangeEndAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface SeekRangeStartAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readCurrentStateAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeCurrentStateAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readStartTimeAttribute(
        StartTimeAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeStartTimeAttribute(
        StartTimeAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readDurationAttribute(
        DurationAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeDurationAttribute(
        DurationAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readSampledPositionAttribute(
        SampledPositionAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable ChipStructs.MediaPlaybackClusterPlaybackPositionStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeSampledPositionAttribute(
        SampledPositionAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable ChipStructs.MediaPlaybackClusterPlaybackPositionStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readPlaybackSpeedAttribute(
        FloatAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribePlaybackSpeedAttribute(
        FloatAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readSeekRangeEndAttribute(
        SeekRangeEndAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeSeekRangeEndAttribute(
        SeekRangeEndAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readSeekRangeStartAttribute(
        SeekRangeStartAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeSeekRangeStartAttribute(
        SeekRangeStartAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class MediaInputCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1287L;

    public MediaInputCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void selectInput(DefaultClusterCallback callback, Integer index) {
      selectInput(callback, index, 0);
    }

    public void selectInput(DefaultClusterCallback callback, Integer index, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long indexFieldID = 0L;
      BaseTLVType indextlvValue = new UIntType(index);
      elements.add(new StructElement(indexFieldID, indextlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void showInputStatus(DefaultClusterCallback callback) {
      showInputStatus(callback, 0);
    }

    public void showInputStatus(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 1L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void hideInputStatus(DefaultClusterCallback callback) {
      hideInputStatus(callback, 0);
    }

    public void hideInputStatus(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 2L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void renameInput(DefaultClusterCallback callback, Integer index, String name) {
      renameInput(callback, index, name, 0);
    }

    public void renameInput(DefaultClusterCallback callback, Integer index, String name, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 3L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long indexFieldID = 0L;
      BaseTLVType indextlvValue = new UIntType(index);
      elements.add(new StructElement(indexFieldID, indextlvValue));

      final long nameFieldID = 1L;
      BaseTLVType nametlvValue = new StringType(name);
      elements.add(new StructElement(nameFieldID, nametlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public interface InputListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.MediaInputClusterInputInfoStruct> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readInputListAttribute(
        InputListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.MediaInputClusterInputInfoStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeInputListAttribute(
        InputListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.MediaInputClusterInputInfoStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readCurrentInputAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeCurrentInputAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class LowPowerCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1288L;

    public LowPowerCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void sleep(DefaultClusterCallback callback) {
      sleep(callback, 0);
    }

    public void sleep(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class KeypadInputCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1289L;

    public KeypadInputCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void sendKey(SendKeyResponseCallback callback, Integer keyCode) {
      sendKey(callback, keyCode, 0);
    }

    public void sendKey(SendKeyResponseCallback callback, Integer keyCode, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long keyCodeFieldID = 0L;
      BaseTLVType keyCodetlvValue = new UIntType(keyCode);
      elements.add(new StructElement(keyCodeFieldID, keyCodetlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            }
          }
          callback.onSuccess(status);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public interface SendKeyResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer status);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class ContentLauncherCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1290L;

    public ContentLauncherCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void launchContent(LauncherResponseCallback callback, ChipStructs.ContentLauncherClusterContentSearchStruct search, Boolean autoPlay, Optional<String> data) {
      launchContent(callback, search, autoPlay, data, 0);
    }

    public void launchContent(LauncherResponseCallback callback, ChipStructs.ContentLauncherClusterContentSearchStruct search, Boolean autoPlay, Optional<String> data, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long searchFieldID = 0L;
      BaseTLVType searchtlvValue = search.encodeTlv();
      elements.add(new StructElement(searchFieldID, searchtlvValue));

      final long autoPlayFieldID = 1L;
      BaseTLVType autoPlaytlvValue = new BooleanType(autoPlay);
      elements.add(new StructElement(autoPlayFieldID, autoPlaytlvValue));

      final long dataFieldID = 2L;
      BaseTLVType datatlvValue = data.<BaseTLVType>map((nonOptionaldata) -> new StringType(nonOptionaldata)).orElse(new EmptyType());
      elements.add(new StructElement(dataFieldID, datatlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long dataFieldID = 1L;
          Optional<String> data = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == dataFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                data = Optional.of(castingValue.value(String.class));
              }
            }
          }
          callback.onSuccess(status, data);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void launchURL(LauncherResponseCallback callback, String contentURL, Optional<String> displayString, Optional<ChipStructs.ContentLauncherClusterBrandingInformationStruct> brandingInformation) {
      launchURL(callback, contentURL, displayString, brandingInformation, 0);
    }

    public void launchURL(LauncherResponseCallback callback, String contentURL, Optional<String> displayString, Optional<ChipStructs.ContentLauncherClusterBrandingInformationStruct> brandingInformation, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 1L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long contentURLFieldID = 0L;
      BaseTLVType contentURLtlvValue = new StringType(contentURL);
      elements.add(new StructElement(contentURLFieldID, contentURLtlvValue));

      final long displayStringFieldID = 1L;
      BaseTLVType displayStringtlvValue = displayString.<BaseTLVType>map((nonOptionaldisplayString) -> new StringType(nonOptionaldisplayString)).orElse(new EmptyType());
      elements.add(new StructElement(displayStringFieldID, displayStringtlvValue));

      final long brandingInformationFieldID = 2L;
      BaseTLVType brandingInformationtlvValue = brandingInformation.<BaseTLVType>map((nonOptionalbrandingInformation) -> nonOptionalbrandingInformation.encodeTlv()).orElse(new EmptyType());
      elements.add(new StructElement(brandingInformationFieldID, brandingInformationtlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long dataFieldID = 1L;
          Optional<String> data = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == dataFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                data = Optional.of(castingValue.value(String.class));
              }
            }
          }
          callback.onSuccess(status, data);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public interface LauncherResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer status, Optional<String> data);
    }

    public interface AcceptHeaderAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<String> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readAcceptHeaderAttribute(
        AcceptHeaderAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<String> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptHeaderAttribute(
        AcceptHeaderAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<String> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readSupportedStreamingProtocolsAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeSupportedStreamingProtocolsAttribute(DefaultClusterCallback callback, Long value) {
      writeSupportedStreamingProtocolsAttribute(callback, value, 0);
    }

    public void writeSupportedStreamingProtocolsAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeSupportedStreamingProtocolsAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class AudioOutputCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1291L;

    public AudioOutputCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void selectOutput(DefaultClusterCallback callback, Integer index) {
      selectOutput(callback, index, 0);
    }

    public void selectOutput(DefaultClusterCallback callback, Integer index, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long indexFieldID = 0L;
      BaseTLVType indextlvValue = new UIntType(index);
      elements.add(new StructElement(indexFieldID, indextlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void renameOutput(DefaultClusterCallback callback, Integer index, String name) {
      renameOutput(callback, index, name, 0);
    }

    public void renameOutput(DefaultClusterCallback callback, Integer index, String name, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 1L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long indexFieldID = 0L;
      BaseTLVType indextlvValue = new UIntType(index);
      elements.add(new StructElement(indexFieldID, indextlvValue));

      final long nameFieldID = 1L;
      BaseTLVType nametlvValue = new StringType(name);
      elements.add(new StructElement(nameFieldID, nametlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public interface OutputListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.AudioOutputClusterOutputInfoStruct> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readOutputListAttribute(
        OutputListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.AudioOutputClusterOutputInfoStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeOutputListAttribute(
        OutputListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.AudioOutputClusterOutputInfoStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readCurrentOutputAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeCurrentOutputAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class ApplicationLauncherCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1292L;

    public ApplicationLauncherCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void launchApp(LauncherResponseCallback callback, Optional<ChipStructs.ApplicationLauncherClusterApplicationStruct> application, Optional<byte[]> data) {
      launchApp(callback, application, data, 0);
    }

    public void launchApp(LauncherResponseCallback callback, Optional<ChipStructs.ApplicationLauncherClusterApplicationStruct> application, Optional<byte[]> data, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long applicationFieldID = 0L;
      BaseTLVType applicationtlvValue = application.<BaseTLVType>map((nonOptionalapplication) -> nonOptionalapplication.encodeTlv()).orElse(new EmptyType());
      elements.add(new StructElement(applicationFieldID, applicationtlvValue));

      final long dataFieldID = 1L;
      BaseTLVType datatlvValue = data.<BaseTLVType>map((nonOptionaldata) -> new ByteArrayType(nonOptionaldata)).orElse(new EmptyType());
      elements.add(new StructElement(dataFieldID, datatlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long dataFieldID = 1L;
          Optional<byte[]> data = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == dataFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.ByteArray) {
                ByteArrayType castingValue = element.value(ByteArrayType.class);
                data = Optional.of(castingValue.value(byte[].class));
              }
            }
          }
          callback.onSuccess(status, data);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void stopApp(LauncherResponseCallback callback, Optional<ChipStructs.ApplicationLauncherClusterApplicationStruct> application) {
      stopApp(callback, application, 0);
    }

    public void stopApp(LauncherResponseCallback callback, Optional<ChipStructs.ApplicationLauncherClusterApplicationStruct> application, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 1L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long applicationFieldID = 0L;
      BaseTLVType applicationtlvValue = application.<BaseTLVType>map((nonOptionalapplication) -> nonOptionalapplication.encodeTlv()).orElse(new EmptyType());
      elements.add(new StructElement(applicationFieldID, applicationtlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long dataFieldID = 1L;
          Optional<byte[]> data = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == dataFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.ByteArray) {
                ByteArrayType castingValue = element.value(ByteArrayType.class);
                data = Optional.of(castingValue.value(byte[].class));
              }
            }
          }
          callback.onSuccess(status, data);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void hideApp(LauncherResponseCallback callback, Optional<ChipStructs.ApplicationLauncherClusterApplicationStruct> application) {
      hideApp(callback, application, 0);
    }

    public void hideApp(LauncherResponseCallback callback, Optional<ChipStructs.ApplicationLauncherClusterApplicationStruct> application, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 2L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long applicationFieldID = 0L;
      BaseTLVType applicationtlvValue = application.<BaseTLVType>map((nonOptionalapplication) -> nonOptionalapplication.encodeTlv()).orElse(new EmptyType());
      elements.add(new StructElement(applicationFieldID, applicationtlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long dataFieldID = 1L;
          Optional<byte[]> data = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == dataFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.ByteArray) {
                ByteArrayType castingValue = element.value(ByteArrayType.class);
                data = Optional.of(castingValue.value(byte[].class));
              }
            }
          }
          callback.onSuccess(status, data);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public interface LauncherResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer status, Optional<byte[]> data);
    }

    public interface CatalogListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Integer> value);
    }

    public interface CurrentAppAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable ChipStructs.ApplicationLauncherClusterApplicationEPStruct value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readCatalogListAttribute(
        CatalogListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeCatalogListAttribute(
        CatalogListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readCurrentAppAttribute(
        CurrentAppAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable ChipStructs.ApplicationLauncherClusterApplicationEPStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeCurrentAppAttribute(DefaultClusterCallback callback, ChipStructs.ApplicationLauncherClusterApplicationEPStruct value) {
      writeCurrentAppAttribute(callback, value, 0);
    }

    public void writeCurrentAppAttribute(DefaultClusterCallback callback, ChipStructs.ApplicationLauncherClusterApplicationEPStruct value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      
      BaseTLVType tlvValue = value != null ? value.encodeTlv() : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeCurrentAppAttribute(
        CurrentAppAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable ChipStructs.ApplicationLauncherClusterApplicationEPStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class ApplicationBasicCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1293L;

    public ApplicationBasicCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface ApplicationAttributeCallback extends BaseAttributeCallback {
      void onSuccess(ChipStructs.ApplicationBasicClusterApplicationStruct value);
    }

    public interface AllowedVendorListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Integer> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readVendorNameAttribute(
        CharStringAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeVendorNameAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readVendorIDAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeVendorIDAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readApplicationNameAttribute(
        CharStringAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeApplicationNameAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readProductIDAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeProductIDAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readApplicationAttribute(
        ApplicationAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            ChipStructs.ApplicationBasicClusterApplicationStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeApplicationAttribute(
        ApplicationAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            ChipStructs.ApplicationBasicClusterApplicationStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readStatusAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeStatusAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readApplicationVersionAttribute(
        CharStringAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeApplicationVersionAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAllowedVendorListAttribute(
        AllowedVendorListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAllowedVendorListAttribute(
        AllowedVendorListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class AccountLoginCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1294L;

    public AccountLoginCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);


    public void getSetupPIN(GetSetupPINResponseCallback callback, String tempAccountIdentifier, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long tempAccountIdentifierFieldID = 0L;
      BaseTLVType tempAccountIdentifiertlvValue = new StringType(tempAccountIdentifier);
      elements.add(new StructElement(tempAccountIdentifierFieldID, tempAccountIdentifiertlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long setupPINFieldID = 0L;
          String setupPIN = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == setupPINFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                setupPIN = castingValue.value(String.class);
              }
            }
          }
          callback.onSuccess(setupPIN);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }


    public void login(DefaultClusterCallback callback, String tempAccountIdentifier, String setupPIN, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 2L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long tempAccountIdentifierFieldID = 0L;
      BaseTLVType tempAccountIdentifiertlvValue = new StringType(tempAccountIdentifier);
      elements.add(new StructElement(tempAccountIdentifierFieldID, tempAccountIdentifiertlvValue));

      final long setupPINFieldID = 1L;
      BaseTLVType setupPINtlvValue = new StringType(setupPIN);
      elements.add(new StructElement(setupPINFieldID, setupPINtlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }


    public void logout(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 3L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public interface GetSetupPINResponseCallback extends BaseClusterCallback {
      void onSuccess(String setupPIN);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class ElectricalMeasurementCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 2820L;

    public ElectricalMeasurementCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void getProfileInfoCommand(DefaultClusterCallback callback) {
      getProfileInfoCommand(callback, 0);
    }

    public void getProfileInfoCommand(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void getMeasurementProfileCommand(DefaultClusterCallback callback, Integer attributeId, Long startTime, Integer numberOfIntervals) {
      getMeasurementProfileCommand(callback, attributeId, startTime, numberOfIntervals, 0);
    }

    public void getMeasurementProfileCommand(DefaultClusterCallback callback, Integer attributeId, Long startTime, Integer numberOfIntervals, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 1L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long attributeIdFieldID = 0L;
      BaseTLVType attributeIdtlvValue = new UIntType(attributeId);
      elements.add(new StructElement(attributeIdFieldID, attributeIdtlvValue));

      final long startTimeFieldID = 1L;
      BaseTLVType startTimetlvValue = new UIntType(startTime);
      elements.add(new StructElement(startTimeFieldID, startTimetlvValue));

      final long numberOfIntervalsFieldID = 2L;
      BaseTLVType numberOfIntervalstlvValue = new UIntType(numberOfIntervals);
      elements.add(new StructElement(numberOfIntervalsFieldID, numberOfIntervalstlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readMeasurementTypeAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMeasurementTypeAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readDcVoltageAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 256L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeDcVoltageAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 256L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readDcVoltageMinAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 257L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeDcVoltageMinAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 257L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readDcVoltageMaxAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 258L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeDcVoltageMaxAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 258L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readDcCurrentAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 259L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeDcCurrentAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 259L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readDcCurrentMinAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 260L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeDcCurrentMinAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 260L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readDcCurrentMaxAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 261L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeDcCurrentMaxAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 261L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readDcPowerAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 262L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeDcPowerAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 262L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readDcPowerMinAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 263L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeDcPowerMinAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 263L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readDcPowerMaxAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 264L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeDcPowerMaxAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 264L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readDcVoltageMultiplierAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 512L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeDcVoltageMultiplierAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 512L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readDcVoltageDivisorAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 513L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeDcVoltageDivisorAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 513L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readDcCurrentMultiplierAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 514L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeDcCurrentMultiplierAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 514L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readDcCurrentDivisorAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 515L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeDcCurrentDivisorAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 515L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readDcPowerMultiplierAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 516L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeDcPowerMultiplierAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 516L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readDcPowerDivisorAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 517L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeDcPowerDivisorAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 517L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcFrequencyAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 768L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcFrequencyAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 768L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcFrequencyMinAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 769L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcFrequencyMinAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 769L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcFrequencyMaxAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 770L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcFrequencyMaxAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 770L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readNeutralCurrentAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 771L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeNeutralCurrentAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 771L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readTotalActivePowerAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 772L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeTotalActivePowerAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 772L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readTotalReactivePowerAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 773L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeTotalReactivePowerAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 773L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readTotalApparentPowerAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 774L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeTotalApparentPowerAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 774L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMeasured1stHarmonicCurrentAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 775L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMeasured1stHarmonicCurrentAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 775L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMeasured3rdHarmonicCurrentAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 776L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMeasured3rdHarmonicCurrentAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 776L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMeasured5thHarmonicCurrentAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 777L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMeasured5thHarmonicCurrentAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 777L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMeasured7thHarmonicCurrentAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 778L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMeasured7thHarmonicCurrentAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 778L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMeasured9thHarmonicCurrentAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 779L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMeasured9thHarmonicCurrentAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 779L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMeasured11thHarmonicCurrentAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 780L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMeasured11thHarmonicCurrentAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 780L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMeasuredPhase1stHarmonicCurrentAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 781L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMeasuredPhase1stHarmonicCurrentAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 781L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMeasuredPhase3rdHarmonicCurrentAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 782L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMeasuredPhase3rdHarmonicCurrentAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 782L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMeasuredPhase5thHarmonicCurrentAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 783L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMeasuredPhase5thHarmonicCurrentAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 783L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMeasuredPhase7thHarmonicCurrentAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 784L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMeasuredPhase7thHarmonicCurrentAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 784L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMeasuredPhase9thHarmonicCurrentAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 785L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMeasuredPhase9thHarmonicCurrentAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 785L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readMeasuredPhase11thHarmonicCurrentAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 786L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeMeasuredPhase11thHarmonicCurrentAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 786L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcFrequencyMultiplierAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1024L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcFrequencyMultiplierAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1024L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcFrequencyDivisorAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1025L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcFrequencyDivisorAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1025L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readPowerMultiplierAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1026L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribePowerMultiplierAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1026L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readPowerDivisorAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1027L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribePowerDivisorAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1027L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readHarmonicCurrentMultiplierAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1028L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeHarmonicCurrentMultiplierAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1028L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readPhaseHarmonicCurrentMultiplierAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1029L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribePhaseHarmonicCurrentMultiplierAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1029L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readInstantaneousVoltageAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1280L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeInstantaneousVoltageAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1280L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readInstantaneousLineCurrentAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1281L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeInstantaneousLineCurrentAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1281L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readInstantaneousActiveCurrentAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1282L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeInstantaneousActiveCurrentAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1282L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readInstantaneousReactiveCurrentAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1283L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeInstantaneousReactiveCurrentAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1283L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readInstantaneousPowerAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1284L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeInstantaneousPowerAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1284L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readRmsVoltageAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1285L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeRmsVoltageAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1285L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readRmsVoltageMinAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1286L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeRmsVoltageMinAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1286L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readRmsVoltageMaxAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1287L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeRmsVoltageMaxAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1287L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readRmsCurrentAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1288L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeRmsCurrentAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1288L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readRmsCurrentMinAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1289L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeRmsCurrentMinAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1289L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readRmsCurrentMaxAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1290L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeRmsCurrentMaxAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1290L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readActivePowerAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1291L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeActivePowerAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1291L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readActivePowerMinAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1292L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeActivePowerMinAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1292L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readActivePowerMaxAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1293L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeActivePowerMaxAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1293L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readReactivePowerAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1294L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeReactivePowerAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1294L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readApparentPowerAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1295L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeApparentPowerAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1295L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readPowerFactorAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1296L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribePowerFactorAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1296L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAverageRmsVoltageMeasurementPeriodAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1297L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeAverageRmsVoltageMeasurementPeriodAttribute(DefaultClusterCallback callback, Integer value) {
      writeAverageRmsVoltageMeasurementPeriodAttribute(callback, value, 0);
    }

    public void writeAverageRmsVoltageMeasurementPeriodAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1297L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeAverageRmsVoltageMeasurementPeriodAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1297L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAverageRmsUnderVoltageCounterAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1299L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeAverageRmsUnderVoltageCounterAttribute(DefaultClusterCallback callback, Integer value) {
      writeAverageRmsUnderVoltageCounterAttribute(callback, value, 0);
    }

    public void writeAverageRmsUnderVoltageCounterAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1299L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeAverageRmsUnderVoltageCounterAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1299L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readRmsExtremeOverVoltagePeriodAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1300L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeRmsExtremeOverVoltagePeriodAttribute(DefaultClusterCallback callback, Integer value) {
      writeRmsExtremeOverVoltagePeriodAttribute(callback, value, 0);
    }

    public void writeRmsExtremeOverVoltagePeriodAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1300L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeRmsExtremeOverVoltagePeriodAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1300L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readRmsExtremeUnderVoltagePeriodAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1301L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeRmsExtremeUnderVoltagePeriodAttribute(DefaultClusterCallback callback, Integer value) {
      writeRmsExtremeUnderVoltagePeriodAttribute(callback, value, 0);
    }

    public void writeRmsExtremeUnderVoltagePeriodAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1301L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeRmsExtremeUnderVoltagePeriodAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1301L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readRmsVoltageSagPeriodAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1302L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeRmsVoltageSagPeriodAttribute(DefaultClusterCallback callback, Integer value) {
      writeRmsVoltageSagPeriodAttribute(callback, value, 0);
    }

    public void writeRmsVoltageSagPeriodAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1302L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeRmsVoltageSagPeriodAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1302L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readRmsVoltageSwellPeriodAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1303L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeRmsVoltageSwellPeriodAttribute(DefaultClusterCallback callback, Integer value) {
      writeRmsVoltageSwellPeriodAttribute(callback, value, 0);
    }

    public void writeRmsVoltageSwellPeriodAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1303L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeRmsVoltageSwellPeriodAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1303L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcVoltageMultiplierAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1536L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcVoltageMultiplierAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1536L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcVoltageDivisorAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1537L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcVoltageDivisorAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1537L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcCurrentMultiplierAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1538L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcCurrentMultiplierAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1538L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcCurrentDivisorAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1539L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcCurrentDivisorAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1539L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcPowerMultiplierAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1540L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcPowerMultiplierAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1540L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcPowerDivisorAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1541L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcPowerDivisorAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1541L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readOverloadAlarmsMaskAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1792L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeOverloadAlarmsMaskAttribute(DefaultClusterCallback callback, Integer value) {
      writeOverloadAlarmsMaskAttribute(callback, value, 0);
    }

    public void writeOverloadAlarmsMaskAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1792L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeOverloadAlarmsMaskAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1792L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readVoltageOverloadAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1793L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeVoltageOverloadAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1793L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readCurrentOverloadAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1794L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeCurrentOverloadAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1794L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcOverloadAlarmsMaskAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2048L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeAcOverloadAlarmsMaskAttribute(DefaultClusterCallback callback, Integer value) {
      writeAcOverloadAlarmsMaskAttribute(callback, value, 0);
    }

    public void writeAcOverloadAlarmsMaskAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2048L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeAcOverloadAlarmsMaskAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2048L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcVoltageOverloadAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2049L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcVoltageOverloadAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2049L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcCurrentOverloadAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2050L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcCurrentOverloadAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2050L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcActivePowerOverloadAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2051L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcActivePowerOverloadAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2051L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcReactivePowerOverloadAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2052L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcReactivePowerOverloadAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2052L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAverageRmsOverVoltageAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2053L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAverageRmsOverVoltageAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2053L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAverageRmsUnderVoltageAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2054L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAverageRmsUnderVoltageAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2054L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readRmsExtremeOverVoltageAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2055L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeRmsExtremeOverVoltageAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2055L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readRmsExtremeUnderVoltageAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2056L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeRmsExtremeUnderVoltageAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2056L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readRmsVoltageSagAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2057L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeRmsVoltageSagAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2057L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readRmsVoltageSwellAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2058L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeRmsVoltageSwellAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2058L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readLineCurrentPhaseBAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2305L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeLineCurrentPhaseBAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2305L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readActiveCurrentPhaseBAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2306L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeActiveCurrentPhaseBAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2306L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readReactiveCurrentPhaseBAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2307L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeReactiveCurrentPhaseBAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2307L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readRmsVoltagePhaseBAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2309L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeRmsVoltagePhaseBAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2309L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readRmsVoltageMinPhaseBAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2310L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeRmsVoltageMinPhaseBAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2310L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readRmsVoltageMaxPhaseBAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2311L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeRmsVoltageMaxPhaseBAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2311L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readRmsCurrentPhaseBAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2312L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeRmsCurrentPhaseBAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2312L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readRmsCurrentMinPhaseBAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2313L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeRmsCurrentMinPhaseBAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2313L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readRmsCurrentMaxPhaseBAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2314L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeRmsCurrentMaxPhaseBAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2314L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readActivePowerPhaseBAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2315L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeActivePowerPhaseBAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2315L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readActivePowerMinPhaseBAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2316L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeActivePowerMinPhaseBAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2316L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readActivePowerMaxPhaseBAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2317L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeActivePowerMaxPhaseBAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2317L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readReactivePowerPhaseBAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2318L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeReactivePowerPhaseBAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2318L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readApparentPowerPhaseBAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2319L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeApparentPowerPhaseBAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2319L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readPowerFactorPhaseBAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2320L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribePowerFactorPhaseBAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2320L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAverageRmsVoltageMeasurementPeriodPhaseBAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2321L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAverageRmsVoltageMeasurementPeriodPhaseBAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2321L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAverageRmsOverVoltageCounterPhaseBAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2322L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAverageRmsOverVoltageCounterPhaseBAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2322L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAverageRmsUnderVoltageCounterPhaseBAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2323L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAverageRmsUnderVoltageCounterPhaseBAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2323L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readRmsExtremeOverVoltagePeriodPhaseBAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2324L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeRmsExtremeOverVoltagePeriodPhaseBAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2324L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readRmsExtremeUnderVoltagePeriodPhaseBAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2325L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeRmsExtremeUnderVoltagePeriodPhaseBAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2325L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readRmsVoltageSagPeriodPhaseBAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2326L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeRmsVoltageSagPeriodPhaseBAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2326L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readRmsVoltageSwellPeriodPhaseBAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2327L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeRmsVoltageSwellPeriodPhaseBAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2327L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readLineCurrentPhaseCAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2561L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeLineCurrentPhaseCAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2561L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readActiveCurrentPhaseCAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2562L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeActiveCurrentPhaseCAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2562L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readReactiveCurrentPhaseCAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2563L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeReactiveCurrentPhaseCAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2563L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readRmsVoltagePhaseCAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2565L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeRmsVoltagePhaseCAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2565L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readRmsVoltageMinPhaseCAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2566L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeRmsVoltageMinPhaseCAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2566L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readRmsVoltageMaxPhaseCAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2567L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeRmsVoltageMaxPhaseCAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2567L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readRmsCurrentPhaseCAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2568L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeRmsCurrentPhaseCAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2568L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readRmsCurrentMinPhaseCAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2569L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeRmsCurrentMinPhaseCAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2569L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readRmsCurrentMaxPhaseCAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2570L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeRmsCurrentMaxPhaseCAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2570L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readActivePowerPhaseCAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2571L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeActivePowerPhaseCAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2571L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readActivePowerMinPhaseCAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2572L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeActivePowerMinPhaseCAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2572L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readActivePowerMaxPhaseCAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2573L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeActivePowerMaxPhaseCAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2573L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readReactivePowerPhaseCAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2574L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeReactivePowerPhaseCAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2574L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readApparentPowerPhaseCAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2575L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeApparentPowerPhaseCAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2575L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readPowerFactorPhaseCAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2576L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribePowerFactorPhaseCAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2576L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAverageRmsVoltageMeasurementPeriodPhaseCAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2577L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAverageRmsVoltageMeasurementPeriodPhaseCAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2577L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAverageRmsOverVoltageCounterPhaseCAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2578L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAverageRmsOverVoltageCounterPhaseCAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2578L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAverageRmsUnderVoltageCounterPhaseCAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2579L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAverageRmsUnderVoltageCounterPhaseCAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2579L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readRmsExtremeOverVoltagePeriodPhaseCAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2580L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeRmsExtremeOverVoltagePeriodPhaseCAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2580L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readRmsExtremeUnderVoltagePeriodPhaseCAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2581L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeRmsExtremeUnderVoltagePeriodPhaseCAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2581L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readRmsVoltageSagPeriodPhaseCAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2582L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeRmsVoltageSagPeriodPhaseCAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2582L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readRmsVoltageSwellPeriodPhaseCAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2583L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeRmsVoltageSwellPeriodPhaseCAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2583L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class UnitTestingCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 4294048773L;

    public UnitTestingCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void test(DefaultClusterCallback callback) {
      test(callback, 0);
    }

    public void test(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void testNotHandled(DefaultClusterCallback callback) {
      testNotHandled(callback, 0);
    }

    public void testNotHandled(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 1L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void testSpecific(TestSpecificResponseCallback callback) {
      testSpecific(callback, 0);
    }

    public void testSpecific(TestSpecificResponseCallback callback, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 2L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long returnValueFieldID = 0L;
          Integer returnValue = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == returnValueFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                returnValue = castingValue.value(Integer.class);
              }
            }
          }
          callback.onSuccess(returnValue);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void testUnknownCommand(DefaultClusterCallback callback) {
      testUnknownCommand(callback, 0);
    }

    public void testUnknownCommand(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 3L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void testAddArguments(TestAddArgumentsResponseCallback callback, Integer arg1, Integer arg2) {
      testAddArguments(callback, arg1, arg2, 0);
    }

    public void testAddArguments(TestAddArgumentsResponseCallback callback, Integer arg1, Integer arg2, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 4L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long arg1FieldID = 0L;
      BaseTLVType arg1tlvValue = new UIntType(arg1);
      elements.add(new StructElement(arg1FieldID, arg1tlvValue));

      final long arg2FieldID = 1L;
      BaseTLVType arg2tlvValue = new UIntType(arg2);
      elements.add(new StructElement(arg2FieldID, arg2tlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long returnValueFieldID = 0L;
          Integer returnValue = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == returnValueFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                returnValue = castingValue.value(Integer.class);
              }
            }
          }
          callback.onSuccess(returnValue);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void testSimpleArgumentRequest(TestSimpleArgumentResponseCallback callback, Boolean arg1) {
      testSimpleArgumentRequest(callback, arg1, 0);
    }

    public void testSimpleArgumentRequest(TestSimpleArgumentResponseCallback callback, Boolean arg1, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 5L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long arg1FieldID = 0L;
      BaseTLVType arg1tlvValue = new BooleanType(arg1);
      elements.add(new StructElement(arg1FieldID, arg1tlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long returnValueFieldID = 0L;
          Boolean returnValue = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == returnValueFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Boolean) {
                BooleanType castingValue = element.value(BooleanType.class);
                returnValue = castingValue.value(Boolean.class);
              }
            }
          }
          callback.onSuccess(returnValue);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void testStructArrayArgumentRequest(TestStructArrayArgumentResponseCallback callback, ArrayList<ChipStructs.UnitTestingClusterNestedStructList> arg1, ArrayList<ChipStructs.UnitTestingClusterSimpleStruct> arg2, ArrayList<Integer> arg3, ArrayList<Boolean> arg4, Integer arg5, Boolean arg6) {
      testStructArrayArgumentRequest(callback, arg1, arg2, arg3, arg4, arg5, arg6, 0);
    }

    public void testStructArrayArgumentRequest(TestStructArrayArgumentResponseCallback callback, ArrayList<ChipStructs.UnitTestingClusterNestedStructList> arg1, ArrayList<ChipStructs.UnitTestingClusterSimpleStruct> arg2, ArrayList<Integer> arg3, ArrayList<Boolean> arg4, Integer arg5, Boolean arg6, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 6L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long arg1FieldID = 0L;
      BaseTLVType arg1tlvValue = ArrayType.generateArrayType(arg1, (elementarg1) -> elementarg1.encodeTlv());
      elements.add(new StructElement(arg1FieldID, arg1tlvValue));

      final long arg2FieldID = 1L;
      BaseTLVType arg2tlvValue = ArrayType.generateArrayType(arg2, (elementarg2) -> elementarg2.encodeTlv());
      elements.add(new StructElement(arg2FieldID, arg2tlvValue));

      final long arg3FieldID = 2L;
      BaseTLVType arg3tlvValue = ArrayType.generateArrayType(arg3, (elementarg3) -> new UIntType(elementarg3));
      elements.add(new StructElement(arg3FieldID, arg3tlvValue));

      final long arg4FieldID = 3L;
      BaseTLVType arg4tlvValue = ArrayType.generateArrayType(arg4, (elementarg4) -> new BooleanType(elementarg4));
      elements.add(new StructElement(arg4FieldID, arg4tlvValue));

      final long arg5FieldID = 4L;
      BaseTLVType arg5tlvValue = new UIntType(arg5);
      elements.add(new StructElement(arg5FieldID, arg5tlvValue));

      final long arg6FieldID = 5L;
      BaseTLVType arg6tlvValue = new BooleanType(arg6);
      elements.add(new StructElement(arg6FieldID, arg6tlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long arg1FieldID = 0L;
          ArrayList<ChipStructs.UnitTestingClusterNestedStructList> arg1 = null;
          final long arg2FieldID = 1L;
          ArrayList<ChipStructs.UnitTestingClusterSimpleStruct> arg2 = null;
          final long arg3FieldID = 2L;
          ArrayList<Integer> arg3 = null;
          final long arg4FieldID = 3L;
          ArrayList<Boolean> arg4 = null;
          final long arg5FieldID = 4L;
          Integer arg5 = null;
          final long arg6FieldID = 5L;
          Boolean arg6 = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == arg1FieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Array) {
                ArrayType castingValue = element.value(ArrayType.class);
                arg1 = castingValue.map((elementcastingValue) -> ChipStructs.UnitTestingClusterNestedStructList.decodeTlv(elementcastingValue));
              }
            } else if (element.contextTagNum() == arg2FieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Array) {
                ArrayType castingValue = element.value(ArrayType.class);
                arg2 = castingValue.map((elementcastingValue) -> ChipStructs.UnitTestingClusterSimpleStruct.decodeTlv(elementcastingValue));
              }
            } else if (element.contextTagNum() == arg3FieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Array) {
                ArrayType castingValue = element.value(ArrayType.class);
                arg3 = castingValue.map((elementcastingValue) -> elementcastingValue.value(Integer.class));
              }
            } else if (element.contextTagNum() == arg4FieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Array) {
                ArrayType castingValue = element.value(ArrayType.class);
                arg4 = castingValue.map((elementcastingValue) -> elementcastingValue.value(Boolean.class));
              }
            } else if (element.contextTagNum() == arg5FieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                arg5 = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == arg6FieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Boolean) {
                BooleanType castingValue = element.value(BooleanType.class);
                arg6 = castingValue.value(Boolean.class);
              }
            }
          }
          callback.onSuccess(arg1, arg2, arg3, arg4, arg5, arg6);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void testStructArgumentRequest(BooleanResponseCallback callback, ChipStructs.UnitTestingClusterSimpleStruct arg1) {
      testStructArgumentRequest(callback, arg1, 0);
    }

    public void testStructArgumentRequest(BooleanResponseCallback callback, ChipStructs.UnitTestingClusterSimpleStruct arg1, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 7L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long arg1FieldID = 0L;
      BaseTLVType arg1tlvValue = arg1.encodeTlv();
      elements.add(new StructElement(arg1FieldID, arg1tlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long valueFieldID = 0L;
          Boolean value = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == valueFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Boolean) {
                BooleanType castingValue = element.value(BooleanType.class);
                value = castingValue.value(Boolean.class);
              }
            }
          }
          callback.onSuccess(value);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void testNestedStructArgumentRequest(BooleanResponseCallback callback, ChipStructs.UnitTestingClusterNestedStruct arg1) {
      testNestedStructArgumentRequest(callback, arg1, 0);
    }

    public void testNestedStructArgumentRequest(BooleanResponseCallback callback, ChipStructs.UnitTestingClusterNestedStruct arg1, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 8L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long arg1FieldID = 0L;
      BaseTLVType arg1tlvValue = arg1.encodeTlv();
      elements.add(new StructElement(arg1FieldID, arg1tlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long valueFieldID = 0L;
          Boolean value = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == valueFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Boolean) {
                BooleanType castingValue = element.value(BooleanType.class);
                value = castingValue.value(Boolean.class);
              }
            }
          }
          callback.onSuccess(value);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void testListStructArgumentRequest(BooleanResponseCallback callback, ArrayList<ChipStructs.UnitTestingClusterSimpleStruct> arg1) {
      testListStructArgumentRequest(callback, arg1, 0);
    }

    public void testListStructArgumentRequest(BooleanResponseCallback callback, ArrayList<ChipStructs.UnitTestingClusterSimpleStruct> arg1, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 9L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long arg1FieldID = 0L;
      BaseTLVType arg1tlvValue = ArrayType.generateArrayType(arg1, (elementarg1) -> elementarg1.encodeTlv());
      elements.add(new StructElement(arg1FieldID, arg1tlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long valueFieldID = 0L;
          Boolean value = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == valueFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Boolean) {
                BooleanType castingValue = element.value(BooleanType.class);
                value = castingValue.value(Boolean.class);
              }
            }
          }
          callback.onSuccess(value);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void testListInt8UArgumentRequest(BooleanResponseCallback callback, ArrayList<Integer> arg1) {
      testListInt8UArgumentRequest(callback, arg1, 0);
    }

    public void testListInt8UArgumentRequest(BooleanResponseCallback callback, ArrayList<Integer> arg1, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 10L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long arg1FieldID = 0L;
      BaseTLVType arg1tlvValue = ArrayType.generateArrayType(arg1, (elementarg1) -> new UIntType(elementarg1));
      elements.add(new StructElement(arg1FieldID, arg1tlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long valueFieldID = 0L;
          Boolean value = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == valueFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Boolean) {
                BooleanType castingValue = element.value(BooleanType.class);
                value = castingValue.value(Boolean.class);
              }
            }
          }
          callback.onSuccess(value);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void testNestedStructListArgumentRequest(BooleanResponseCallback callback, ChipStructs.UnitTestingClusterNestedStructList arg1) {
      testNestedStructListArgumentRequest(callback, arg1, 0);
    }

    public void testNestedStructListArgumentRequest(BooleanResponseCallback callback, ChipStructs.UnitTestingClusterNestedStructList arg1, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 11L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long arg1FieldID = 0L;
      BaseTLVType arg1tlvValue = arg1.encodeTlv();
      elements.add(new StructElement(arg1FieldID, arg1tlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long valueFieldID = 0L;
          Boolean value = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == valueFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Boolean) {
                BooleanType castingValue = element.value(BooleanType.class);
                value = castingValue.value(Boolean.class);
              }
            }
          }
          callback.onSuccess(value);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void testListNestedStructListArgumentRequest(BooleanResponseCallback callback, ArrayList<ChipStructs.UnitTestingClusterNestedStructList> arg1) {
      testListNestedStructListArgumentRequest(callback, arg1, 0);
    }

    public void testListNestedStructListArgumentRequest(BooleanResponseCallback callback, ArrayList<ChipStructs.UnitTestingClusterNestedStructList> arg1, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 12L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long arg1FieldID = 0L;
      BaseTLVType arg1tlvValue = ArrayType.generateArrayType(arg1, (elementarg1) -> elementarg1.encodeTlv());
      elements.add(new StructElement(arg1FieldID, arg1tlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long valueFieldID = 0L;
          Boolean value = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == valueFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Boolean) {
                BooleanType castingValue = element.value(BooleanType.class);
                value = castingValue.value(Boolean.class);
              }
            }
          }
          callback.onSuccess(value);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void testListInt8UReverseRequest(TestListInt8UReverseResponseCallback callback, ArrayList<Integer> arg1) {
      testListInt8UReverseRequest(callback, arg1, 0);
    }

    public void testListInt8UReverseRequest(TestListInt8UReverseResponseCallback callback, ArrayList<Integer> arg1, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 13L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long arg1FieldID = 0L;
      BaseTLVType arg1tlvValue = ArrayType.generateArrayType(arg1, (elementarg1) -> new UIntType(elementarg1));
      elements.add(new StructElement(arg1FieldID, arg1tlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long arg1FieldID = 0L;
          ArrayList<Integer> arg1 = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == arg1FieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Array) {
                ArrayType castingValue = element.value(ArrayType.class);
                arg1 = castingValue.map((elementcastingValue) -> elementcastingValue.value(Integer.class));
              }
            }
          }
          callback.onSuccess(arg1);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void testEnumsRequest(TestEnumsResponseCallback callback, Integer arg1, Integer arg2) {
      testEnumsRequest(callback, arg1, arg2, 0);
    }

    public void testEnumsRequest(TestEnumsResponseCallback callback, Integer arg1, Integer arg2, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 14L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long arg1FieldID = 0L;
      BaseTLVType arg1tlvValue = new UIntType(arg1);
      elements.add(new StructElement(arg1FieldID, arg1tlvValue));

      final long arg2FieldID = 1L;
      BaseTLVType arg2tlvValue = new UIntType(arg2);
      elements.add(new StructElement(arg2FieldID, arg2tlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long arg1FieldID = 0L;
          Integer arg1 = null;
          final long arg2FieldID = 1L;
          Integer arg2 = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == arg1FieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                arg1 = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == arg2FieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                arg2 = castingValue.value(Integer.class);
              }
            }
          }
          callback.onSuccess(arg1, arg2);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void testNullableOptionalRequest(TestNullableOptionalResponseCallback callback, @Nullable Optional<Integer> arg1) {
      testNullableOptionalRequest(callback, arg1, 0);
    }

    public void testNullableOptionalRequest(TestNullableOptionalResponseCallback callback, @Nullable Optional<Integer> arg1, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 15L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long arg1FieldID = 0L;
      BaseTLVType arg1tlvValue = arg1 != null ? arg1.<BaseTLVType>map((nonOptionalarg1) -> new UIntType(nonOptionalarg1)).orElse(new EmptyType()) : new NullType();
      elements.add(new StructElement(arg1FieldID, arg1tlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long wasPresentFieldID = 0L;
          Boolean wasPresent = null;
          final long wasNullFieldID = 1L;
          Optional<Boolean> wasNull = Optional.empty();
          final long valueFieldID = 2L;
          Optional<Integer> value = Optional.empty();
          final long originalValueFieldID = 3L;
          @Nullable Optional<Integer> originalValue = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == wasPresentFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Boolean) {
                BooleanType castingValue = element.value(BooleanType.class);
                wasPresent = castingValue.value(Boolean.class);
              }
            } else if (element.contextTagNum() == wasNullFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Boolean) {
                BooleanType castingValue = element.value(BooleanType.class);
                wasNull = Optional.of(castingValue.value(Boolean.class));
              }
            } else if (element.contextTagNum() == valueFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                value = Optional.of(castingValue.value(Integer.class));
              }
            } else if (element.contextTagNum() == originalValueFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                originalValue = Optional.of(castingValue.value(Integer.class));
              }
            }
          }
          callback.onSuccess(wasPresent, wasNull, value, originalValue);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void testComplexNullableOptionalRequest(TestComplexNullableOptionalResponseCallback callback, @Nullable Integer nullableInt, Optional<Integer> optionalInt, @Nullable Optional<Integer> nullableOptionalInt, @Nullable String nullableString, Optional<String> optionalString, @Nullable Optional<String> nullableOptionalString, @Nullable ChipStructs.UnitTestingClusterSimpleStruct nullableStruct, Optional<ChipStructs.UnitTestingClusterSimpleStruct> optionalStruct, @Nullable Optional<ChipStructs.UnitTestingClusterSimpleStruct> nullableOptionalStruct, @Nullable ArrayList<Integer> nullableList, Optional<ArrayList<Integer>> optionalList, @Nullable Optional<ArrayList<Integer>> nullableOptionalList) {
      testComplexNullableOptionalRequest(callback, nullableInt, optionalInt, nullableOptionalInt, nullableString, optionalString, nullableOptionalString, nullableStruct, optionalStruct, nullableOptionalStruct, nullableList, optionalList, nullableOptionalList, 0);
    }

    public void testComplexNullableOptionalRequest(TestComplexNullableOptionalResponseCallback callback, @Nullable Integer nullableInt, Optional<Integer> optionalInt, @Nullable Optional<Integer> nullableOptionalInt, @Nullable String nullableString, Optional<String> optionalString, @Nullable Optional<String> nullableOptionalString, @Nullable ChipStructs.UnitTestingClusterSimpleStruct nullableStruct, Optional<ChipStructs.UnitTestingClusterSimpleStruct> optionalStruct, @Nullable Optional<ChipStructs.UnitTestingClusterSimpleStruct> nullableOptionalStruct, @Nullable ArrayList<Integer> nullableList, Optional<ArrayList<Integer>> optionalList, @Nullable Optional<ArrayList<Integer>> nullableOptionalList, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 16L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long nullableIntFieldID = 0L;
      BaseTLVType nullableInttlvValue = nullableInt != null ? new UIntType(nullableInt) : new NullType();
      elements.add(new StructElement(nullableIntFieldID, nullableInttlvValue));

      final long optionalIntFieldID = 1L;
      BaseTLVType optionalInttlvValue = optionalInt.<BaseTLVType>map((nonOptionaloptionalInt) -> new UIntType(nonOptionaloptionalInt)).orElse(new EmptyType());
      elements.add(new StructElement(optionalIntFieldID, optionalInttlvValue));

      final long nullableOptionalIntFieldID = 2L;
      BaseTLVType nullableOptionalInttlvValue = nullableOptionalInt != null ? nullableOptionalInt.<BaseTLVType>map((nonOptionalnullableOptionalInt) -> new UIntType(nonOptionalnullableOptionalInt)).orElse(new EmptyType()) : new NullType();
      elements.add(new StructElement(nullableOptionalIntFieldID, nullableOptionalInttlvValue));

      final long nullableStringFieldID = 3L;
      BaseTLVType nullableStringtlvValue = nullableString != null ? new StringType(nullableString) : new NullType();
      elements.add(new StructElement(nullableStringFieldID, nullableStringtlvValue));

      final long optionalStringFieldID = 4L;
      BaseTLVType optionalStringtlvValue = optionalString.<BaseTLVType>map((nonOptionaloptionalString) -> new StringType(nonOptionaloptionalString)).orElse(new EmptyType());
      elements.add(new StructElement(optionalStringFieldID, optionalStringtlvValue));

      final long nullableOptionalStringFieldID = 5L;
      BaseTLVType nullableOptionalStringtlvValue = nullableOptionalString != null ? nullableOptionalString.<BaseTLVType>map((nonOptionalnullableOptionalString) -> new StringType(nonOptionalnullableOptionalString)).orElse(new EmptyType()) : new NullType();
      elements.add(new StructElement(nullableOptionalStringFieldID, nullableOptionalStringtlvValue));

      final long nullableStructFieldID = 6L;
      BaseTLVType nullableStructtlvValue = nullableStruct != null ? nullableStruct.encodeTlv() : new NullType();
      elements.add(new StructElement(nullableStructFieldID, nullableStructtlvValue));

      final long optionalStructFieldID = 7L;
      BaseTLVType optionalStructtlvValue = optionalStruct.<BaseTLVType>map((nonOptionaloptionalStruct) -> nonOptionaloptionalStruct.encodeTlv()).orElse(new EmptyType());
      elements.add(new StructElement(optionalStructFieldID, optionalStructtlvValue));

      final long nullableOptionalStructFieldID = 8L;
      BaseTLVType nullableOptionalStructtlvValue = nullableOptionalStruct != null ? nullableOptionalStruct.<BaseTLVType>map((nonOptionalnullableOptionalStruct) -> nonOptionalnullableOptionalStruct.encodeTlv()).orElse(new EmptyType()) : new NullType();
      elements.add(new StructElement(nullableOptionalStructFieldID, nullableOptionalStructtlvValue));

      final long nullableListFieldID = 9L;
      BaseTLVType nullableListtlvValue = nullableList != null ? ArrayType.generateArrayType(nullableList, (elementnullableList) -> new UIntType(elementnullableList)) : new NullType();
      elements.add(new StructElement(nullableListFieldID, nullableListtlvValue));

      final long optionalListFieldID = 10L;
      BaseTLVType optionalListtlvValue = optionalList.<BaseTLVType>map((nonOptionaloptionalList) -> ArrayType.generateArrayType(nonOptionaloptionalList, (elementnonOptionaloptionalList) -> new UIntType(elementnonOptionaloptionalList))).orElse(new EmptyType());
      elements.add(new StructElement(optionalListFieldID, optionalListtlvValue));

      final long nullableOptionalListFieldID = 11L;
      BaseTLVType nullableOptionalListtlvValue = nullableOptionalList != null ? nullableOptionalList.<BaseTLVType>map((nonOptionalnullableOptionalList) -> ArrayType.generateArrayType(nonOptionalnullableOptionalList, (elementnonOptionalnullableOptionalList) -> new UIntType(elementnonOptionalnullableOptionalList))).orElse(new EmptyType()) : new NullType();
      elements.add(new StructElement(nullableOptionalListFieldID, nullableOptionalListtlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long nullableIntWasNullFieldID = 0L;
          Boolean nullableIntWasNull = null;
          final long nullableIntValueFieldID = 1L;
          Optional<Integer> nullableIntValue = Optional.empty();
          final long optionalIntWasPresentFieldID = 2L;
          Boolean optionalIntWasPresent = null;
          final long optionalIntValueFieldID = 3L;
          Optional<Integer> optionalIntValue = Optional.empty();
          final long nullableOptionalIntWasPresentFieldID = 4L;
          Boolean nullableOptionalIntWasPresent = null;
          final long nullableOptionalIntWasNullFieldID = 5L;
          Optional<Boolean> nullableOptionalIntWasNull = Optional.empty();
          final long nullableOptionalIntValueFieldID = 6L;
          Optional<Integer> nullableOptionalIntValue = Optional.empty();
          final long nullableStringWasNullFieldID = 7L;
          Boolean nullableStringWasNull = null;
          final long nullableStringValueFieldID = 8L;
          Optional<String> nullableStringValue = Optional.empty();
          final long optionalStringWasPresentFieldID = 9L;
          Boolean optionalStringWasPresent = null;
          final long optionalStringValueFieldID = 10L;
          Optional<String> optionalStringValue = Optional.empty();
          final long nullableOptionalStringWasPresentFieldID = 11L;
          Boolean nullableOptionalStringWasPresent = null;
          final long nullableOptionalStringWasNullFieldID = 12L;
          Optional<Boolean> nullableOptionalStringWasNull = Optional.empty();
          final long nullableOptionalStringValueFieldID = 13L;
          Optional<String> nullableOptionalStringValue = Optional.empty();
          final long nullableStructWasNullFieldID = 14L;
          Boolean nullableStructWasNull = null;
          final long nullableStructValueFieldID = 15L;
          Optional<ChipStructs.UnitTestingClusterSimpleStruct> nullableStructValue = Optional.empty();
          final long optionalStructWasPresentFieldID = 16L;
          Boolean optionalStructWasPresent = null;
          final long optionalStructValueFieldID = 17L;
          Optional<ChipStructs.UnitTestingClusterSimpleStruct> optionalStructValue = Optional.empty();
          final long nullableOptionalStructWasPresentFieldID = 18L;
          Boolean nullableOptionalStructWasPresent = null;
          final long nullableOptionalStructWasNullFieldID = 19L;
          Optional<Boolean> nullableOptionalStructWasNull = Optional.empty();
          final long nullableOptionalStructValueFieldID = 20L;
          Optional<ChipStructs.UnitTestingClusterSimpleStruct> nullableOptionalStructValue = Optional.empty();
          final long nullableListWasNullFieldID = 21L;
          Boolean nullableListWasNull = null;
          final long nullableListValueFieldID = 22L;
          Optional<ArrayList<Integer>> nullableListValue = Optional.empty();
          final long optionalListWasPresentFieldID = 23L;
          Boolean optionalListWasPresent = null;
          final long optionalListValueFieldID = 24L;
          Optional<ArrayList<Integer>> optionalListValue = Optional.empty();
          final long nullableOptionalListWasPresentFieldID = 25L;
          Boolean nullableOptionalListWasPresent = null;
          final long nullableOptionalListWasNullFieldID = 26L;
          Optional<Boolean> nullableOptionalListWasNull = Optional.empty();
          final long nullableOptionalListValueFieldID = 27L;
          Optional<ArrayList<Integer>> nullableOptionalListValue = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == nullableIntWasNullFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Boolean) {
                BooleanType castingValue = element.value(BooleanType.class);
                nullableIntWasNull = castingValue.value(Boolean.class);
              }
            } else if (element.contextTagNum() == nullableIntValueFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                nullableIntValue = Optional.of(castingValue.value(Integer.class));
              }
            } else if (element.contextTagNum() == optionalIntWasPresentFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Boolean) {
                BooleanType castingValue = element.value(BooleanType.class);
                optionalIntWasPresent = castingValue.value(Boolean.class);
              }
            } else if (element.contextTagNum() == optionalIntValueFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                optionalIntValue = Optional.of(castingValue.value(Integer.class));
              }
            } else if (element.contextTagNum() == nullableOptionalIntWasPresentFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Boolean) {
                BooleanType castingValue = element.value(BooleanType.class);
                nullableOptionalIntWasPresent = castingValue.value(Boolean.class);
              }
            } else if (element.contextTagNum() == nullableOptionalIntWasNullFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Boolean) {
                BooleanType castingValue = element.value(BooleanType.class);
                nullableOptionalIntWasNull = Optional.of(castingValue.value(Boolean.class));
              }
            } else if (element.contextTagNum() == nullableOptionalIntValueFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                nullableOptionalIntValue = Optional.of(castingValue.value(Integer.class));
              }
            } else if (element.contextTagNum() == nullableStringWasNullFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Boolean) {
                BooleanType castingValue = element.value(BooleanType.class);
                nullableStringWasNull = castingValue.value(Boolean.class);
              }
            } else if (element.contextTagNum() == nullableStringValueFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                nullableStringValue = Optional.of(castingValue.value(String.class));
              }
            } else if (element.contextTagNum() == optionalStringWasPresentFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Boolean) {
                BooleanType castingValue = element.value(BooleanType.class);
                optionalStringWasPresent = castingValue.value(Boolean.class);
              }
            } else if (element.contextTagNum() == optionalStringValueFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                optionalStringValue = Optional.of(castingValue.value(String.class));
              }
            } else if (element.contextTagNum() == nullableOptionalStringWasPresentFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Boolean) {
                BooleanType castingValue = element.value(BooleanType.class);
                nullableOptionalStringWasPresent = castingValue.value(Boolean.class);
              }
            } else if (element.contextTagNum() == nullableOptionalStringWasNullFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Boolean) {
                BooleanType castingValue = element.value(BooleanType.class);
                nullableOptionalStringWasNull = Optional.of(castingValue.value(Boolean.class));
              }
            } else if (element.contextTagNum() == nullableOptionalStringValueFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                nullableOptionalStringValue = Optional.of(castingValue.value(String.class));
              }
            } else if (element.contextTagNum() == nullableStructWasNullFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Boolean) {
                BooleanType castingValue = element.value(BooleanType.class);
                nullableStructWasNull = castingValue.value(Boolean.class);
              }
            } else if (element.contextTagNum() == nullableStructValueFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Struct) {
                StructType castingValue = element.value(StructType.class);
                nullableStructValue = Optional.of(ChipStructs.UnitTestingClusterSimpleStruct.decodeTlv(castingValue));
              }
            } else if (element.contextTagNum() == optionalStructWasPresentFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Boolean) {
                BooleanType castingValue = element.value(BooleanType.class);
                optionalStructWasPresent = castingValue.value(Boolean.class);
              }
            } else if (element.contextTagNum() == optionalStructValueFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Struct) {
                StructType castingValue = element.value(StructType.class);
                optionalStructValue = Optional.of(ChipStructs.UnitTestingClusterSimpleStruct.decodeTlv(castingValue));
              }
            } else if (element.contextTagNum() == nullableOptionalStructWasPresentFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Boolean) {
                BooleanType castingValue = element.value(BooleanType.class);
                nullableOptionalStructWasPresent = castingValue.value(Boolean.class);
              }
            } else if (element.contextTagNum() == nullableOptionalStructWasNullFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Boolean) {
                BooleanType castingValue = element.value(BooleanType.class);
                nullableOptionalStructWasNull = Optional.of(castingValue.value(Boolean.class));
              }
            } else if (element.contextTagNum() == nullableOptionalStructValueFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Struct) {
                StructType castingValue = element.value(StructType.class);
                nullableOptionalStructValue = Optional.of(ChipStructs.UnitTestingClusterSimpleStruct.decodeTlv(castingValue));
              }
            } else if (element.contextTagNum() == nullableListWasNullFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Boolean) {
                BooleanType castingValue = element.value(BooleanType.class);
                nullableListWasNull = castingValue.value(Boolean.class);
              }
            } else if (element.contextTagNum() == nullableListValueFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Array) {
                ArrayType castingValue = element.value(ArrayType.class);
                nullableListValue = Optional.of(castingValue.map((elementcastingValue) -> elementcastingValue.value(Integer.class)));
              }
            } else if (element.contextTagNum() == optionalListWasPresentFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Boolean) {
                BooleanType castingValue = element.value(BooleanType.class);
                optionalListWasPresent = castingValue.value(Boolean.class);
              }
            } else if (element.contextTagNum() == optionalListValueFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Array) {
                ArrayType castingValue = element.value(ArrayType.class);
                optionalListValue = Optional.of(castingValue.map((elementcastingValue) -> elementcastingValue.value(Integer.class)));
              }
            } else if (element.contextTagNum() == nullableOptionalListWasPresentFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Boolean) {
                BooleanType castingValue = element.value(BooleanType.class);
                nullableOptionalListWasPresent = castingValue.value(Boolean.class);
              }
            } else if (element.contextTagNum() == nullableOptionalListWasNullFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Boolean) {
                BooleanType castingValue = element.value(BooleanType.class);
                nullableOptionalListWasNull = Optional.of(castingValue.value(Boolean.class));
              }
            } else if (element.contextTagNum() == nullableOptionalListValueFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Array) {
                ArrayType castingValue = element.value(ArrayType.class);
                nullableOptionalListValue = Optional.of(castingValue.map((elementcastingValue) -> elementcastingValue.value(Integer.class)));
              }
            }
          }
          callback.onSuccess(nullableIntWasNull, nullableIntValue, optionalIntWasPresent, optionalIntValue, nullableOptionalIntWasPresent, nullableOptionalIntWasNull, nullableOptionalIntValue, nullableStringWasNull, nullableStringValue, optionalStringWasPresent, optionalStringValue, nullableOptionalStringWasPresent, nullableOptionalStringWasNull, nullableOptionalStringValue, nullableStructWasNull, nullableStructValue, optionalStructWasPresent, optionalStructValue, nullableOptionalStructWasPresent, nullableOptionalStructWasNull, nullableOptionalStructValue, nullableListWasNull, nullableListValue, optionalListWasPresent, optionalListValue, nullableOptionalListWasPresent, nullableOptionalListWasNull, nullableOptionalListValue);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void simpleStructEchoRequest(SimpleStructResponseCallback callback, ChipStructs.UnitTestingClusterSimpleStruct arg1) {
      simpleStructEchoRequest(callback, arg1, 0);
    }

    public void simpleStructEchoRequest(SimpleStructResponseCallback callback, ChipStructs.UnitTestingClusterSimpleStruct arg1, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 17L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long arg1FieldID = 0L;
      BaseTLVType arg1tlvValue = arg1.encodeTlv();
      elements.add(new StructElement(arg1FieldID, arg1tlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long arg1FieldID = 0L;
          ChipStructs.UnitTestingClusterSimpleStruct arg1 = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == arg1FieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Struct) {
                StructType castingValue = element.value(StructType.class);
                arg1 = ChipStructs.UnitTestingClusterSimpleStruct.decodeTlv(castingValue);
              }
            }
          }
          callback.onSuccess(arg1);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }


    public void timedInvokeRequest(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 18L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void testSimpleOptionalArgumentRequest(DefaultClusterCallback callback, Optional<Boolean> arg1) {
      testSimpleOptionalArgumentRequest(callback, arg1, 0);
    }

    public void testSimpleOptionalArgumentRequest(DefaultClusterCallback callback, Optional<Boolean> arg1, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 19L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long arg1FieldID = 0L;
      BaseTLVType arg1tlvValue = arg1.<BaseTLVType>map((nonOptionalarg1) -> new BooleanType(nonOptionalarg1)).orElse(new EmptyType());
      elements.add(new StructElement(arg1FieldID, arg1tlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void testEmitTestEventRequest(TestEmitTestEventResponseCallback callback, Integer arg1, Integer arg2, Boolean arg3) {
      testEmitTestEventRequest(callback, arg1, arg2, arg3, 0);
    }

    public void testEmitTestEventRequest(TestEmitTestEventResponseCallback callback, Integer arg1, Integer arg2, Boolean arg3, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 20L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long arg1FieldID = 0L;
      BaseTLVType arg1tlvValue = new UIntType(arg1);
      elements.add(new StructElement(arg1FieldID, arg1tlvValue));

      final long arg2FieldID = 1L;
      BaseTLVType arg2tlvValue = new UIntType(arg2);
      elements.add(new StructElement(arg2FieldID, arg2tlvValue));

      final long arg3FieldID = 2L;
      BaseTLVType arg3tlvValue = new BooleanType(arg3);
      elements.add(new StructElement(arg3FieldID, arg3tlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long valueFieldID = 0L;
          Long value = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == valueFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                value = castingValue.value(Long.class);
              }
            }
          }
          callback.onSuccess(value);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void testEmitTestFabricScopedEventRequest(TestEmitTestFabricScopedEventResponseCallback callback, Integer arg1) {
      testEmitTestFabricScopedEventRequest(callback, arg1, 0);
    }

    public void testEmitTestFabricScopedEventRequest(TestEmitTestFabricScopedEventResponseCallback callback, Integer arg1, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 21L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long arg1FieldID = 0L;
      BaseTLVType arg1tlvValue = new UIntType(arg1);
      elements.add(new StructElement(arg1FieldID, arg1tlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long valueFieldID = 0L;
          Long value = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == valueFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                value = castingValue.value(Long.class);
              }
            }
          }
          callback.onSuccess(value);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public interface TestSpecificResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer returnValue);
    }

    public interface TestAddArgumentsResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer returnValue);
    }

    public interface TestSimpleArgumentResponseCallback extends BaseClusterCallback {
      void onSuccess(Boolean returnValue);
    }

    public interface TestStructArrayArgumentResponseCallback extends BaseClusterCallback {
      void onSuccess(ArrayList<ChipStructs.UnitTestingClusterNestedStructList> arg1, ArrayList<ChipStructs.UnitTestingClusterSimpleStruct> arg2, ArrayList<Integer> arg3, ArrayList<Boolean> arg4, Integer arg5, Boolean arg6);
    }

    public interface BooleanResponseCallback extends BaseClusterCallback {
      void onSuccess(Boolean value);
    }

    public interface TestListInt8UReverseResponseCallback extends BaseClusterCallback {
      void onSuccess(ArrayList<Integer> arg1);
    }

    public interface TestEnumsResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer arg1, Integer arg2);
    }

    public interface TestNullableOptionalResponseCallback extends BaseClusterCallback {
      void onSuccess(Boolean wasPresent, Optional<Boolean> wasNull, Optional<Integer> value, @Nullable Optional<Integer> originalValue);
    }

    public interface TestComplexNullableOptionalResponseCallback extends BaseClusterCallback {
      void onSuccess(Boolean nullableIntWasNull, Optional<Integer> nullableIntValue, Boolean optionalIntWasPresent, Optional<Integer> optionalIntValue, Boolean nullableOptionalIntWasPresent, Optional<Boolean> nullableOptionalIntWasNull, Optional<Integer> nullableOptionalIntValue, Boolean nullableStringWasNull, Optional<String> nullableStringValue, Boolean optionalStringWasPresent, Optional<String> optionalStringValue, Boolean nullableOptionalStringWasPresent, Optional<Boolean> nullableOptionalStringWasNull, Optional<String> nullableOptionalStringValue, Boolean nullableStructWasNull, Optional<ChipStructs.UnitTestingClusterSimpleStruct> nullableStructValue, Boolean optionalStructWasPresent, Optional<ChipStructs.UnitTestingClusterSimpleStruct> optionalStructValue, Boolean nullableOptionalStructWasPresent, Optional<Boolean> nullableOptionalStructWasNull, Optional<ChipStructs.UnitTestingClusterSimpleStruct> nullableOptionalStructValue, Boolean nullableListWasNull, Optional<ArrayList<Integer>> nullableListValue, Boolean optionalListWasPresent, Optional<ArrayList<Integer>> optionalListValue, Boolean nullableOptionalListWasPresent, Optional<Boolean> nullableOptionalListWasNull, Optional<ArrayList<Integer>> nullableOptionalListValue);
    }

    public interface SimpleStructResponseCallback extends BaseClusterCallback {
      void onSuccess(ChipStructs.UnitTestingClusterSimpleStruct arg1);
    }

    public interface TestEmitTestEventResponseCallback extends BaseClusterCallback {
      void onSuccess(Long value);
    }

    public interface TestEmitTestFabricScopedEventResponseCallback extends BaseClusterCallback {
      void onSuccess(Long value);
    }

    public interface ListInt8uAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Integer> value);
    }

    public interface ListOctetStringAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<byte[]> value);
    }

    public interface ListStructOctetStringAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.UnitTestingClusterTestListStructOctet> value);
    }

    public interface ListNullablesAndOptionalsStructAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.UnitTestingClusterNullablesAndOptionalsStruct> value);
    }

    public interface StructAttrAttributeCallback extends BaseAttributeCallback {
      void onSuccess(ChipStructs.UnitTestingClusterSimpleStruct value);
    }

    public interface ListLongOctetStringAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<byte[]> value);
    }

    public interface ListFabricScopedAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.UnitTestingClusterTestFabricScoped> value);
    }

    public interface NullableBooleanAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Boolean value);
    }

    public interface NullableBitmap8AttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface NullableBitmap16AttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface NullableBitmap32AttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface NullableBitmap64AttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface NullableInt8uAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface NullableInt16uAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface NullableInt24uAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface NullableInt32uAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface NullableInt40uAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface NullableInt48uAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface NullableInt56uAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface NullableInt64uAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface NullableInt8sAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface NullableInt16sAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface NullableInt24sAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface NullableInt32sAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface NullableInt40sAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface NullableInt48sAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface NullableInt56sAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface NullableInt64sAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface NullableEnum8AttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface NullableEnum16AttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface NullableFloatSingleAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface NullableFloatDoubleAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Double value);
    }

    public interface NullableOctetStringAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable byte[] value);
    }

    public interface NullableCharStringAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable String value);
    }

    public interface NullableEnumAttrAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface NullableStructAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable ChipStructs.UnitTestingClusterSimpleStruct value);
    }

    public interface NullableRangeRestrictedInt8uAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface NullableRangeRestrictedInt8sAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface NullableRangeRestrictedInt16uAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface NullableRangeRestrictedInt16sAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readBooleanAttribute(
        BooleanAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeBooleanAttribute(DefaultClusterCallback callback, Boolean value) {
      writeBooleanAttribute(callback, value, 0);
    }

    public void writeBooleanAttribute(DefaultClusterCallback callback, Boolean value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      
      BaseTLVType tlvValue = new BooleanType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeBooleanAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readBitmap8Attribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeBitmap8Attribute(DefaultClusterCallback callback, Integer value) {
      writeBitmap8Attribute(callback, value, 0);
    }

    public void writeBitmap8Attribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeBitmap8Attribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 1L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readBitmap16Attribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeBitmap16Attribute(DefaultClusterCallback callback, Integer value) {
      writeBitmap16Attribute(callback, value, 0);
    }

    public void writeBitmap16Attribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeBitmap16Attribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 2L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readBitmap32Attribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeBitmap32Attribute(DefaultClusterCallback callback, Long value) {
      writeBitmap32Attribute(callback, value, 0);
    }

    public void writeBitmap32Attribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeBitmap32Attribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 3L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readBitmap64Attribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeBitmap64Attribute(DefaultClusterCallback callback, Long value) {
      writeBitmap64Attribute(callback, value, 0);
    }

    public void writeBitmap64Attribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeBitmap64Attribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 4L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readInt8uAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeInt8uAttribute(DefaultClusterCallback callback, Integer value) {
      writeInt8uAttribute(callback, value, 0);
    }

    public void writeInt8uAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeInt8uAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 5L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readInt16uAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeInt16uAttribute(DefaultClusterCallback callback, Integer value) {
      writeInt16uAttribute(callback, value, 0);
    }

    public void writeInt16uAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 6L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeInt16uAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 6L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readInt24uAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeInt24uAttribute(DefaultClusterCallback callback, Long value) {
      writeInt24uAttribute(callback, value, 0);
    }

    public void writeInt24uAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 7L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeInt24uAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 7L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readInt32uAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeInt32uAttribute(DefaultClusterCallback callback, Long value) {
      writeInt32uAttribute(callback, value, 0);
    }

    public void writeInt32uAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 8L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeInt32uAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 8L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readInt40uAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 9L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeInt40uAttribute(DefaultClusterCallback callback, Long value) {
      writeInt40uAttribute(callback, value, 0);
    }

    public void writeInt40uAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 9L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeInt40uAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 9L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readInt48uAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 10L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeInt48uAttribute(DefaultClusterCallback callback, Long value) {
      writeInt48uAttribute(callback, value, 0);
    }

    public void writeInt48uAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 10L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeInt48uAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 10L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readInt56uAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 11L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeInt56uAttribute(DefaultClusterCallback callback, Long value) {
      writeInt56uAttribute(callback, value, 0);
    }

    public void writeInt56uAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 11L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeInt56uAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 11L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readInt64uAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 12L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeInt64uAttribute(DefaultClusterCallback callback, Long value) {
      writeInt64uAttribute(callback, value, 0);
    }

    public void writeInt64uAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 12L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeInt64uAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 12L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readInt8sAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 13L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeInt8sAttribute(DefaultClusterCallback callback, Integer value) {
      writeInt8sAttribute(callback, value, 0);
    }

    public void writeInt8sAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 13L;
      
      BaseTLVType tlvValue = new IntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeInt8sAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 13L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readInt16sAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 14L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeInt16sAttribute(DefaultClusterCallback callback, Integer value) {
      writeInt16sAttribute(callback, value, 0);
    }

    public void writeInt16sAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 14L;
      
      BaseTLVType tlvValue = new IntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeInt16sAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 14L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readInt24sAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 15L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeInt24sAttribute(DefaultClusterCallback callback, Long value) {
      writeInt24sAttribute(callback, value, 0);
    }

    public void writeInt24sAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 15L;
      
      BaseTLVType tlvValue = new IntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeInt24sAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 15L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readInt32sAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeInt32sAttribute(DefaultClusterCallback callback, Long value) {
      writeInt32sAttribute(callback, value, 0);
    }

    public void writeInt32sAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16L;
      
      BaseTLVType tlvValue = new IntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeInt32sAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readInt40sAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 17L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeInt40sAttribute(DefaultClusterCallback callback, Long value) {
      writeInt40sAttribute(callback, value, 0);
    }

    public void writeInt40sAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 17L;
      
      BaseTLVType tlvValue = new IntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeInt40sAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 17L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readInt48sAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 18L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeInt48sAttribute(DefaultClusterCallback callback, Long value) {
      writeInt48sAttribute(callback, value, 0);
    }

    public void writeInt48sAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 18L;
      
      BaseTLVType tlvValue = new IntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeInt48sAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 18L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readInt56sAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 19L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeInt56sAttribute(DefaultClusterCallback callback, Long value) {
      writeInt56sAttribute(callback, value, 0);
    }

    public void writeInt56sAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 19L;
      
      BaseTLVType tlvValue = new IntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeInt56sAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 19L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readInt64sAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 20L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeInt64sAttribute(DefaultClusterCallback callback, Long value) {
      writeInt64sAttribute(callback, value, 0);
    }

    public void writeInt64sAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 20L;
      
      BaseTLVType tlvValue = new IntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeInt64sAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 20L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEnum8Attribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 21L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeEnum8Attribute(DefaultClusterCallback callback, Integer value) {
      writeEnum8Attribute(callback, value, 0);
    }

    public void writeEnum8Attribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 21L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeEnum8Attribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 21L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEnum16Attribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 22L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeEnum16Attribute(DefaultClusterCallback callback, Integer value) {
      writeEnum16Attribute(callback, value, 0);
    }

    public void writeEnum16Attribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 22L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeEnum16Attribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 22L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFloatSingleAttribute(
        FloatAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 23L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeFloatSingleAttribute(DefaultClusterCallback callback, Float value) {
      writeFloatSingleAttribute(callback, value, 0);
    }

    public void writeFloatSingleAttribute(DefaultClusterCallback callback, Float value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 23L;
      
      BaseTLVType tlvValue = new FloatType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeFloatSingleAttribute(
        FloatAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 23L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFloatDoubleAttribute(
        DoubleAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 24L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Double value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeFloatDoubleAttribute(DefaultClusterCallback callback, Double value) {
      writeFloatDoubleAttribute(callback, value, 0);
    }

    public void writeFloatDoubleAttribute(DefaultClusterCallback callback, Double value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 24L;
      
      BaseTLVType tlvValue = new DoubleType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeFloatDoubleAttribute(
        DoubleAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 24L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Double value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readOctetStringAttribute(
        OctetStringAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 25L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            byte[] value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeOctetStringAttribute(DefaultClusterCallback callback, byte[] value) {
      writeOctetStringAttribute(callback, value, 0);
    }

    public void writeOctetStringAttribute(DefaultClusterCallback callback, byte[] value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 25L;
      
      BaseTLVType tlvValue = new ByteArrayType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeOctetStringAttribute(
        OctetStringAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 25L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            byte[] value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readListInt8uAttribute(
        ListInt8uAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 26L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeListInt8uAttribute(DefaultClusterCallback callback, ArrayList<Integer> value) {
      writeListInt8uAttribute(callback, value, 0);
    }

    public void writeListInt8uAttribute(DefaultClusterCallback callback, ArrayList<Integer> value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 26L;
      
      BaseTLVType tlvValue = ArrayType.generateArrayType(value, (elementvalue) -> new UIntType(elementvalue));
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeListInt8uAttribute(
        ListInt8uAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 26L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readListOctetStringAttribute(
        ListOctetStringAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 27L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<byte[]> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeListOctetStringAttribute(DefaultClusterCallback callback, ArrayList<byte[]> value) {
      writeListOctetStringAttribute(callback, value, 0);
    }

    public void writeListOctetStringAttribute(DefaultClusterCallback callback, ArrayList<byte[]> value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 27L;
      
      BaseTLVType tlvValue = ArrayType.generateArrayType(value, (elementvalue) -> new ByteArrayType(elementvalue));
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeListOctetStringAttribute(
        ListOctetStringAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 27L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<byte[]> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readListStructOctetStringAttribute(
        ListStructOctetStringAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 28L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.UnitTestingClusterTestListStructOctet> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeListStructOctetStringAttribute(DefaultClusterCallback callback, ArrayList<ChipStructs.UnitTestingClusterTestListStructOctet> value) {
      writeListStructOctetStringAttribute(callback, value, 0);
    }

    public void writeListStructOctetStringAttribute(DefaultClusterCallback callback, ArrayList<ChipStructs.UnitTestingClusterTestListStructOctet> value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 28L;
      
      BaseTLVType tlvValue = ArrayType.generateArrayType(value, (elementvalue) -> elementvalue.encodeTlv());
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeListStructOctetStringAttribute(
        ListStructOctetStringAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 28L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.UnitTestingClusterTestListStructOctet> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readLongOctetStringAttribute(
        OctetStringAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 29L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            byte[] value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeLongOctetStringAttribute(DefaultClusterCallback callback, byte[] value) {
      writeLongOctetStringAttribute(callback, value, 0);
    }

    public void writeLongOctetStringAttribute(DefaultClusterCallback callback, byte[] value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 29L;
      
      BaseTLVType tlvValue = new ByteArrayType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeLongOctetStringAttribute(
        OctetStringAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 29L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            byte[] value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readCharStringAttribute(
        CharStringAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 30L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeCharStringAttribute(DefaultClusterCallback callback, String value) {
      writeCharStringAttribute(callback, value, 0);
    }

    public void writeCharStringAttribute(DefaultClusterCallback callback, String value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 30L;
      
      BaseTLVType tlvValue = new StringType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeCharStringAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 30L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readLongCharStringAttribute(
        CharStringAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 31L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeLongCharStringAttribute(DefaultClusterCallback callback, String value) {
      writeLongCharStringAttribute(callback, value, 0);
    }

    public void writeLongCharStringAttribute(DefaultClusterCallback callback, String value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 31L;
      
      BaseTLVType tlvValue = new StringType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeLongCharStringAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 31L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEpochUsAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 32L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeEpochUsAttribute(DefaultClusterCallback callback, Long value) {
      writeEpochUsAttribute(callback, value, 0);
    }

    public void writeEpochUsAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 32L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeEpochUsAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 32L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEpochSAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 33L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeEpochSAttribute(DefaultClusterCallback callback, Long value) {
      writeEpochSAttribute(callback, value, 0);
    }

    public void writeEpochSAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 33L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeEpochSAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 33L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readVendorIdAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 34L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeVendorIdAttribute(DefaultClusterCallback callback, Integer value) {
      writeVendorIdAttribute(callback, value, 0);
    }

    public void writeVendorIdAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 34L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeVendorIdAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 34L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readListNullablesAndOptionalsStructAttribute(
        ListNullablesAndOptionalsStructAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 35L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.UnitTestingClusterNullablesAndOptionalsStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeListNullablesAndOptionalsStructAttribute(DefaultClusterCallback callback, ArrayList<ChipStructs.UnitTestingClusterNullablesAndOptionalsStruct> value) {
      writeListNullablesAndOptionalsStructAttribute(callback, value, 0);
    }

    public void writeListNullablesAndOptionalsStructAttribute(DefaultClusterCallback callback, ArrayList<ChipStructs.UnitTestingClusterNullablesAndOptionalsStruct> value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 35L;
      
      BaseTLVType tlvValue = ArrayType.generateArrayType(value, (elementvalue) -> elementvalue.encodeTlv());
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeListNullablesAndOptionalsStructAttribute(
        ListNullablesAndOptionalsStructAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 35L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.UnitTestingClusterNullablesAndOptionalsStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEnumAttrAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 36L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeEnumAttrAttribute(DefaultClusterCallback callback, Integer value) {
      writeEnumAttrAttribute(callback, value, 0);
    }

    public void writeEnumAttrAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 36L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeEnumAttrAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 36L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readStructAttrAttribute(
        StructAttrAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 37L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            ChipStructs.UnitTestingClusterSimpleStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeStructAttrAttribute(DefaultClusterCallback callback, ChipStructs.UnitTestingClusterSimpleStruct value) {
      writeStructAttrAttribute(callback, value, 0);
    }

    public void writeStructAttrAttribute(DefaultClusterCallback callback, ChipStructs.UnitTestingClusterSimpleStruct value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 37L;
      
      BaseTLVType tlvValue = value.encodeTlv();
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeStructAttrAttribute(
        StructAttrAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 37L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            ChipStructs.UnitTestingClusterSimpleStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readRangeRestrictedInt8uAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 38L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeRangeRestrictedInt8uAttribute(DefaultClusterCallback callback, Integer value) {
      writeRangeRestrictedInt8uAttribute(callback, value, 0);
    }

    public void writeRangeRestrictedInt8uAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 38L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeRangeRestrictedInt8uAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 38L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readRangeRestrictedInt8sAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 39L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeRangeRestrictedInt8sAttribute(DefaultClusterCallback callback, Integer value) {
      writeRangeRestrictedInt8sAttribute(callback, value, 0);
    }

    public void writeRangeRestrictedInt8sAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 39L;
      
      BaseTLVType tlvValue = new IntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeRangeRestrictedInt8sAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 39L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readRangeRestrictedInt16uAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 40L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeRangeRestrictedInt16uAttribute(DefaultClusterCallback callback, Integer value) {
      writeRangeRestrictedInt16uAttribute(callback, value, 0);
    }

    public void writeRangeRestrictedInt16uAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 40L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeRangeRestrictedInt16uAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 40L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readRangeRestrictedInt16sAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 41L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeRangeRestrictedInt16sAttribute(DefaultClusterCallback callback, Integer value) {
      writeRangeRestrictedInt16sAttribute(callback, value, 0);
    }

    public void writeRangeRestrictedInt16sAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 41L;
      
      BaseTLVType tlvValue = new IntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeRangeRestrictedInt16sAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 41L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readListLongOctetStringAttribute(
        ListLongOctetStringAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 42L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<byte[]> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeListLongOctetStringAttribute(DefaultClusterCallback callback, ArrayList<byte[]> value) {
      writeListLongOctetStringAttribute(callback, value, 0);
    }

    public void writeListLongOctetStringAttribute(DefaultClusterCallback callback, ArrayList<byte[]> value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 42L;
      
      BaseTLVType tlvValue = ArrayType.generateArrayType(value, (elementvalue) -> new ByteArrayType(elementvalue));
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeListLongOctetStringAttribute(
        ListLongOctetStringAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 42L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<byte[]> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readListFabricScopedAttribute(
        ListFabricScopedAttributeCallback callback) {
      readListFabricScopedAttributeWithFabricFilter(callback, true);
    }

    public void readListFabricScopedAttributeWithFabricFilter(
        ListFabricScopedAttributeCallback callback, boolean isFabricFiltered) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 43L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.UnitTestingClusterTestFabricScoped> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, isFabricFiltered);
    }

    public void writeListFabricScopedAttribute(DefaultClusterCallback callback, ArrayList<ChipStructs.UnitTestingClusterTestFabricScoped> value) {
      writeListFabricScopedAttribute(callback, value, 0);
    }

    public void writeListFabricScopedAttribute(DefaultClusterCallback callback, ArrayList<ChipStructs.UnitTestingClusterTestFabricScoped> value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 43L;
      
      BaseTLVType tlvValue = ArrayType.generateArrayType(value, (elementvalue) -> elementvalue.encodeTlv());
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeListFabricScopedAttribute(
        ListFabricScopedAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 43L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.UnitTestingClusterTestFabricScoped> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readTimedWriteBooleanAttribute(
        BooleanAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 48L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeTimedWriteBooleanAttribute(DefaultClusterCallback callback, Boolean value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 48L;
      
      BaseTLVType tlvValue = new BooleanType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeTimedWriteBooleanAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 48L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneralErrorBooleanAttribute(
        BooleanAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 49L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeGeneralErrorBooleanAttribute(DefaultClusterCallback callback, Boolean value) {
      writeGeneralErrorBooleanAttribute(callback, value, 0);
    }

    public void writeGeneralErrorBooleanAttribute(DefaultClusterCallback callback, Boolean value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 49L;
      
      BaseTLVType tlvValue = new BooleanType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeGeneralErrorBooleanAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 49L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterErrorBooleanAttribute(
        BooleanAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 50L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeClusterErrorBooleanAttribute(DefaultClusterCallback callback, Boolean value) {
      writeClusterErrorBooleanAttribute(callback, value, 0);
    }

    public void writeClusterErrorBooleanAttribute(DefaultClusterCallback callback, Boolean value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 50L;
      
      BaseTLVType tlvValue = new BooleanType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeClusterErrorBooleanAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 50L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readUnsupportedAttribute(
        BooleanAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 255L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeUnsupportedAttribute(DefaultClusterCallback callback, Boolean value) {
      writeUnsupportedAttribute(callback, value, 0);
    }

    public void writeUnsupportedAttribute(DefaultClusterCallback callback, Boolean value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 255L;
      
      BaseTLVType tlvValue = new BooleanType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeUnsupportedAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 255L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readNullableBooleanAttribute(
        NullableBooleanAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16384L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeNullableBooleanAttribute(DefaultClusterCallback callback, Boolean value) {
      writeNullableBooleanAttribute(callback, value, 0);
    }

    public void writeNullableBooleanAttribute(DefaultClusterCallback callback, Boolean value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16384L;
      
      BaseTLVType tlvValue = value != null ? new BooleanType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeNullableBooleanAttribute(
        NullableBooleanAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16384L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readNullableBitmap8Attribute(
        NullableBitmap8AttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16385L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeNullableBitmap8Attribute(DefaultClusterCallback callback, Integer value) {
      writeNullableBitmap8Attribute(callback, value, 0);
    }

    public void writeNullableBitmap8Attribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16385L;
      
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeNullableBitmap8Attribute(
        NullableBitmap8AttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16385L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readNullableBitmap16Attribute(
        NullableBitmap16AttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16386L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeNullableBitmap16Attribute(DefaultClusterCallback callback, Integer value) {
      writeNullableBitmap16Attribute(callback, value, 0);
    }

    public void writeNullableBitmap16Attribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16386L;
      
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeNullableBitmap16Attribute(
        NullableBitmap16AttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16386L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readNullableBitmap32Attribute(
        NullableBitmap32AttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16387L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeNullableBitmap32Attribute(DefaultClusterCallback callback, Long value) {
      writeNullableBitmap32Attribute(callback, value, 0);
    }

    public void writeNullableBitmap32Attribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16387L;
      
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeNullableBitmap32Attribute(
        NullableBitmap32AttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16387L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readNullableBitmap64Attribute(
        NullableBitmap64AttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16388L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeNullableBitmap64Attribute(DefaultClusterCallback callback, Long value) {
      writeNullableBitmap64Attribute(callback, value, 0);
    }

    public void writeNullableBitmap64Attribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16388L;
      
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeNullableBitmap64Attribute(
        NullableBitmap64AttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16388L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readNullableInt8uAttribute(
        NullableInt8uAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16389L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeNullableInt8uAttribute(DefaultClusterCallback callback, Integer value) {
      writeNullableInt8uAttribute(callback, value, 0);
    }

    public void writeNullableInt8uAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16389L;
      
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeNullableInt8uAttribute(
        NullableInt8uAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16389L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readNullableInt16uAttribute(
        NullableInt16uAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16390L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeNullableInt16uAttribute(DefaultClusterCallback callback, Integer value) {
      writeNullableInt16uAttribute(callback, value, 0);
    }

    public void writeNullableInt16uAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16390L;
      
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeNullableInt16uAttribute(
        NullableInt16uAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16390L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readNullableInt24uAttribute(
        NullableInt24uAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16391L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeNullableInt24uAttribute(DefaultClusterCallback callback, Long value) {
      writeNullableInt24uAttribute(callback, value, 0);
    }

    public void writeNullableInt24uAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16391L;
      
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeNullableInt24uAttribute(
        NullableInt24uAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16391L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readNullableInt32uAttribute(
        NullableInt32uAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16392L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeNullableInt32uAttribute(DefaultClusterCallback callback, Long value) {
      writeNullableInt32uAttribute(callback, value, 0);
    }

    public void writeNullableInt32uAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16392L;
      
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeNullableInt32uAttribute(
        NullableInt32uAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16392L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readNullableInt40uAttribute(
        NullableInt40uAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16393L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeNullableInt40uAttribute(DefaultClusterCallback callback, Long value) {
      writeNullableInt40uAttribute(callback, value, 0);
    }

    public void writeNullableInt40uAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16393L;
      
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeNullableInt40uAttribute(
        NullableInt40uAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16393L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readNullableInt48uAttribute(
        NullableInt48uAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16394L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeNullableInt48uAttribute(DefaultClusterCallback callback, Long value) {
      writeNullableInt48uAttribute(callback, value, 0);
    }

    public void writeNullableInt48uAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16394L;
      
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeNullableInt48uAttribute(
        NullableInt48uAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16394L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readNullableInt56uAttribute(
        NullableInt56uAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16395L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeNullableInt56uAttribute(DefaultClusterCallback callback, Long value) {
      writeNullableInt56uAttribute(callback, value, 0);
    }

    public void writeNullableInt56uAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16395L;
      
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeNullableInt56uAttribute(
        NullableInt56uAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16395L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readNullableInt64uAttribute(
        NullableInt64uAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16396L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeNullableInt64uAttribute(DefaultClusterCallback callback, Long value) {
      writeNullableInt64uAttribute(callback, value, 0);
    }

    public void writeNullableInt64uAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16396L;
      
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeNullableInt64uAttribute(
        NullableInt64uAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16396L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readNullableInt8sAttribute(
        NullableInt8sAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16397L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeNullableInt8sAttribute(DefaultClusterCallback callback, Integer value) {
      writeNullableInt8sAttribute(callback, value, 0);
    }

    public void writeNullableInt8sAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16397L;
      
      BaseTLVType tlvValue = value != null ? new IntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeNullableInt8sAttribute(
        NullableInt8sAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16397L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readNullableInt16sAttribute(
        NullableInt16sAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16398L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeNullableInt16sAttribute(DefaultClusterCallback callback, Integer value) {
      writeNullableInt16sAttribute(callback, value, 0);
    }

    public void writeNullableInt16sAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16398L;
      
      BaseTLVType tlvValue = value != null ? new IntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeNullableInt16sAttribute(
        NullableInt16sAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16398L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readNullableInt24sAttribute(
        NullableInt24sAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16399L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeNullableInt24sAttribute(DefaultClusterCallback callback, Long value) {
      writeNullableInt24sAttribute(callback, value, 0);
    }

    public void writeNullableInt24sAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16399L;
      
      BaseTLVType tlvValue = value != null ? new IntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeNullableInt24sAttribute(
        NullableInt24sAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16399L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readNullableInt32sAttribute(
        NullableInt32sAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16400L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeNullableInt32sAttribute(DefaultClusterCallback callback, Long value) {
      writeNullableInt32sAttribute(callback, value, 0);
    }

    public void writeNullableInt32sAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16400L;
      
      BaseTLVType tlvValue = value != null ? new IntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeNullableInt32sAttribute(
        NullableInt32sAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16400L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readNullableInt40sAttribute(
        NullableInt40sAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16401L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeNullableInt40sAttribute(DefaultClusterCallback callback, Long value) {
      writeNullableInt40sAttribute(callback, value, 0);
    }

    public void writeNullableInt40sAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16401L;
      
      BaseTLVType tlvValue = value != null ? new IntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeNullableInt40sAttribute(
        NullableInt40sAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16401L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readNullableInt48sAttribute(
        NullableInt48sAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16402L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeNullableInt48sAttribute(DefaultClusterCallback callback, Long value) {
      writeNullableInt48sAttribute(callback, value, 0);
    }

    public void writeNullableInt48sAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16402L;
      
      BaseTLVType tlvValue = value != null ? new IntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeNullableInt48sAttribute(
        NullableInt48sAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16402L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readNullableInt56sAttribute(
        NullableInt56sAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16403L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeNullableInt56sAttribute(DefaultClusterCallback callback, Long value) {
      writeNullableInt56sAttribute(callback, value, 0);
    }

    public void writeNullableInt56sAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16403L;
      
      BaseTLVType tlvValue = value != null ? new IntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeNullableInt56sAttribute(
        NullableInt56sAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16403L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readNullableInt64sAttribute(
        NullableInt64sAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16404L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeNullableInt64sAttribute(DefaultClusterCallback callback, Long value) {
      writeNullableInt64sAttribute(callback, value, 0);
    }

    public void writeNullableInt64sAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16404L;
      
      BaseTLVType tlvValue = value != null ? new IntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeNullableInt64sAttribute(
        NullableInt64sAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16404L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readNullableEnum8Attribute(
        NullableEnum8AttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16405L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeNullableEnum8Attribute(DefaultClusterCallback callback, Integer value) {
      writeNullableEnum8Attribute(callback, value, 0);
    }

    public void writeNullableEnum8Attribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16405L;
      
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeNullableEnum8Attribute(
        NullableEnum8AttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16405L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readNullableEnum16Attribute(
        NullableEnum16AttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16406L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeNullableEnum16Attribute(DefaultClusterCallback callback, Integer value) {
      writeNullableEnum16Attribute(callback, value, 0);
    }

    public void writeNullableEnum16Attribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16406L;
      
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeNullableEnum16Attribute(
        NullableEnum16AttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16406L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readNullableFloatSingleAttribute(
        NullableFloatSingleAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16407L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeNullableFloatSingleAttribute(DefaultClusterCallback callback, Float value) {
      writeNullableFloatSingleAttribute(callback, value, 0);
    }

    public void writeNullableFloatSingleAttribute(DefaultClusterCallback callback, Float value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16407L;
      
      BaseTLVType tlvValue = value != null ? new FloatType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeNullableFloatSingleAttribute(
        NullableFloatSingleAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16407L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readNullableFloatDoubleAttribute(
        NullableFloatDoubleAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16408L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Double value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeNullableFloatDoubleAttribute(DefaultClusterCallback callback, Double value) {
      writeNullableFloatDoubleAttribute(callback, value, 0);
    }

    public void writeNullableFloatDoubleAttribute(DefaultClusterCallback callback, Double value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16408L;
      
      BaseTLVType tlvValue = value != null ? new DoubleType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeNullableFloatDoubleAttribute(
        NullableFloatDoubleAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16408L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Double value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readNullableOctetStringAttribute(
        NullableOctetStringAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16409L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable byte[] value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeNullableOctetStringAttribute(DefaultClusterCallback callback, byte[] value) {
      writeNullableOctetStringAttribute(callback, value, 0);
    }

    public void writeNullableOctetStringAttribute(DefaultClusterCallback callback, byte[] value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16409L;
      
      BaseTLVType tlvValue = value != null ? new ByteArrayType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeNullableOctetStringAttribute(
        NullableOctetStringAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16409L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable byte[] value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readNullableCharStringAttribute(
        NullableCharStringAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16414L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeNullableCharStringAttribute(DefaultClusterCallback callback, String value) {
      writeNullableCharStringAttribute(callback, value, 0);
    }

    public void writeNullableCharStringAttribute(DefaultClusterCallback callback, String value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16414L;
      
      BaseTLVType tlvValue = value != null ? new StringType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeNullableCharStringAttribute(
        NullableCharStringAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16414L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readNullableEnumAttrAttribute(
        NullableEnumAttrAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16420L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeNullableEnumAttrAttribute(DefaultClusterCallback callback, Integer value) {
      writeNullableEnumAttrAttribute(callback, value, 0);
    }

    public void writeNullableEnumAttrAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16420L;
      
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeNullableEnumAttrAttribute(
        NullableEnumAttrAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16420L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readNullableStructAttribute(
        NullableStructAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16421L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable ChipStructs.UnitTestingClusterSimpleStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeNullableStructAttribute(DefaultClusterCallback callback, ChipStructs.UnitTestingClusterSimpleStruct value) {
      writeNullableStructAttribute(callback, value, 0);
    }

    public void writeNullableStructAttribute(DefaultClusterCallback callback, ChipStructs.UnitTestingClusterSimpleStruct value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16421L;
      
      BaseTLVType tlvValue = value != null ? value.encodeTlv() : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeNullableStructAttribute(
        NullableStructAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16421L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable ChipStructs.UnitTestingClusterSimpleStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readNullableRangeRestrictedInt8uAttribute(
        NullableRangeRestrictedInt8uAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16422L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeNullableRangeRestrictedInt8uAttribute(DefaultClusterCallback callback, Integer value) {
      writeNullableRangeRestrictedInt8uAttribute(callback, value, 0);
    }

    public void writeNullableRangeRestrictedInt8uAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16422L;
      
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeNullableRangeRestrictedInt8uAttribute(
        NullableRangeRestrictedInt8uAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16422L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readNullableRangeRestrictedInt8sAttribute(
        NullableRangeRestrictedInt8sAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16423L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeNullableRangeRestrictedInt8sAttribute(DefaultClusterCallback callback, Integer value) {
      writeNullableRangeRestrictedInt8sAttribute(callback, value, 0);
    }

    public void writeNullableRangeRestrictedInt8sAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16423L;
      
      BaseTLVType tlvValue = value != null ? new IntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeNullableRangeRestrictedInt8sAttribute(
        NullableRangeRestrictedInt8sAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16423L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readNullableRangeRestrictedInt16uAttribute(
        NullableRangeRestrictedInt16uAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16424L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeNullableRangeRestrictedInt16uAttribute(DefaultClusterCallback callback, Integer value) {
      writeNullableRangeRestrictedInt16uAttribute(callback, value, 0);
    }

    public void writeNullableRangeRestrictedInt16uAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16424L;
      
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeNullableRangeRestrictedInt16uAttribute(
        NullableRangeRestrictedInt16uAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16424L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readNullableRangeRestrictedInt16sAttribute(
        NullableRangeRestrictedInt16sAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16425L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeNullableRangeRestrictedInt16sAttribute(DefaultClusterCallback callback, Integer value) {
      writeNullableRangeRestrictedInt16sAttribute(callback, value, 0);
    }

    public void writeNullableRangeRestrictedInt16sAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16425L;
      
      BaseTLVType tlvValue = value != null ? new IntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeNullableRangeRestrictedInt16sAttribute(
        NullableRangeRestrictedInt16sAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16425L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readWriteOnlyInt8uAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16426L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeWriteOnlyInt8uAttribute(DefaultClusterCallback callback, Integer value) {
      writeWriteOnlyInt8uAttribute(callback, value, 0);
    }

    public void writeWriteOnlyInt8uAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16426L;
      
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeWriteOnlyInt8uAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 16426L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class FaultInjectionCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 4294048774L;

    public FaultInjectionCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void failAtFault(DefaultClusterCallback callback, Integer type, Long id, Long numCallsToSkip, Long numCallsToFail, Boolean takeMutex) {
      failAtFault(callback, type, id, numCallsToSkip, numCallsToFail, takeMutex, 0);
    }

    public void failAtFault(DefaultClusterCallback callback, Integer type, Long id, Long numCallsToSkip, Long numCallsToFail, Boolean takeMutex, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long typeFieldID = 0L;
      BaseTLVType typetlvValue = new UIntType(type);
      elements.add(new StructElement(typeFieldID, typetlvValue));

      final long idFieldID = 1L;
      BaseTLVType idtlvValue = new UIntType(id);
      elements.add(new StructElement(idFieldID, idtlvValue));

      final long numCallsToSkipFieldID = 2L;
      BaseTLVType numCallsToSkiptlvValue = new UIntType(numCallsToSkip);
      elements.add(new StructElement(numCallsToSkipFieldID, numCallsToSkiptlvValue));

      final long numCallsToFailFieldID = 3L;
      BaseTLVType numCallsToFailtlvValue = new UIntType(numCallsToFail);
      elements.add(new StructElement(numCallsToFailFieldID, numCallsToFailtlvValue));

      final long takeMutexFieldID = 4L;
      BaseTLVType takeMutextlvValue = new BooleanType(takeMutex);
      elements.add(new StructElement(takeMutexFieldID, takeMutextlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void failRandomlyAtFault(DefaultClusterCallback callback, Integer type, Long id, Integer percentage) {
      failRandomlyAtFault(callback, type, id, percentage, 0);
    }

    public void failRandomlyAtFault(DefaultClusterCallback callback, Integer type, Long id, Integer percentage, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 1L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long typeFieldID = 0L;
      BaseTLVType typetlvValue = new UIntType(type);
      elements.add(new StructElement(typeFieldID, typetlvValue));

      final long idFieldID = 1L;
      BaseTLVType idtlvValue = new UIntType(id);
      elements.add(new StructElement(idFieldID, idtlvValue));

      final long percentageFieldID = 2L;
      BaseTLVType percentagetlvValue = new UIntType(percentage);
      elements.add(new StructElement(percentageFieldID, percentagetlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }

  public static class SampleMeiCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 4294048800L;

    public SampleMeiCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void ping(DefaultClusterCallback callback) {
      ping(callback, 0);
    }

    public void ping(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public void addArguments(AddArgumentsResponseCallback callback, Integer arg1, Integer arg2) {
      addArguments(callback, arg1, arg2, 0);
    }

    public void addArguments(AddArgumentsResponseCallback callback, Integer arg1, Integer arg2, int timedInvokeTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long commandId = 2L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long arg1FieldID = 0L;
      BaseTLVType arg1tlvValue = new UIntType(arg1);
      elements.add(new StructElement(arg1FieldID, arg1tlvValue));

      final long arg2FieldID = 1L;
      BaseTLVType arg2tlvValue = new UIntType(arg2);
      elements.add(new StructElement(arg2FieldID, arg2tlvValue));

      StructType value = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long returnValueFieldID = 0L;
          Integer returnValue = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == returnValueFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                returnValue = castingValue.value(Integer.class);
              }
            }
          }
          callback.onSuccess(returnValue);
        }}, clusterId, commandId, value, timedInvokeTimeoutMs);
    }

    public interface AddArgumentsResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer returnValue);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readFlipFlopAttribute(
        BooleanAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void writeFlipFlopAttribute(DefaultClusterCallback callback, Boolean value) {
      writeFlipFlopAttribute(callback, value, 0);
    }

    public void writeFlipFlopAttribute(DefaultClusterCallback callback, Boolean value, int timedWriteTimeoutMs) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      
      BaseTLVType tlvValue = new BooleanType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), clusterId, attributeId, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeFlipFlopAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 0L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65528L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65529L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65530L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65531L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65532L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, clusterId, attributeId, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      final long clusterId = CLUSTER_ID;
      final long attributeId = 65533L;
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId); 

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
          }
        }, clusterId, attributeId, minInterval, maxInterval);
    }
  }
}
