/*
 *
 *    Copyright (c) 2023 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */
package chip.devicecontroller;

import chip.clusterinfo.ClusterCommandCallback;
import chip.clusterinfo.CommandParameterInfo;
import chip.clusterinfo.CommandResponseInfo;
import chip.clusterinfo.DelegatedClusterCallback;
import chip.clusterinfo.InteractionInfo;
import chip.devicecontroller.model.ChipAttributePath;
import chip.devicecontroller.model.ChipEventPath;
import chip.devicecontroller.model.NodeState;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

public class ClusterReadMapping {
  public static abstract class DelegatedReportCallback implements ReportCallback, DelegatedClusterCallback {
    private ChipAttributePath path;
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    public void setAttributePath(ChipAttributePath path) {
      this.path = path;
    }

    @Override
    public void onReport(NodeState nodeState) {
      byte[] tlv = nodeState.getEndpointState((int)path.getEndpointId().getId()).getClusterState(path.getClusterId().getId()).getAttributeState(path.getAttributeId().getId()).getTlv();
      Object obj = parseTlv(path, tlv);

      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo valueKey = new CommandResponseInfo("value", obj.getClass().getSimpleName());
      responseValues.put(valueKey, obj);
      callback.onSuccess(responseValues);
    }

    public abstract Object parseTlv(ChipAttributePath path, byte[] tlv);

    @Override
    public void onError(ChipAttributePath attributePath, ChipEventPath eventPath, Exception e) {
      callback.onFailure(e);
    }
  }


    private static Map<String, InteractionInfo> readIdentifyInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readIdentifyIdentifyTimeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readIdentifyIdentifyTimeAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Identify.ID, ClusterIDMapping.Identify.Attribute.IdentifyTime.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.IdentifyCluster) cluster).readIdentifyTimeAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readIdentifyIdentifyTimeCommandParams
        );
        result.put("readIdentifyTimeAttribute", readIdentifyIdentifyTimeAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readIdentifyIdentifyTypeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readIdentifyIdentifyTypeAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Identify.ID, ClusterIDMapping.Identify.Attribute.IdentifyType.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.IdentifyCluster) cluster).readIdentifyTypeAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readIdentifyIdentifyTypeCommandParams
        );
        result.put("readIdentifyTypeAttribute", readIdentifyIdentifyTypeAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readIdentifyGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readIdentifyGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Identify.ID, ClusterIDMapping.Identify.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.IdentifyCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.IdentifyCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIdentifyClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readIdentifyGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readIdentifyGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readIdentifyAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readIdentifyAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Identify.ID, ClusterIDMapping.Identify.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.IdentifyCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.IdentifyCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIdentifyClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readIdentifyAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readIdentifyAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readIdentifyEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readIdentifyEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Identify.ID, ClusterIDMapping.Identify.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.IdentifyCluster) cluster).readEventListAttribute(
//              (ChipClusters.IdentifyCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIdentifyClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readIdentifyEventListCommandParams
        );
        result.put("readEventListAttribute", readIdentifyEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readIdentifyAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readIdentifyAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Identify.ID, ClusterIDMapping.Identify.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.IdentifyCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.IdentifyCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIdentifyClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readIdentifyAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readIdentifyAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readIdentifyFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readIdentifyFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Identify.ID, ClusterIDMapping.Identify.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.IdentifyCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readIdentifyFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readIdentifyFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readIdentifyClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readIdentifyClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Identify.ID, ClusterIDMapping.Identify.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.IdentifyCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readIdentifyClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readIdentifyClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readGroupsInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readGroupsNameSupportCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readGroupsNameSupportAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Groups.ID, ClusterIDMapping.Groups.Attribute.NameSupport.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.GroupsCluster) cluster).readNameSupportAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readGroupsNameSupportCommandParams
        );
        result.put("readNameSupportAttribute", readGroupsNameSupportAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readGroupsGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readGroupsGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Groups.ID, ClusterIDMapping.Groups.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.GroupsCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.GroupsCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedGroupsClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readGroupsGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readGroupsGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readGroupsAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readGroupsAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Groups.ID, ClusterIDMapping.Groups.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.GroupsCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.GroupsCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedGroupsClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readGroupsAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readGroupsAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readGroupsEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readGroupsEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Groups.ID, ClusterIDMapping.Groups.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.GroupsCluster) cluster).readEventListAttribute(
//              (ChipClusters.GroupsCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedGroupsClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readGroupsEventListCommandParams
        );
        result.put("readEventListAttribute", readGroupsEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readGroupsAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readGroupsAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Groups.ID, ClusterIDMapping.Groups.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.GroupsCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.GroupsCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedGroupsClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readGroupsAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readGroupsAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readGroupsFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readGroupsFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Groups.ID, ClusterIDMapping.Groups.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.GroupsCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readGroupsFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readGroupsFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readGroupsClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readGroupsClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Groups.ID, ClusterIDMapping.Groups.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.GroupsCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readGroupsClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readGroupsClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readScenesInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readScenesSceneCountCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readScenesSceneCountAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Scenes.ID, ClusterIDMapping.Scenes.Attribute.SceneCount.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ScenesCluster) cluster).readSceneCountAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readScenesSceneCountCommandParams
        );
        result.put("readSceneCountAttribute", readScenesSceneCountAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readScenesCurrentSceneCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readScenesCurrentSceneAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Scenes.ID, ClusterIDMapping.Scenes.Attribute.CurrentScene.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ScenesCluster) cluster).readCurrentSceneAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readScenesCurrentSceneCommandParams
        );
        result.put("readCurrentSceneAttribute", readScenesCurrentSceneAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readScenesCurrentGroupCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readScenesCurrentGroupAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Scenes.ID, ClusterIDMapping.Scenes.Attribute.CurrentGroup.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ScenesCluster) cluster).readCurrentGroupAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readScenesCurrentGroupCommandParams
        );
        result.put("readCurrentGroupAttribute", readScenesCurrentGroupAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readScenesSceneValidCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readScenesSceneValidAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Scenes.ID, ClusterIDMapping.Scenes.Attribute.SceneValid.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ScenesCluster) cluster).readSceneValidAttribute(
//              (ChipClusters.BooleanAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBooleanAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readScenesSceneValidCommandParams
        );
        result.put("readSceneValidAttribute", readScenesSceneValidAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readScenesNameSupportCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readScenesNameSupportAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Scenes.ID, ClusterIDMapping.Scenes.Attribute.NameSupport.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ScenesCluster) cluster).readNameSupportAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readScenesNameSupportCommandParams
        );
        result.put("readNameSupportAttribute", readScenesNameSupportAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readScenesLastConfiguredByCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readScenesLastConfiguredByAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Scenes.ID, ClusterIDMapping.Scenes.Attribute.LastConfiguredBy.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ScenesCluster) cluster).readLastConfiguredByAttribute(
//              (ChipClusters.ScenesCluster.LastConfiguredByAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedScenesClusterLastConfiguredByAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readScenesLastConfiguredByCommandParams
        );
        result.put("readLastConfiguredByAttribute", readScenesLastConfiguredByAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readScenesSceneTableSizeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readScenesSceneTableSizeAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Scenes.ID, ClusterIDMapping.Scenes.Attribute.SceneTableSize.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ScenesCluster) cluster).readSceneTableSizeAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readScenesSceneTableSizeCommandParams
        );
        result.put("readSceneTableSizeAttribute", readScenesSceneTableSizeAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readScenesRemainingCapacityCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readScenesRemainingCapacityAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Scenes.ID, ClusterIDMapping.Scenes.Attribute.RemainingCapacity.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ScenesCluster) cluster).readRemainingCapacityAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readScenesRemainingCapacityCommandParams
        );
        result.put("readRemainingCapacityAttribute", readScenesRemainingCapacityAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readScenesGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readScenesGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Scenes.ID, ClusterIDMapping.Scenes.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ScenesCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.ScenesCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedScenesClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readScenesGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readScenesGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readScenesAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readScenesAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Scenes.ID, ClusterIDMapping.Scenes.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ScenesCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.ScenesCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedScenesClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readScenesAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readScenesAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readScenesEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readScenesEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Scenes.ID, ClusterIDMapping.Scenes.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ScenesCluster) cluster).readEventListAttribute(
//              (ChipClusters.ScenesCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedScenesClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readScenesEventListCommandParams
        );
        result.put("readEventListAttribute", readScenesEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readScenesAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readScenesAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Scenes.ID, ClusterIDMapping.Scenes.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ScenesCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.ScenesCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedScenesClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readScenesAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readScenesAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readScenesFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readScenesFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Scenes.ID, ClusterIDMapping.Scenes.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ScenesCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readScenesFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readScenesFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readScenesClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readScenesClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Scenes.ID, ClusterIDMapping.Scenes.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ScenesCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readScenesClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readScenesClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readOnOffInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readOnOffOnOffCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOnOffOnOffAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OnOff.ID, ClusterIDMapping.OnOff.Attribute.OnOff.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OnOffCluster) cluster).readOnOffAttribute(
//              (ChipClusters.BooleanAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBooleanAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOnOffOnOffCommandParams
        );
        result.put("readOnOffAttribute", readOnOffOnOffAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOnOffGlobalSceneControlCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOnOffGlobalSceneControlAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OnOff.ID, ClusterIDMapping.OnOff.Attribute.GlobalSceneControl.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OnOffCluster) cluster).readGlobalSceneControlAttribute(
//              (ChipClusters.BooleanAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBooleanAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOnOffGlobalSceneControlCommandParams
        );
        result.put("readGlobalSceneControlAttribute", readOnOffGlobalSceneControlAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOnOffOnTimeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOnOffOnTimeAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OnOff.ID, ClusterIDMapping.OnOff.Attribute.OnTime.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OnOffCluster) cluster).readOnTimeAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOnOffOnTimeCommandParams
        );
        result.put("readOnTimeAttribute", readOnOffOnTimeAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOnOffOffWaitTimeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOnOffOffWaitTimeAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OnOff.ID, ClusterIDMapping.OnOff.Attribute.OffWaitTime.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OnOffCluster) cluster).readOffWaitTimeAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOnOffOffWaitTimeCommandParams
        );
        result.put("readOffWaitTimeAttribute", readOnOffOffWaitTimeAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOnOffStartUpOnOffCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOnOffStartUpOnOffAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OnOff.ID, ClusterIDMapping.OnOff.Attribute.StartUpOnOff.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OnOffCluster) cluster).readStartUpOnOffAttribute(
//              (ChipClusters.OnOffCluster.StartUpOnOffAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedOnOffClusterStartUpOnOffAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOnOffStartUpOnOffCommandParams
        );
        result.put("readStartUpOnOffAttribute", readOnOffStartUpOnOffAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOnOffGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOnOffGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OnOff.ID, ClusterIDMapping.OnOff.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OnOffCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.OnOffCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedOnOffClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOnOffGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readOnOffGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOnOffAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOnOffAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OnOff.ID, ClusterIDMapping.OnOff.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OnOffCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.OnOffCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedOnOffClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOnOffAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readOnOffAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOnOffEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOnOffEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OnOff.ID, ClusterIDMapping.OnOff.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OnOffCluster) cluster).readEventListAttribute(
//              (ChipClusters.OnOffCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedOnOffClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOnOffEventListCommandParams
        );
        result.put("readEventListAttribute", readOnOffEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOnOffAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOnOffAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OnOff.ID, ClusterIDMapping.OnOff.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OnOffCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.OnOffCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedOnOffClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOnOffAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readOnOffAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOnOffFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOnOffFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OnOff.ID, ClusterIDMapping.OnOff.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OnOffCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOnOffFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readOnOffFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOnOffClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOnOffClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OnOff.ID, ClusterIDMapping.OnOff.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OnOffCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOnOffClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readOnOffClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readOnOffSwitchConfigurationInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readOnOffSwitchConfigurationSwitchTypeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOnOffSwitchConfigurationSwitchTypeAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OnOffSwitchConfiguration.ID, ClusterIDMapping.OnOffSwitchConfiguration.Attribute.SwitchType.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OnOffSwitchConfigurationCluster) cluster).readSwitchTypeAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOnOffSwitchConfigurationSwitchTypeCommandParams
        );
        result.put("readSwitchTypeAttribute", readOnOffSwitchConfigurationSwitchTypeAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOnOffSwitchConfigurationSwitchActionsCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOnOffSwitchConfigurationSwitchActionsAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OnOffSwitchConfiguration.ID, ClusterIDMapping.OnOffSwitchConfiguration.Attribute.SwitchActions.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OnOffSwitchConfigurationCluster) cluster).readSwitchActionsAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOnOffSwitchConfigurationSwitchActionsCommandParams
        );
        result.put("readSwitchActionsAttribute", readOnOffSwitchConfigurationSwitchActionsAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOnOffSwitchConfigurationGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOnOffSwitchConfigurationGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OnOffSwitchConfiguration.ID, ClusterIDMapping.OnOffSwitchConfiguration.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OnOffSwitchConfigurationCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.OnOffSwitchConfigurationCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedOnOffSwitchConfigurationClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOnOffSwitchConfigurationGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readOnOffSwitchConfigurationGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOnOffSwitchConfigurationAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOnOffSwitchConfigurationAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OnOffSwitchConfiguration.ID, ClusterIDMapping.OnOffSwitchConfiguration.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OnOffSwitchConfigurationCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.OnOffSwitchConfigurationCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedOnOffSwitchConfigurationClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOnOffSwitchConfigurationAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readOnOffSwitchConfigurationAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOnOffSwitchConfigurationEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOnOffSwitchConfigurationEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OnOffSwitchConfiguration.ID, ClusterIDMapping.OnOffSwitchConfiguration.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OnOffSwitchConfigurationCluster) cluster).readEventListAttribute(
//              (ChipClusters.OnOffSwitchConfigurationCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedOnOffSwitchConfigurationClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOnOffSwitchConfigurationEventListCommandParams
        );
        result.put("readEventListAttribute", readOnOffSwitchConfigurationEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOnOffSwitchConfigurationAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOnOffSwitchConfigurationAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OnOffSwitchConfiguration.ID, ClusterIDMapping.OnOffSwitchConfiguration.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OnOffSwitchConfigurationCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.OnOffSwitchConfigurationCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedOnOffSwitchConfigurationClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOnOffSwitchConfigurationAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readOnOffSwitchConfigurationAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOnOffSwitchConfigurationFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOnOffSwitchConfigurationFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OnOffSwitchConfiguration.ID, ClusterIDMapping.OnOffSwitchConfiguration.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OnOffSwitchConfigurationCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOnOffSwitchConfigurationFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readOnOffSwitchConfigurationFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOnOffSwitchConfigurationClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOnOffSwitchConfigurationClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OnOffSwitchConfiguration.ID, ClusterIDMapping.OnOffSwitchConfiguration.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OnOffSwitchConfigurationCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOnOffSwitchConfigurationClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readOnOffSwitchConfigurationClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readLevelControlInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readLevelControlCurrentLevelCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readLevelControlCurrentLevelAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.LevelControl.ID, ClusterIDMapping.LevelControl.Attribute.CurrentLevel.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.LevelControlCluster) cluster).readCurrentLevelAttribute(
//              (ChipClusters.LevelControlCluster.CurrentLevelAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLevelControlClusterCurrentLevelAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readLevelControlCurrentLevelCommandParams
        );
        result.put("readCurrentLevelAttribute", readLevelControlCurrentLevelAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readLevelControlRemainingTimeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readLevelControlRemainingTimeAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.LevelControl.ID, ClusterIDMapping.LevelControl.Attribute.RemainingTime.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.LevelControlCluster) cluster).readRemainingTimeAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readLevelControlRemainingTimeCommandParams
        );
        result.put("readRemainingTimeAttribute", readLevelControlRemainingTimeAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readLevelControlMinLevelCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readLevelControlMinLevelAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.LevelControl.ID, ClusterIDMapping.LevelControl.Attribute.MinLevel.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.LevelControlCluster) cluster).readMinLevelAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readLevelControlMinLevelCommandParams
        );
        result.put("readMinLevelAttribute", readLevelControlMinLevelAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readLevelControlMaxLevelCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readLevelControlMaxLevelAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.LevelControl.ID, ClusterIDMapping.LevelControl.Attribute.MaxLevel.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.LevelControlCluster) cluster).readMaxLevelAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readLevelControlMaxLevelCommandParams
        );
        result.put("readMaxLevelAttribute", readLevelControlMaxLevelAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readLevelControlCurrentFrequencyCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readLevelControlCurrentFrequencyAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.LevelControl.ID, ClusterIDMapping.LevelControl.Attribute.CurrentFrequency.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.LevelControlCluster) cluster).readCurrentFrequencyAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readLevelControlCurrentFrequencyCommandParams
        );
        result.put("readCurrentFrequencyAttribute", readLevelControlCurrentFrequencyAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readLevelControlMinFrequencyCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readLevelControlMinFrequencyAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.LevelControl.ID, ClusterIDMapping.LevelControl.Attribute.MinFrequency.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.LevelControlCluster) cluster).readMinFrequencyAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readLevelControlMinFrequencyCommandParams
        );
        result.put("readMinFrequencyAttribute", readLevelControlMinFrequencyAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readLevelControlMaxFrequencyCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readLevelControlMaxFrequencyAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.LevelControl.ID, ClusterIDMapping.LevelControl.Attribute.MaxFrequency.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.LevelControlCluster) cluster).readMaxFrequencyAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readLevelControlMaxFrequencyCommandParams
        );
        result.put("readMaxFrequencyAttribute", readLevelControlMaxFrequencyAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readLevelControlOptionsCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readLevelControlOptionsAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.LevelControl.ID, ClusterIDMapping.LevelControl.Attribute.Options.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.LevelControlCluster) cluster).readOptionsAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readLevelControlOptionsCommandParams
        );
        result.put("readOptionsAttribute", readLevelControlOptionsAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readLevelControlOnOffTransitionTimeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readLevelControlOnOffTransitionTimeAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.LevelControl.ID, ClusterIDMapping.LevelControl.Attribute.OnOffTransitionTime.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.LevelControlCluster) cluster).readOnOffTransitionTimeAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readLevelControlOnOffTransitionTimeCommandParams
        );
        result.put("readOnOffTransitionTimeAttribute", readLevelControlOnOffTransitionTimeAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readLevelControlOnLevelCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readLevelControlOnLevelAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.LevelControl.ID, ClusterIDMapping.LevelControl.Attribute.OnLevel.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.LevelControlCluster) cluster).readOnLevelAttribute(
//              (ChipClusters.LevelControlCluster.OnLevelAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLevelControlClusterOnLevelAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readLevelControlOnLevelCommandParams
        );
        result.put("readOnLevelAttribute", readLevelControlOnLevelAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readLevelControlOnTransitionTimeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readLevelControlOnTransitionTimeAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.LevelControl.ID, ClusterIDMapping.LevelControl.Attribute.OnTransitionTime.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.LevelControlCluster) cluster).readOnTransitionTimeAttribute(
//              (ChipClusters.LevelControlCluster.OnTransitionTimeAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLevelControlClusterOnTransitionTimeAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readLevelControlOnTransitionTimeCommandParams
        );
        result.put("readOnTransitionTimeAttribute", readLevelControlOnTransitionTimeAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readLevelControlOffTransitionTimeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readLevelControlOffTransitionTimeAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.LevelControl.ID, ClusterIDMapping.LevelControl.Attribute.OffTransitionTime.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.LevelControlCluster) cluster).readOffTransitionTimeAttribute(
//              (ChipClusters.LevelControlCluster.OffTransitionTimeAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLevelControlClusterOffTransitionTimeAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readLevelControlOffTransitionTimeCommandParams
        );
        result.put("readOffTransitionTimeAttribute", readLevelControlOffTransitionTimeAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readLevelControlDefaultMoveRateCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readLevelControlDefaultMoveRateAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.LevelControl.ID, ClusterIDMapping.LevelControl.Attribute.DefaultMoveRate.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.LevelControlCluster) cluster).readDefaultMoveRateAttribute(
//              (ChipClusters.LevelControlCluster.DefaultMoveRateAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLevelControlClusterDefaultMoveRateAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readLevelControlDefaultMoveRateCommandParams
        );
        result.put("readDefaultMoveRateAttribute", readLevelControlDefaultMoveRateAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readLevelControlStartUpCurrentLevelCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readLevelControlStartUpCurrentLevelAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.LevelControl.ID, ClusterIDMapping.LevelControl.Attribute.StartUpCurrentLevel.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.LevelControlCluster) cluster).readStartUpCurrentLevelAttribute(
//              (ChipClusters.LevelControlCluster.StartUpCurrentLevelAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLevelControlClusterStartUpCurrentLevelAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readLevelControlStartUpCurrentLevelCommandParams
        );
        result.put("readStartUpCurrentLevelAttribute", readLevelControlStartUpCurrentLevelAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readLevelControlGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readLevelControlGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.LevelControl.ID, ClusterIDMapping.LevelControl.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.LevelControlCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.LevelControlCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLevelControlClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readLevelControlGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readLevelControlGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readLevelControlAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readLevelControlAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.LevelControl.ID, ClusterIDMapping.LevelControl.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.LevelControlCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.LevelControlCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLevelControlClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readLevelControlAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readLevelControlAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readLevelControlEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readLevelControlEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.LevelControl.ID, ClusterIDMapping.LevelControl.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.LevelControlCluster) cluster).readEventListAttribute(
//              (ChipClusters.LevelControlCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLevelControlClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readLevelControlEventListCommandParams
        );
        result.put("readEventListAttribute", readLevelControlEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readLevelControlAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readLevelControlAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.LevelControl.ID, ClusterIDMapping.LevelControl.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.LevelControlCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.LevelControlCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLevelControlClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readLevelControlAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readLevelControlAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readLevelControlFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readLevelControlFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.LevelControl.ID, ClusterIDMapping.LevelControl.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.LevelControlCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readLevelControlFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readLevelControlFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readLevelControlClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readLevelControlClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.LevelControl.ID, ClusterIDMapping.LevelControl.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.LevelControlCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readLevelControlClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readLevelControlClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readBinaryInputBasicInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readBinaryInputBasicActiveTextCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBinaryInputBasicActiveTextAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BinaryInputBasic.ID, ClusterIDMapping.BinaryInputBasic.Attribute.ActiveText.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BinaryInputBasicCluster) cluster).readActiveTextAttribute(
//              (ChipClusters.CharStringAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedCharStringAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBinaryInputBasicActiveTextCommandParams
        );
        result.put("readActiveTextAttribute", readBinaryInputBasicActiveTextAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBinaryInputBasicDescriptionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBinaryInputBasicDescriptionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BinaryInputBasic.ID, ClusterIDMapping.BinaryInputBasic.Attribute.Description.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BinaryInputBasicCluster) cluster).readDescriptionAttribute(
//              (ChipClusters.CharStringAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedCharStringAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBinaryInputBasicDescriptionCommandParams
        );
        result.put("readDescriptionAttribute", readBinaryInputBasicDescriptionAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBinaryInputBasicInactiveTextCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBinaryInputBasicInactiveTextAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BinaryInputBasic.ID, ClusterIDMapping.BinaryInputBasic.Attribute.InactiveText.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BinaryInputBasicCluster) cluster).readInactiveTextAttribute(
//              (ChipClusters.CharStringAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedCharStringAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBinaryInputBasicInactiveTextCommandParams
        );
        result.put("readInactiveTextAttribute", readBinaryInputBasicInactiveTextAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBinaryInputBasicOutOfServiceCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBinaryInputBasicOutOfServiceAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BinaryInputBasic.ID, ClusterIDMapping.BinaryInputBasic.Attribute.OutOfService.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BinaryInputBasicCluster) cluster).readOutOfServiceAttribute(
//              (ChipClusters.BooleanAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBooleanAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBinaryInputBasicOutOfServiceCommandParams
        );
        result.put("readOutOfServiceAttribute", readBinaryInputBasicOutOfServiceAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBinaryInputBasicPolarityCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBinaryInputBasicPolarityAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BinaryInputBasic.ID, ClusterIDMapping.BinaryInputBasic.Attribute.Polarity.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BinaryInputBasicCluster) cluster).readPolarityAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBinaryInputBasicPolarityCommandParams
        );
        result.put("readPolarityAttribute", readBinaryInputBasicPolarityAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBinaryInputBasicPresentValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBinaryInputBasicPresentValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BinaryInputBasic.ID, ClusterIDMapping.BinaryInputBasic.Attribute.PresentValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BinaryInputBasicCluster) cluster).readPresentValueAttribute(
//              (ChipClusters.BooleanAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBooleanAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBinaryInputBasicPresentValueCommandParams
        );
        result.put("readPresentValueAttribute", readBinaryInputBasicPresentValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBinaryInputBasicReliabilityCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBinaryInputBasicReliabilityAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BinaryInputBasic.ID, ClusterIDMapping.BinaryInputBasic.Attribute.Reliability.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BinaryInputBasicCluster) cluster).readReliabilityAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBinaryInputBasicReliabilityCommandParams
        );
        result.put("readReliabilityAttribute", readBinaryInputBasicReliabilityAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBinaryInputBasicStatusFlagsCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBinaryInputBasicStatusFlagsAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BinaryInputBasic.ID, ClusterIDMapping.BinaryInputBasic.Attribute.StatusFlags.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BinaryInputBasicCluster) cluster).readStatusFlagsAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBinaryInputBasicStatusFlagsCommandParams
        );
        result.put("readStatusFlagsAttribute", readBinaryInputBasicStatusFlagsAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBinaryInputBasicApplicationTypeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBinaryInputBasicApplicationTypeAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BinaryInputBasic.ID, ClusterIDMapping.BinaryInputBasic.Attribute.ApplicationType.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BinaryInputBasicCluster) cluster).readApplicationTypeAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBinaryInputBasicApplicationTypeCommandParams
        );
        result.put("readApplicationTypeAttribute", readBinaryInputBasicApplicationTypeAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBinaryInputBasicGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBinaryInputBasicGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BinaryInputBasic.ID, ClusterIDMapping.BinaryInputBasic.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BinaryInputBasicCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.BinaryInputBasicCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBinaryInputBasicClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBinaryInputBasicGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readBinaryInputBasicGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBinaryInputBasicAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBinaryInputBasicAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BinaryInputBasic.ID, ClusterIDMapping.BinaryInputBasic.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BinaryInputBasicCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.BinaryInputBasicCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBinaryInputBasicClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBinaryInputBasicAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readBinaryInputBasicAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBinaryInputBasicEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBinaryInputBasicEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BinaryInputBasic.ID, ClusterIDMapping.BinaryInputBasic.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BinaryInputBasicCluster) cluster).readEventListAttribute(
//              (ChipClusters.BinaryInputBasicCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBinaryInputBasicClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBinaryInputBasicEventListCommandParams
        );
        result.put("readEventListAttribute", readBinaryInputBasicEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBinaryInputBasicAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBinaryInputBasicAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BinaryInputBasic.ID, ClusterIDMapping.BinaryInputBasic.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BinaryInputBasicCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.BinaryInputBasicCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBinaryInputBasicClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBinaryInputBasicAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readBinaryInputBasicAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBinaryInputBasicFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBinaryInputBasicFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BinaryInputBasic.ID, ClusterIDMapping.BinaryInputBasic.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BinaryInputBasicCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBinaryInputBasicFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readBinaryInputBasicFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBinaryInputBasicClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBinaryInputBasicClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BinaryInputBasic.ID, ClusterIDMapping.BinaryInputBasic.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BinaryInputBasicCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBinaryInputBasicClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readBinaryInputBasicClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readPulseWidthModulationInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readPulseWidthModulationGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPulseWidthModulationGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PulseWidthModulation.ID, ClusterIDMapping.PulseWidthModulation.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PulseWidthModulationCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.PulseWidthModulationCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPulseWidthModulationClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPulseWidthModulationGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readPulseWidthModulationGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPulseWidthModulationAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPulseWidthModulationAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PulseWidthModulation.ID, ClusterIDMapping.PulseWidthModulation.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PulseWidthModulationCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.PulseWidthModulationCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPulseWidthModulationClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPulseWidthModulationAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readPulseWidthModulationAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPulseWidthModulationEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPulseWidthModulationEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PulseWidthModulation.ID, ClusterIDMapping.PulseWidthModulation.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PulseWidthModulationCluster) cluster).readEventListAttribute(
//              (ChipClusters.PulseWidthModulationCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPulseWidthModulationClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPulseWidthModulationEventListCommandParams
        );
        result.put("readEventListAttribute", readPulseWidthModulationEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPulseWidthModulationAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPulseWidthModulationAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PulseWidthModulation.ID, ClusterIDMapping.PulseWidthModulation.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PulseWidthModulationCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.PulseWidthModulationCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPulseWidthModulationClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPulseWidthModulationAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readPulseWidthModulationAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPulseWidthModulationFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPulseWidthModulationFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PulseWidthModulation.ID, ClusterIDMapping.PulseWidthModulation.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PulseWidthModulationCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPulseWidthModulationFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readPulseWidthModulationFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPulseWidthModulationClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPulseWidthModulationClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PulseWidthModulation.ID, ClusterIDMapping.PulseWidthModulation.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PulseWidthModulationCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPulseWidthModulationClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readPulseWidthModulationClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readDescriptorInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readDescriptorDeviceTypeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDescriptorDeviceTypeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Descriptor.ID, ClusterIDMapping.Descriptor.Attribute.DeviceTypeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DescriptorCluster) cluster).readDeviceTypeListAttribute(
//              (ChipClusters.DescriptorCluster.DeviceTypeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedDescriptorClusterDeviceTypeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDescriptorDeviceTypeListCommandParams
        );
        result.put("readDeviceTypeListAttribute", readDescriptorDeviceTypeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDescriptorServerListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDescriptorServerListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Descriptor.ID, ClusterIDMapping.Descriptor.Attribute.ServerList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DescriptorCluster) cluster).readServerListAttribute(
//              (ChipClusters.DescriptorCluster.ServerListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedDescriptorClusterServerListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDescriptorServerListCommandParams
        );
        result.put("readServerListAttribute", readDescriptorServerListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDescriptorClientListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDescriptorClientListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Descriptor.ID, ClusterIDMapping.Descriptor.Attribute.ClientList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DescriptorCluster) cluster).readClientListAttribute(
//              (ChipClusters.DescriptorCluster.ClientListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedDescriptorClusterClientListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDescriptorClientListCommandParams
        );
        result.put("readClientListAttribute", readDescriptorClientListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDescriptorPartsListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDescriptorPartsListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Descriptor.ID, ClusterIDMapping.Descriptor.Attribute.PartsList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DescriptorCluster) cluster).readPartsListAttribute(
//              (ChipClusters.DescriptorCluster.PartsListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedDescriptorClusterPartsListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDescriptorPartsListCommandParams
        );
        result.put("readPartsListAttribute", readDescriptorPartsListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDescriptorGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDescriptorGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Descriptor.ID, ClusterIDMapping.Descriptor.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DescriptorCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.DescriptorCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedDescriptorClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDescriptorGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readDescriptorGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDescriptorAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDescriptorAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Descriptor.ID, ClusterIDMapping.Descriptor.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DescriptorCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.DescriptorCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedDescriptorClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDescriptorAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readDescriptorAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDescriptorEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDescriptorEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Descriptor.ID, ClusterIDMapping.Descriptor.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DescriptorCluster) cluster).readEventListAttribute(
//              (ChipClusters.DescriptorCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedDescriptorClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDescriptorEventListCommandParams
        );
        result.put("readEventListAttribute", readDescriptorEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDescriptorAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDescriptorAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Descriptor.ID, ClusterIDMapping.Descriptor.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DescriptorCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.DescriptorCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedDescriptorClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDescriptorAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readDescriptorAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDescriptorFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDescriptorFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Descriptor.ID, ClusterIDMapping.Descriptor.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DescriptorCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDescriptorFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readDescriptorFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDescriptorClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDescriptorClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Descriptor.ID, ClusterIDMapping.Descriptor.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DescriptorCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDescriptorClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readDescriptorClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readBindingInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readBindingBindingCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBindingBindingAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Binding.ID, ClusterIDMapping.Binding.Attribute.Binding.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BindingCluster) cluster).readBindingAttribute(
//              (ChipClusters.BindingCluster.BindingAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBindingClusterBindingAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBindingBindingCommandParams
        );
        result.put("readBindingAttribute", readBindingBindingAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBindingGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBindingGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Binding.ID, ClusterIDMapping.Binding.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BindingCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.BindingCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBindingClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBindingGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readBindingGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBindingAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBindingAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Binding.ID, ClusterIDMapping.Binding.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BindingCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.BindingCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBindingClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBindingAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readBindingAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBindingEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBindingEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Binding.ID, ClusterIDMapping.Binding.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BindingCluster) cluster).readEventListAttribute(
//              (ChipClusters.BindingCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBindingClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBindingEventListCommandParams
        );
        result.put("readEventListAttribute", readBindingEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBindingAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBindingAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Binding.ID, ClusterIDMapping.Binding.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BindingCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.BindingCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBindingClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBindingAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readBindingAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBindingFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBindingFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Binding.ID, ClusterIDMapping.Binding.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BindingCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBindingFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readBindingFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBindingClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBindingClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Binding.ID, ClusterIDMapping.Binding.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BindingCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBindingClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readBindingClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readAccessControlInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readAccessControlAclCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readAccessControlAclAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.AccessControl.ID, ClusterIDMapping.AccessControl.Attribute.Acl.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.AccessControlCluster) cluster).readAclAttribute(
//              (ChipClusters.AccessControlCluster.AclAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedAccessControlClusterAclAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readAccessControlAclCommandParams
        );
        result.put("readAclAttribute", readAccessControlAclAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readAccessControlExtensionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readAccessControlExtensionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.AccessControl.ID, ClusterIDMapping.AccessControl.Attribute.Extension.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.AccessControlCluster) cluster).readExtensionAttribute(
//              (ChipClusters.AccessControlCluster.ExtensionAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedAccessControlClusterExtensionAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readAccessControlExtensionCommandParams
        );
        result.put("readExtensionAttribute", readAccessControlExtensionAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readAccessControlSubjectsPerAccessControlEntryCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readAccessControlSubjectsPerAccessControlEntryAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.AccessControl.ID, ClusterIDMapping.AccessControl.Attribute.SubjectsPerAccessControlEntry.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.AccessControlCluster) cluster).readSubjectsPerAccessControlEntryAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readAccessControlSubjectsPerAccessControlEntryCommandParams
        );
        result.put("readSubjectsPerAccessControlEntryAttribute", readAccessControlSubjectsPerAccessControlEntryAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readAccessControlTargetsPerAccessControlEntryCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readAccessControlTargetsPerAccessControlEntryAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.AccessControl.ID, ClusterIDMapping.AccessControl.Attribute.TargetsPerAccessControlEntry.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.AccessControlCluster) cluster).readTargetsPerAccessControlEntryAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readAccessControlTargetsPerAccessControlEntryCommandParams
        );
        result.put("readTargetsPerAccessControlEntryAttribute", readAccessControlTargetsPerAccessControlEntryAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readAccessControlAccessControlEntriesPerFabricCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readAccessControlAccessControlEntriesPerFabricAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.AccessControl.ID, ClusterIDMapping.AccessControl.Attribute.AccessControlEntriesPerFabric.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.AccessControlCluster) cluster).readAccessControlEntriesPerFabricAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readAccessControlAccessControlEntriesPerFabricCommandParams
        );
        result.put("readAccessControlEntriesPerFabricAttribute", readAccessControlAccessControlEntriesPerFabricAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readAccessControlGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readAccessControlGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.AccessControl.ID, ClusterIDMapping.AccessControl.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.AccessControlCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.AccessControlCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedAccessControlClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readAccessControlGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readAccessControlGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readAccessControlAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readAccessControlAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.AccessControl.ID, ClusterIDMapping.AccessControl.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.AccessControlCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.AccessControlCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedAccessControlClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readAccessControlAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readAccessControlAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readAccessControlEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readAccessControlEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.AccessControl.ID, ClusterIDMapping.AccessControl.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.AccessControlCluster) cluster).readEventListAttribute(
//              (ChipClusters.AccessControlCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedAccessControlClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readAccessControlEventListCommandParams
        );
        result.put("readEventListAttribute", readAccessControlEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readAccessControlAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readAccessControlAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.AccessControl.ID, ClusterIDMapping.AccessControl.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.AccessControlCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.AccessControlCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedAccessControlClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readAccessControlAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readAccessControlAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readAccessControlFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readAccessControlFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.AccessControl.ID, ClusterIDMapping.AccessControl.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.AccessControlCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readAccessControlFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readAccessControlFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readAccessControlClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readAccessControlClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.AccessControl.ID, ClusterIDMapping.AccessControl.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.AccessControlCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readAccessControlClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readAccessControlClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readActionsInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readActionsActionListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readActionsActionListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Actions.ID, ClusterIDMapping.Actions.Attribute.ActionList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ActionsCluster) cluster).readActionListAttribute(
//              (ChipClusters.ActionsCluster.ActionListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedActionsClusterActionListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readActionsActionListCommandParams
        );
        result.put("readActionListAttribute", readActionsActionListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readActionsEndpointListsCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readActionsEndpointListsAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Actions.ID, ClusterIDMapping.Actions.Attribute.EndpointLists.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ActionsCluster) cluster).readEndpointListsAttribute(
//              (ChipClusters.ActionsCluster.EndpointListsAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedActionsClusterEndpointListsAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readActionsEndpointListsCommandParams
        );
        result.put("readEndpointListsAttribute", readActionsEndpointListsAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readActionsSetupURLCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readActionsSetupURLAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Actions.ID, ClusterIDMapping.Actions.Attribute.SetupURL.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ActionsCluster) cluster).readSetupURLAttribute(
//              (ChipClusters.CharStringAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedCharStringAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readActionsSetupURLCommandParams
        );
        result.put("readSetupURLAttribute", readActionsSetupURLAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readActionsGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readActionsGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Actions.ID, ClusterIDMapping.Actions.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ActionsCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.ActionsCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedActionsClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readActionsGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readActionsGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readActionsAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readActionsAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Actions.ID, ClusterIDMapping.Actions.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ActionsCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.ActionsCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedActionsClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readActionsAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readActionsAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readActionsEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readActionsEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Actions.ID, ClusterIDMapping.Actions.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ActionsCluster) cluster).readEventListAttribute(
//              (ChipClusters.ActionsCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedActionsClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readActionsEventListCommandParams
        );
        result.put("readEventListAttribute", readActionsEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readActionsAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readActionsAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Actions.ID, ClusterIDMapping.Actions.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ActionsCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.ActionsCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedActionsClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readActionsAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readActionsAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readActionsFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readActionsFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Actions.ID, ClusterIDMapping.Actions.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ActionsCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readActionsFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readActionsFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readActionsClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readActionsClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Actions.ID, ClusterIDMapping.Actions.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ActionsCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readActionsClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readActionsClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readBasicInformationInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readBasicInformationDataModelRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBasicInformationDataModelRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BasicInformation.ID, ClusterIDMapping.BasicInformation.Attribute.DataModelRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BasicInformationCluster) cluster).readDataModelRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBasicInformationDataModelRevisionCommandParams
        );
        result.put("readDataModelRevisionAttribute", readBasicInformationDataModelRevisionAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBasicInformationVendorNameCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBasicInformationVendorNameAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BasicInformation.ID, ClusterIDMapping.BasicInformation.Attribute.VendorName.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BasicInformationCluster) cluster).readVendorNameAttribute(
//              (ChipClusters.CharStringAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedCharStringAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBasicInformationVendorNameCommandParams
        );
        result.put("readVendorNameAttribute", readBasicInformationVendorNameAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBasicInformationVendorIDCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBasicInformationVendorIDAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BasicInformation.ID, ClusterIDMapping.BasicInformation.Attribute.VendorID.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BasicInformationCluster) cluster).readVendorIDAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBasicInformationVendorIDCommandParams
        );
        result.put("readVendorIDAttribute", readBasicInformationVendorIDAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBasicInformationProductNameCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBasicInformationProductNameAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BasicInformation.ID, ClusterIDMapping.BasicInformation.Attribute.ProductName.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BasicInformationCluster) cluster).readProductNameAttribute(
//              (ChipClusters.CharStringAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedCharStringAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBasicInformationProductNameCommandParams
        );
        result.put("readProductNameAttribute", readBasicInformationProductNameAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBasicInformationProductIDCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBasicInformationProductIDAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BasicInformation.ID, ClusterIDMapping.BasicInformation.Attribute.ProductID.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BasicInformationCluster) cluster).readProductIDAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBasicInformationProductIDCommandParams
        );
        result.put("readProductIDAttribute", readBasicInformationProductIDAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBasicInformationNodeLabelCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBasicInformationNodeLabelAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BasicInformation.ID, ClusterIDMapping.BasicInformation.Attribute.NodeLabel.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BasicInformationCluster) cluster).readNodeLabelAttribute(
//              (ChipClusters.CharStringAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedCharStringAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBasicInformationNodeLabelCommandParams
        );
        result.put("readNodeLabelAttribute", readBasicInformationNodeLabelAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBasicInformationLocationCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBasicInformationLocationAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BasicInformation.ID, ClusterIDMapping.BasicInformation.Attribute.Location.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BasicInformationCluster) cluster).readLocationAttribute(
//              (ChipClusters.CharStringAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedCharStringAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBasicInformationLocationCommandParams
        );
        result.put("readLocationAttribute", readBasicInformationLocationAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBasicInformationHardwareVersionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBasicInformationHardwareVersionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BasicInformation.ID, ClusterIDMapping.BasicInformation.Attribute.HardwareVersion.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BasicInformationCluster) cluster).readHardwareVersionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBasicInformationHardwareVersionCommandParams
        );
        result.put("readHardwareVersionAttribute", readBasicInformationHardwareVersionAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBasicInformationHardwareVersionStringCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBasicInformationHardwareVersionStringAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BasicInformation.ID, ClusterIDMapping.BasicInformation.Attribute.HardwareVersionString.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BasicInformationCluster) cluster).readHardwareVersionStringAttribute(
//              (ChipClusters.CharStringAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedCharStringAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBasicInformationHardwareVersionStringCommandParams
        );
        result.put("readHardwareVersionStringAttribute", readBasicInformationHardwareVersionStringAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBasicInformationSoftwareVersionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBasicInformationSoftwareVersionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BasicInformation.ID, ClusterIDMapping.BasicInformation.Attribute.SoftwareVersion.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BasicInformationCluster) cluster).readSoftwareVersionAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBasicInformationSoftwareVersionCommandParams
        );
        result.put("readSoftwareVersionAttribute", readBasicInformationSoftwareVersionAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBasicInformationSoftwareVersionStringCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBasicInformationSoftwareVersionStringAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BasicInformation.ID, ClusterIDMapping.BasicInformation.Attribute.SoftwareVersionString.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BasicInformationCluster) cluster).readSoftwareVersionStringAttribute(
//              (ChipClusters.CharStringAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedCharStringAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBasicInformationSoftwareVersionStringCommandParams
        );
        result.put("readSoftwareVersionStringAttribute", readBasicInformationSoftwareVersionStringAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBasicInformationManufacturingDateCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBasicInformationManufacturingDateAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BasicInformation.ID, ClusterIDMapping.BasicInformation.Attribute.ManufacturingDate.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BasicInformationCluster) cluster).readManufacturingDateAttribute(
//              (ChipClusters.CharStringAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedCharStringAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBasicInformationManufacturingDateCommandParams
        );
        result.put("readManufacturingDateAttribute", readBasicInformationManufacturingDateAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBasicInformationPartNumberCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBasicInformationPartNumberAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BasicInformation.ID, ClusterIDMapping.BasicInformation.Attribute.PartNumber.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BasicInformationCluster) cluster).readPartNumberAttribute(
//              (ChipClusters.CharStringAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedCharStringAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBasicInformationPartNumberCommandParams
        );
        result.put("readPartNumberAttribute", readBasicInformationPartNumberAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBasicInformationProductURLCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBasicInformationProductURLAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BasicInformation.ID, ClusterIDMapping.BasicInformation.Attribute.ProductURL.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BasicInformationCluster) cluster).readProductURLAttribute(
//              (ChipClusters.CharStringAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedCharStringAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBasicInformationProductURLCommandParams
        );
        result.put("readProductURLAttribute", readBasicInformationProductURLAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBasicInformationProductLabelCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBasicInformationProductLabelAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BasicInformation.ID, ClusterIDMapping.BasicInformation.Attribute.ProductLabel.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BasicInformationCluster) cluster).readProductLabelAttribute(
//              (ChipClusters.CharStringAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedCharStringAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBasicInformationProductLabelCommandParams
        );
        result.put("readProductLabelAttribute", readBasicInformationProductLabelAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBasicInformationSerialNumberCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBasicInformationSerialNumberAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BasicInformation.ID, ClusterIDMapping.BasicInformation.Attribute.SerialNumber.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BasicInformationCluster) cluster).readSerialNumberAttribute(
//              (ChipClusters.CharStringAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedCharStringAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBasicInformationSerialNumberCommandParams
        );
        result.put("readSerialNumberAttribute", readBasicInformationSerialNumberAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBasicInformationLocalConfigDisabledCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBasicInformationLocalConfigDisabledAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BasicInformation.ID, ClusterIDMapping.BasicInformation.Attribute.LocalConfigDisabled.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BasicInformationCluster) cluster).readLocalConfigDisabledAttribute(
//              (ChipClusters.BooleanAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBooleanAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBasicInformationLocalConfigDisabledCommandParams
        );
        result.put("readLocalConfigDisabledAttribute", readBasicInformationLocalConfigDisabledAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBasicInformationReachableCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBasicInformationReachableAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BasicInformation.ID, ClusterIDMapping.BasicInformation.Attribute.Reachable.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BasicInformationCluster) cluster).readReachableAttribute(
//              (ChipClusters.BooleanAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBooleanAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBasicInformationReachableCommandParams
        );
        result.put("readReachableAttribute", readBasicInformationReachableAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBasicInformationUniqueIDCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBasicInformationUniqueIDAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BasicInformation.ID, ClusterIDMapping.BasicInformation.Attribute.UniqueID.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BasicInformationCluster) cluster).readUniqueIDAttribute(
//              (ChipClusters.CharStringAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedCharStringAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBasicInformationUniqueIDCommandParams
        );
        result.put("readUniqueIDAttribute", readBasicInformationUniqueIDAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBasicInformationGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBasicInformationGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BasicInformation.ID, ClusterIDMapping.BasicInformation.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BasicInformationCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.BasicInformationCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBasicInformationClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBasicInformationGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readBasicInformationGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBasicInformationAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBasicInformationAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BasicInformation.ID, ClusterIDMapping.BasicInformation.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BasicInformationCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.BasicInformationCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBasicInformationClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBasicInformationAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readBasicInformationAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBasicInformationEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBasicInformationEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BasicInformation.ID, ClusterIDMapping.BasicInformation.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BasicInformationCluster) cluster).readEventListAttribute(
//              (ChipClusters.BasicInformationCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBasicInformationClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBasicInformationEventListCommandParams
        );
        result.put("readEventListAttribute", readBasicInformationEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBasicInformationAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBasicInformationAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BasicInformation.ID, ClusterIDMapping.BasicInformation.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BasicInformationCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.BasicInformationCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBasicInformationClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBasicInformationAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readBasicInformationAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBasicInformationFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBasicInformationFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BasicInformation.ID, ClusterIDMapping.BasicInformation.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BasicInformationCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBasicInformationFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readBasicInformationFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBasicInformationClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBasicInformationClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BasicInformation.ID, ClusterIDMapping.BasicInformation.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BasicInformationCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBasicInformationClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readBasicInformationClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readOtaSoftwareUpdateProviderInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readOtaSoftwareUpdateProviderGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOtaSoftwareUpdateProviderGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OtaSoftwareUpdateProvider.ID, ClusterIDMapping.OtaSoftwareUpdateProvider.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OtaSoftwareUpdateProviderCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.OtaSoftwareUpdateProviderCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedOtaSoftwareUpdateProviderClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOtaSoftwareUpdateProviderGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readOtaSoftwareUpdateProviderGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOtaSoftwareUpdateProviderAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOtaSoftwareUpdateProviderAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OtaSoftwareUpdateProvider.ID, ClusterIDMapping.OtaSoftwareUpdateProvider.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OtaSoftwareUpdateProviderCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.OtaSoftwareUpdateProviderCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedOtaSoftwareUpdateProviderClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOtaSoftwareUpdateProviderAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readOtaSoftwareUpdateProviderAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOtaSoftwareUpdateProviderEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOtaSoftwareUpdateProviderEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OtaSoftwareUpdateProvider.ID, ClusterIDMapping.OtaSoftwareUpdateProvider.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OtaSoftwareUpdateProviderCluster) cluster).readEventListAttribute(
//              (ChipClusters.OtaSoftwareUpdateProviderCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedOtaSoftwareUpdateProviderClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOtaSoftwareUpdateProviderEventListCommandParams
        );
        result.put("readEventListAttribute", readOtaSoftwareUpdateProviderEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOtaSoftwareUpdateProviderAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOtaSoftwareUpdateProviderAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OtaSoftwareUpdateProvider.ID, ClusterIDMapping.OtaSoftwareUpdateProvider.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OtaSoftwareUpdateProviderCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.OtaSoftwareUpdateProviderCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedOtaSoftwareUpdateProviderClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOtaSoftwareUpdateProviderAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readOtaSoftwareUpdateProviderAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOtaSoftwareUpdateProviderFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOtaSoftwareUpdateProviderFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OtaSoftwareUpdateProvider.ID, ClusterIDMapping.OtaSoftwareUpdateProvider.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OtaSoftwareUpdateProviderCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOtaSoftwareUpdateProviderFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readOtaSoftwareUpdateProviderFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOtaSoftwareUpdateProviderClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOtaSoftwareUpdateProviderClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OtaSoftwareUpdateProvider.ID, ClusterIDMapping.OtaSoftwareUpdateProvider.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OtaSoftwareUpdateProviderCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOtaSoftwareUpdateProviderClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readOtaSoftwareUpdateProviderClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readOtaSoftwareUpdateRequestorInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readOtaSoftwareUpdateRequestorDefaultOTAProvidersCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOtaSoftwareUpdateRequestorDefaultOTAProvidersAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OtaSoftwareUpdateRequestor.ID, ClusterIDMapping.OtaSoftwareUpdateRequestor.Attribute.DefaultOTAProviders.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OtaSoftwareUpdateRequestorCluster) cluster).readDefaultOTAProvidersAttribute(
//              (ChipClusters.OtaSoftwareUpdateRequestorCluster.DefaultOTAProvidersAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedOtaSoftwareUpdateRequestorClusterDefaultOTAProvidersAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOtaSoftwareUpdateRequestorDefaultOTAProvidersCommandParams
        );
        result.put("readDefaultOTAProvidersAttribute", readOtaSoftwareUpdateRequestorDefaultOTAProvidersAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOtaSoftwareUpdateRequestorUpdatePossibleCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOtaSoftwareUpdateRequestorUpdatePossibleAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OtaSoftwareUpdateRequestor.ID, ClusterIDMapping.OtaSoftwareUpdateRequestor.Attribute.UpdatePossible.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OtaSoftwareUpdateRequestorCluster) cluster).readUpdatePossibleAttribute(
//              (ChipClusters.BooleanAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBooleanAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOtaSoftwareUpdateRequestorUpdatePossibleCommandParams
        );
        result.put("readUpdatePossibleAttribute", readOtaSoftwareUpdateRequestorUpdatePossibleAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOtaSoftwareUpdateRequestorUpdateStateCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOtaSoftwareUpdateRequestorUpdateStateAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OtaSoftwareUpdateRequestor.ID, ClusterIDMapping.OtaSoftwareUpdateRequestor.Attribute.UpdateState.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OtaSoftwareUpdateRequestorCluster) cluster).readUpdateStateAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOtaSoftwareUpdateRequestorUpdateStateCommandParams
        );
        result.put("readUpdateStateAttribute", readOtaSoftwareUpdateRequestorUpdateStateAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOtaSoftwareUpdateRequestorUpdateStateProgressCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOtaSoftwareUpdateRequestorUpdateStateProgressAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OtaSoftwareUpdateRequestor.ID, ClusterIDMapping.OtaSoftwareUpdateRequestor.Attribute.UpdateStateProgress.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OtaSoftwareUpdateRequestorCluster) cluster).readUpdateStateProgressAttribute(
//              (ChipClusters.OtaSoftwareUpdateRequestorCluster.UpdateStateProgressAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedOtaSoftwareUpdateRequestorClusterUpdateStateProgressAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOtaSoftwareUpdateRequestorUpdateStateProgressCommandParams
        );
        result.put("readUpdateStateProgressAttribute", readOtaSoftwareUpdateRequestorUpdateStateProgressAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOtaSoftwareUpdateRequestorGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOtaSoftwareUpdateRequestorGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OtaSoftwareUpdateRequestor.ID, ClusterIDMapping.OtaSoftwareUpdateRequestor.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OtaSoftwareUpdateRequestorCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.OtaSoftwareUpdateRequestorCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedOtaSoftwareUpdateRequestorClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOtaSoftwareUpdateRequestorGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readOtaSoftwareUpdateRequestorGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOtaSoftwareUpdateRequestorAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOtaSoftwareUpdateRequestorAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OtaSoftwareUpdateRequestor.ID, ClusterIDMapping.OtaSoftwareUpdateRequestor.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OtaSoftwareUpdateRequestorCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.OtaSoftwareUpdateRequestorCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedOtaSoftwareUpdateRequestorClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOtaSoftwareUpdateRequestorAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readOtaSoftwareUpdateRequestorAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOtaSoftwareUpdateRequestorEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOtaSoftwareUpdateRequestorEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OtaSoftwareUpdateRequestor.ID, ClusterIDMapping.OtaSoftwareUpdateRequestor.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OtaSoftwareUpdateRequestorCluster) cluster).readEventListAttribute(
//              (ChipClusters.OtaSoftwareUpdateRequestorCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedOtaSoftwareUpdateRequestorClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOtaSoftwareUpdateRequestorEventListCommandParams
        );
        result.put("readEventListAttribute", readOtaSoftwareUpdateRequestorEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOtaSoftwareUpdateRequestorAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOtaSoftwareUpdateRequestorAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OtaSoftwareUpdateRequestor.ID, ClusterIDMapping.OtaSoftwareUpdateRequestor.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OtaSoftwareUpdateRequestorCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.OtaSoftwareUpdateRequestorCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedOtaSoftwareUpdateRequestorClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOtaSoftwareUpdateRequestorAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readOtaSoftwareUpdateRequestorAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOtaSoftwareUpdateRequestorFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOtaSoftwareUpdateRequestorFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OtaSoftwareUpdateRequestor.ID, ClusterIDMapping.OtaSoftwareUpdateRequestor.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OtaSoftwareUpdateRequestorCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOtaSoftwareUpdateRequestorFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readOtaSoftwareUpdateRequestorFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOtaSoftwareUpdateRequestorClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOtaSoftwareUpdateRequestorClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OtaSoftwareUpdateRequestor.ID, ClusterIDMapping.OtaSoftwareUpdateRequestor.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OtaSoftwareUpdateRequestorCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOtaSoftwareUpdateRequestorClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readOtaSoftwareUpdateRequestorClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readLocalizationConfigurationInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readLocalizationConfigurationActiveLocaleCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readLocalizationConfigurationActiveLocaleAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.LocalizationConfiguration.ID, ClusterIDMapping.LocalizationConfiguration.Attribute.ActiveLocale.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.LocalizationConfigurationCluster) cluster).readActiveLocaleAttribute(
//              (ChipClusters.CharStringAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedCharStringAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readLocalizationConfigurationActiveLocaleCommandParams
        );
        result.put("readActiveLocaleAttribute", readLocalizationConfigurationActiveLocaleAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readLocalizationConfigurationSupportedLocalesCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readLocalizationConfigurationSupportedLocalesAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.LocalizationConfiguration.ID, ClusterIDMapping.LocalizationConfiguration.Attribute.SupportedLocales.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.LocalizationConfigurationCluster) cluster).readSupportedLocalesAttribute(
//              (ChipClusters.LocalizationConfigurationCluster.SupportedLocalesAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLocalizationConfigurationClusterSupportedLocalesAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readLocalizationConfigurationSupportedLocalesCommandParams
        );
        result.put("readSupportedLocalesAttribute", readLocalizationConfigurationSupportedLocalesAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readLocalizationConfigurationGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readLocalizationConfigurationGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.LocalizationConfiguration.ID, ClusterIDMapping.LocalizationConfiguration.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.LocalizationConfigurationCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.LocalizationConfigurationCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLocalizationConfigurationClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readLocalizationConfigurationGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readLocalizationConfigurationGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readLocalizationConfigurationAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readLocalizationConfigurationAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.LocalizationConfiguration.ID, ClusterIDMapping.LocalizationConfiguration.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.LocalizationConfigurationCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.LocalizationConfigurationCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLocalizationConfigurationClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readLocalizationConfigurationAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readLocalizationConfigurationAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readLocalizationConfigurationEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readLocalizationConfigurationEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.LocalizationConfiguration.ID, ClusterIDMapping.LocalizationConfiguration.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.LocalizationConfigurationCluster) cluster).readEventListAttribute(
//              (ChipClusters.LocalizationConfigurationCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLocalizationConfigurationClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readLocalizationConfigurationEventListCommandParams
        );
        result.put("readEventListAttribute", readLocalizationConfigurationEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readLocalizationConfigurationAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readLocalizationConfigurationAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.LocalizationConfiguration.ID, ClusterIDMapping.LocalizationConfiguration.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.LocalizationConfigurationCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.LocalizationConfigurationCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLocalizationConfigurationClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readLocalizationConfigurationAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readLocalizationConfigurationAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readLocalizationConfigurationFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readLocalizationConfigurationFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.LocalizationConfiguration.ID, ClusterIDMapping.LocalizationConfiguration.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.LocalizationConfigurationCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readLocalizationConfigurationFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readLocalizationConfigurationFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readLocalizationConfigurationClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readLocalizationConfigurationClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.LocalizationConfiguration.ID, ClusterIDMapping.LocalizationConfiguration.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.LocalizationConfigurationCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readLocalizationConfigurationClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readLocalizationConfigurationClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readTimeFormatLocalizationInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readTimeFormatLocalizationHourFormatCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTimeFormatLocalizationHourFormatAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TimeFormatLocalization.ID, ClusterIDMapping.TimeFormatLocalization.Attribute.HourFormat.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TimeFormatLocalizationCluster) cluster).readHourFormatAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTimeFormatLocalizationHourFormatCommandParams
        );
        result.put("readHourFormatAttribute", readTimeFormatLocalizationHourFormatAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTimeFormatLocalizationActiveCalendarTypeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTimeFormatLocalizationActiveCalendarTypeAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TimeFormatLocalization.ID, ClusterIDMapping.TimeFormatLocalization.Attribute.ActiveCalendarType.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TimeFormatLocalizationCluster) cluster).readActiveCalendarTypeAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTimeFormatLocalizationActiveCalendarTypeCommandParams
        );
        result.put("readActiveCalendarTypeAttribute", readTimeFormatLocalizationActiveCalendarTypeAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTimeFormatLocalizationSupportedCalendarTypesCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTimeFormatLocalizationSupportedCalendarTypesAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TimeFormatLocalization.ID, ClusterIDMapping.TimeFormatLocalization.Attribute.SupportedCalendarTypes.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TimeFormatLocalizationCluster) cluster).readSupportedCalendarTypesAttribute(
//              (ChipClusters.TimeFormatLocalizationCluster.SupportedCalendarTypesAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedTimeFormatLocalizationClusterSupportedCalendarTypesAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTimeFormatLocalizationSupportedCalendarTypesCommandParams
        );
        result.put("readSupportedCalendarTypesAttribute", readTimeFormatLocalizationSupportedCalendarTypesAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTimeFormatLocalizationGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTimeFormatLocalizationGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TimeFormatLocalization.ID, ClusterIDMapping.TimeFormatLocalization.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TimeFormatLocalizationCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.TimeFormatLocalizationCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedTimeFormatLocalizationClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTimeFormatLocalizationGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readTimeFormatLocalizationGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTimeFormatLocalizationAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTimeFormatLocalizationAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TimeFormatLocalization.ID, ClusterIDMapping.TimeFormatLocalization.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TimeFormatLocalizationCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.TimeFormatLocalizationCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedTimeFormatLocalizationClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTimeFormatLocalizationAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readTimeFormatLocalizationAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTimeFormatLocalizationEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTimeFormatLocalizationEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TimeFormatLocalization.ID, ClusterIDMapping.TimeFormatLocalization.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TimeFormatLocalizationCluster) cluster).readEventListAttribute(
//              (ChipClusters.TimeFormatLocalizationCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedTimeFormatLocalizationClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTimeFormatLocalizationEventListCommandParams
        );
        result.put("readEventListAttribute", readTimeFormatLocalizationEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTimeFormatLocalizationAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTimeFormatLocalizationAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TimeFormatLocalization.ID, ClusterIDMapping.TimeFormatLocalization.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TimeFormatLocalizationCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.TimeFormatLocalizationCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedTimeFormatLocalizationClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTimeFormatLocalizationAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readTimeFormatLocalizationAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTimeFormatLocalizationFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTimeFormatLocalizationFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TimeFormatLocalization.ID, ClusterIDMapping.TimeFormatLocalization.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TimeFormatLocalizationCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTimeFormatLocalizationFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readTimeFormatLocalizationFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTimeFormatLocalizationClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTimeFormatLocalizationClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TimeFormatLocalization.ID, ClusterIDMapping.TimeFormatLocalization.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TimeFormatLocalizationCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTimeFormatLocalizationClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readTimeFormatLocalizationClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readUnitLocalizationInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readUnitLocalizationTemperatureUnitCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitLocalizationTemperatureUnitAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitLocalization.ID, ClusterIDMapping.UnitLocalization.Attribute.TemperatureUnit.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitLocalizationCluster) cluster).readTemperatureUnitAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitLocalizationTemperatureUnitCommandParams
        );
        result.put("readTemperatureUnitAttribute", readUnitLocalizationTemperatureUnitAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitLocalizationGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitLocalizationGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitLocalization.ID, ClusterIDMapping.UnitLocalization.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitLocalizationCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.UnitLocalizationCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedUnitLocalizationClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitLocalizationGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readUnitLocalizationGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitLocalizationAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitLocalizationAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitLocalization.ID, ClusterIDMapping.UnitLocalization.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitLocalizationCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.UnitLocalizationCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedUnitLocalizationClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitLocalizationAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readUnitLocalizationAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitLocalizationEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitLocalizationEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitLocalization.ID, ClusterIDMapping.UnitLocalization.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitLocalizationCluster) cluster).readEventListAttribute(
//              (ChipClusters.UnitLocalizationCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedUnitLocalizationClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitLocalizationEventListCommandParams
        );
        result.put("readEventListAttribute", readUnitLocalizationEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitLocalizationAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitLocalizationAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitLocalization.ID, ClusterIDMapping.UnitLocalization.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitLocalizationCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.UnitLocalizationCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedUnitLocalizationClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitLocalizationAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readUnitLocalizationAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitLocalizationFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitLocalizationFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitLocalization.ID, ClusterIDMapping.UnitLocalization.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitLocalizationCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitLocalizationFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readUnitLocalizationFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitLocalizationClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitLocalizationClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitLocalization.ID, ClusterIDMapping.UnitLocalization.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitLocalizationCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitLocalizationClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readUnitLocalizationClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readPowerSourceConfigurationInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readPowerSourceConfigurationSourcesCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPowerSourceConfigurationSourcesAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PowerSourceConfiguration.ID, ClusterIDMapping.PowerSourceConfiguration.Attribute.Sources.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PowerSourceConfigurationCluster) cluster).readSourcesAttribute(
//              (ChipClusters.PowerSourceConfigurationCluster.SourcesAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPowerSourceConfigurationClusterSourcesAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPowerSourceConfigurationSourcesCommandParams
        );
        result.put("readSourcesAttribute", readPowerSourceConfigurationSourcesAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPowerSourceConfigurationGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPowerSourceConfigurationGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PowerSourceConfiguration.ID, ClusterIDMapping.PowerSourceConfiguration.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PowerSourceConfigurationCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.PowerSourceConfigurationCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPowerSourceConfigurationClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPowerSourceConfigurationGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readPowerSourceConfigurationGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPowerSourceConfigurationAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPowerSourceConfigurationAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PowerSourceConfiguration.ID, ClusterIDMapping.PowerSourceConfiguration.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PowerSourceConfigurationCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.PowerSourceConfigurationCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPowerSourceConfigurationClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPowerSourceConfigurationAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readPowerSourceConfigurationAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPowerSourceConfigurationEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPowerSourceConfigurationEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PowerSourceConfiguration.ID, ClusterIDMapping.PowerSourceConfiguration.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PowerSourceConfigurationCluster) cluster).readEventListAttribute(
//              (ChipClusters.PowerSourceConfigurationCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPowerSourceConfigurationClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPowerSourceConfigurationEventListCommandParams
        );
        result.put("readEventListAttribute", readPowerSourceConfigurationEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPowerSourceConfigurationAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPowerSourceConfigurationAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PowerSourceConfiguration.ID, ClusterIDMapping.PowerSourceConfiguration.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PowerSourceConfigurationCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.PowerSourceConfigurationCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPowerSourceConfigurationClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPowerSourceConfigurationAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readPowerSourceConfigurationAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPowerSourceConfigurationFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPowerSourceConfigurationFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PowerSourceConfiguration.ID, ClusterIDMapping.PowerSourceConfiguration.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PowerSourceConfigurationCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPowerSourceConfigurationFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readPowerSourceConfigurationFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPowerSourceConfigurationClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPowerSourceConfigurationClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PowerSourceConfiguration.ID, ClusterIDMapping.PowerSourceConfiguration.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PowerSourceConfigurationCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPowerSourceConfigurationClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readPowerSourceConfigurationClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readPowerSourceInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readPowerSourceStatusCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPowerSourceStatusAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PowerSource.ID, ClusterIDMapping.PowerSource.Attribute.Status.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PowerSourceCluster) cluster).readStatusAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPowerSourceStatusCommandParams
        );
        result.put("readStatusAttribute", readPowerSourceStatusAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPowerSourceOrderCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPowerSourceOrderAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PowerSource.ID, ClusterIDMapping.PowerSource.Attribute.Order.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PowerSourceCluster) cluster).readOrderAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPowerSourceOrderCommandParams
        );
        result.put("readOrderAttribute", readPowerSourceOrderAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPowerSourceDescriptionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPowerSourceDescriptionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PowerSource.ID, ClusterIDMapping.PowerSource.Attribute.Description.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PowerSourceCluster) cluster).readDescriptionAttribute(
//              (ChipClusters.CharStringAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedCharStringAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPowerSourceDescriptionCommandParams
        );
        result.put("readDescriptionAttribute", readPowerSourceDescriptionAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPowerSourceWiredAssessedInputVoltageCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPowerSourceWiredAssessedInputVoltageAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PowerSource.ID, ClusterIDMapping.PowerSource.Attribute.WiredAssessedInputVoltage.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PowerSourceCluster) cluster).readWiredAssessedInputVoltageAttribute(
//              (ChipClusters.PowerSourceCluster.WiredAssessedInputVoltageAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPowerSourceClusterWiredAssessedInputVoltageAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPowerSourceWiredAssessedInputVoltageCommandParams
        );
        result.put("readWiredAssessedInputVoltageAttribute", readPowerSourceWiredAssessedInputVoltageAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPowerSourceWiredAssessedInputFrequencyCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPowerSourceWiredAssessedInputFrequencyAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PowerSource.ID, ClusterIDMapping.PowerSource.Attribute.WiredAssessedInputFrequency.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PowerSourceCluster) cluster).readWiredAssessedInputFrequencyAttribute(
//              (ChipClusters.PowerSourceCluster.WiredAssessedInputFrequencyAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPowerSourceClusterWiredAssessedInputFrequencyAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPowerSourceWiredAssessedInputFrequencyCommandParams
        );
        result.put("readWiredAssessedInputFrequencyAttribute", readPowerSourceWiredAssessedInputFrequencyAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPowerSourceWiredCurrentTypeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPowerSourceWiredCurrentTypeAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PowerSource.ID, ClusterIDMapping.PowerSource.Attribute.WiredCurrentType.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PowerSourceCluster) cluster).readWiredCurrentTypeAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPowerSourceWiredCurrentTypeCommandParams
        );
        result.put("readWiredCurrentTypeAttribute", readPowerSourceWiredCurrentTypeAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPowerSourceWiredAssessedCurrentCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPowerSourceWiredAssessedCurrentAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PowerSource.ID, ClusterIDMapping.PowerSource.Attribute.WiredAssessedCurrent.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PowerSourceCluster) cluster).readWiredAssessedCurrentAttribute(
//              (ChipClusters.PowerSourceCluster.WiredAssessedCurrentAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPowerSourceClusterWiredAssessedCurrentAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPowerSourceWiredAssessedCurrentCommandParams
        );
        result.put("readWiredAssessedCurrentAttribute", readPowerSourceWiredAssessedCurrentAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPowerSourceWiredNominalVoltageCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPowerSourceWiredNominalVoltageAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PowerSource.ID, ClusterIDMapping.PowerSource.Attribute.WiredNominalVoltage.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PowerSourceCluster) cluster).readWiredNominalVoltageAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPowerSourceWiredNominalVoltageCommandParams
        );
        result.put("readWiredNominalVoltageAttribute", readPowerSourceWiredNominalVoltageAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPowerSourceWiredMaximumCurrentCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPowerSourceWiredMaximumCurrentAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PowerSource.ID, ClusterIDMapping.PowerSource.Attribute.WiredMaximumCurrent.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PowerSourceCluster) cluster).readWiredMaximumCurrentAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPowerSourceWiredMaximumCurrentCommandParams
        );
        result.put("readWiredMaximumCurrentAttribute", readPowerSourceWiredMaximumCurrentAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPowerSourceWiredPresentCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPowerSourceWiredPresentAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PowerSource.ID, ClusterIDMapping.PowerSource.Attribute.WiredPresent.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PowerSourceCluster) cluster).readWiredPresentAttribute(
//              (ChipClusters.BooleanAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBooleanAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPowerSourceWiredPresentCommandParams
        );
        result.put("readWiredPresentAttribute", readPowerSourceWiredPresentAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPowerSourceActiveWiredFaultsCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPowerSourceActiveWiredFaultsAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PowerSource.ID, ClusterIDMapping.PowerSource.Attribute.ActiveWiredFaults.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PowerSourceCluster) cluster).readActiveWiredFaultsAttribute(
//              (ChipClusters.PowerSourceCluster.ActiveWiredFaultsAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPowerSourceClusterActiveWiredFaultsAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPowerSourceActiveWiredFaultsCommandParams
        );
        result.put("readActiveWiredFaultsAttribute", readPowerSourceActiveWiredFaultsAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPowerSourceBatVoltageCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPowerSourceBatVoltageAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PowerSource.ID, ClusterIDMapping.PowerSource.Attribute.BatVoltage.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PowerSourceCluster) cluster).readBatVoltageAttribute(
//              (ChipClusters.PowerSourceCluster.BatVoltageAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPowerSourceClusterBatVoltageAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPowerSourceBatVoltageCommandParams
        );
        result.put("readBatVoltageAttribute", readPowerSourceBatVoltageAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPowerSourceBatPercentRemainingCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPowerSourceBatPercentRemainingAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PowerSource.ID, ClusterIDMapping.PowerSource.Attribute.BatPercentRemaining.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PowerSourceCluster) cluster).readBatPercentRemainingAttribute(
//              (ChipClusters.PowerSourceCluster.BatPercentRemainingAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPowerSourceClusterBatPercentRemainingAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPowerSourceBatPercentRemainingCommandParams
        );
        result.put("readBatPercentRemainingAttribute", readPowerSourceBatPercentRemainingAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPowerSourceBatTimeRemainingCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPowerSourceBatTimeRemainingAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PowerSource.ID, ClusterIDMapping.PowerSource.Attribute.BatTimeRemaining.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PowerSourceCluster) cluster).readBatTimeRemainingAttribute(
//              (ChipClusters.PowerSourceCluster.BatTimeRemainingAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPowerSourceClusterBatTimeRemainingAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPowerSourceBatTimeRemainingCommandParams
        );
        result.put("readBatTimeRemainingAttribute", readPowerSourceBatTimeRemainingAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPowerSourceBatChargeLevelCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPowerSourceBatChargeLevelAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PowerSource.ID, ClusterIDMapping.PowerSource.Attribute.BatChargeLevel.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PowerSourceCluster) cluster).readBatChargeLevelAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPowerSourceBatChargeLevelCommandParams
        );
        result.put("readBatChargeLevelAttribute", readPowerSourceBatChargeLevelAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPowerSourceBatReplacementNeededCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPowerSourceBatReplacementNeededAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PowerSource.ID, ClusterIDMapping.PowerSource.Attribute.BatReplacementNeeded.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PowerSourceCluster) cluster).readBatReplacementNeededAttribute(
//              (ChipClusters.BooleanAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBooleanAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPowerSourceBatReplacementNeededCommandParams
        );
        result.put("readBatReplacementNeededAttribute", readPowerSourceBatReplacementNeededAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPowerSourceBatReplaceabilityCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPowerSourceBatReplaceabilityAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PowerSource.ID, ClusterIDMapping.PowerSource.Attribute.BatReplaceability.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PowerSourceCluster) cluster).readBatReplaceabilityAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPowerSourceBatReplaceabilityCommandParams
        );
        result.put("readBatReplaceabilityAttribute", readPowerSourceBatReplaceabilityAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPowerSourceBatPresentCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPowerSourceBatPresentAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PowerSource.ID, ClusterIDMapping.PowerSource.Attribute.BatPresent.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PowerSourceCluster) cluster).readBatPresentAttribute(
//              (ChipClusters.BooleanAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBooleanAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPowerSourceBatPresentCommandParams
        );
        result.put("readBatPresentAttribute", readPowerSourceBatPresentAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPowerSourceActiveBatFaultsCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPowerSourceActiveBatFaultsAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PowerSource.ID, ClusterIDMapping.PowerSource.Attribute.ActiveBatFaults.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PowerSourceCluster) cluster).readActiveBatFaultsAttribute(
//              (ChipClusters.PowerSourceCluster.ActiveBatFaultsAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPowerSourceClusterActiveBatFaultsAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPowerSourceActiveBatFaultsCommandParams
        );
        result.put("readActiveBatFaultsAttribute", readPowerSourceActiveBatFaultsAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPowerSourceBatReplacementDescriptionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPowerSourceBatReplacementDescriptionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PowerSource.ID, ClusterIDMapping.PowerSource.Attribute.BatReplacementDescription.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PowerSourceCluster) cluster).readBatReplacementDescriptionAttribute(
//              (ChipClusters.CharStringAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedCharStringAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPowerSourceBatReplacementDescriptionCommandParams
        );
        result.put("readBatReplacementDescriptionAttribute", readPowerSourceBatReplacementDescriptionAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPowerSourceBatCommonDesignationCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPowerSourceBatCommonDesignationAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PowerSource.ID, ClusterIDMapping.PowerSource.Attribute.BatCommonDesignation.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PowerSourceCluster) cluster).readBatCommonDesignationAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPowerSourceBatCommonDesignationCommandParams
        );
        result.put("readBatCommonDesignationAttribute", readPowerSourceBatCommonDesignationAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPowerSourceBatANSIDesignationCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPowerSourceBatANSIDesignationAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PowerSource.ID, ClusterIDMapping.PowerSource.Attribute.BatANSIDesignation.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PowerSourceCluster) cluster).readBatANSIDesignationAttribute(
//              (ChipClusters.CharStringAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedCharStringAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPowerSourceBatANSIDesignationCommandParams
        );
        result.put("readBatANSIDesignationAttribute", readPowerSourceBatANSIDesignationAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPowerSourceBatIECDesignationCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPowerSourceBatIECDesignationAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PowerSource.ID, ClusterIDMapping.PowerSource.Attribute.BatIECDesignation.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PowerSourceCluster) cluster).readBatIECDesignationAttribute(
//              (ChipClusters.CharStringAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedCharStringAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPowerSourceBatIECDesignationCommandParams
        );
        result.put("readBatIECDesignationAttribute", readPowerSourceBatIECDesignationAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPowerSourceBatApprovedChemistryCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPowerSourceBatApprovedChemistryAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PowerSource.ID, ClusterIDMapping.PowerSource.Attribute.BatApprovedChemistry.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PowerSourceCluster) cluster).readBatApprovedChemistryAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPowerSourceBatApprovedChemistryCommandParams
        );
        result.put("readBatApprovedChemistryAttribute", readPowerSourceBatApprovedChemistryAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPowerSourceBatCapacityCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPowerSourceBatCapacityAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PowerSource.ID, ClusterIDMapping.PowerSource.Attribute.BatCapacity.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PowerSourceCluster) cluster).readBatCapacityAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPowerSourceBatCapacityCommandParams
        );
        result.put("readBatCapacityAttribute", readPowerSourceBatCapacityAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPowerSourceBatQuantityCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPowerSourceBatQuantityAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PowerSource.ID, ClusterIDMapping.PowerSource.Attribute.BatQuantity.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PowerSourceCluster) cluster).readBatQuantityAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPowerSourceBatQuantityCommandParams
        );
        result.put("readBatQuantityAttribute", readPowerSourceBatQuantityAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPowerSourceBatChargeStateCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPowerSourceBatChargeStateAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PowerSource.ID, ClusterIDMapping.PowerSource.Attribute.BatChargeState.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PowerSourceCluster) cluster).readBatChargeStateAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPowerSourceBatChargeStateCommandParams
        );
        result.put("readBatChargeStateAttribute", readPowerSourceBatChargeStateAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPowerSourceBatTimeToFullChargeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPowerSourceBatTimeToFullChargeAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PowerSource.ID, ClusterIDMapping.PowerSource.Attribute.BatTimeToFullCharge.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PowerSourceCluster) cluster).readBatTimeToFullChargeAttribute(
//              (ChipClusters.PowerSourceCluster.BatTimeToFullChargeAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPowerSourceClusterBatTimeToFullChargeAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPowerSourceBatTimeToFullChargeCommandParams
        );
        result.put("readBatTimeToFullChargeAttribute", readPowerSourceBatTimeToFullChargeAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPowerSourceBatFunctionalWhileChargingCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPowerSourceBatFunctionalWhileChargingAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PowerSource.ID, ClusterIDMapping.PowerSource.Attribute.BatFunctionalWhileCharging.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PowerSourceCluster) cluster).readBatFunctionalWhileChargingAttribute(
//              (ChipClusters.BooleanAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBooleanAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPowerSourceBatFunctionalWhileChargingCommandParams
        );
        result.put("readBatFunctionalWhileChargingAttribute", readPowerSourceBatFunctionalWhileChargingAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPowerSourceBatChargingCurrentCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPowerSourceBatChargingCurrentAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PowerSource.ID, ClusterIDMapping.PowerSource.Attribute.BatChargingCurrent.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PowerSourceCluster) cluster).readBatChargingCurrentAttribute(
//              (ChipClusters.PowerSourceCluster.BatChargingCurrentAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPowerSourceClusterBatChargingCurrentAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPowerSourceBatChargingCurrentCommandParams
        );
        result.put("readBatChargingCurrentAttribute", readPowerSourceBatChargingCurrentAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPowerSourceActiveBatChargeFaultsCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPowerSourceActiveBatChargeFaultsAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PowerSource.ID, ClusterIDMapping.PowerSource.Attribute.ActiveBatChargeFaults.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PowerSourceCluster) cluster).readActiveBatChargeFaultsAttribute(
//              (ChipClusters.PowerSourceCluster.ActiveBatChargeFaultsAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPowerSourceClusterActiveBatChargeFaultsAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPowerSourceActiveBatChargeFaultsCommandParams
        );
        result.put("readActiveBatChargeFaultsAttribute", readPowerSourceActiveBatChargeFaultsAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPowerSourceGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPowerSourceGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PowerSource.ID, ClusterIDMapping.PowerSource.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PowerSourceCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.PowerSourceCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPowerSourceClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPowerSourceGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readPowerSourceGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPowerSourceAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPowerSourceAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PowerSource.ID, ClusterIDMapping.PowerSource.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PowerSourceCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.PowerSourceCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPowerSourceClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPowerSourceAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readPowerSourceAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPowerSourceEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPowerSourceEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PowerSource.ID, ClusterIDMapping.PowerSource.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PowerSourceCluster) cluster).readEventListAttribute(
//              (ChipClusters.PowerSourceCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPowerSourceClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPowerSourceEventListCommandParams
        );
        result.put("readEventListAttribute", readPowerSourceEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPowerSourceAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPowerSourceAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PowerSource.ID, ClusterIDMapping.PowerSource.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PowerSourceCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.PowerSourceCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPowerSourceClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPowerSourceAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readPowerSourceAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPowerSourceFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPowerSourceFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PowerSource.ID, ClusterIDMapping.PowerSource.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PowerSourceCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPowerSourceFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readPowerSourceFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPowerSourceClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPowerSourceClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PowerSource.ID, ClusterIDMapping.PowerSource.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PowerSourceCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPowerSourceClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readPowerSourceClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readGeneralCommissioningInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readGeneralCommissioningBreadcrumbCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readGeneralCommissioningBreadcrumbAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.GeneralCommissioning.ID, ClusterIDMapping.GeneralCommissioning.Attribute.Breadcrumb.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.GeneralCommissioningCluster) cluster).readBreadcrumbAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readGeneralCommissioningBreadcrumbCommandParams
        );
        result.put("readBreadcrumbAttribute", readGeneralCommissioningBreadcrumbAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readGeneralCommissioningRegulatoryConfigCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readGeneralCommissioningRegulatoryConfigAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.GeneralCommissioning.ID, ClusterIDMapping.GeneralCommissioning.Attribute.RegulatoryConfig.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.GeneralCommissioningCluster) cluster).readRegulatoryConfigAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readGeneralCommissioningRegulatoryConfigCommandParams
        );
        result.put("readRegulatoryConfigAttribute", readGeneralCommissioningRegulatoryConfigAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readGeneralCommissioningLocationCapabilityCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readGeneralCommissioningLocationCapabilityAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.GeneralCommissioning.ID, ClusterIDMapping.GeneralCommissioning.Attribute.LocationCapability.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.GeneralCommissioningCluster) cluster).readLocationCapabilityAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readGeneralCommissioningLocationCapabilityCommandParams
        );
        result.put("readLocationCapabilityAttribute", readGeneralCommissioningLocationCapabilityAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readGeneralCommissioningSupportsConcurrentConnectionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readGeneralCommissioningSupportsConcurrentConnectionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.GeneralCommissioning.ID, ClusterIDMapping.GeneralCommissioning.Attribute.SupportsConcurrentConnection.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.GeneralCommissioningCluster) cluster).readSupportsConcurrentConnectionAttribute(
//              (ChipClusters.BooleanAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBooleanAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readGeneralCommissioningSupportsConcurrentConnectionCommandParams
        );
        result.put("readSupportsConcurrentConnectionAttribute", readGeneralCommissioningSupportsConcurrentConnectionAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readGeneralCommissioningGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readGeneralCommissioningGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.GeneralCommissioning.ID, ClusterIDMapping.GeneralCommissioning.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.GeneralCommissioningCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.GeneralCommissioningCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedGeneralCommissioningClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readGeneralCommissioningGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readGeneralCommissioningGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readGeneralCommissioningAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readGeneralCommissioningAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.GeneralCommissioning.ID, ClusterIDMapping.GeneralCommissioning.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.GeneralCommissioningCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.GeneralCommissioningCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedGeneralCommissioningClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readGeneralCommissioningAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readGeneralCommissioningAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readGeneralCommissioningEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readGeneralCommissioningEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.GeneralCommissioning.ID, ClusterIDMapping.GeneralCommissioning.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.GeneralCommissioningCluster) cluster).readEventListAttribute(
//              (ChipClusters.GeneralCommissioningCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedGeneralCommissioningClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readGeneralCommissioningEventListCommandParams
        );
        result.put("readEventListAttribute", readGeneralCommissioningEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readGeneralCommissioningAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readGeneralCommissioningAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.GeneralCommissioning.ID, ClusterIDMapping.GeneralCommissioning.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.GeneralCommissioningCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.GeneralCommissioningCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedGeneralCommissioningClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readGeneralCommissioningAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readGeneralCommissioningAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readGeneralCommissioningFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readGeneralCommissioningFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.GeneralCommissioning.ID, ClusterIDMapping.GeneralCommissioning.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.GeneralCommissioningCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readGeneralCommissioningFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readGeneralCommissioningFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readGeneralCommissioningClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readGeneralCommissioningClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.GeneralCommissioning.ID, ClusterIDMapping.GeneralCommissioning.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.GeneralCommissioningCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readGeneralCommissioningClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readGeneralCommissioningClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readNetworkCommissioningInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readNetworkCommissioningMaxNetworksCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readNetworkCommissioningMaxNetworksAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.NetworkCommissioning.ID, ClusterIDMapping.NetworkCommissioning.Attribute.MaxNetworks.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.NetworkCommissioningCluster) cluster).readMaxNetworksAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readNetworkCommissioningMaxNetworksCommandParams
        );
        result.put("readMaxNetworksAttribute", readNetworkCommissioningMaxNetworksAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readNetworkCommissioningNetworksCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readNetworkCommissioningNetworksAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.NetworkCommissioning.ID, ClusterIDMapping.NetworkCommissioning.Attribute.Networks.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.NetworkCommissioningCluster) cluster).readNetworksAttribute(
//              (ChipClusters.NetworkCommissioningCluster.NetworksAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedNetworkCommissioningClusterNetworksAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readNetworkCommissioningNetworksCommandParams
        );
        result.put("readNetworksAttribute", readNetworkCommissioningNetworksAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readNetworkCommissioningScanMaxTimeSecondsCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readNetworkCommissioningScanMaxTimeSecondsAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.NetworkCommissioning.ID, ClusterIDMapping.NetworkCommissioning.Attribute.ScanMaxTimeSeconds.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.NetworkCommissioningCluster) cluster).readScanMaxTimeSecondsAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readNetworkCommissioningScanMaxTimeSecondsCommandParams
        );
        result.put("readScanMaxTimeSecondsAttribute", readNetworkCommissioningScanMaxTimeSecondsAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readNetworkCommissioningConnectMaxTimeSecondsCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readNetworkCommissioningConnectMaxTimeSecondsAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.NetworkCommissioning.ID, ClusterIDMapping.NetworkCommissioning.Attribute.ConnectMaxTimeSeconds.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.NetworkCommissioningCluster) cluster).readConnectMaxTimeSecondsAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readNetworkCommissioningConnectMaxTimeSecondsCommandParams
        );
        result.put("readConnectMaxTimeSecondsAttribute", readNetworkCommissioningConnectMaxTimeSecondsAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readNetworkCommissioningInterfaceEnabledCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readNetworkCommissioningInterfaceEnabledAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.NetworkCommissioning.ID, ClusterIDMapping.NetworkCommissioning.Attribute.InterfaceEnabled.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.NetworkCommissioningCluster) cluster).readInterfaceEnabledAttribute(
//              (ChipClusters.BooleanAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBooleanAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readNetworkCommissioningInterfaceEnabledCommandParams
        );
        result.put("readInterfaceEnabledAttribute", readNetworkCommissioningInterfaceEnabledAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readNetworkCommissioningLastNetworkingStatusCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readNetworkCommissioningLastNetworkingStatusAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.NetworkCommissioning.ID, ClusterIDMapping.NetworkCommissioning.Attribute.LastNetworkingStatus.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.NetworkCommissioningCluster) cluster).readLastNetworkingStatusAttribute(
//              (ChipClusters.NetworkCommissioningCluster.LastNetworkingStatusAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedNetworkCommissioningClusterLastNetworkingStatusAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readNetworkCommissioningLastNetworkingStatusCommandParams
        );
        result.put("readLastNetworkingStatusAttribute", readNetworkCommissioningLastNetworkingStatusAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readNetworkCommissioningLastNetworkIDCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readNetworkCommissioningLastNetworkIDAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.NetworkCommissioning.ID, ClusterIDMapping.NetworkCommissioning.Attribute.LastNetworkID.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.NetworkCommissioningCluster) cluster).readLastNetworkIDAttribute(
//              (ChipClusters.NetworkCommissioningCluster.LastNetworkIDAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedNetworkCommissioningClusterLastNetworkIDAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readNetworkCommissioningLastNetworkIDCommandParams
        );
        result.put("readLastNetworkIDAttribute", readNetworkCommissioningLastNetworkIDAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readNetworkCommissioningLastConnectErrorValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readNetworkCommissioningLastConnectErrorValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.NetworkCommissioning.ID, ClusterIDMapping.NetworkCommissioning.Attribute.LastConnectErrorValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.NetworkCommissioningCluster) cluster).readLastConnectErrorValueAttribute(
//              (ChipClusters.NetworkCommissioningCluster.LastConnectErrorValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedNetworkCommissioningClusterLastConnectErrorValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readNetworkCommissioningLastConnectErrorValueCommandParams
        );
        result.put("readLastConnectErrorValueAttribute", readNetworkCommissioningLastConnectErrorValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readNetworkCommissioningGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readNetworkCommissioningGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.NetworkCommissioning.ID, ClusterIDMapping.NetworkCommissioning.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.NetworkCommissioningCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.NetworkCommissioningCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedNetworkCommissioningClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readNetworkCommissioningGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readNetworkCommissioningGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readNetworkCommissioningAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readNetworkCommissioningAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.NetworkCommissioning.ID, ClusterIDMapping.NetworkCommissioning.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.NetworkCommissioningCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.NetworkCommissioningCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedNetworkCommissioningClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readNetworkCommissioningAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readNetworkCommissioningAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readNetworkCommissioningEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readNetworkCommissioningEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.NetworkCommissioning.ID, ClusterIDMapping.NetworkCommissioning.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.NetworkCommissioningCluster) cluster).readEventListAttribute(
//              (ChipClusters.NetworkCommissioningCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedNetworkCommissioningClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readNetworkCommissioningEventListCommandParams
        );
        result.put("readEventListAttribute", readNetworkCommissioningEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readNetworkCommissioningAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readNetworkCommissioningAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.NetworkCommissioning.ID, ClusterIDMapping.NetworkCommissioning.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.NetworkCommissioningCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.NetworkCommissioningCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedNetworkCommissioningClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readNetworkCommissioningAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readNetworkCommissioningAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readNetworkCommissioningFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readNetworkCommissioningFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.NetworkCommissioning.ID, ClusterIDMapping.NetworkCommissioning.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.NetworkCommissioningCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readNetworkCommissioningFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readNetworkCommissioningFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readNetworkCommissioningClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readNetworkCommissioningClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.NetworkCommissioning.ID, ClusterIDMapping.NetworkCommissioning.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.NetworkCommissioningCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readNetworkCommissioningClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readNetworkCommissioningClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readDiagnosticLogsInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readDiagnosticLogsGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDiagnosticLogsGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DiagnosticLogs.ID, ClusterIDMapping.DiagnosticLogs.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DiagnosticLogsCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.DiagnosticLogsCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedDiagnosticLogsClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDiagnosticLogsGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readDiagnosticLogsGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDiagnosticLogsAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDiagnosticLogsAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DiagnosticLogs.ID, ClusterIDMapping.DiagnosticLogs.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DiagnosticLogsCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.DiagnosticLogsCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedDiagnosticLogsClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDiagnosticLogsAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readDiagnosticLogsAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDiagnosticLogsEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDiagnosticLogsEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DiagnosticLogs.ID, ClusterIDMapping.DiagnosticLogs.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DiagnosticLogsCluster) cluster).readEventListAttribute(
//              (ChipClusters.DiagnosticLogsCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedDiagnosticLogsClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDiagnosticLogsEventListCommandParams
        );
        result.put("readEventListAttribute", readDiagnosticLogsEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDiagnosticLogsAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDiagnosticLogsAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DiagnosticLogs.ID, ClusterIDMapping.DiagnosticLogs.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DiagnosticLogsCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.DiagnosticLogsCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedDiagnosticLogsClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDiagnosticLogsAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readDiagnosticLogsAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDiagnosticLogsFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDiagnosticLogsFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DiagnosticLogs.ID, ClusterIDMapping.DiagnosticLogs.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DiagnosticLogsCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDiagnosticLogsFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readDiagnosticLogsFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDiagnosticLogsClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDiagnosticLogsClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DiagnosticLogs.ID, ClusterIDMapping.DiagnosticLogs.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DiagnosticLogsCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDiagnosticLogsClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readDiagnosticLogsClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readGeneralDiagnosticsInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readGeneralDiagnosticsNetworkInterfacesCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readGeneralDiagnosticsNetworkInterfacesAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.GeneralDiagnostics.ID, ClusterIDMapping.GeneralDiagnostics.Attribute.NetworkInterfaces.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.GeneralDiagnosticsCluster) cluster).readNetworkInterfacesAttribute(
//              (ChipClusters.GeneralDiagnosticsCluster.NetworkInterfacesAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedGeneralDiagnosticsClusterNetworkInterfacesAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readGeneralDiagnosticsNetworkInterfacesCommandParams
        );
        result.put("readNetworkInterfacesAttribute", readGeneralDiagnosticsNetworkInterfacesAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readGeneralDiagnosticsRebootCountCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readGeneralDiagnosticsRebootCountAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.GeneralDiagnostics.ID, ClusterIDMapping.GeneralDiagnostics.Attribute.RebootCount.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.GeneralDiagnosticsCluster) cluster).readRebootCountAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readGeneralDiagnosticsRebootCountCommandParams
        );
        result.put("readRebootCountAttribute", readGeneralDiagnosticsRebootCountAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readGeneralDiagnosticsUpTimeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readGeneralDiagnosticsUpTimeAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.GeneralDiagnostics.ID, ClusterIDMapping.GeneralDiagnostics.Attribute.UpTime.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.GeneralDiagnosticsCluster) cluster).readUpTimeAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readGeneralDiagnosticsUpTimeCommandParams
        );
        result.put("readUpTimeAttribute", readGeneralDiagnosticsUpTimeAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readGeneralDiagnosticsTotalOperationalHoursCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readGeneralDiagnosticsTotalOperationalHoursAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.GeneralDiagnostics.ID, ClusterIDMapping.GeneralDiagnostics.Attribute.TotalOperationalHours.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.GeneralDiagnosticsCluster) cluster).readTotalOperationalHoursAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readGeneralDiagnosticsTotalOperationalHoursCommandParams
        );
        result.put("readTotalOperationalHoursAttribute", readGeneralDiagnosticsTotalOperationalHoursAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readGeneralDiagnosticsBootReasonCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readGeneralDiagnosticsBootReasonAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.GeneralDiagnostics.ID, ClusterIDMapping.GeneralDiagnostics.Attribute.BootReason.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.GeneralDiagnosticsCluster) cluster).readBootReasonAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readGeneralDiagnosticsBootReasonCommandParams
        );
        result.put("readBootReasonAttribute", readGeneralDiagnosticsBootReasonAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readGeneralDiagnosticsActiveHardwareFaultsCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readGeneralDiagnosticsActiveHardwareFaultsAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.GeneralDiagnostics.ID, ClusterIDMapping.GeneralDiagnostics.Attribute.ActiveHardwareFaults.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.GeneralDiagnosticsCluster) cluster).readActiveHardwareFaultsAttribute(
//              (ChipClusters.GeneralDiagnosticsCluster.ActiveHardwareFaultsAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedGeneralDiagnosticsClusterActiveHardwareFaultsAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readGeneralDiagnosticsActiveHardwareFaultsCommandParams
        );
        result.put("readActiveHardwareFaultsAttribute", readGeneralDiagnosticsActiveHardwareFaultsAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readGeneralDiagnosticsActiveRadioFaultsCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readGeneralDiagnosticsActiveRadioFaultsAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.GeneralDiagnostics.ID, ClusterIDMapping.GeneralDiagnostics.Attribute.ActiveRadioFaults.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.GeneralDiagnosticsCluster) cluster).readActiveRadioFaultsAttribute(
//              (ChipClusters.GeneralDiagnosticsCluster.ActiveRadioFaultsAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedGeneralDiagnosticsClusterActiveRadioFaultsAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readGeneralDiagnosticsActiveRadioFaultsCommandParams
        );
        result.put("readActiveRadioFaultsAttribute", readGeneralDiagnosticsActiveRadioFaultsAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readGeneralDiagnosticsActiveNetworkFaultsCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readGeneralDiagnosticsActiveNetworkFaultsAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.GeneralDiagnostics.ID, ClusterIDMapping.GeneralDiagnostics.Attribute.ActiveNetworkFaults.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.GeneralDiagnosticsCluster) cluster).readActiveNetworkFaultsAttribute(
//              (ChipClusters.GeneralDiagnosticsCluster.ActiveNetworkFaultsAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedGeneralDiagnosticsClusterActiveNetworkFaultsAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readGeneralDiagnosticsActiveNetworkFaultsCommandParams
        );
        result.put("readActiveNetworkFaultsAttribute", readGeneralDiagnosticsActiveNetworkFaultsAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readGeneralDiagnosticsTestEventTriggersEnabledCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readGeneralDiagnosticsTestEventTriggersEnabledAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.GeneralDiagnostics.ID, ClusterIDMapping.GeneralDiagnostics.Attribute.TestEventTriggersEnabled.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.GeneralDiagnosticsCluster) cluster).readTestEventTriggersEnabledAttribute(
//              (ChipClusters.BooleanAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBooleanAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readGeneralDiagnosticsTestEventTriggersEnabledCommandParams
        );
        result.put("readTestEventTriggersEnabledAttribute", readGeneralDiagnosticsTestEventTriggersEnabledAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readGeneralDiagnosticsGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readGeneralDiagnosticsGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.GeneralDiagnostics.ID, ClusterIDMapping.GeneralDiagnostics.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.GeneralDiagnosticsCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.GeneralDiagnosticsCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedGeneralDiagnosticsClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readGeneralDiagnosticsGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readGeneralDiagnosticsGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readGeneralDiagnosticsAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readGeneralDiagnosticsAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.GeneralDiagnostics.ID, ClusterIDMapping.GeneralDiagnostics.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.GeneralDiagnosticsCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.GeneralDiagnosticsCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedGeneralDiagnosticsClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readGeneralDiagnosticsAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readGeneralDiagnosticsAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readGeneralDiagnosticsEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readGeneralDiagnosticsEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.GeneralDiagnostics.ID, ClusterIDMapping.GeneralDiagnostics.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.GeneralDiagnosticsCluster) cluster).readEventListAttribute(
//              (ChipClusters.GeneralDiagnosticsCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedGeneralDiagnosticsClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readGeneralDiagnosticsEventListCommandParams
        );
        result.put("readEventListAttribute", readGeneralDiagnosticsEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readGeneralDiagnosticsAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readGeneralDiagnosticsAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.GeneralDiagnostics.ID, ClusterIDMapping.GeneralDiagnostics.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.GeneralDiagnosticsCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.GeneralDiagnosticsCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedGeneralDiagnosticsClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readGeneralDiagnosticsAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readGeneralDiagnosticsAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readGeneralDiagnosticsFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readGeneralDiagnosticsFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.GeneralDiagnostics.ID, ClusterIDMapping.GeneralDiagnostics.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.GeneralDiagnosticsCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readGeneralDiagnosticsFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readGeneralDiagnosticsFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readGeneralDiagnosticsClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readGeneralDiagnosticsClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.GeneralDiagnostics.ID, ClusterIDMapping.GeneralDiagnostics.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.GeneralDiagnosticsCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readGeneralDiagnosticsClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readGeneralDiagnosticsClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readSoftwareDiagnosticsInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readSoftwareDiagnosticsThreadMetricsCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSoftwareDiagnosticsThreadMetricsAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SoftwareDiagnostics.ID, ClusterIDMapping.SoftwareDiagnostics.Attribute.ThreadMetrics.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SoftwareDiagnosticsCluster) cluster).readThreadMetricsAttribute(
//              (ChipClusters.SoftwareDiagnosticsCluster.ThreadMetricsAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedSoftwareDiagnosticsClusterThreadMetricsAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSoftwareDiagnosticsThreadMetricsCommandParams
        );
        result.put("readThreadMetricsAttribute", readSoftwareDiagnosticsThreadMetricsAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSoftwareDiagnosticsCurrentHeapFreeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSoftwareDiagnosticsCurrentHeapFreeAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SoftwareDiagnostics.ID, ClusterIDMapping.SoftwareDiagnostics.Attribute.CurrentHeapFree.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SoftwareDiagnosticsCluster) cluster).readCurrentHeapFreeAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSoftwareDiagnosticsCurrentHeapFreeCommandParams
        );
        result.put("readCurrentHeapFreeAttribute", readSoftwareDiagnosticsCurrentHeapFreeAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSoftwareDiagnosticsCurrentHeapUsedCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSoftwareDiagnosticsCurrentHeapUsedAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SoftwareDiagnostics.ID, ClusterIDMapping.SoftwareDiagnostics.Attribute.CurrentHeapUsed.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SoftwareDiagnosticsCluster) cluster).readCurrentHeapUsedAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSoftwareDiagnosticsCurrentHeapUsedCommandParams
        );
        result.put("readCurrentHeapUsedAttribute", readSoftwareDiagnosticsCurrentHeapUsedAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSoftwareDiagnosticsCurrentHeapHighWatermarkCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSoftwareDiagnosticsCurrentHeapHighWatermarkAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SoftwareDiagnostics.ID, ClusterIDMapping.SoftwareDiagnostics.Attribute.CurrentHeapHighWatermark.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SoftwareDiagnosticsCluster) cluster).readCurrentHeapHighWatermarkAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSoftwareDiagnosticsCurrentHeapHighWatermarkCommandParams
        );
        result.put("readCurrentHeapHighWatermarkAttribute", readSoftwareDiagnosticsCurrentHeapHighWatermarkAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSoftwareDiagnosticsGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSoftwareDiagnosticsGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SoftwareDiagnostics.ID, ClusterIDMapping.SoftwareDiagnostics.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SoftwareDiagnosticsCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.SoftwareDiagnosticsCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedSoftwareDiagnosticsClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSoftwareDiagnosticsGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readSoftwareDiagnosticsGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSoftwareDiagnosticsAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSoftwareDiagnosticsAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SoftwareDiagnostics.ID, ClusterIDMapping.SoftwareDiagnostics.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SoftwareDiagnosticsCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.SoftwareDiagnosticsCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedSoftwareDiagnosticsClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSoftwareDiagnosticsAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readSoftwareDiagnosticsAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSoftwareDiagnosticsEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSoftwareDiagnosticsEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SoftwareDiagnostics.ID, ClusterIDMapping.SoftwareDiagnostics.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SoftwareDiagnosticsCluster) cluster).readEventListAttribute(
//              (ChipClusters.SoftwareDiagnosticsCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedSoftwareDiagnosticsClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSoftwareDiagnosticsEventListCommandParams
        );
        result.put("readEventListAttribute", readSoftwareDiagnosticsEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSoftwareDiagnosticsAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSoftwareDiagnosticsAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SoftwareDiagnostics.ID, ClusterIDMapping.SoftwareDiagnostics.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SoftwareDiagnosticsCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.SoftwareDiagnosticsCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedSoftwareDiagnosticsClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSoftwareDiagnosticsAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readSoftwareDiagnosticsAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSoftwareDiagnosticsFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSoftwareDiagnosticsFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SoftwareDiagnostics.ID, ClusterIDMapping.SoftwareDiagnostics.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SoftwareDiagnosticsCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSoftwareDiagnosticsFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readSoftwareDiagnosticsFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSoftwareDiagnosticsClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSoftwareDiagnosticsClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SoftwareDiagnostics.ID, ClusterIDMapping.SoftwareDiagnostics.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SoftwareDiagnosticsCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSoftwareDiagnosticsClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readSoftwareDiagnosticsClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readThreadNetworkDiagnosticsInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsChannelCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThreadNetworkDiagnosticsChannelAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ThreadNetworkDiagnostics.ID, ClusterIDMapping.ThreadNetworkDiagnostics.Attribute.Channel.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster).readChannelAttribute(
//              (ChipClusters.ThreadNetworkDiagnosticsCluster.ChannelAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedThreadNetworkDiagnosticsClusterChannelAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThreadNetworkDiagnosticsChannelCommandParams
        );
        result.put("readChannelAttribute", readThreadNetworkDiagnosticsChannelAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsRoutingRoleCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThreadNetworkDiagnosticsRoutingRoleAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ThreadNetworkDiagnostics.ID, ClusterIDMapping.ThreadNetworkDiagnostics.Attribute.RoutingRole.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster).readRoutingRoleAttribute(
//              (ChipClusters.ThreadNetworkDiagnosticsCluster.RoutingRoleAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedThreadNetworkDiagnosticsClusterRoutingRoleAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThreadNetworkDiagnosticsRoutingRoleCommandParams
        );
        result.put("readRoutingRoleAttribute", readThreadNetworkDiagnosticsRoutingRoleAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsNetworkNameCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThreadNetworkDiagnosticsNetworkNameAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ThreadNetworkDiagnostics.ID, ClusterIDMapping.ThreadNetworkDiagnostics.Attribute.NetworkName.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster).readNetworkNameAttribute(
//              (ChipClusters.ThreadNetworkDiagnosticsCluster.NetworkNameAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedThreadNetworkDiagnosticsClusterNetworkNameAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThreadNetworkDiagnosticsNetworkNameCommandParams
        );
        result.put("readNetworkNameAttribute", readThreadNetworkDiagnosticsNetworkNameAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsPanIdCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThreadNetworkDiagnosticsPanIdAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ThreadNetworkDiagnostics.ID, ClusterIDMapping.ThreadNetworkDiagnostics.Attribute.PanId.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster).readPanIdAttribute(
//              (ChipClusters.ThreadNetworkDiagnosticsCluster.PanIdAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedThreadNetworkDiagnosticsClusterPanIdAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThreadNetworkDiagnosticsPanIdCommandParams
        );
        result.put("readPanIdAttribute", readThreadNetworkDiagnosticsPanIdAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsExtendedPanIdCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThreadNetworkDiagnosticsExtendedPanIdAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ThreadNetworkDiagnostics.ID, ClusterIDMapping.ThreadNetworkDiagnostics.Attribute.ExtendedPanId.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster).readExtendedPanIdAttribute(
//              (ChipClusters.ThreadNetworkDiagnosticsCluster.ExtendedPanIdAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedThreadNetworkDiagnosticsClusterExtendedPanIdAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThreadNetworkDiagnosticsExtendedPanIdCommandParams
        );
        result.put("readExtendedPanIdAttribute", readThreadNetworkDiagnosticsExtendedPanIdAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsMeshLocalPrefixCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThreadNetworkDiagnosticsMeshLocalPrefixAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ThreadNetworkDiagnostics.ID, ClusterIDMapping.ThreadNetworkDiagnostics.Attribute.MeshLocalPrefix.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster).readMeshLocalPrefixAttribute(
//              (ChipClusters.ThreadNetworkDiagnosticsCluster.MeshLocalPrefixAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedThreadNetworkDiagnosticsClusterMeshLocalPrefixAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThreadNetworkDiagnosticsMeshLocalPrefixCommandParams
        );
        result.put("readMeshLocalPrefixAttribute", readThreadNetworkDiagnosticsMeshLocalPrefixAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsOverrunCountCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThreadNetworkDiagnosticsOverrunCountAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ThreadNetworkDiagnostics.ID, ClusterIDMapping.ThreadNetworkDiagnostics.Attribute.OverrunCount.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster).readOverrunCountAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThreadNetworkDiagnosticsOverrunCountCommandParams
        );
        result.put("readOverrunCountAttribute", readThreadNetworkDiagnosticsOverrunCountAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsNeighborTableCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThreadNetworkDiagnosticsNeighborTableAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ThreadNetworkDiagnostics.ID, ClusterIDMapping.ThreadNetworkDiagnostics.Attribute.NeighborTable.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster).readNeighborTableAttribute(
//              (ChipClusters.ThreadNetworkDiagnosticsCluster.NeighborTableAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedThreadNetworkDiagnosticsClusterNeighborTableAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThreadNetworkDiagnosticsNeighborTableCommandParams
        );
        result.put("readNeighborTableAttribute", readThreadNetworkDiagnosticsNeighborTableAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsRouteTableCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThreadNetworkDiagnosticsRouteTableAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ThreadNetworkDiagnostics.ID, ClusterIDMapping.ThreadNetworkDiagnostics.Attribute.RouteTable.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster).readRouteTableAttribute(
//              (ChipClusters.ThreadNetworkDiagnosticsCluster.RouteTableAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedThreadNetworkDiagnosticsClusterRouteTableAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThreadNetworkDiagnosticsRouteTableCommandParams
        );
        result.put("readRouteTableAttribute", readThreadNetworkDiagnosticsRouteTableAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsPartitionIdCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThreadNetworkDiagnosticsPartitionIdAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ThreadNetworkDiagnostics.ID, ClusterIDMapping.ThreadNetworkDiagnostics.Attribute.PartitionId.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster).readPartitionIdAttribute(
//              (ChipClusters.ThreadNetworkDiagnosticsCluster.PartitionIdAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedThreadNetworkDiagnosticsClusterPartitionIdAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThreadNetworkDiagnosticsPartitionIdCommandParams
        );
        result.put("readPartitionIdAttribute", readThreadNetworkDiagnosticsPartitionIdAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsWeightingCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThreadNetworkDiagnosticsWeightingAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ThreadNetworkDiagnostics.ID, ClusterIDMapping.ThreadNetworkDiagnostics.Attribute.Weighting.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster).readWeightingAttribute(
//              (ChipClusters.ThreadNetworkDiagnosticsCluster.WeightingAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedThreadNetworkDiagnosticsClusterWeightingAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThreadNetworkDiagnosticsWeightingCommandParams
        );
        result.put("readWeightingAttribute", readThreadNetworkDiagnosticsWeightingAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsDataVersionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThreadNetworkDiagnosticsDataVersionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ThreadNetworkDiagnostics.ID, ClusterIDMapping.ThreadNetworkDiagnostics.Attribute.DataVersion.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster).readDataVersionAttribute(
//              (ChipClusters.ThreadNetworkDiagnosticsCluster.DataVersionAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedThreadNetworkDiagnosticsClusterDataVersionAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThreadNetworkDiagnosticsDataVersionCommandParams
        );
        result.put("readDataVersionAttribute", readThreadNetworkDiagnosticsDataVersionAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsStableDataVersionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThreadNetworkDiagnosticsStableDataVersionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ThreadNetworkDiagnostics.ID, ClusterIDMapping.ThreadNetworkDiagnostics.Attribute.StableDataVersion.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster).readStableDataVersionAttribute(
//              (ChipClusters.ThreadNetworkDiagnosticsCluster.StableDataVersionAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedThreadNetworkDiagnosticsClusterStableDataVersionAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThreadNetworkDiagnosticsStableDataVersionCommandParams
        );
        result.put("readStableDataVersionAttribute", readThreadNetworkDiagnosticsStableDataVersionAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsLeaderRouterIdCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThreadNetworkDiagnosticsLeaderRouterIdAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ThreadNetworkDiagnostics.ID, ClusterIDMapping.ThreadNetworkDiagnostics.Attribute.LeaderRouterId.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster).readLeaderRouterIdAttribute(
//              (ChipClusters.ThreadNetworkDiagnosticsCluster.LeaderRouterIdAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedThreadNetworkDiagnosticsClusterLeaderRouterIdAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThreadNetworkDiagnosticsLeaderRouterIdCommandParams
        );
        result.put("readLeaderRouterIdAttribute", readThreadNetworkDiagnosticsLeaderRouterIdAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsDetachedRoleCountCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThreadNetworkDiagnosticsDetachedRoleCountAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ThreadNetworkDiagnostics.ID, ClusterIDMapping.ThreadNetworkDiagnostics.Attribute.DetachedRoleCount.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster).readDetachedRoleCountAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThreadNetworkDiagnosticsDetachedRoleCountCommandParams
        );
        result.put("readDetachedRoleCountAttribute", readThreadNetworkDiagnosticsDetachedRoleCountAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsChildRoleCountCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThreadNetworkDiagnosticsChildRoleCountAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ThreadNetworkDiagnostics.ID, ClusterIDMapping.ThreadNetworkDiagnostics.Attribute.ChildRoleCount.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster).readChildRoleCountAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThreadNetworkDiagnosticsChildRoleCountCommandParams
        );
        result.put("readChildRoleCountAttribute", readThreadNetworkDiagnosticsChildRoleCountAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsRouterRoleCountCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThreadNetworkDiagnosticsRouterRoleCountAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ThreadNetworkDiagnostics.ID, ClusterIDMapping.ThreadNetworkDiagnostics.Attribute.RouterRoleCount.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster).readRouterRoleCountAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThreadNetworkDiagnosticsRouterRoleCountCommandParams
        );
        result.put("readRouterRoleCountAttribute", readThreadNetworkDiagnosticsRouterRoleCountAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsLeaderRoleCountCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThreadNetworkDiagnosticsLeaderRoleCountAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ThreadNetworkDiagnostics.ID, ClusterIDMapping.ThreadNetworkDiagnostics.Attribute.LeaderRoleCount.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster).readLeaderRoleCountAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThreadNetworkDiagnosticsLeaderRoleCountCommandParams
        );
        result.put("readLeaderRoleCountAttribute", readThreadNetworkDiagnosticsLeaderRoleCountAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsAttachAttemptCountCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThreadNetworkDiagnosticsAttachAttemptCountAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ThreadNetworkDiagnostics.ID, ClusterIDMapping.ThreadNetworkDiagnostics.Attribute.AttachAttemptCount.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster).readAttachAttemptCountAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThreadNetworkDiagnosticsAttachAttemptCountCommandParams
        );
        result.put("readAttachAttemptCountAttribute", readThreadNetworkDiagnosticsAttachAttemptCountAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsPartitionIdChangeCountCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThreadNetworkDiagnosticsPartitionIdChangeCountAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ThreadNetworkDiagnostics.ID, ClusterIDMapping.ThreadNetworkDiagnostics.Attribute.PartitionIdChangeCount.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster).readPartitionIdChangeCountAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThreadNetworkDiagnosticsPartitionIdChangeCountCommandParams
        );
        result.put("readPartitionIdChangeCountAttribute", readThreadNetworkDiagnosticsPartitionIdChangeCountAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsBetterPartitionAttachAttemptCountCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThreadNetworkDiagnosticsBetterPartitionAttachAttemptCountAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ThreadNetworkDiagnostics.ID, ClusterIDMapping.ThreadNetworkDiagnostics.Attribute.BetterPartitionAttachAttemptCount.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster).readBetterPartitionAttachAttemptCountAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThreadNetworkDiagnosticsBetterPartitionAttachAttemptCountCommandParams
        );
        result.put("readBetterPartitionAttachAttemptCountAttribute", readThreadNetworkDiagnosticsBetterPartitionAttachAttemptCountAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsParentChangeCountCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThreadNetworkDiagnosticsParentChangeCountAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ThreadNetworkDiagnostics.ID, ClusterIDMapping.ThreadNetworkDiagnostics.Attribute.ParentChangeCount.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster).readParentChangeCountAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThreadNetworkDiagnosticsParentChangeCountCommandParams
        );
        result.put("readParentChangeCountAttribute", readThreadNetworkDiagnosticsParentChangeCountAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsTxTotalCountCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThreadNetworkDiagnosticsTxTotalCountAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ThreadNetworkDiagnostics.ID, ClusterIDMapping.ThreadNetworkDiagnostics.Attribute.TxTotalCount.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster).readTxTotalCountAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThreadNetworkDiagnosticsTxTotalCountCommandParams
        );
        result.put("readTxTotalCountAttribute", readThreadNetworkDiagnosticsTxTotalCountAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsTxUnicastCountCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThreadNetworkDiagnosticsTxUnicastCountAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ThreadNetworkDiagnostics.ID, ClusterIDMapping.ThreadNetworkDiagnostics.Attribute.TxUnicastCount.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster).readTxUnicastCountAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThreadNetworkDiagnosticsTxUnicastCountCommandParams
        );
        result.put("readTxUnicastCountAttribute", readThreadNetworkDiagnosticsTxUnicastCountAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsTxBroadcastCountCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThreadNetworkDiagnosticsTxBroadcastCountAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ThreadNetworkDiagnostics.ID, ClusterIDMapping.ThreadNetworkDiagnostics.Attribute.TxBroadcastCount.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster).readTxBroadcastCountAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThreadNetworkDiagnosticsTxBroadcastCountCommandParams
        );
        result.put("readTxBroadcastCountAttribute", readThreadNetworkDiagnosticsTxBroadcastCountAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsTxAckRequestedCountCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThreadNetworkDiagnosticsTxAckRequestedCountAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ThreadNetworkDiagnostics.ID, ClusterIDMapping.ThreadNetworkDiagnostics.Attribute.TxAckRequestedCount.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster).readTxAckRequestedCountAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThreadNetworkDiagnosticsTxAckRequestedCountCommandParams
        );
        result.put("readTxAckRequestedCountAttribute", readThreadNetworkDiagnosticsTxAckRequestedCountAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsTxAckedCountCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThreadNetworkDiagnosticsTxAckedCountAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ThreadNetworkDiagnostics.ID, ClusterIDMapping.ThreadNetworkDiagnostics.Attribute.TxAckedCount.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster).readTxAckedCountAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThreadNetworkDiagnosticsTxAckedCountCommandParams
        );
        result.put("readTxAckedCountAttribute", readThreadNetworkDiagnosticsTxAckedCountAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsTxNoAckRequestedCountCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThreadNetworkDiagnosticsTxNoAckRequestedCountAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ThreadNetworkDiagnostics.ID, ClusterIDMapping.ThreadNetworkDiagnostics.Attribute.TxNoAckRequestedCount.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster).readTxNoAckRequestedCountAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThreadNetworkDiagnosticsTxNoAckRequestedCountCommandParams
        );
        result.put("readTxNoAckRequestedCountAttribute", readThreadNetworkDiagnosticsTxNoAckRequestedCountAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsTxDataCountCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThreadNetworkDiagnosticsTxDataCountAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ThreadNetworkDiagnostics.ID, ClusterIDMapping.ThreadNetworkDiagnostics.Attribute.TxDataCount.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster).readTxDataCountAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThreadNetworkDiagnosticsTxDataCountCommandParams
        );
        result.put("readTxDataCountAttribute", readThreadNetworkDiagnosticsTxDataCountAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsTxDataPollCountCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThreadNetworkDiagnosticsTxDataPollCountAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ThreadNetworkDiagnostics.ID, ClusterIDMapping.ThreadNetworkDiagnostics.Attribute.TxDataPollCount.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster).readTxDataPollCountAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThreadNetworkDiagnosticsTxDataPollCountCommandParams
        );
        result.put("readTxDataPollCountAttribute", readThreadNetworkDiagnosticsTxDataPollCountAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsTxBeaconCountCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThreadNetworkDiagnosticsTxBeaconCountAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ThreadNetworkDiagnostics.ID, ClusterIDMapping.ThreadNetworkDiagnostics.Attribute.TxBeaconCount.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster).readTxBeaconCountAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThreadNetworkDiagnosticsTxBeaconCountCommandParams
        );
        result.put("readTxBeaconCountAttribute", readThreadNetworkDiagnosticsTxBeaconCountAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsTxBeaconRequestCountCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThreadNetworkDiagnosticsTxBeaconRequestCountAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ThreadNetworkDiagnostics.ID, ClusterIDMapping.ThreadNetworkDiagnostics.Attribute.TxBeaconRequestCount.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster).readTxBeaconRequestCountAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThreadNetworkDiagnosticsTxBeaconRequestCountCommandParams
        );
        result.put("readTxBeaconRequestCountAttribute", readThreadNetworkDiagnosticsTxBeaconRequestCountAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsTxOtherCountCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThreadNetworkDiagnosticsTxOtherCountAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ThreadNetworkDiagnostics.ID, ClusterIDMapping.ThreadNetworkDiagnostics.Attribute.TxOtherCount.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster).readTxOtherCountAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThreadNetworkDiagnosticsTxOtherCountCommandParams
        );
        result.put("readTxOtherCountAttribute", readThreadNetworkDiagnosticsTxOtherCountAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsTxRetryCountCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThreadNetworkDiagnosticsTxRetryCountAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ThreadNetworkDiagnostics.ID, ClusterIDMapping.ThreadNetworkDiagnostics.Attribute.TxRetryCount.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster).readTxRetryCountAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThreadNetworkDiagnosticsTxRetryCountCommandParams
        );
        result.put("readTxRetryCountAttribute", readThreadNetworkDiagnosticsTxRetryCountAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsTxDirectMaxRetryExpiryCountCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThreadNetworkDiagnosticsTxDirectMaxRetryExpiryCountAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ThreadNetworkDiagnostics.ID, ClusterIDMapping.ThreadNetworkDiagnostics.Attribute.TxDirectMaxRetryExpiryCount.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster).readTxDirectMaxRetryExpiryCountAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThreadNetworkDiagnosticsTxDirectMaxRetryExpiryCountCommandParams
        );
        result.put("readTxDirectMaxRetryExpiryCountAttribute", readThreadNetworkDiagnosticsTxDirectMaxRetryExpiryCountAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsTxIndirectMaxRetryExpiryCountCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThreadNetworkDiagnosticsTxIndirectMaxRetryExpiryCountAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ThreadNetworkDiagnostics.ID, ClusterIDMapping.ThreadNetworkDiagnostics.Attribute.TxIndirectMaxRetryExpiryCount.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster).readTxIndirectMaxRetryExpiryCountAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThreadNetworkDiagnosticsTxIndirectMaxRetryExpiryCountCommandParams
        );
        result.put("readTxIndirectMaxRetryExpiryCountAttribute", readThreadNetworkDiagnosticsTxIndirectMaxRetryExpiryCountAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsTxErrCcaCountCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThreadNetworkDiagnosticsTxErrCcaCountAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ThreadNetworkDiagnostics.ID, ClusterIDMapping.ThreadNetworkDiagnostics.Attribute.TxErrCcaCount.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster).readTxErrCcaCountAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThreadNetworkDiagnosticsTxErrCcaCountCommandParams
        );
        result.put("readTxErrCcaCountAttribute", readThreadNetworkDiagnosticsTxErrCcaCountAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsTxErrAbortCountCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThreadNetworkDiagnosticsTxErrAbortCountAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ThreadNetworkDiagnostics.ID, ClusterIDMapping.ThreadNetworkDiagnostics.Attribute.TxErrAbortCount.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster).readTxErrAbortCountAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThreadNetworkDiagnosticsTxErrAbortCountCommandParams
        );
        result.put("readTxErrAbortCountAttribute", readThreadNetworkDiagnosticsTxErrAbortCountAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsTxErrBusyChannelCountCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThreadNetworkDiagnosticsTxErrBusyChannelCountAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ThreadNetworkDiagnostics.ID, ClusterIDMapping.ThreadNetworkDiagnostics.Attribute.TxErrBusyChannelCount.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster).readTxErrBusyChannelCountAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThreadNetworkDiagnosticsTxErrBusyChannelCountCommandParams
        );
        result.put("readTxErrBusyChannelCountAttribute", readThreadNetworkDiagnosticsTxErrBusyChannelCountAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsRxTotalCountCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThreadNetworkDiagnosticsRxTotalCountAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ThreadNetworkDiagnostics.ID, ClusterIDMapping.ThreadNetworkDiagnostics.Attribute.RxTotalCount.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster).readRxTotalCountAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThreadNetworkDiagnosticsRxTotalCountCommandParams
        );
        result.put("readRxTotalCountAttribute", readThreadNetworkDiagnosticsRxTotalCountAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsRxUnicastCountCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThreadNetworkDiagnosticsRxUnicastCountAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ThreadNetworkDiagnostics.ID, ClusterIDMapping.ThreadNetworkDiagnostics.Attribute.RxUnicastCount.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster).readRxUnicastCountAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThreadNetworkDiagnosticsRxUnicastCountCommandParams
        );
        result.put("readRxUnicastCountAttribute", readThreadNetworkDiagnosticsRxUnicastCountAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsRxBroadcastCountCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThreadNetworkDiagnosticsRxBroadcastCountAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ThreadNetworkDiagnostics.ID, ClusterIDMapping.ThreadNetworkDiagnostics.Attribute.RxBroadcastCount.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster).readRxBroadcastCountAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThreadNetworkDiagnosticsRxBroadcastCountCommandParams
        );
        result.put("readRxBroadcastCountAttribute", readThreadNetworkDiagnosticsRxBroadcastCountAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsRxDataCountCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThreadNetworkDiagnosticsRxDataCountAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ThreadNetworkDiagnostics.ID, ClusterIDMapping.ThreadNetworkDiagnostics.Attribute.RxDataCount.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster).readRxDataCountAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThreadNetworkDiagnosticsRxDataCountCommandParams
        );
        result.put("readRxDataCountAttribute", readThreadNetworkDiagnosticsRxDataCountAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsRxDataPollCountCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThreadNetworkDiagnosticsRxDataPollCountAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ThreadNetworkDiagnostics.ID, ClusterIDMapping.ThreadNetworkDiagnostics.Attribute.RxDataPollCount.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster).readRxDataPollCountAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThreadNetworkDiagnosticsRxDataPollCountCommandParams
        );
        result.put("readRxDataPollCountAttribute", readThreadNetworkDiagnosticsRxDataPollCountAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsRxBeaconCountCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThreadNetworkDiagnosticsRxBeaconCountAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ThreadNetworkDiagnostics.ID, ClusterIDMapping.ThreadNetworkDiagnostics.Attribute.RxBeaconCount.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster).readRxBeaconCountAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThreadNetworkDiagnosticsRxBeaconCountCommandParams
        );
        result.put("readRxBeaconCountAttribute", readThreadNetworkDiagnosticsRxBeaconCountAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsRxBeaconRequestCountCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThreadNetworkDiagnosticsRxBeaconRequestCountAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ThreadNetworkDiagnostics.ID, ClusterIDMapping.ThreadNetworkDiagnostics.Attribute.RxBeaconRequestCount.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster).readRxBeaconRequestCountAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThreadNetworkDiagnosticsRxBeaconRequestCountCommandParams
        );
        result.put("readRxBeaconRequestCountAttribute", readThreadNetworkDiagnosticsRxBeaconRequestCountAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsRxOtherCountCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThreadNetworkDiagnosticsRxOtherCountAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ThreadNetworkDiagnostics.ID, ClusterIDMapping.ThreadNetworkDiagnostics.Attribute.RxOtherCount.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster).readRxOtherCountAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThreadNetworkDiagnosticsRxOtherCountCommandParams
        );
        result.put("readRxOtherCountAttribute", readThreadNetworkDiagnosticsRxOtherCountAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsRxAddressFilteredCountCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThreadNetworkDiagnosticsRxAddressFilteredCountAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ThreadNetworkDiagnostics.ID, ClusterIDMapping.ThreadNetworkDiagnostics.Attribute.RxAddressFilteredCount.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster).readRxAddressFilteredCountAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThreadNetworkDiagnosticsRxAddressFilteredCountCommandParams
        );
        result.put("readRxAddressFilteredCountAttribute", readThreadNetworkDiagnosticsRxAddressFilteredCountAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsRxDestAddrFilteredCountCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThreadNetworkDiagnosticsRxDestAddrFilteredCountAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ThreadNetworkDiagnostics.ID, ClusterIDMapping.ThreadNetworkDiagnostics.Attribute.RxDestAddrFilteredCount.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster).readRxDestAddrFilteredCountAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThreadNetworkDiagnosticsRxDestAddrFilteredCountCommandParams
        );
        result.put("readRxDestAddrFilteredCountAttribute", readThreadNetworkDiagnosticsRxDestAddrFilteredCountAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsRxDuplicatedCountCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThreadNetworkDiagnosticsRxDuplicatedCountAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ThreadNetworkDiagnostics.ID, ClusterIDMapping.ThreadNetworkDiagnostics.Attribute.RxDuplicatedCount.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster).readRxDuplicatedCountAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThreadNetworkDiagnosticsRxDuplicatedCountCommandParams
        );
        result.put("readRxDuplicatedCountAttribute", readThreadNetworkDiagnosticsRxDuplicatedCountAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsRxErrNoFrameCountCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThreadNetworkDiagnosticsRxErrNoFrameCountAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ThreadNetworkDiagnostics.ID, ClusterIDMapping.ThreadNetworkDiagnostics.Attribute.RxErrNoFrameCount.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster).readRxErrNoFrameCountAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThreadNetworkDiagnosticsRxErrNoFrameCountCommandParams
        );
        result.put("readRxErrNoFrameCountAttribute", readThreadNetworkDiagnosticsRxErrNoFrameCountAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsRxErrUnknownNeighborCountCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThreadNetworkDiagnosticsRxErrUnknownNeighborCountAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ThreadNetworkDiagnostics.ID, ClusterIDMapping.ThreadNetworkDiagnostics.Attribute.RxErrUnknownNeighborCount.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster).readRxErrUnknownNeighborCountAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThreadNetworkDiagnosticsRxErrUnknownNeighborCountCommandParams
        );
        result.put("readRxErrUnknownNeighborCountAttribute", readThreadNetworkDiagnosticsRxErrUnknownNeighborCountAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsRxErrInvalidSrcAddrCountCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThreadNetworkDiagnosticsRxErrInvalidSrcAddrCountAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ThreadNetworkDiagnostics.ID, ClusterIDMapping.ThreadNetworkDiagnostics.Attribute.RxErrInvalidSrcAddrCount.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster).readRxErrInvalidSrcAddrCountAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThreadNetworkDiagnosticsRxErrInvalidSrcAddrCountCommandParams
        );
        result.put("readRxErrInvalidSrcAddrCountAttribute", readThreadNetworkDiagnosticsRxErrInvalidSrcAddrCountAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsRxErrSecCountCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThreadNetworkDiagnosticsRxErrSecCountAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ThreadNetworkDiagnostics.ID, ClusterIDMapping.ThreadNetworkDiagnostics.Attribute.RxErrSecCount.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster).readRxErrSecCountAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThreadNetworkDiagnosticsRxErrSecCountCommandParams
        );
        result.put("readRxErrSecCountAttribute", readThreadNetworkDiagnosticsRxErrSecCountAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsRxErrFcsCountCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThreadNetworkDiagnosticsRxErrFcsCountAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ThreadNetworkDiagnostics.ID, ClusterIDMapping.ThreadNetworkDiagnostics.Attribute.RxErrFcsCount.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster).readRxErrFcsCountAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThreadNetworkDiagnosticsRxErrFcsCountCommandParams
        );
        result.put("readRxErrFcsCountAttribute", readThreadNetworkDiagnosticsRxErrFcsCountAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsRxErrOtherCountCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThreadNetworkDiagnosticsRxErrOtherCountAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ThreadNetworkDiagnostics.ID, ClusterIDMapping.ThreadNetworkDiagnostics.Attribute.RxErrOtherCount.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster).readRxErrOtherCountAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThreadNetworkDiagnosticsRxErrOtherCountCommandParams
        );
        result.put("readRxErrOtherCountAttribute", readThreadNetworkDiagnosticsRxErrOtherCountAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsActiveTimestampCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThreadNetworkDiagnosticsActiveTimestampAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ThreadNetworkDiagnostics.ID, ClusterIDMapping.ThreadNetworkDiagnostics.Attribute.ActiveTimestamp.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster).readActiveTimestampAttribute(
//              (ChipClusters.ThreadNetworkDiagnosticsCluster.ActiveTimestampAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedThreadNetworkDiagnosticsClusterActiveTimestampAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThreadNetworkDiagnosticsActiveTimestampCommandParams
        );
        result.put("readActiveTimestampAttribute", readThreadNetworkDiagnosticsActiveTimestampAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsPendingTimestampCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThreadNetworkDiagnosticsPendingTimestampAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ThreadNetworkDiagnostics.ID, ClusterIDMapping.ThreadNetworkDiagnostics.Attribute.PendingTimestamp.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster).readPendingTimestampAttribute(
//              (ChipClusters.ThreadNetworkDiagnosticsCluster.PendingTimestampAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedThreadNetworkDiagnosticsClusterPendingTimestampAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThreadNetworkDiagnosticsPendingTimestampCommandParams
        );
        result.put("readPendingTimestampAttribute", readThreadNetworkDiagnosticsPendingTimestampAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsDelayCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThreadNetworkDiagnosticsDelayAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ThreadNetworkDiagnostics.ID, ClusterIDMapping.ThreadNetworkDiagnostics.Attribute.Delay.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster).readDelayAttribute(
//              (ChipClusters.ThreadNetworkDiagnosticsCluster.DelayAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedThreadNetworkDiagnosticsClusterDelayAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThreadNetworkDiagnosticsDelayCommandParams
        );
        result.put("readDelayAttribute", readThreadNetworkDiagnosticsDelayAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsChannelPage0MaskCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThreadNetworkDiagnosticsChannelPage0MaskAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ThreadNetworkDiagnostics.ID, ClusterIDMapping.ThreadNetworkDiagnostics.Attribute.ChannelPage0Mask.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster).readChannelPage0MaskAttribute(
//              (ChipClusters.ThreadNetworkDiagnosticsCluster.ChannelPage0MaskAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedThreadNetworkDiagnosticsClusterChannelPage0MaskAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThreadNetworkDiagnosticsChannelPage0MaskCommandParams
        );
        result.put("readChannelPage0MaskAttribute", readThreadNetworkDiagnosticsChannelPage0MaskAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsActiveNetworkFaultsListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThreadNetworkDiagnosticsActiveNetworkFaultsListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ThreadNetworkDiagnostics.ID, ClusterIDMapping.ThreadNetworkDiagnostics.Attribute.ActiveNetworkFaultsList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster).readActiveNetworkFaultsListAttribute(
//              (ChipClusters.ThreadNetworkDiagnosticsCluster.ActiveNetworkFaultsListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedThreadNetworkDiagnosticsClusterActiveNetworkFaultsListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThreadNetworkDiagnosticsActiveNetworkFaultsListCommandParams
        );
        result.put("readActiveNetworkFaultsListAttribute", readThreadNetworkDiagnosticsActiveNetworkFaultsListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThreadNetworkDiagnosticsGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ThreadNetworkDiagnostics.ID, ClusterIDMapping.ThreadNetworkDiagnostics.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.ThreadNetworkDiagnosticsCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedThreadNetworkDiagnosticsClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThreadNetworkDiagnosticsGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readThreadNetworkDiagnosticsGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThreadNetworkDiagnosticsAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ThreadNetworkDiagnostics.ID, ClusterIDMapping.ThreadNetworkDiagnostics.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.ThreadNetworkDiagnosticsCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedThreadNetworkDiagnosticsClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThreadNetworkDiagnosticsAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readThreadNetworkDiagnosticsAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThreadNetworkDiagnosticsEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ThreadNetworkDiagnostics.ID, ClusterIDMapping.ThreadNetworkDiagnostics.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster).readEventListAttribute(
//              (ChipClusters.ThreadNetworkDiagnosticsCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedThreadNetworkDiagnosticsClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThreadNetworkDiagnosticsEventListCommandParams
        );
        result.put("readEventListAttribute", readThreadNetworkDiagnosticsEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThreadNetworkDiagnosticsAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ThreadNetworkDiagnostics.ID, ClusterIDMapping.ThreadNetworkDiagnostics.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.ThreadNetworkDiagnosticsCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedThreadNetworkDiagnosticsClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThreadNetworkDiagnosticsAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readThreadNetworkDiagnosticsAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThreadNetworkDiagnosticsFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ThreadNetworkDiagnostics.ID, ClusterIDMapping.ThreadNetworkDiagnostics.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThreadNetworkDiagnosticsFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readThreadNetworkDiagnosticsFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThreadNetworkDiagnosticsClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ThreadNetworkDiagnostics.ID, ClusterIDMapping.ThreadNetworkDiagnostics.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThreadNetworkDiagnosticsClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readThreadNetworkDiagnosticsClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readWiFiNetworkDiagnosticsInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readWiFiNetworkDiagnosticsBssidCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readWiFiNetworkDiagnosticsBssidAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.WiFiNetworkDiagnostics.ID, ClusterIDMapping.WiFiNetworkDiagnostics.Attribute.Bssid.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.WiFiNetworkDiagnosticsCluster) cluster).readBssidAttribute(
//              (ChipClusters.WiFiNetworkDiagnosticsCluster.BssidAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedWiFiNetworkDiagnosticsClusterBssidAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readWiFiNetworkDiagnosticsBssidCommandParams
        );
        result.put("readBssidAttribute", readWiFiNetworkDiagnosticsBssidAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readWiFiNetworkDiagnosticsSecurityTypeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readWiFiNetworkDiagnosticsSecurityTypeAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.WiFiNetworkDiagnostics.ID, ClusterIDMapping.WiFiNetworkDiagnostics.Attribute.SecurityType.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.WiFiNetworkDiagnosticsCluster) cluster).readSecurityTypeAttribute(
//              (ChipClusters.WiFiNetworkDiagnosticsCluster.SecurityTypeAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedWiFiNetworkDiagnosticsClusterSecurityTypeAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readWiFiNetworkDiagnosticsSecurityTypeCommandParams
        );
        result.put("readSecurityTypeAttribute", readWiFiNetworkDiagnosticsSecurityTypeAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readWiFiNetworkDiagnosticsWiFiVersionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readWiFiNetworkDiagnosticsWiFiVersionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.WiFiNetworkDiagnostics.ID, ClusterIDMapping.WiFiNetworkDiagnostics.Attribute.WiFiVersion.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.WiFiNetworkDiagnosticsCluster) cluster).readWiFiVersionAttribute(
//              (ChipClusters.WiFiNetworkDiagnosticsCluster.WiFiVersionAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedWiFiNetworkDiagnosticsClusterWiFiVersionAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readWiFiNetworkDiagnosticsWiFiVersionCommandParams
        );
        result.put("readWiFiVersionAttribute", readWiFiNetworkDiagnosticsWiFiVersionAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readWiFiNetworkDiagnosticsChannelNumberCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readWiFiNetworkDiagnosticsChannelNumberAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.WiFiNetworkDiagnostics.ID, ClusterIDMapping.WiFiNetworkDiagnostics.Attribute.ChannelNumber.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.WiFiNetworkDiagnosticsCluster) cluster).readChannelNumberAttribute(
//              (ChipClusters.WiFiNetworkDiagnosticsCluster.ChannelNumberAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedWiFiNetworkDiagnosticsClusterChannelNumberAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readWiFiNetworkDiagnosticsChannelNumberCommandParams
        );
        result.put("readChannelNumberAttribute", readWiFiNetworkDiagnosticsChannelNumberAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readWiFiNetworkDiagnosticsRssiCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readWiFiNetworkDiagnosticsRssiAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.WiFiNetworkDiagnostics.ID, ClusterIDMapping.WiFiNetworkDiagnostics.Attribute.Rssi.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.WiFiNetworkDiagnosticsCluster) cluster).readRssiAttribute(
//              (ChipClusters.WiFiNetworkDiagnosticsCluster.RssiAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedWiFiNetworkDiagnosticsClusterRssiAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readWiFiNetworkDiagnosticsRssiCommandParams
        );
        result.put("readRssiAttribute", readWiFiNetworkDiagnosticsRssiAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readWiFiNetworkDiagnosticsBeaconLostCountCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readWiFiNetworkDiagnosticsBeaconLostCountAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.WiFiNetworkDiagnostics.ID, ClusterIDMapping.WiFiNetworkDiagnostics.Attribute.BeaconLostCount.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.WiFiNetworkDiagnosticsCluster) cluster).readBeaconLostCountAttribute(
//              (ChipClusters.WiFiNetworkDiagnosticsCluster.BeaconLostCountAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedWiFiNetworkDiagnosticsClusterBeaconLostCountAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readWiFiNetworkDiagnosticsBeaconLostCountCommandParams
        );
        result.put("readBeaconLostCountAttribute", readWiFiNetworkDiagnosticsBeaconLostCountAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readWiFiNetworkDiagnosticsBeaconRxCountCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readWiFiNetworkDiagnosticsBeaconRxCountAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.WiFiNetworkDiagnostics.ID, ClusterIDMapping.WiFiNetworkDiagnostics.Attribute.BeaconRxCount.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.WiFiNetworkDiagnosticsCluster) cluster).readBeaconRxCountAttribute(
//              (ChipClusters.WiFiNetworkDiagnosticsCluster.BeaconRxCountAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedWiFiNetworkDiagnosticsClusterBeaconRxCountAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readWiFiNetworkDiagnosticsBeaconRxCountCommandParams
        );
        result.put("readBeaconRxCountAttribute", readWiFiNetworkDiagnosticsBeaconRxCountAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readWiFiNetworkDiagnosticsPacketMulticastRxCountCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readWiFiNetworkDiagnosticsPacketMulticastRxCountAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.WiFiNetworkDiagnostics.ID, ClusterIDMapping.WiFiNetworkDiagnostics.Attribute.PacketMulticastRxCount.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.WiFiNetworkDiagnosticsCluster) cluster).readPacketMulticastRxCountAttribute(
//              (ChipClusters.WiFiNetworkDiagnosticsCluster.PacketMulticastRxCountAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedWiFiNetworkDiagnosticsClusterPacketMulticastRxCountAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readWiFiNetworkDiagnosticsPacketMulticastRxCountCommandParams
        );
        result.put("readPacketMulticastRxCountAttribute", readWiFiNetworkDiagnosticsPacketMulticastRxCountAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readWiFiNetworkDiagnosticsPacketMulticastTxCountCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readWiFiNetworkDiagnosticsPacketMulticastTxCountAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.WiFiNetworkDiagnostics.ID, ClusterIDMapping.WiFiNetworkDiagnostics.Attribute.PacketMulticastTxCount.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.WiFiNetworkDiagnosticsCluster) cluster).readPacketMulticastTxCountAttribute(
//              (ChipClusters.WiFiNetworkDiagnosticsCluster.PacketMulticastTxCountAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedWiFiNetworkDiagnosticsClusterPacketMulticastTxCountAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readWiFiNetworkDiagnosticsPacketMulticastTxCountCommandParams
        );
        result.put("readPacketMulticastTxCountAttribute", readWiFiNetworkDiagnosticsPacketMulticastTxCountAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readWiFiNetworkDiagnosticsPacketUnicastRxCountCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readWiFiNetworkDiagnosticsPacketUnicastRxCountAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.WiFiNetworkDiagnostics.ID, ClusterIDMapping.WiFiNetworkDiagnostics.Attribute.PacketUnicastRxCount.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.WiFiNetworkDiagnosticsCluster) cluster).readPacketUnicastRxCountAttribute(
//              (ChipClusters.WiFiNetworkDiagnosticsCluster.PacketUnicastRxCountAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedWiFiNetworkDiagnosticsClusterPacketUnicastRxCountAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readWiFiNetworkDiagnosticsPacketUnicastRxCountCommandParams
        );
        result.put("readPacketUnicastRxCountAttribute", readWiFiNetworkDiagnosticsPacketUnicastRxCountAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readWiFiNetworkDiagnosticsPacketUnicastTxCountCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readWiFiNetworkDiagnosticsPacketUnicastTxCountAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.WiFiNetworkDiagnostics.ID, ClusterIDMapping.WiFiNetworkDiagnostics.Attribute.PacketUnicastTxCount.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.WiFiNetworkDiagnosticsCluster) cluster).readPacketUnicastTxCountAttribute(
//              (ChipClusters.WiFiNetworkDiagnosticsCluster.PacketUnicastTxCountAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedWiFiNetworkDiagnosticsClusterPacketUnicastTxCountAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readWiFiNetworkDiagnosticsPacketUnicastTxCountCommandParams
        );
        result.put("readPacketUnicastTxCountAttribute", readWiFiNetworkDiagnosticsPacketUnicastTxCountAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readWiFiNetworkDiagnosticsCurrentMaxRateCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readWiFiNetworkDiagnosticsCurrentMaxRateAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.WiFiNetworkDiagnostics.ID, ClusterIDMapping.WiFiNetworkDiagnostics.Attribute.CurrentMaxRate.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.WiFiNetworkDiagnosticsCluster) cluster).readCurrentMaxRateAttribute(
//              (ChipClusters.WiFiNetworkDiagnosticsCluster.CurrentMaxRateAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedWiFiNetworkDiagnosticsClusterCurrentMaxRateAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readWiFiNetworkDiagnosticsCurrentMaxRateCommandParams
        );
        result.put("readCurrentMaxRateAttribute", readWiFiNetworkDiagnosticsCurrentMaxRateAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readWiFiNetworkDiagnosticsOverrunCountCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readWiFiNetworkDiagnosticsOverrunCountAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.WiFiNetworkDiagnostics.ID, ClusterIDMapping.WiFiNetworkDiagnostics.Attribute.OverrunCount.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.WiFiNetworkDiagnosticsCluster) cluster).readOverrunCountAttribute(
//              (ChipClusters.WiFiNetworkDiagnosticsCluster.OverrunCountAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedWiFiNetworkDiagnosticsClusterOverrunCountAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readWiFiNetworkDiagnosticsOverrunCountCommandParams
        );
        result.put("readOverrunCountAttribute", readWiFiNetworkDiagnosticsOverrunCountAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readWiFiNetworkDiagnosticsGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readWiFiNetworkDiagnosticsGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.WiFiNetworkDiagnostics.ID, ClusterIDMapping.WiFiNetworkDiagnostics.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.WiFiNetworkDiagnosticsCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.WiFiNetworkDiagnosticsCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedWiFiNetworkDiagnosticsClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readWiFiNetworkDiagnosticsGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readWiFiNetworkDiagnosticsGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readWiFiNetworkDiagnosticsAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readWiFiNetworkDiagnosticsAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.WiFiNetworkDiagnostics.ID, ClusterIDMapping.WiFiNetworkDiagnostics.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.WiFiNetworkDiagnosticsCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.WiFiNetworkDiagnosticsCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedWiFiNetworkDiagnosticsClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readWiFiNetworkDiagnosticsAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readWiFiNetworkDiagnosticsAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readWiFiNetworkDiagnosticsEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readWiFiNetworkDiagnosticsEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.WiFiNetworkDiagnostics.ID, ClusterIDMapping.WiFiNetworkDiagnostics.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.WiFiNetworkDiagnosticsCluster) cluster).readEventListAttribute(
//              (ChipClusters.WiFiNetworkDiagnosticsCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedWiFiNetworkDiagnosticsClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readWiFiNetworkDiagnosticsEventListCommandParams
        );
        result.put("readEventListAttribute", readWiFiNetworkDiagnosticsEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readWiFiNetworkDiagnosticsAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readWiFiNetworkDiagnosticsAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.WiFiNetworkDiagnostics.ID, ClusterIDMapping.WiFiNetworkDiagnostics.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.WiFiNetworkDiagnosticsCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.WiFiNetworkDiagnosticsCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedWiFiNetworkDiagnosticsClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readWiFiNetworkDiagnosticsAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readWiFiNetworkDiagnosticsAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readWiFiNetworkDiagnosticsFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readWiFiNetworkDiagnosticsFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.WiFiNetworkDiagnostics.ID, ClusterIDMapping.WiFiNetworkDiagnostics.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.WiFiNetworkDiagnosticsCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readWiFiNetworkDiagnosticsFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readWiFiNetworkDiagnosticsFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readWiFiNetworkDiagnosticsClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readWiFiNetworkDiagnosticsClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.WiFiNetworkDiagnostics.ID, ClusterIDMapping.WiFiNetworkDiagnostics.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.WiFiNetworkDiagnosticsCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readWiFiNetworkDiagnosticsClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readWiFiNetworkDiagnosticsClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readEthernetNetworkDiagnosticsInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readEthernetNetworkDiagnosticsPHYRateCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readEthernetNetworkDiagnosticsPHYRateAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.EthernetNetworkDiagnostics.ID, ClusterIDMapping.EthernetNetworkDiagnostics.Attribute.PHYRate.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.EthernetNetworkDiagnosticsCluster) cluster).readPHYRateAttribute(
//              (ChipClusters.EthernetNetworkDiagnosticsCluster.PHYRateAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedEthernetNetworkDiagnosticsClusterPHYRateAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readEthernetNetworkDiagnosticsPHYRateCommandParams
        );
        result.put("readPHYRateAttribute", readEthernetNetworkDiagnosticsPHYRateAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readEthernetNetworkDiagnosticsFullDuplexCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readEthernetNetworkDiagnosticsFullDuplexAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.EthernetNetworkDiagnostics.ID, ClusterIDMapping.EthernetNetworkDiagnostics.Attribute.FullDuplex.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.EthernetNetworkDiagnosticsCluster) cluster).readFullDuplexAttribute(
//              (ChipClusters.EthernetNetworkDiagnosticsCluster.FullDuplexAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedEthernetNetworkDiagnosticsClusterFullDuplexAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readEthernetNetworkDiagnosticsFullDuplexCommandParams
        );
        result.put("readFullDuplexAttribute", readEthernetNetworkDiagnosticsFullDuplexAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readEthernetNetworkDiagnosticsPacketRxCountCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readEthernetNetworkDiagnosticsPacketRxCountAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.EthernetNetworkDiagnostics.ID, ClusterIDMapping.EthernetNetworkDiagnostics.Attribute.PacketRxCount.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.EthernetNetworkDiagnosticsCluster) cluster).readPacketRxCountAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readEthernetNetworkDiagnosticsPacketRxCountCommandParams
        );
        result.put("readPacketRxCountAttribute", readEthernetNetworkDiagnosticsPacketRxCountAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readEthernetNetworkDiagnosticsPacketTxCountCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readEthernetNetworkDiagnosticsPacketTxCountAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.EthernetNetworkDiagnostics.ID, ClusterIDMapping.EthernetNetworkDiagnostics.Attribute.PacketTxCount.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.EthernetNetworkDiagnosticsCluster) cluster).readPacketTxCountAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readEthernetNetworkDiagnosticsPacketTxCountCommandParams
        );
        result.put("readPacketTxCountAttribute", readEthernetNetworkDiagnosticsPacketTxCountAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readEthernetNetworkDiagnosticsTxErrCountCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readEthernetNetworkDiagnosticsTxErrCountAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.EthernetNetworkDiagnostics.ID, ClusterIDMapping.EthernetNetworkDiagnostics.Attribute.TxErrCount.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.EthernetNetworkDiagnosticsCluster) cluster).readTxErrCountAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readEthernetNetworkDiagnosticsTxErrCountCommandParams
        );
        result.put("readTxErrCountAttribute", readEthernetNetworkDiagnosticsTxErrCountAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readEthernetNetworkDiagnosticsCollisionCountCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readEthernetNetworkDiagnosticsCollisionCountAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.EthernetNetworkDiagnostics.ID, ClusterIDMapping.EthernetNetworkDiagnostics.Attribute.CollisionCount.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.EthernetNetworkDiagnosticsCluster) cluster).readCollisionCountAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readEthernetNetworkDiagnosticsCollisionCountCommandParams
        );
        result.put("readCollisionCountAttribute", readEthernetNetworkDiagnosticsCollisionCountAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readEthernetNetworkDiagnosticsOverrunCountCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readEthernetNetworkDiagnosticsOverrunCountAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.EthernetNetworkDiagnostics.ID, ClusterIDMapping.EthernetNetworkDiagnostics.Attribute.OverrunCount.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.EthernetNetworkDiagnosticsCluster) cluster).readOverrunCountAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readEthernetNetworkDiagnosticsOverrunCountCommandParams
        );
        result.put("readOverrunCountAttribute", readEthernetNetworkDiagnosticsOverrunCountAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readEthernetNetworkDiagnosticsCarrierDetectCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readEthernetNetworkDiagnosticsCarrierDetectAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.EthernetNetworkDiagnostics.ID, ClusterIDMapping.EthernetNetworkDiagnostics.Attribute.CarrierDetect.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.EthernetNetworkDiagnosticsCluster) cluster).readCarrierDetectAttribute(
//              (ChipClusters.EthernetNetworkDiagnosticsCluster.CarrierDetectAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedEthernetNetworkDiagnosticsClusterCarrierDetectAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readEthernetNetworkDiagnosticsCarrierDetectCommandParams
        );
        result.put("readCarrierDetectAttribute", readEthernetNetworkDiagnosticsCarrierDetectAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readEthernetNetworkDiagnosticsTimeSinceResetCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readEthernetNetworkDiagnosticsTimeSinceResetAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.EthernetNetworkDiagnostics.ID, ClusterIDMapping.EthernetNetworkDiagnostics.Attribute.TimeSinceReset.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.EthernetNetworkDiagnosticsCluster) cluster).readTimeSinceResetAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readEthernetNetworkDiagnosticsTimeSinceResetCommandParams
        );
        result.put("readTimeSinceResetAttribute", readEthernetNetworkDiagnosticsTimeSinceResetAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readEthernetNetworkDiagnosticsGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readEthernetNetworkDiagnosticsGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.EthernetNetworkDiagnostics.ID, ClusterIDMapping.EthernetNetworkDiagnostics.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.EthernetNetworkDiagnosticsCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.EthernetNetworkDiagnosticsCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedEthernetNetworkDiagnosticsClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readEthernetNetworkDiagnosticsGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readEthernetNetworkDiagnosticsGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readEthernetNetworkDiagnosticsAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readEthernetNetworkDiagnosticsAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.EthernetNetworkDiagnostics.ID, ClusterIDMapping.EthernetNetworkDiagnostics.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.EthernetNetworkDiagnosticsCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.EthernetNetworkDiagnosticsCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedEthernetNetworkDiagnosticsClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readEthernetNetworkDiagnosticsAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readEthernetNetworkDiagnosticsAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readEthernetNetworkDiagnosticsEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readEthernetNetworkDiagnosticsEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.EthernetNetworkDiagnostics.ID, ClusterIDMapping.EthernetNetworkDiagnostics.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.EthernetNetworkDiagnosticsCluster) cluster).readEventListAttribute(
//              (ChipClusters.EthernetNetworkDiagnosticsCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedEthernetNetworkDiagnosticsClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readEthernetNetworkDiagnosticsEventListCommandParams
        );
        result.put("readEventListAttribute", readEthernetNetworkDiagnosticsEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readEthernetNetworkDiagnosticsAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readEthernetNetworkDiagnosticsAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.EthernetNetworkDiagnostics.ID, ClusterIDMapping.EthernetNetworkDiagnostics.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.EthernetNetworkDiagnosticsCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.EthernetNetworkDiagnosticsCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedEthernetNetworkDiagnosticsClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readEthernetNetworkDiagnosticsAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readEthernetNetworkDiagnosticsAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readEthernetNetworkDiagnosticsFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readEthernetNetworkDiagnosticsFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.EthernetNetworkDiagnostics.ID, ClusterIDMapping.EthernetNetworkDiagnostics.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.EthernetNetworkDiagnosticsCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readEthernetNetworkDiagnosticsFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readEthernetNetworkDiagnosticsFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readEthernetNetworkDiagnosticsClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readEthernetNetworkDiagnosticsClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.EthernetNetworkDiagnostics.ID, ClusterIDMapping.EthernetNetworkDiagnostics.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.EthernetNetworkDiagnosticsCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readEthernetNetworkDiagnosticsClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readEthernetNetworkDiagnosticsClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readTimeSynchronizationInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readTimeSynchronizationUTCTimeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTimeSynchronizationUTCTimeAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TimeSynchronization.ID, ClusterIDMapping.TimeSynchronization.Attribute.UTCTime.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TimeSynchronizationCluster) cluster).readUTCTimeAttribute(
//              (ChipClusters.TimeSynchronizationCluster.UTCTimeAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedTimeSynchronizationClusterUTCTimeAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTimeSynchronizationUTCTimeCommandParams
        );
        result.put("readUTCTimeAttribute", readTimeSynchronizationUTCTimeAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTimeSynchronizationGranularityCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTimeSynchronizationGranularityAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TimeSynchronization.ID, ClusterIDMapping.TimeSynchronization.Attribute.Granularity.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TimeSynchronizationCluster) cluster).readGranularityAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTimeSynchronizationGranularityCommandParams
        );
        result.put("readGranularityAttribute", readTimeSynchronizationGranularityAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTimeSynchronizationTimeSourceCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTimeSynchronizationTimeSourceAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TimeSynchronization.ID, ClusterIDMapping.TimeSynchronization.Attribute.TimeSource.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TimeSynchronizationCluster) cluster).readTimeSourceAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTimeSynchronizationTimeSourceCommandParams
        );
        result.put("readTimeSourceAttribute", readTimeSynchronizationTimeSourceAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTimeSynchronizationDefaultNTPCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTimeSynchronizationDefaultNTPAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TimeSynchronization.ID, ClusterIDMapping.TimeSynchronization.Attribute.DefaultNTP.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TimeSynchronizationCluster) cluster).readDefaultNTPAttribute(
//              (ChipClusters.TimeSynchronizationCluster.DefaultNTPAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedTimeSynchronizationClusterDefaultNTPAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTimeSynchronizationDefaultNTPCommandParams
        );
        result.put("readDefaultNTPAttribute", readTimeSynchronizationDefaultNTPAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTimeSynchronizationTimeZoneCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTimeSynchronizationTimeZoneAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TimeSynchronization.ID, ClusterIDMapping.TimeSynchronization.Attribute.TimeZone.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TimeSynchronizationCluster) cluster).readTimeZoneAttribute(
//              (ChipClusters.TimeSynchronizationCluster.TimeZoneAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedTimeSynchronizationClusterTimeZoneAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTimeSynchronizationTimeZoneCommandParams
        );
        result.put("readTimeZoneAttribute", readTimeSynchronizationTimeZoneAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTimeSynchronizationDSTOffsetCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTimeSynchronizationDSTOffsetAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TimeSynchronization.ID, ClusterIDMapping.TimeSynchronization.Attribute.DSTOffset.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TimeSynchronizationCluster) cluster).readDSTOffsetAttribute(
//              (ChipClusters.TimeSynchronizationCluster.DSTOffsetAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedTimeSynchronizationClusterDSTOffsetAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTimeSynchronizationDSTOffsetCommandParams
        );
        result.put("readDSTOffsetAttribute", readTimeSynchronizationDSTOffsetAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTimeSynchronizationLocalTimeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTimeSynchronizationLocalTimeAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TimeSynchronization.ID, ClusterIDMapping.TimeSynchronization.Attribute.LocalTime.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TimeSynchronizationCluster) cluster).readLocalTimeAttribute(
//              (ChipClusters.TimeSynchronizationCluster.LocalTimeAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedTimeSynchronizationClusterLocalTimeAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTimeSynchronizationLocalTimeCommandParams
        );
        result.put("readLocalTimeAttribute", readTimeSynchronizationLocalTimeAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTimeSynchronizationTimeZoneDatabaseCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTimeSynchronizationTimeZoneDatabaseAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TimeSynchronization.ID, ClusterIDMapping.TimeSynchronization.Attribute.TimeZoneDatabase.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TimeSynchronizationCluster) cluster).readTimeZoneDatabaseAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTimeSynchronizationTimeZoneDatabaseCommandParams
        );
        result.put("readTimeZoneDatabaseAttribute", readTimeSynchronizationTimeZoneDatabaseAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTimeSynchronizationNTPServerAvailableCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTimeSynchronizationNTPServerAvailableAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TimeSynchronization.ID, ClusterIDMapping.TimeSynchronization.Attribute.NTPServerAvailable.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TimeSynchronizationCluster) cluster).readNTPServerAvailableAttribute(
//              (ChipClusters.BooleanAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBooleanAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTimeSynchronizationNTPServerAvailableCommandParams
        );
        result.put("readNTPServerAvailableAttribute", readTimeSynchronizationNTPServerAvailableAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTimeSynchronizationTimeZoneListMaxSizeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTimeSynchronizationTimeZoneListMaxSizeAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TimeSynchronization.ID, ClusterIDMapping.TimeSynchronization.Attribute.TimeZoneListMaxSize.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TimeSynchronizationCluster) cluster).readTimeZoneListMaxSizeAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTimeSynchronizationTimeZoneListMaxSizeCommandParams
        );
        result.put("readTimeZoneListMaxSizeAttribute", readTimeSynchronizationTimeZoneListMaxSizeAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTimeSynchronizationDSTOffsetListMaxSizeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTimeSynchronizationDSTOffsetListMaxSizeAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TimeSynchronization.ID, ClusterIDMapping.TimeSynchronization.Attribute.DSTOffsetListMaxSize.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TimeSynchronizationCluster) cluster).readDSTOffsetListMaxSizeAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTimeSynchronizationDSTOffsetListMaxSizeCommandParams
        );
        result.put("readDSTOffsetListMaxSizeAttribute", readTimeSynchronizationDSTOffsetListMaxSizeAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTimeSynchronizationSupportsDNSResolveCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTimeSynchronizationSupportsDNSResolveAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TimeSynchronization.ID, ClusterIDMapping.TimeSynchronization.Attribute.SupportsDNSResolve.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TimeSynchronizationCluster) cluster).readSupportsDNSResolveAttribute(
//              (ChipClusters.BooleanAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBooleanAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTimeSynchronizationSupportsDNSResolveCommandParams
        );
        result.put("readSupportsDNSResolveAttribute", readTimeSynchronizationSupportsDNSResolveAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTimeSynchronizationGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTimeSynchronizationGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TimeSynchronization.ID, ClusterIDMapping.TimeSynchronization.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TimeSynchronizationCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.TimeSynchronizationCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedTimeSynchronizationClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTimeSynchronizationGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readTimeSynchronizationGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTimeSynchronizationAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTimeSynchronizationAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TimeSynchronization.ID, ClusterIDMapping.TimeSynchronization.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TimeSynchronizationCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.TimeSynchronizationCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedTimeSynchronizationClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTimeSynchronizationAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readTimeSynchronizationAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTimeSynchronizationEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTimeSynchronizationEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TimeSynchronization.ID, ClusterIDMapping.TimeSynchronization.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TimeSynchronizationCluster) cluster).readEventListAttribute(
//              (ChipClusters.TimeSynchronizationCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedTimeSynchronizationClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTimeSynchronizationEventListCommandParams
        );
        result.put("readEventListAttribute", readTimeSynchronizationEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTimeSynchronizationAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTimeSynchronizationAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TimeSynchronization.ID, ClusterIDMapping.TimeSynchronization.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TimeSynchronizationCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.TimeSynchronizationCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedTimeSynchronizationClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTimeSynchronizationAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readTimeSynchronizationAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTimeSynchronizationFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTimeSynchronizationFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TimeSynchronization.ID, ClusterIDMapping.TimeSynchronization.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TimeSynchronizationCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTimeSynchronizationFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readTimeSynchronizationFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTimeSynchronizationClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTimeSynchronizationClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TimeSynchronization.ID, ClusterIDMapping.TimeSynchronization.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TimeSynchronizationCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTimeSynchronizationClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readTimeSynchronizationClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readBridgedDeviceBasicInformationInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readBridgedDeviceBasicInformationVendorNameCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBridgedDeviceBasicInformationVendorNameAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BridgedDeviceBasicInformation.ID, ClusterIDMapping.BridgedDeviceBasicInformation.Attribute.VendorName.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BridgedDeviceBasicInformationCluster) cluster).readVendorNameAttribute(
//              (ChipClusters.CharStringAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedCharStringAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBridgedDeviceBasicInformationVendorNameCommandParams
        );
        result.put("readVendorNameAttribute", readBridgedDeviceBasicInformationVendorNameAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBridgedDeviceBasicInformationVendorIDCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBridgedDeviceBasicInformationVendorIDAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BridgedDeviceBasicInformation.ID, ClusterIDMapping.BridgedDeviceBasicInformation.Attribute.VendorID.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BridgedDeviceBasicInformationCluster) cluster).readVendorIDAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBridgedDeviceBasicInformationVendorIDCommandParams
        );
        result.put("readVendorIDAttribute", readBridgedDeviceBasicInformationVendorIDAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBridgedDeviceBasicInformationProductNameCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBridgedDeviceBasicInformationProductNameAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BridgedDeviceBasicInformation.ID, ClusterIDMapping.BridgedDeviceBasicInformation.Attribute.ProductName.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BridgedDeviceBasicInformationCluster) cluster).readProductNameAttribute(
//              (ChipClusters.CharStringAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedCharStringAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBridgedDeviceBasicInformationProductNameCommandParams
        );
        result.put("readProductNameAttribute", readBridgedDeviceBasicInformationProductNameAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBridgedDeviceBasicInformationNodeLabelCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBridgedDeviceBasicInformationNodeLabelAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BridgedDeviceBasicInformation.ID, ClusterIDMapping.BridgedDeviceBasicInformation.Attribute.NodeLabel.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BridgedDeviceBasicInformationCluster) cluster).readNodeLabelAttribute(
//              (ChipClusters.CharStringAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedCharStringAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBridgedDeviceBasicInformationNodeLabelCommandParams
        );
        result.put("readNodeLabelAttribute", readBridgedDeviceBasicInformationNodeLabelAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBridgedDeviceBasicInformationHardwareVersionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBridgedDeviceBasicInformationHardwareVersionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BridgedDeviceBasicInformation.ID, ClusterIDMapping.BridgedDeviceBasicInformation.Attribute.HardwareVersion.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BridgedDeviceBasicInformationCluster) cluster).readHardwareVersionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBridgedDeviceBasicInformationHardwareVersionCommandParams
        );
        result.put("readHardwareVersionAttribute", readBridgedDeviceBasicInformationHardwareVersionAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBridgedDeviceBasicInformationHardwareVersionStringCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBridgedDeviceBasicInformationHardwareVersionStringAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BridgedDeviceBasicInformation.ID, ClusterIDMapping.BridgedDeviceBasicInformation.Attribute.HardwareVersionString.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BridgedDeviceBasicInformationCluster) cluster).readHardwareVersionStringAttribute(
//              (ChipClusters.CharStringAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedCharStringAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBridgedDeviceBasicInformationHardwareVersionStringCommandParams
        );
        result.put("readHardwareVersionStringAttribute", readBridgedDeviceBasicInformationHardwareVersionStringAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBridgedDeviceBasicInformationSoftwareVersionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBridgedDeviceBasicInformationSoftwareVersionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BridgedDeviceBasicInformation.ID, ClusterIDMapping.BridgedDeviceBasicInformation.Attribute.SoftwareVersion.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BridgedDeviceBasicInformationCluster) cluster).readSoftwareVersionAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBridgedDeviceBasicInformationSoftwareVersionCommandParams
        );
        result.put("readSoftwareVersionAttribute", readBridgedDeviceBasicInformationSoftwareVersionAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBridgedDeviceBasicInformationSoftwareVersionStringCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBridgedDeviceBasicInformationSoftwareVersionStringAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BridgedDeviceBasicInformation.ID, ClusterIDMapping.BridgedDeviceBasicInformation.Attribute.SoftwareVersionString.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BridgedDeviceBasicInformationCluster) cluster).readSoftwareVersionStringAttribute(
//              (ChipClusters.CharStringAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedCharStringAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBridgedDeviceBasicInformationSoftwareVersionStringCommandParams
        );
        result.put("readSoftwareVersionStringAttribute", readBridgedDeviceBasicInformationSoftwareVersionStringAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBridgedDeviceBasicInformationManufacturingDateCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBridgedDeviceBasicInformationManufacturingDateAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BridgedDeviceBasicInformation.ID, ClusterIDMapping.BridgedDeviceBasicInformation.Attribute.ManufacturingDate.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BridgedDeviceBasicInformationCluster) cluster).readManufacturingDateAttribute(
//              (ChipClusters.CharStringAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedCharStringAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBridgedDeviceBasicInformationManufacturingDateCommandParams
        );
        result.put("readManufacturingDateAttribute", readBridgedDeviceBasicInformationManufacturingDateAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBridgedDeviceBasicInformationPartNumberCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBridgedDeviceBasicInformationPartNumberAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BridgedDeviceBasicInformation.ID, ClusterIDMapping.BridgedDeviceBasicInformation.Attribute.PartNumber.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BridgedDeviceBasicInformationCluster) cluster).readPartNumberAttribute(
//              (ChipClusters.CharStringAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedCharStringAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBridgedDeviceBasicInformationPartNumberCommandParams
        );
        result.put("readPartNumberAttribute", readBridgedDeviceBasicInformationPartNumberAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBridgedDeviceBasicInformationProductURLCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBridgedDeviceBasicInformationProductURLAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BridgedDeviceBasicInformation.ID, ClusterIDMapping.BridgedDeviceBasicInformation.Attribute.ProductURL.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BridgedDeviceBasicInformationCluster) cluster).readProductURLAttribute(
//              (ChipClusters.CharStringAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedCharStringAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBridgedDeviceBasicInformationProductURLCommandParams
        );
        result.put("readProductURLAttribute", readBridgedDeviceBasicInformationProductURLAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBridgedDeviceBasicInformationProductLabelCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBridgedDeviceBasicInformationProductLabelAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BridgedDeviceBasicInformation.ID, ClusterIDMapping.BridgedDeviceBasicInformation.Attribute.ProductLabel.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BridgedDeviceBasicInformationCluster) cluster).readProductLabelAttribute(
//              (ChipClusters.CharStringAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedCharStringAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBridgedDeviceBasicInformationProductLabelCommandParams
        );
        result.put("readProductLabelAttribute", readBridgedDeviceBasicInformationProductLabelAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBridgedDeviceBasicInformationSerialNumberCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBridgedDeviceBasicInformationSerialNumberAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BridgedDeviceBasicInformation.ID, ClusterIDMapping.BridgedDeviceBasicInformation.Attribute.SerialNumber.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BridgedDeviceBasicInformationCluster) cluster).readSerialNumberAttribute(
//              (ChipClusters.CharStringAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedCharStringAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBridgedDeviceBasicInformationSerialNumberCommandParams
        );
        result.put("readSerialNumberAttribute", readBridgedDeviceBasicInformationSerialNumberAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBridgedDeviceBasicInformationReachableCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBridgedDeviceBasicInformationReachableAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BridgedDeviceBasicInformation.ID, ClusterIDMapping.BridgedDeviceBasicInformation.Attribute.Reachable.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BridgedDeviceBasicInformationCluster) cluster).readReachableAttribute(
//              (ChipClusters.BooleanAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBooleanAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBridgedDeviceBasicInformationReachableCommandParams
        );
        result.put("readReachableAttribute", readBridgedDeviceBasicInformationReachableAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBridgedDeviceBasicInformationUniqueIDCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBridgedDeviceBasicInformationUniqueIDAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BridgedDeviceBasicInformation.ID, ClusterIDMapping.BridgedDeviceBasicInformation.Attribute.UniqueID.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BridgedDeviceBasicInformationCluster) cluster).readUniqueIDAttribute(
//              (ChipClusters.CharStringAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedCharStringAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBridgedDeviceBasicInformationUniqueIDCommandParams
        );
        result.put("readUniqueIDAttribute", readBridgedDeviceBasicInformationUniqueIDAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBridgedDeviceBasicInformationGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBridgedDeviceBasicInformationGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BridgedDeviceBasicInformation.ID, ClusterIDMapping.BridgedDeviceBasicInformation.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BridgedDeviceBasicInformationCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.BridgedDeviceBasicInformationCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBridgedDeviceBasicInformationClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBridgedDeviceBasicInformationGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readBridgedDeviceBasicInformationGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBridgedDeviceBasicInformationAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBridgedDeviceBasicInformationAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BridgedDeviceBasicInformation.ID, ClusterIDMapping.BridgedDeviceBasicInformation.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BridgedDeviceBasicInformationCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.BridgedDeviceBasicInformationCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBridgedDeviceBasicInformationClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBridgedDeviceBasicInformationAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readBridgedDeviceBasicInformationAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBridgedDeviceBasicInformationEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBridgedDeviceBasicInformationEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BridgedDeviceBasicInformation.ID, ClusterIDMapping.BridgedDeviceBasicInformation.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BridgedDeviceBasicInformationCluster) cluster).readEventListAttribute(
//              (ChipClusters.BridgedDeviceBasicInformationCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBridgedDeviceBasicInformationClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBridgedDeviceBasicInformationEventListCommandParams
        );
        result.put("readEventListAttribute", readBridgedDeviceBasicInformationEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBridgedDeviceBasicInformationAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBridgedDeviceBasicInformationAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BridgedDeviceBasicInformation.ID, ClusterIDMapping.BridgedDeviceBasicInformation.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BridgedDeviceBasicInformationCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.BridgedDeviceBasicInformationCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBridgedDeviceBasicInformationClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBridgedDeviceBasicInformationAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readBridgedDeviceBasicInformationAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBridgedDeviceBasicInformationFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBridgedDeviceBasicInformationFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BridgedDeviceBasicInformation.ID, ClusterIDMapping.BridgedDeviceBasicInformation.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BridgedDeviceBasicInformationCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBridgedDeviceBasicInformationFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readBridgedDeviceBasicInformationFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBridgedDeviceBasicInformationClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBridgedDeviceBasicInformationClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BridgedDeviceBasicInformation.ID, ClusterIDMapping.BridgedDeviceBasicInformation.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BridgedDeviceBasicInformationCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBridgedDeviceBasicInformationClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readBridgedDeviceBasicInformationClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readSwitchInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readSwitchNumberOfPositionsCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSwitchNumberOfPositionsAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Switch.ID, ClusterIDMapping.Switch.Attribute.NumberOfPositions.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SwitchCluster) cluster).readNumberOfPositionsAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSwitchNumberOfPositionsCommandParams
        );
        result.put("readNumberOfPositionsAttribute", readSwitchNumberOfPositionsAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSwitchCurrentPositionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSwitchCurrentPositionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Switch.ID, ClusterIDMapping.Switch.Attribute.CurrentPosition.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SwitchCluster) cluster).readCurrentPositionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSwitchCurrentPositionCommandParams
        );
        result.put("readCurrentPositionAttribute", readSwitchCurrentPositionAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSwitchMultiPressMaxCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSwitchMultiPressMaxAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Switch.ID, ClusterIDMapping.Switch.Attribute.MultiPressMax.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SwitchCluster) cluster).readMultiPressMaxAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSwitchMultiPressMaxCommandParams
        );
        result.put("readMultiPressMaxAttribute", readSwitchMultiPressMaxAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSwitchGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSwitchGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Switch.ID, ClusterIDMapping.Switch.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SwitchCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.SwitchCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedSwitchClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSwitchGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readSwitchGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSwitchAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSwitchAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Switch.ID, ClusterIDMapping.Switch.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SwitchCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.SwitchCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedSwitchClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSwitchAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readSwitchAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSwitchEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSwitchEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Switch.ID, ClusterIDMapping.Switch.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SwitchCluster) cluster).readEventListAttribute(
//              (ChipClusters.SwitchCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedSwitchClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSwitchEventListCommandParams
        );
        result.put("readEventListAttribute", readSwitchEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSwitchAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSwitchAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Switch.ID, ClusterIDMapping.Switch.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SwitchCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.SwitchCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedSwitchClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSwitchAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readSwitchAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSwitchFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSwitchFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Switch.ID, ClusterIDMapping.Switch.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SwitchCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSwitchFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readSwitchFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSwitchClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSwitchClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Switch.ID, ClusterIDMapping.Switch.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SwitchCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSwitchClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readSwitchClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readAdministratorCommissioningInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readAdministratorCommissioningWindowStatusCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readAdministratorCommissioningWindowStatusAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.AdministratorCommissioning.ID, ClusterIDMapping.AdministratorCommissioning.Attribute.WindowStatus.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.AdministratorCommissioningCluster) cluster).readWindowStatusAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readAdministratorCommissioningWindowStatusCommandParams
        );
        result.put("readWindowStatusAttribute", readAdministratorCommissioningWindowStatusAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readAdministratorCommissioningAdminFabricIndexCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readAdministratorCommissioningAdminFabricIndexAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.AdministratorCommissioning.ID, ClusterIDMapping.AdministratorCommissioning.Attribute.AdminFabricIndex.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.AdministratorCommissioningCluster) cluster).readAdminFabricIndexAttribute(
//              (ChipClusters.AdministratorCommissioningCluster.AdminFabricIndexAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedAdministratorCommissioningClusterAdminFabricIndexAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readAdministratorCommissioningAdminFabricIndexCommandParams
        );
        result.put("readAdminFabricIndexAttribute", readAdministratorCommissioningAdminFabricIndexAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readAdministratorCommissioningAdminVendorIdCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readAdministratorCommissioningAdminVendorIdAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.AdministratorCommissioning.ID, ClusterIDMapping.AdministratorCommissioning.Attribute.AdminVendorId.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.AdministratorCommissioningCluster) cluster).readAdminVendorIdAttribute(
//              (ChipClusters.AdministratorCommissioningCluster.AdminVendorIdAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedAdministratorCommissioningClusterAdminVendorIdAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readAdministratorCommissioningAdminVendorIdCommandParams
        );
        result.put("readAdminVendorIdAttribute", readAdministratorCommissioningAdminVendorIdAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readAdministratorCommissioningGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readAdministratorCommissioningGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.AdministratorCommissioning.ID, ClusterIDMapping.AdministratorCommissioning.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.AdministratorCommissioningCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.AdministratorCommissioningCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedAdministratorCommissioningClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readAdministratorCommissioningGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readAdministratorCommissioningGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readAdministratorCommissioningAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readAdministratorCommissioningAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.AdministratorCommissioning.ID, ClusterIDMapping.AdministratorCommissioning.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.AdministratorCommissioningCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.AdministratorCommissioningCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedAdministratorCommissioningClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readAdministratorCommissioningAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readAdministratorCommissioningAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readAdministratorCommissioningEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readAdministratorCommissioningEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.AdministratorCommissioning.ID, ClusterIDMapping.AdministratorCommissioning.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.AdministratorCommissioningCluster) cluster).readEventListAttribute(
//              (ChipClusters.AdministratorCommissioningCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedAdministratorCommissioningClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readAdministratorCommissioningEventListCommandParams
        );
        result.put("readEventListAttribute", readAdministratorCommissioningEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readAdministratorCommissioningAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readAdministratorCommissioningAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.AdministratorCommissioning.ID, ClusterIDMapping.AdministratorCommissioning.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.AdministratorCommissioningCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.AdministratorCommissioningCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedAdministratorCommissioningClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readAdministratorCommissioningAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readAdministratorCommissioningAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readAdministratorCommissioningFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readAdministratorCommissioningFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.AdministratorCommissioning.ID, ClusterIDMapping.AdministratorCommissioning.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.AdministratorCommissioningCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readAdministratorCommissioningFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readAdministratorCommissioningFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readAdministratorCommissioningClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readAdministratorCommissioningClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.AdministratorCommissioning.ID, ClusterIDMapping.AdministratorCommissioning.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.AdministratorCommissioningCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readAdministratorCommissioningClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readAdministratorCommissioningClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readOperationalCredentialsInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readOperationalCredentialsNOCsCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOperationalCredentialsNOCsAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OperationalCredentials.ID, ClusterIDMapping.OperationalCredentials.Attribute.NOCs.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OperationalCredentialsCluster) cluster).readNOCsAttribute(
//              (ChipClusters.OperationalCredentialsCluster.NOCsAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedOperationalCredentialsClusterNOCsAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOperationalCredentialsNOCsCommandParams
        );
        result.put("readNOCsAttribute", readOperationalCredentialsNOCsAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOperationalCredentialsFabricsCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOperationalCredentialsFabricsAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OperationalCredentials.ID, ClusterIDMapping.OperationalCredentials.Attribute.Fabrics.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OperationalCredentialsCluster) cluster).readFabricsAttribute(
//              (ChipClusters.OperationalCredentialsCluster.FabricsAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedOperationalCredentialsClusterFabricsAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOperationalCredentialsFabricsCommandParams
        );
        result.put("readFabricsAttribute", readOperationalCredentialsFabricsAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOperationalCredentialsSupportedFabricsCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOperationalCredentialsSupportedFabricsAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OperationalCredentials.ID, ClusterIDMapping.OperationalCredentials.Attribute.SupportedFabrics.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OperationalCredentialsCluster) cluster).readSupportedFabricsAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOperationalCredentialsSupportedFabricsCommandParams
        );
        result.put("readSupportedFabricsAttribute", readOperationalCredentialsSupportedFabricsAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOperationalCredentialsCommissionedFabricsCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOperationalCredentialsCommissionedFabricsAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OperationalCredentials.ID, ClusterIDMapping.OperationalCredentials.Attribute.CommissionedFabrics.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OperationalCredentialsCluster) cluster).readCommissionedFabricsAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOperationalCredentialsCommissionedFabricsCommandParams
        );
        result.put("readCommissionedFabricsAttribute", readOperationalCredentialsCommissionedFabricsAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOperationalCredentialsTrustedRootCertificatesCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOperationalCredentialsTrustedRootCertificatesAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OperationalCredentials.ID, ClusterIDMapping.OperationalCredentials.Attribute.TrustedRootCertificates.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OperationalCredentialsCluster) cluster).readTrustedRootCertificatesAttribute(
//              (ChipClusters.OperationalCredentialsCluster.TrustedRootCertificatesAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedOperationalCredentialsClusterTrustedRootCertificatesAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOperationalCredentialsTrustedRootCertificatesCommandParams
        );
        result.put("readTrustedRootCertificatesAttribute", readOperationalCredentialsTrustedRootCertificatesAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOperationalCredentialsCurrentFabricIndexCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOperationalCredentialsCurrentFabricIndexAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OperationalCredentials.ID, ClusterIDMapping.OperationalCredentials.Attribute.CurrentFabricIndex.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OperationalCredentialsCluster) cluster).readCurrentFabricIndexAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOperationalCredentialsCurrentFabricIndexCommandParams
        );
        result.put("readCurrentFabricIndexAttribute", readOperationalCredentialsCurrentFabricIndexAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOperationalCredentialsGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOperationalCredentialsGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OperationalCredentials.ID, ClusterIDMapping.OperationalCredentials.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OperationalCredentialsCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.OperationalCredentialsCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedOperationalCredentialsClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOperationalCredentialsGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readOperationalCredentialsGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOperationalCredentialsAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOperationalCredentialsAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OperationalCredentials.ID, ClusterIDMapping.OperationalCredentials.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OperationalCredentialsCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.OperationalCredentialsCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedOperationalCredentialsClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOperationalCredentialsAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readOperationalCredentialsAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOperationalCredentialsEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOperationalCredentialsEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OperationalCredentials.ID, ClusterIDMapping.OperationalCredentials.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OperationalCredentialsCluster) cluster).readEventListAttribute(
//              (ChipClusters.OperationalCredentialsCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedOperationalCredentialsClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOperationalCredentialsEventListCommandParams
        );
        result.put("readEventListAttribute", readOperationalCredentialsEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOperationalCredentialsAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOperationalCredentialsAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OperationalCredentials.ID, ClusterIDMapping.OperationalCredentials.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OperationalCredentialsCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.OperationalCredentialsCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedOperationalCredentialsClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOperationalCredentialsAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readOperationalCredentialsAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOperationalCredentialsFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOperationalCredentialsFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OperationalCredentials.ID, ClusterIDMapping.OperationalCredentials.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OperationalCredentialsCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOperationalCredentialsFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readOperationalCredentialsFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOperationalCredentialsClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOperationalCredentialsClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OperationalCredentials.ID, ClusterIDMapping.OperationalCredentials.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OperationalCredentialsCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOperationalCredentialsClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readOperationalCredentialsClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readGroupKeyManagementInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readGroupKeyManagementGroupKeyMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readGroupKeyManagementGroupKeyMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.GroupKeyManagement.ID, ClusterIDMapping.GroupKeyManagement.Attribute.GroupKeyMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.GroupKeyManagementCluster) cluster).readGroupKeyMapAttribute(
//              (ChipClusters.GroupKeyManagementCluster.GroupKeyMapAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedGroupKeyManagementClusterGroupKeyMapAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readGroupKeyManagementGroupKeyMapCommandParams
        );
        result.put("readGroupKeyMapAttribute", readGroupKeyManagementGroupKeyMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readGroupKeyManagementGroupTableCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readGroupKeyManagementGroupTableAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.GroupKeyManagement.ID, ClusterIDMapping.GroupKeyManagement.Attribute.GroupTable.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.GroupKeyManagementCluster) cluster).readGroupTableAttribute(
//              (ChipClusters.GroupKeyManagementCluster.GroupTableAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedGroupKeyManagementClusterGroupTableAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readGroupKeyManagementGroupTableCommandParams
        );
        result.put("readGroupTableAttribute", readGroupKeyManagementGroupTableAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readGroupKeyManagementMaxGroupsPerFabricCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readGroupKeyManagementMaxGroupsPerFabricAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.GroupKeyManagement.ID, ClusterIDMapping.GroupKeyManagement.Attribute.MaxGroupsPerFabric.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.GroupKeyManagementCluster) cluster).readMaxGroupsPerFabricAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readGroupKeyManagementMaxGroupsPerFabricCommandParams
        );
        result.put("readMaxGroupsPerFabricAttribute", readGroupKeyManagementMaxGroupsPerFabricAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readGroupKeyManagementMaxGroupKeysPerFabricCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readGroupKeyManagementMaxGroupKeysPerFabricAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.GroupKeyManagement.ID, ClusterIDMapping.GroupKeyManagement.Attribute.MaxGroupKeysPerFabric.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.GroupKeyManagementCluster) cluster).readMaxGroupKeysPerFabricAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readGroupKeyManagementMaxGroupKeysPerFabricCommandParams
        );
        result.put("readMaxGroupKeysPerFabricAttribute", readGroupKeyManagementMaxGroupKeysPerFabricAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readGroupKeyManagementGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readGroupKeyManagementGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.GroupKeyManagement.ID, ClusterIDMapping.GroupKeyManagement.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.GroupKeyManagementCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.GroupKeyManagementCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedGroupKeyManagementClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readGroupKeyManagementGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readGroupKeyManagementGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readGroupKeyManagementAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readGroupKeyManagementAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.GroupKeyManagement.ID, ClusterIDMapping.GroupKeyManagement.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.GroupKeyManagementCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.GroupKeyManagementCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedGroupKeyManagementClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readGroupKeyManagementAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readGroupKeyManagementAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readGroupKeyManagementEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readGroupKeyManagementEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.GroupKeyManagement.ID, ClusterIDMapping.GroupKeyManagement.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.GroupKeyManagementCluster) cluster).readEventListAttribute(
//              (ChipClusters.GroupKeyManagementCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedGroupKeyManagementClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readGroupKeyManagementEventListCommandParams
        );
        result.put("readEventListAttribute", readGroupKeyManagementEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readGroupKeyManagementAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readGroupKeyManagementAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.GroupKeyManagement.ID, ClusterIDMapping.GroupKeyManagement.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.GroupKeyManagementCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.GroupKeyManagementCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedGroupKeyManagementClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readGroupKeyManagementAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readGroupKeyManagementAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readGroupKeyManagementFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readGroupKeyManagementFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.GroupKeyManagement.ID, ClusterIDMapping.GroupKeyManagement.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.GroupKeyManagementCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readGroupKeyManagementFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readGroupKeyManagementFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readGroupKeyManagementClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readGroupKeyManagementClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.GroupKeyManagement.ID, ClusterIDMapping.GroupKeyManagement.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.GroupKeyManagementCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readGroupKeyManagementClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readGroupKeyManagementClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readFixedLabelInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readFixedLabelLabelListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFixedLabelLabelListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FixedLabel.ID, ClusterIDMapping.FixedLabel.Attribute.LabelList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FixedLabelCluster) cluster).readLabelListAttribute(
//              (ChipClusters.FixedLabelCluster.LabelListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFixedLabelClusterLabelListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFixedLabelLabelListCommandParams
        );
        result.put("readLabelListAttribute", readFixedLabelLabelListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFixedLabelGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFixedLabelGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FixedLabel.ID, ClusterIDMapping.FixedLabel.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FixedLabelCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.FixedLabelCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFixedLabelClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFixedLabelGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readFixedLabelGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFixedLabelAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFixedLabelAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FixedLabel.ID, ClusterIDMapping.FixedLabel.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FixedLabelCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.FixedLabelCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFixedLabelClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFixedLabelAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readFixedLabelAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFixedLabelEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFixedLabelEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FixedLabel.ID, ClusterIDMapping.FixedLabel.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FixedLabelCluster) cluster).readEventListAttribute(
//              (ChipClusters.FixedLabelCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFixedLabelClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFixedLabelEventListCommandParams
        );
        result.put("readEventListAttribute", readFixedLabelEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFixedLabelAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFixedLabelAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FixedLabel.ID, ClusterIDMapping.FixedLabel.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FixedLabelCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.FixedLabelCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFixedLabelClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFixedLabelAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readFixedLabelAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFixedLabelFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFixedLabelFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FixedLabel.ID, ClusterIDMapping.FixedLabel.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FixedLabelCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFixedLabelFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readFixedLabelFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFixedLabelClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFixedLabelClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FixedLabel.ID, ClusterIDMapping.FixedLabel.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FixedLabelCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFixedLabelClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readFixedLabelClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readUserLabelInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readUserLabelLabelListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUserLabelLabelListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UserLabel.ID, ClusterIDMapping.UserLabel.Attribute.LabelList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UserLabelCluster) cluster).readLabelListAttribute(
//              (ChipClusters.UserLabelCluster.LabelListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedUserLabelClusterLabelListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUserLabelLabelListCommandParams
        );
        result.put("readLabelListAttribute", readUserLabelLabelListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUserLabelGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUserLabelGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UserLabel.ID, ClusterIDMapping.UserLabel.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UserLabelCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.UserLabelCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedUserLabelClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUserLabelGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readUserLabelGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUserLabelAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUserLabelAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UserLabel.ID, ClusterIDMapping.UserLabel.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UserLabelCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.UserLabelCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedUserLabelClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUserLabelAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readUserLabelAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUserLabelEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUserLabelEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UserLabel.ID, ClusterIDMapping.UserLabel.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UserLabelCluster) cluster).readEventListAttribute(
//              (ChipClusters.UserLabelCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedUserLabelClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUserLabelEventListCommandParams
        );
        result.put("readEventListAttribute", readUserLabelEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUserLabelAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUserLabelAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UserLabel.ID, ClusterIDMapping.UserLabel.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UserLabelCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.UserLabelCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedUserLabelClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUserLabelAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readUserLabelAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUserLabelFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUserLabelFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UserLabel.ID, ClusterIDMapping.UserLabel.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UserLabelCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUserLabelFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readUserLabelFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUserLabelClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUserLabelClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UserLabel.ID, ClusterIDMapping.UserLabel.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UserLabelCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUserLabelClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readUserLabelClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readProxyConfigurationInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readProxyConfigurationGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readProxyConfigurationGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ProxyConfiguration.ID, ClusterIDMapping.ProxyConfiguration.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ProxyConfigurationCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.ProxyConfigurationCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedProxyConfigurationClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readProxyConfigurationGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readProxyConfigurationGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readProxyConfigurationAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readProxyConfigurationAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ProxyConfiguration.ID, ClusterIDMapping.ProxyConfiguration.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ProxyConfigurationCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.ProxyConfigurationCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedProxyConfigurationClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readProxyConfigurationAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readProxyConfigurationAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readProxyConfigurationEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readProxyConfigurationEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ProxyConfiguration.ID, ClusterIDMapping.ProxyConfiguration.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ProxyConfigurationCluster) cluster).readEventListAttribute(
//              (ChipClusters.ProxyConfigurationCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedProxyConfigurationClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readProxyConfigurationEventListCommandParams
        );
        result.put("readEventListAttribute", readProxyConfigurationEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readProxyConfigurationAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readProxyConfigurationAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ProxyConfiguration.ID, ClusterIDMapping.ProxyConfiguration.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ProxyConfigurationCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.ProxyConfigurationCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedProxyConfigurationClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readProxyConfigurationAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readProxyConfigurationAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readProxyConfigurationFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readProxyConfigurationFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ProxyConfiguration.ID, ClusterIDMapping.ProxyConfiguration.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ProxyConfigurationCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readProxyConfigurationFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readProxyConfigurationFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readProxyConfigurationClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readProxyConfigurationClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ProxyConfiguration.ID, ClusterIDMapping.ProxyConfiguration.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ProxyConfigurationCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readProxyConfigurationClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readProxyConfigurationClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readProxyDiscoveryInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readProxyDiscoveryGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readProxyDiscoveryGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ProxyDiscovery.ID, ClusterIDMapping.ProxyDiscovery.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ProxyDiscoveryCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.ProxyDiscoveryCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedProxyDiscoveryClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readProxyDiscoveryGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readProxyDiscoveryGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readProxyDiscoveryAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readProxyDiscoveryAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ProxyDiscovery.ID, ClusterIDMapping.ProxyDiscovery.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ProxyDiscoveryCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.ProxyDiscoveryCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedProxyDiscoveryClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readProxyDiscoveryAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readProxyDiscoveryAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readProxyDiscoveryEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readProxyDiscoveryEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ProxyDiscovery.ID, ClusterIDMapping.ProxyDiscovery.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ProxyDiscoveryCluster) cluster).readEventListAttribute(
//              (ChipClusters.ProxyDiscoveryCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedProxyDiscoveryClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readProxyDiscoveryEventListCommandParams
        );
        result.put("readEventListAttribute", readProxyDiscoveryEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readProxyDiscoveryAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readProxyDiscoveryAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ProxyDiscovery.ID, ClusterIDMapping.ProxyDiscovery.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ProxyDiscoveryCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.ProxyDiscoveryCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedProxyDiscoveryClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readProxyDiscoveryAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readProxyDiscoveryAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readProxyDiscoveryFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readProxyDiscoveryFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ProxyDiscovery.ID, ClusterIDMapping.ProxyDiscovery.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ProxyDiscoveryCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readProxyDiscoveryFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readProxyDiscoveryFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readProxyDiscoveryClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readProxyDiscoveryClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ProxyDiscovery.ID, ClusterIDMapping.ProxyDiscovery.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ProxyDiscoveryCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readProxyDiscoveryClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readProxyDiscoveryClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readProxyValidInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readProxyValidGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readProxyValidGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ProxyValid.ID, ClusterIDMapping.ProxyValid.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ProxyValidCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.ProxyValidCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedProxyValidClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readProxyValidGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readProxyValidGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readProxyValidAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readProxyValidAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ProxyValid.ID, ClusterIDMapping.ProxyValid.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ProxyValidCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.ProxyValidCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedProxyValidClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readProxyValidAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readProxyValidAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readProxyValidEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readProxyValidEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ProxyValid.ID, ClusterIDMapping.ProxyValid.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ProxyValidCluster) cluster).readEventListAttribute(
//              (ChipClusters.ProxyValidCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedProxyValidClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readProxyValidEventListCommandParams
        );
        result.put("readEventListAttribute", readProxyValidEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readProxyValidAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readProxyValidAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ProxyValid.ID, ClusterIDMapping.ProxyValid.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ProxyValidCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.ProxyValidCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedProxyValidClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readProxyValidAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readProxyValidAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readProxyValidFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readProxyValidFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ProxyValid.ID, ClusterIDMapping.ProxyValid.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ProxyValidCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readProxyValidFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readProxyValidFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readProxyValidClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readProxyValidClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ProxyValid.ID, ClusterIDMapping.ProxyValid.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ProxyValidCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readProxyValidClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readProxyValidClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readBooleanStateInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readBooleanStateStateValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBooleanStateStateValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BooleanState.ID, ClusterIDMapping.BooleanState.Attribute.StateValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BooleanStateCluster) cluster).readStateValueAttribute(
//              (ChipClusters.BooleanAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBooleanAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBooleanStateStateValueCommandParams
        );
        result.put("readStateValueAttribute", readBooleanStateStateValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBooleanStateGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBooleanStateGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BooleanState.ID, ClusterIDMapping.BooleanState.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BooleanStateCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.BooleanStateCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBooleanStateClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBooleanStateGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readBooleanStateGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBooleanStateAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBooleanStateAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BooleanState.ID, ClusterIDMapping.BooleanState.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BooleanStateCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.BooleanStateCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBooleanStateClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBooleanStateAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readBooleanStateAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBooleanStateEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBooleanStateEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BooleanState.ID, ClusterIDMapping.BooleanState.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BooleanStateCluster) cluster).readEventListAttribute(
//              (ChipClusters.BooleanStateCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBooleanStateClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBooleanStateEventListCommandParams
        );
        result.put("readEventListAttribute", readBooleanStateEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBooleanStateAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBooleanStateAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BooleanState.ID, ClusterIDMapping.BooleanState.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BooleanStateCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.BooleanStateCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBooleanStateClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBooleanStateAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readBooleanStateAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBooleanStateFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBooleanStateFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BooleanState.ID, ClusterIDMapping.BooleanState.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BooleanStateCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBooleanStateFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readBooleanStateFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBooleanStateClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBooleanStateClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BooleanState.ID, ClusterIDMapping.BooleanState.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BooleanStateCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBooleanStateClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readBooleanStateClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readIcdManagementInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readIcdManagementIdleModeIntervalCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readIcdManagementIdleModeIntervalAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.IcdManagement.ID, ClusterIDMapping.IcdManagement.Attribute.IdleModeInterval.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.IcdManagementCluster) cluster).readIdleModeIntervalAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readIcdManagementIdleModeIntervalCommandParams
        );
        result.put("readIdleModeIntervalAttribute", readIcdManagementIdleModeIntervalAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readIcdManagementActiveModeIntervalCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readIcdManagementActiveModeIntervalAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.IcdManagement.ID, ClusterIDMapping.IcdManagement.Attribute.ActiveModeInterval.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.IcdManagementCluster) cluster).readActiveModeIntervalAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readIcdManagementActiveModeIntervalCommandParams
        );
        result.put("readActiveModeIntervalAttribute", readIcdManagementActiveModeIntervalAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readIcdManagementActiveModeThresholdCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readIcdManagementActiveModeThresholdAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.IcdManagement.ID, ClusterIDMapping.IcdManagement.Attribute.ActiveModeThreshold.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.IcdManagementCluster) cluster).readActiveModeThresholdAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readIcdManagementActiveModeThresholdCommandParams
        );
        result.put("readActiveModeThresholdAttribute", readIcdManagementActiveModeThresholdAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readIcdManagementRegisteredClientsCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readIcdManagementRegisteredClientsAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.IcdManagement.ID, ClusterIDMapping.IcdManagement.Attribute.RegisteredClients.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.IcdManagementCluster) cluster).readRegisteredClientsAttribute(
//              (ChipClusters.IcdManagementCluster.RegisteredClientsAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIcdManagementClusterRegisteredClientsAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readIcdManagementRegisteredClientsCommandParams
        );
        result.put("readRegisteredClientsAttribute", readIcdManagementRegisteredClientsAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readIcdManagementICDCounterCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readIcdManagementICDCounterAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.IcdManagement.ID, ClusterIDMapping.IcdManagement.Attribute.ICDCounter.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.IcdManagementCluster) cluster).readICDCounterAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readIcdManagementICDCounterCommandParams
        );
        result.put("readICDCounterAttribute", readIcdManagementICDCounterAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readIcdManagementClientsSupportedPerFabricCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readIcdManagementClientsSupportedPerFabricAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.IcdManagement.ID, ClusterIDMapping.IcdManagement.Attribute.ClientsSupportedPerFabric.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.IcdManagementCluster) cluster).readClientsSupportedPerFabricAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readIcdManagementClientsSupportedPerFabricCommandParams
        );
        result.put("readClientsSupportedPerFabricAttribute", readIcdManagementClientsSupportedPerFabricAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readIcdManagementGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readIcdManagementGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.IcdManagement.ID, ClusterIDMapping.IcdManagement.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.IcdManagementCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.IcdManagementCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIcdManagementClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readIcdManagementGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readIcdManagementGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readIcdManagementAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readIcdManagementAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.IcdManagement.ID, ClusterIDMapping.IcdManagement.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.IcdManagementCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.IcdManagementCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIcdManagementClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readIcdManagementAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readIcdManagementAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readIcdManagementEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readIcdManagementEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.IcdManagement.ID, ClusterIDMapping.IcdManagement.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.IcdManagementCluster) cluster).readEventListAttribute(
//              (ChipClusters.IcdManagementCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIcdManagementClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readIcdManagementEventListCommandParams
        );
        result.put("readEventListAttribute", readIcdManagementEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readIcdManagementAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readIcdManagementAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.IcdManagement.ID, ClusterIDMapping.IcdManagement.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.IcdManagementCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.IcdManagementCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIcdManagementClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readIcdManagementAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readIcdManagementAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readIcdManagementFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readIcdManagementFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.IcdManagement.ID, ClusterIDMapping.IcdManagement.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.IcdManagementCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readIcdManagementFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readIcdManagementFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readIcdManagementClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readIcdManagementClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.IcdManagement.ID, ClusterIDMapping.IcdManagement.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.IcdManagementCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readIcdManagementClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readIcdManagementClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readModeSelectInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readModeSelectDescriptionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readModeSelectDescriptionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ModeSelect.ID, ClusterIDMapping.ModeSelect.Attribute.Description.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ModeSelectCluster) cluster).readDescriptionAttribute(
//              (ChipClusters.CharStringAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedCharStringAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readModeSelectDescriptionCommandParams
        );
        result.put("readDescriptionAttribute", readModeSelectDescriptionAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readModeSelectStandardNamespaceCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readModeSelectStandardNamespaceAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ModeSelect.ID, ClusterIDMapping.ModeSelect.Attribute.StandardNamespace.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ModeSelectCluster) cluster).readStandardNamespaceAttribute(
//              (ChipClusters.ModeSelectCluster.StandardNamespaceAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedModeSelectClusterStandardNamespaceAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readModeSelectStandardNamespaceCommandParams
        );
        result.put("readStandardNamespaceAttribute", readModeSelectStandardNamespaceAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readModeSelectSupportedModesCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readModeSelectSupportedModesAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ModeSelect.ID, ClusterIDMapping.ModeSelect.Attribute.SupportedModes.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ModeSelectCluster) cluster).readSupportedModesAttribute(
//              (ChipClusters.ModeSelectCluster.SupportedModesAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedModeSelectClusterSupportedModesAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readModeSelectSupportedModesCommandParams
        );
        result.put("readSupportedModesAttribute", readModeSelectSupportedModesAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readModeSelectCurrentModeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readModeSelectCurrentModeAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ModeSelect.ID, ClusterIDMapping.ModeSelect.Attribute.CurrentMode.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ModeSelectCluster) cluster).readCurrentModeAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readModeSelectCurrentModeCommandParams
        );
        result.put("readCurrentModeAttribute", readModeSelectCurrentModeAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readModeSelectStartUpModeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readModeSelectStartUpModeAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ModeSelect.ID, ClusterIDMapping.ModeSelect.Attribute.StartUpMode.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ModeSelectCluster) cluster).readStartUpModeAttribute(
//              (ChipClusters.ModeSelectCluster.StartUpModeAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedModeSelectClusterStartUpModeAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readModeSelectStartUpModeCommandParams
        );
        result.put("readStartUpModeAttribute", readModeSelectStartUpModeAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readModeSelectOnModeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readModeSelectOnModeAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ModeSelect.ID, ClusterIDMapping.ModeSelect.Attribute.OnMode.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ModeSelectCluster) cluster).readOnModeAttribute(
//              (ChipClusters.ModeSelectCluster.OnModeAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedModeSelectClusterOnModeAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readModeSelectOnModeCommandParams
        );
        result.put("readOnModeAttribute", readModeSelectOnModeAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readModeSelectGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readModeSelectGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ModeSelect.ID, ClusterIDMapping.ModeSelect.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ModeSelectCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.ModeSelectCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedModeSelectClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readModeSelectGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readModeSelectGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readModeSelectAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readModeSelectAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ModeSelect.ID, ClusterIDMapping.ModeSelect.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ModeSelectCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.ModeSelectCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedModeSelectClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readModeSelectAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readModeSelectAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readModeSelectEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readModeSelectEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ModeSelect.ID, ClusterIDMapping.ModeSelect.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ModeSelectCluster) cluster).readEventListAttribute(
//              (ChipClusters.ModeSelectCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedModeSelectClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readModeSelectEventListCommandParams
        );
        result.put("readEventListAttribute", readModeSelectEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readModeSelectAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readModeSelectAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ModeSelect.ID, ClusterIDMapping.ModeSelect.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ModeSelectCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.ModeSelectCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedModeSelectClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readModeSelectAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readModeSelectAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readModeSelectFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readModeSelectFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ModeSelect.ID, ClusterIDMapping.ModeSelect.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ModeSelectCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readModeSelectFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readModeSelectFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readModeSelectClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readModeSelectClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ModeSelect.ID, ClusterIDMapping.ModeSelect.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ModeSelectCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readModeSelectClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readModeSelectClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readLaundryWasherModeInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readLaundryWasherModeSupportedModesCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readLaundryWasherModeSupportedModesAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.LaundryWasherMode.ID, ClusterIDMapping.LaundryWasherMode.Attribute.SupportedModes.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.LaundryWasherModeCluster) cluster).readSupportedModesAttribute(
//              (ChipClusters.LaundryWasherModeCluster.SupportedModesAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLaundryWasherModeClusterSupportedModesAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readLaundryWasherModeSupportedModesCommandParams
        );
        result.put("readSupportedModesAttribute", readLaundryWasherModeSupportedModesAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readLaundryWasherModeCurrentModeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readLaundryWasherModeCurrentModeAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.LaundryWasherMode.ID, ClusterIDMapping.LaundryWasherMode.Attribute.CurrentMode.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.LaundryWasherModeCluster) cluster).readCurrentModeAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readLaundryWasherModeCurrentModeCommandParams
        );
        result.put("readCurrentModeAttribute", readLaundryWasherModeCurrentModeAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readLaundryWasherModeStartUpModeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readLaundryWasherModeStartUpModeAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.LaundryWasherMode.ID, ClusterIDMapping.LaundryWasherMode.Attribute.StartUpMode.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.LaundryWasherModeCluster) cluster).readStartUpModeAttribute(
//              (ChipClusters.LaundryWasherModeCluster.StartUpModeAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLaundryWasherModeClusterStartUpModeAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readLaundryWasherModeStartUpModeCommandParams
        );
        result.put("readStartUpModeAttribute", readLaundryWasherModeStartUpModeAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readLaundryWasherModeOnModeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readLaundryWasherModeOnModeAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.LaundryWasherMode.ID, ClusterIDMapping.LaundryWasherMode.Attribute.OnMode.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.LaundryWasherModeCluster) cluster).readOnModeAttribute(
//              (ChipClusters.LaundryWasherModeCluster.OnModeAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLaundryWasherModeClusterOnModeAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readLaundryWasherModeOnModeCommandParams
        );
        result.put("readOnModeAttribute", readLaundryWasherModeOnModeAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readLaundryWasherModeGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readLaundryWasherModeGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.LaundryWasherMode.ID, ClusterIDMapping.LaundryWasherMode.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.LaundryWasherModeCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.LaundryWasherModeCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLaundryWasherModeClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readLaundryWasherModeGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readLaundryWasherModeGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readLaundryWasherModeAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readLaundryWasherModeAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.LaundryWasherMode.ID, ClusterIDMapping.LaundryWasherMode.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.LaundryWasherModeCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.LaundryWasherModeCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLaundryWasherModeClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readLaundryWasherModeAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readLaundryWasherModeAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readLaundryWasherModeEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readLaundryWasherModeEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.LaundryWasherMode.ID, ClusterIDMapping.LaundryWasherMode.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.LaundryWasherModeCluster) cluster).readEventListAttribute(
//              (ChipClusters.LaundryWasherModeCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLaundryWasherModeClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readLaundryWasherModeEventListCommandParams
        );
        result.put("readEventListAttribute", readLaundryWasherModeEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readLaundryWasherModeAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readLaundryWasherModeAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.LaundryWasherMode.ID, ClusterIDMapping.LaundryWasherMode.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.LaundryWasherModeCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.LaundryWasherModeCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLaundryWasherModeClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readLaundryWasherModeAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readLaundryWasherModeAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readLaundryWasherModeFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readLaundryWasherModeFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.LaundryWasherMode.ID, ClusterIDMapping.LaundryWasherMode.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.LaundryWasherModeCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readLaundryWasherModeFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readLaundryWasherModeFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readLaundryWasherModeClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readLaundryWasherModeClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.LaundryWasherMode.ID, ClusterIDMapping.LaundryWasherMode.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.LaundryWasherModeCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readLaundryWasherModeClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readLaundryWasherModeClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readRefrigeratorAndTemperatureControlledCabinetModeInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readRefrigeratorAndTemperatureControlledCabinetModeSupportedModesCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readRefrigeratorAndTemperatureControlledCabinetModeSupportedModesAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.RefrigeratorAndTemperatureControlledCabinetMode.ID, ClusterIDMapping.RefrigeratorAndTemperatureControlledCabinetMode.Attribute.SupportedModes.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.RefrigeratorAndTemperatureControlledCabinetModeCluster) cluster).readSupportedModesAttribute(
//              (ChipClusters.RefrigeratorAndTemperatureControlledCabinetModeCluster.SupportedModesAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedRefrigeratorAndTemperatureControlledCabinetModeClusterSupportedModesAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readRefrigeratorAndTemperatureControlledCabinetModeSupportedModesCommandParams
        );
        result.put("readSupportedModesAttribute", readRefrigeratorAndTemperatureControlledCabinetModeSupportedModesAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readRefrigeratorAndTemperatureControlledCabinetModeCurrentModeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readRefrigeratorAndTemperatureControlledCabinetModeCurrentModeAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.RefrigeratorAndTemperatureControlledCabinetMode.ID, ClusterIDMapping.RefrigeratorAndTemperatureControlledCabinetMode.Attribute.CurrentMode.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.RefrigeratorAndTemperatureControlledCabinetModeCluster) cluster).readCurrentModeAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readRefrigeratorAndTemperatureControlledCabinetModeCurrentModeCommandParams
        );
        result.put("readCurrentModeAttribute", readRefrigeratorAndTemperatureControlledCabinetModeCurrentModeAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readRefrigeratorAndTemperatureControlledCabinetModeStartUpModeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readRefrigeratorAndTemperatureControlledCabinetModeStartUpModeAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.RefrigeratorAndTemperatureControlledCabinetMode.ID, ClusterIDMapping.RefrigeratorAndTemperatureControlledCabinetMode.Attribute.StartUpMode.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.RefrigeratorAndTemperatureControlledCabinetModeCluster) cluster).readStartUpModeAttribute(
//              (ChipClusters.RefrigeratorAndTemperatureControlledCabinetModeCluster.StartUpModeAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedRefrigeratorAndTemperatureControlledCabinetModeClusterStartUpModeAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readRefrigeratorAndTemperatureControlledCabinetModeStartUpModeCommandParams
        );
        result.put("readStartUpModeAttribute", readRefrigeratorAndTemperatureControlledCabinetModeStartUpModeAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readRefrigeratorAndTemperatureControlledCabinetModeOnModeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readRefrigeratorAndTemperatureControlledCabinetModeOnModeAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.RefrigeratorAndTemperatureControlledCabinetMode.ID, ClusterIDMapping.RefrigeratorAndTemperatureControlledCabinetMode.Attribute.OnMode.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.RefrigeratorAndTemperatureControlledCabinetModeCluster) cluster).readOnModeAttribute(
//              (ChipClusters.RefrigeratorAndTemperatureControlledCabinetModeCluster.OnModeAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedRefrigeratorAndTemperatureControlledCabinetModeClusterOnModeAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readRefrigeratorAndTemperatureControlledCabinetModeOnModeCommandParams
        );
        result.put("readOnModeAttribute", readRefrigeratorAndTemperatureControlledCabinetModeOnModeAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readRefrigeratorAndTemperatureControlledCabinetModeGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readRefrigeratorAndTemperatureControlledCabinetModeGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.RefrigeratorAndTemperatureControlledCabinetMode.ID, ClusterIDMapping.RefrigeratorAndTemperatureControlledCabinetMode.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.RefrigeratorAndTemperatureControlledCabinetModeCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.RefrigeratorAndTemperatureControlledCabinetModeCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedRefrigeratorAndTemperatureControlledCabinetModeClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readRefrigeratorAndTemperatureControlledCabinetModeGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readRefrigeratorAndTemperatureControlledCabinetModeGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readRefrigeratorAndTemperatureControlledCabinetModeAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readRefrigeratorAndTemperatureControlledCabinetModeAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.RefrigeratorAndTemperatureControlledCabinetMode.ID, ClusterIDMapping.RefrigeratorAndTemperatureControlledCabinetMode.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.RefrigeratorAndTemperatureControlledCabinetModeCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.RefrigeratorAndTemperatureControlledCabinetModeCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedRefrigeratorAndTemperatureControlledCabinetModeClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readRefrigeratorAndTemperatureControlledCabinetModeAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readRefrigeratorAndTemperatureControlledCabinetModeAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readRefrigeratorAndTemperatureControlledCabinetModeEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readRefrigeratorAndTemperatureControlledCabinetModeEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.RefrigeratorAndTemperatureControlledCabinetMode.ID, ClusterIDMapping.RefrigeratorAndTemperatureControlledCabinetMode.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.RefrigeratorAndTemperatureControlledCabinetModeCluster) cluster).readEventListAttribute(
//              (ChipClusters.RefrigeratorAndTemperatureControlledCabinetModeCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedRefrigeratorAndTemperatureControlledCabinetModeClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readRefrigeratorAndTemperatureControlledCabinetModeEventListCommandParams
        );
        result.put("readEventListAttribute", readRefrigeratorAndTemperatureControlledCabinetModeEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readRefrigeratorAndTemperatureControlledCabinetModeAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readRefrigeratorAndTemperatureControlledCabinetModeAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.RefrigeratorAndTemperatureControlledCabinetMode.ID, ClusterIDMapping.RefrigeratorAndTemperatureControlledCabinetMode.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.RefrigeratorAndTemperatureControlledCabinetModeCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.RefrigeratorAndTemperatureControlledCabinetModeCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedRefrigeratorAndTemperatureControlledCabinetModeClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readRefrigeratorAndTemperatureControlledCabinetModeAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readRefrigeratorAndTemperatureControlledCabinetModeAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readRefrigeratorAndTemperatureControlledCabinetModeFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readRefrigeratorAndTemperatureControlledCabinetModeFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.RefrigeratorAndTemperatureControlledCabinetMode.ID, ClusterIDMapping.RefrigeratorAndTemperatureControlledCabinetMode.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.RefrigeratorAndTemperatureControlledCabinetModeCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readRefrigeratorAndTemperatureControlledCabinetModeFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readRefrigeratorAndTemperatureControlledCabinetModeFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readRefrigeratorAndTemperatureControlledCabinetModeClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readRefrigeratorAndTemperatureControlledCabinetModeClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.RefrigeratorAndTemperatureControlledCabinetMode.ID, ClusterIDMapping.RefrigeratorAndTemperatureControlledCabinetMode.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.RefrigeratorAndTemperatureControlledCabinetModeCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readRefrigeratorAndTemperatureControlledCabinetModeClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readRefrigeratorAndTemperatureControlledCabinetModeClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readLaundryWasherControlsInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readLaundryWasherControlsSpinSpeedsCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readLaundryWasherControlsSpinSpeedsAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.LaundryWasherControls.ID, ClusterIDMapping.LaundryWasherControls.Attribute.SpinSpeeds.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.LaundryWasherControlsCluster) cluster).readSpinSpeedsAttribute(
//              (ChipClusters.LaundryWasherControlsCluster.SpinSpeedsAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLaundryWasherControlsClusterSpinSpeedsAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readLaundryWasherControlsSpinSpeedsCommandParams
        );
        result.put("readSpinSpeedsAttribute", readLaundryWasherControlsSpinSpeedsAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readLaundryWasherControlsSpinSpeedCurrentCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readLaundryWasherControlsSpinSpeedCurrentAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.LaundryWasherControls.ID, ClusterIDMapping.LaundryWasherControls.Attribute.SpinSpeedCurrent.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.LaundryWasherControlsCluster) cluster).readSpinSpeedCurrentAttribute(
//              (ChipClusters.LaundryWasherControlsCluster.SpinSpeedCurrentAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLaundryWasherControlsClusterSpinSpeedCurrentAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readLaundryWasherControlsSpinSpeedCurrentCommandParams
        );
        result.put("readSpinSpeedCurrentAttribute", readLaundryWasherControlsSpinSpeedCurrentAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readLaundryWasherControlsNumberOfRinsesCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readLaundryWasherControlsNumberOfRinsesAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.LaundryWasherControls.ID, ClusterIDMapping.LaundryWasherControls.Attribute.NumberOfRinses.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.LaundryWasherControlsCluster) cluster).readNumberOfRinsesAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readLaundryWasherControlsNumberOfRinsesCommandParams
        );
        result.put("readNumberOfRinsesAttribute", readLaundryWasherControlsNumberOfRinsesAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readLaundryWasherControlsSupportedRinsesCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readLaundryWasherControlsSupportedRinsesAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.LaundryWasherControls.ID, ClusterIDMapping.LaundryWasherControls.Attribute.SupportedRinses.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.LaundryWasherControlsCluster) cluster).readSupportedRinsesAttribute(
//              (ChipClusters.LaundryWasherControlsCluster.SupportedRinsesAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLaundryWasherControlsClusterSupportedRinsesAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readLaundryWasherControlsSupportedRinsesCommandParams
        );
        result.put("readSupportedRinsesAttribute", readLaundryWasherControlsSupportedRinsesAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readLaundryWasherControlsGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readLaundryWasherControlsGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.LaundryWasherControls.ID, ClusterIDMapping.LaundryWasherControls.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.LaundryWasherControlsCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.LaundryWasherControlsCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLaundryWasherControlsClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readLaundryWasherControlsGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readLaundryWasherControlsGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readLaundryWasherControlsAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readLaundryWasherControlsAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.LaundryWasherControls.ID, ClusterIDMapping.LaundryWasherControls.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.LaundryWasherControlsCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.LaundryWasherControlsCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLaundryWasherControlsClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readLaundryWasherControlsAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readLaundryWasherControlsAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readLaundryWasherControlsEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readLaundryWasherControlsEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.LaundryWasherControls.ID, ClusterIDMapping.LaundryWasherControls.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.LaundryWasherControlsCluster) cluster).readEventListAttribute(
//              (ChipClusters.LaundryWasherControlsCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLaundryWasherControlsClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readLaundryWasherControlsEventListCommandParams
        );
        result.put("readEventListAttribute", readLaundryWasherControlsEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readLaundryWasherControlsAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readLaundryWasherControlsAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.LaundryWasherControls.ID, ClusterIDMapping.LaundryWasherControls.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.LaundryWasherControlsCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.LaundryWasherControlsCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLaundryWasherControlsClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readLaundryWasherControlsAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readLaundryWasherControlsAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readLaundryWasherControlsFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readLaundryWasherControlsFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.LaundryWasherControls.ID, ClusterIDMapping.LaundryWasherControls.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.LaundryWasherControlsCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readLaundryWasherControlsFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readLaundryWasherControlsFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readLaundryWasherControlsClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readLaundryWasherControlsClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.LaundryWasherControls.ID, ClusterIDMapping.LaundryWasherControls.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.LaundryWasherControlsCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readLaundryWasherControlsClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readLaundryWasherControlsClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readRvcRunModeInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readRvcRunModeSupportedModesCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readRvcRunModeSupportedModesAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.RvcRunMode.ID, ClusterIDMapping.RvcRunMode.Attribute.SupportedModes.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.RvcRunModeCluster) cluster).readSupportedModesAttribute(
//              (ChipClusters.RvcRunModeCluster.SupportedModesAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedRvcRunModeClusterSupportedModesAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readRvcRunModeSupportedModesCommandParams
        );
        result.put("readSupportedModesAttribute", readRvcRunModeSupportedModesAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readRvcRunModeCurrentModeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readRvcRunModeCurrentModeAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.RvcRunMode.ID, ClusterIDMapping.RvcRunMode.Attribute.CurrentMode.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.RvcRunModeCluster) cluster).readCurrentModeAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readRvcRunModeCurrentModeCommandParams
        );
        result.put("readCurrentModeAttribute", readRvcRunModeCurrentModeAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readRvcRunModeStartUpModeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readRvcRunModeStartUpModeAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.RvcRunMode.ID, ClusterIDMapping.RvcRunMode.Attribute.StartUpMode.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.RvcRunModeCluster) cluster).readStartUpModeAttribute(
//              (ChipClusters.RvcRunModeCluster.StartUpModeAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedRvcRunModeClusterStartUpModeAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readRvcRunModeStartUpModeCommandParams
        );
        result.put("readStartUpModeAttribute", readRvcRunModeStartUpModeAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readRvcRunModeOnModeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readRvcRunModeOnModeAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.RvcRunMode.ID, ClusterIDMapping.RvcRunMode.Attribute.OnMode.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.RvcRunModeCluster) cluster).readOnModeAttribute(
//              (ChipClusters.RvcRunModeCluster.OnModeAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedRvcRunModeClusterOnModeAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readRvcRunModeOnModeCommandParams
        );
        result.put("readOnModeAttribute", readRvcRunModeOnModeAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readRvcRunModeGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readRvcRunModeGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.RvcRunMode.ID, ClusterIDMapping.RvcRunMode.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.RvcRunModeCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.RvcRunModeCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedRvcRunModeClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readRvcRunModeGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readRvcRunModeGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readRvcRunModeAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readRvcRunModeAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.RvcRunMode.ID, ClusterIDMapping.RvcRunMode.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.RvcRunModeCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.RvcRunModeCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedRvcRunModeClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readRvcRunModeAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readRvcRunModeAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readRvcRunModeEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readRvcRunModeEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.RvcRunMode.ID, ClusterIDMapping.RvcRunMode.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.RvcRunModeCluster) cluster).readEventListAttribute(
//              (ChipClusters.RvcRunModeCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedRvcRunModeClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readRvcRunModeEventListCommandParams
        );
        result.put("readEventListAttribute", readRvcRunModeEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readRvcRunModeAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readRvcRunModeAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.RvcRunMode.ID, ClusterIDMapping.RvcRunMode.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.RvcRunModeCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.RvcRunModeCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedRvcRunModeClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readRvcRunModeAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readRvcRunModeAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readRvcRunModeFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readRvcRunModeFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.RvcRunMode.ID, ClusterIDMapping.RvcRunMode.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.RvcRunModeCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readRvcRunModeFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readRvcRunModeFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readRvcRunModeClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readRvcRunModeClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.RvcRunMode.ID, ClusterIDMapping.RvcRunMode.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.RvcRunModeCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readRvcRunModeClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readRvcRunModeClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readRvcCleanModeInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readRvcCleanModeSupportedModesCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readRvcCleanModeSupportedModesAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.RvcCleanMode.ID, ClusterIDMapping.RvcCleanMode.Attribute.SupportedModes.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.RvcCleanModeCluster) cluster).readSupportedModesAttribute(
//              (ChipClusters.RvcCleanModeCluster.SupportedModesAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedRvcCleanModeClusterSupportedModesAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readRvcCleanModeSupportedModesCommandParams
        );
        result.put("readSupportedModesAttribute", readRvcCleanModeSupportedModesAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readRvcCleanModeCurrentModeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readRvcCleanModeCurrentModeAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.RvcCleanMode.ID, ClusterIDMapping.RvcCleanMode.Attribute.CurrentMode.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.RvcCleanModeCluster) cluster).readCurrentModeAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readRvcCleanModeCurrentModeCommandParams
        );
        result.put("readCurrentModeAttribute", readRvcCleanModeCurrentModeAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readRvcCleanModeStartUpModeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readRvcCleanModeStartUpModeAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.RvcCleanMode.ID, ClusterIDMapping.RvcCleanMode.Attribute.StartUpMode.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.RvcCleanModeCluster) cluster).readStartUpModeAttribute(
//              (ChipClusters.RvcCleanModeCluster.StartUpModeAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedRvcCleanModeClusterStartUpModeAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readRvcCleanModeStartUpModeCommandParams
        );
        result.put("readStartUpModeAttribute", readRvcCleanModeStartUpModeAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readRvcCleanModeOnModeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readRvcCleanModeOnModeAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.RvcCleanMode.ID, ClusterIDMapping.RvcCleanMode.Attribute.OnMode.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.RvcCleanModeCluster) cluster).readOnModeAttribute(
//              (ChipClusters.RvcCleanModeCluster.OnModeAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedRvcCleanModeClusterOnModeAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readRvcCleanModeOnModeCommandParams
        );
        result.put("readOnModeAttribute", readRvcCleanModeOnModeAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readRvcCleanModeGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readRvcCleanModeGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.RvcCleanMode.ID, ClusterIDMapping.RvcCleanMode.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.RvcCleanModeCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.RvcCleanModeCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedRvcCleanModeClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readRvcCleanModeGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readRvcCleanModeGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readRvcCleanModeAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readRvcCleanModeAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.RvcCleanMode.ID, ClusterIDMapping.RvcCleanMode.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.RvcCleanModeCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.RvcCleanModeCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedRvcCleanModeClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readRvcCleanModeAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readRvcCleanModeAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readRvcCleanModeEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readRvcCleanModeEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.RvcCleanMode.ID, ClusterIDMapping.RvcCleanMode.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.RvcCleanModeCluster) cluster).readEventListAttribute(
//              (ChipClusters.RvcCleanModeCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedRvcCleanModeClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readRvcCleanModeEventListCommandParams
        );
        result.put("readEventListAttribute", readRvcCleanModeEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readRvcCleanModeAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readRvcCleanModeAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.RvcCleanMode.ID, ClusterIDMapping.RvcCleanMode.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.RvcCleanModeCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.RvcCleanModeCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedRvcCleanModeClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readRvcCleanModeAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readRvcCleanModeAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readRvcCleanModeFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readRvcCleanModeFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.RvcCleanMode.ID, ClusterIDMapping.RvcCleanMode.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.RvcCleanModeCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readRvcCleanModeFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readRvcCleanModeFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readRvcCleanModeClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readRvcCleanModeClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.RvcCleanMode.ID, ClusterIDMapping.RvcCleanMode.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.RvcCleanModeCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readRvcCleanModeClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readRvcCleanModeClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readTemperatureControlInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readTemperatureControlTemperatureSetpointCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTemperatureControlTemperatureSetpointAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TemperatureControl.ID, ClusterIDMapping.TemperatureControl.Attribute.TemperatureSetpoint.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TemperatureControlCluster) cluster).readTemperatureSetpointAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTemperatureControlTemperatureSetpointCommandParams
        );
        result.put("readTemperatureSetpointAttribute", readTemperatureControlTemperatureSetpointAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTemperatureControlMinTemperatureCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTemperatureControlMinTemperatureAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TemperatureControl.ID, ClusterIDMapping.TemperatureControl.Attribute.MinTemperature.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TemperatureControlCluster) cluster).readMinTemperatureAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTemperatureControlMinTemperatureCommandParams
        );
        result.put("readMinTemperatureAttribute", readTemperatureControlMinTemperatureAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTemperatureControlMaxTemperatureCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTemperatureControlMaxTemperatureAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TemperatureControl.ID, ClusterIDMapping.TemperatureControl.Attribute.MaxTemperature.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TemperatureControlCluster) cluster).readMaxTemperatureAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTemperatureControlMaxTemperatureCommandParams
        );
        result.put("readMaxTemperatureAttribute", readTemperatureControlMaxTemperatureAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTemperatureControlStepCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTemperatureControlStepAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TemperatureControl.ID, ClusterIDMapping.TemperatureControl.Attribute.Step.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TemperatureControlCluster) cluster).readStepAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTemperatureControlStepCommandParams
        );
        result.put("readStepAttribute", readTemperatureControlStepAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTemperatureControlSelectedTemperatureLevelCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTemperatureControlSelectedTemperatureLevelAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TemperatureControl.ID, ClusterIDMapping.TemperatureControl.Attribute.SelectedTemperatureLevel.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TemperatureControlCluster) cluster).readSelectedTemperatureLevelAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTemperatureControlSelectedTemperatureLevelCommandParams
        );
        result.put("readSelectedTemperatureLevelAttribute", readTemperatureControlSelectedTemperatureLevelAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTemperatureControlSupportedTemperatureLevelsCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTemperatureControlSupportedTemperatureLevelsAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TemperatureControl.ID, ClusterIDMapping.TemperatureControl.Attribute.SupportedTemperatureLevels.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TemperatureControlCluster) cluster).readSupportedTemperatureLevelsAttribute(
//              (ChipClusters.TemperatureControlCluster.SupportedTemperatureLevelsAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedTemperatureControlClusterSupportedTemperatureLevelsAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTemperatureControlSupportedTemperatureLevelsCommandParams
        );
        result.put("readSupportedTemperatureLevelsAttribute", readTemperatureControlSupportedTemperatureLevelsAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTemperatureControlGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTemperatureControlGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TemperatureControl.ID, ClusterIDMapping.TemperatureControl.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TemperatureControlCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.TemperatureControlCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedTemperatureControlClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTemperatureControlGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readTemperatureControlGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTemperatureControlAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTemperatureControlAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TemperatureControl.ID, ClusterIDMapping.TemperatureControl.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TemperatureControlCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.TemperatureControlCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedTemperatureControlClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTemperatureControlAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readTemperatureControlAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTemperatureControlEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTemperatureControlEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TemperatureControl.ID, ClusterIDMapping.TemperatureControl.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TemperatureControlCluster) cluster).readEventListAttribute(
//              (ChipClusters.TemperatureControlCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedTemperatureControlClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTemperatureControlEventListCommandParams
        );
        result.put("readEventListAttribute", readTemperatureControlEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTemperatureControlAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTemperatureControlAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TemperatureControl.ID, ClusterIDMapping.TemperatureControl.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TemperatureControlCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.TemperatureControlCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedTemperatureControlClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTemperatureControlAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readTemperatureControlAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTemperatureControlFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTemperatureControlFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TemperatureControl.ID, ClusterIDMapping.TemperatureControl.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TemperatureControlCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTemperatureControlFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readTemperatureControlFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTemperatureControlClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTemperatureControlClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TemperatureControl.ID, ClusterIDMapping.TemperatureControl.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TemperatureControlCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTemperatureControlClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readTemperatureControlClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readRefrigeratorAlarmInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readRefrigeratorAlarmMaskCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readRefrigeratorAlarmMaskAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.RefrigeratorAlarm.ID, ClusterIDMapping.RefrigeratorAlarm.Attribute.Mask.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.RefrigeratorAlarmCluster) cluster).readMaskAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readRefrigeratorAlarmMaskCommandParams
        );
        result.put("readMaskAttribute", readRefrigeratorAlarmMaskAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readRefrigeratorAlarmStateCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readRefrigeratorAlarmStateAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.RefrigeratorAlarm.ID, ClusterIDMapping.RefrigeratorAlarm.Attribute.State.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.RefrigeratorAlarmCluster) cluster).readStateAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readRefrigeratorAlarmStateCommandParams
        );
        result.put("readStateAttribute", readRefrigeratorAlarmStateAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readRefrigeratorAlarmSupportedCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readRefrigeratorAlarmSupportedAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.RefrigeratorAlarm.ID, ClusterIDMapping.RefrigeratorAlarm.Attribute.Supported.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.RefrigeratorAlarmCluster) cluster).readSupportedAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readRefrigeratorAlarmSupportedCommandParams
        );
        result.put("readSupportedAttribute", readRefrigeratorAlarmSupportedAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readRefrigeratorAlarmGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readRefrigeratorAlarmGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.RefrigeratorAlarm.ID, ClusterIDMapping.RefrigeratorAlarm.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.RefrigeratorAlarmCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.RefrigeratorAlarmCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedRefrigeratorAlarmClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readRefrigeratorAlarmGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readRefrigeratorAlarmGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readRefrigeratorAlarmAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readRefrigeratorAlarmAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.RefrigeratorAlarm.ID, ClusterIDMapping.RefrigeratorAlarm.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.RefrigeratorAlarmCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.RefrigeratorAlarmCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedRefrigeratorAlarmClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readRefrigeratorAlarmAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readRefrigeratorAlarmAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readRefrigeratorAlarmEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readRefrigeratorAlarmEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.RefrigeratorAlarm.ID, ClusterIDMapping.RefrigeratorAlarm.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.RefrigeratorAlarmCluster) cluster).readEventListAttribute(
//              (ChipClusters.RefrigeratorAlarmCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedRefrigeratorAlarmClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readRefrigeratorAlarmEventListCommandParams
        );
        result.put("readEventListAttribute", readRefrigeratorAlarmEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readRefrigeratorAlarmAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readRefrigeratorAlarmAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.RefrigeratorAlarm.ID, ClusterIDMapping.RefrigeratorAlarm.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.RefrigeratorAlarmCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.RefrigeratorAlarmCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedRefrigeratorAlarmClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readRefrigeratorAlarmAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readRefrigeratorAlarmAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readRefrigeratorAlarmFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readRefrigeratorAlarmFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.RefrigeratorAlarm.ID, ClusterIDMapping.RefrigeratorAlarm.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.RefrigeratorAlarmCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readRefrigeratorAlarmFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readRefrigeratorAlarmFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readRefrigeratorAlarmClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readRefrigeratorAlarmClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.RefrigeratorAlarm.ID, ClusterIDMapping.RefrigeratorAlarm.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.RefrigeratorAlarmCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readRefrigeratorAlarmClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readRefrigeratorAlarmClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readDishwasherModeInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readDishwasherModeSupportedModesCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDishwasherModeSupportedModesAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DishwasherMode.ID, ClusterIDMapping.DishwasherMode.Attribute.SupportedModes.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DishwasherModeCluster) cluster).readSupportedModesAttribute(
//              (ChipClusters.DishwasherModeCluster.SupportedModesAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedDishwasherModeClusterSupportedModesAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDishwasherModeSupportedModesCommandParams
        );
        result.put("readSupportedModesAttribute", readDishwasherModeSupportedModesAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDishwasherModeCurrentModeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDishwasherModeCurrentModeAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DishwasherMode.ID, ClusterIDMapping.DishwasherMode.Attribute.CurrentMode.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DishwasherModeCluster) cluster).readCurrentModeAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDishwasherModeCurrentModeCommandParams
        );
        result.put("readCurrentModeAttribute", readDishwasherModeCurrentModeAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDishwasherModeStartUpModeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDishwasherModeStartUpModeAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DishwasherMode.ID, ClusterIDMapping.DishwasherMode.Attribute.StartUpMode.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DishwasherModeCluster) cluster).readStartUpModeAttribute(
//              (ChipClusters.DishwasherModeCluster.StartUpModeAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedDishwasherModeClusterStartUpModeAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDishwasherModeStartUpModeCommandParams
        );
        result.put("readStartUpModeAttribute", readDishwasherModeStartUpModeAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDishwasherModeOnModeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDishwasherModeOnModeAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DishwasherMode.ID, ClusterIDMapping.DishwasherMode.Attribute.OnMode.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DishwasherModeCluster) cluster).readOnModeAttribute(
//              (ChipClusters.DishwasherModeCluster.OnModeAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedDishwasherModeClusterOnModeAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDishwasherModeOnModeCommandParams
        );
        result.put("readOnModeAttribute", readDishwasherModeOnModeAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDishwasherModeGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDishwasherModeGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DishwasherMode.ID, ClusterIDMapping.DishwasherMode.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DishwasherModeCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.DishwasherModeCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedDishwasherModeClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDishwasherModeGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readDishwasherModeGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDishwasherModeAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDishwasherModeAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DishwasherMode.ID, ClusterIDMapping.DishwasherMode.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DishwasherModeCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.DishwasherModeCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedDishwasherModeClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDishwasherModeAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readDishwasherModeAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDishwasherModeEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDishwasherModeEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DishwasherMode.ID, ClusterIDMapping.DishwasherMode.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DishwasherModeCluster) cluster).readEventListAttribute(
//              (ChipClusters.DishwasherModeCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedDishwasherModeClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDishwasherModeEventListCommandParams
        );
        result.put("readEventListAttribute", readDishwasherModeEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDishwasherModeAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDishwasherModeAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DishwasherMode.ID, ClusterIDMapping.DishwasherMode.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DishwasherModeCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.DishwasherModeCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedDishwasherModeClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDishwasherModeAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readDishwasherModeAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDishwasherModeFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDishwasherModeFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DishwasherMode.ID, ClusterIDMapping.DishwasherMode.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DishwasherModeCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDishwasherModeFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readDishwasherModeFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDishwasherModeClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDishwasherModeClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DishwasherMode.ID, ClusterIDMapping.DishwasherMode.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DishwasherModeCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDishwasherModeClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readDishwasherModeClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readAirQualityInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readAirQualityAirQualityCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readAirQualityAirQualityAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.AirQuality.ID, ClusterIDMapping.AirQuality.Attribute.AirQuality.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.AirQualityCluster) cluster).readAirQualityAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readAirQualityAirQualityCommandParams
        );
        result.put("readAirQualityAttribute", readAirQualityAirQualityAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readAirQualityGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readAirQualityGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.AirQuality.ID, ClusterIDMapping.AirQuality.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.AirQualityCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.AirQualityCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedAirQualityClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readAirQualityGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readAirQualityGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readAirQualityAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readAirQualityAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.AirQuality.ID, ClusterIDMapping.AirQuality.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.AirQualityCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.AirQualityCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedAirQualityClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readAirQualityAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readAirQualityAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readAirQualityEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readAirQualityEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.AirQuality.ID, ClusterIDMapping.AirQuality.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.AirQualityCluster) cluster).readEventListAttribute(
//              (ChipClusters.AirQualityCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedAirQualityClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readAirQualityEventListCommandParams
        );
        result.put("readEventListAttribute", readAirQualityEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readAirQualityAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readAirQualityAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.AirQuality.ID, ClusterIDMapping.AirQuality.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.AirQualityCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.AirQualityCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedAirQualityClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readAirQualityAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readAirQualityAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readAirQualityFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readAirQualityFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.AirQuality.ID, ClusterIDMapping.AirQuality.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.AirQualityCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readAirQualityFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readAirQualityFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readAirQualityClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readAirQualityClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.AirQuality.ID, ClusterIDMapping.AirQuality.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.AirQualityCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readAirQualityClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readAirQualityClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readSmokeCoAlarmInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readSmokeCoAlarmExpressedStateCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSmokeCoAlarmExpressedStateAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SmokeCoAlarm.ID, ClusterIDMapping.SmokeCoAlarm.Attribute.ExpressedState.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SmokeCoAlarmCluster) cluster).readExpressedStateAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSmokeCoAlarmExpressedStateCommandParams
        );
        result.put("readExpressedStateAttribute", readSmokeCoAlarmExpressedStateAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSmokeCoAlarmSmokeStateCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSmokeCoAlarmSmokeStateAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SmokeCoAlarm.ID, ClusterIDMapping.SmokeCoAlarm.Attribute.SmokeState.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SmokeCoAlarmCluster) cluster).readSmokeStateAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSmokeCoAlarmSmokeStateCommandParams
        );
        result.put("readSmokeStateAttribute", readSmokeCoAlarmSmokeStateAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSmokeCoAlarmCOStateCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSmokeCoAlarmCOStateAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SmokeCoAlarm.ID, ClusterIDMapping.SmokeCoAlarm.Attribute.COState.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SmokeCoAlarmCluster) cluster).readCOStateAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSmokeCoAlarmCOStateCommandParams
        );
        result.put("readCOStateAttribute", readSmokeCoAlarmCOStateAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSmokeCoAlarmBatteryAlertCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSmokeCoAlarmBatteryAlertAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SmokeCoAlarm.ID, ClusterIDMapping.SmokeCoAlarm.Attribute.BatteryAlert.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SmokeCoAlarmCluster) cluster).readBatteryAlertAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSmokeCoAlarmBatteryAlertCommandParams
        );
        result.put("readBatteryAlertAttribute", readSmokeCoAlarmBatteryAlertAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSmokeCoAlarmDeviceMutedCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSmokeCoAlarmDeviceMutedAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SmokeCoAlarm.ID, ClusterIDMapping.SmokeCoAlarm.Attribute.DeviceMuted.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SmokeCoAlarmCluster) cluster).readDeviceMutedAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSmokeCoAlarmDeviceMutedCommandParams
        );
        result.put("readDeviceMutedAttribute", readSmokeCoAlarmDeviceMutedAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSmokeCoAlarmTestInProgressCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSmokeCoAlarmTestInProgressAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SmokeCoAlarm.ID, ClusterIDMapping.SmokeCoAlarm.Attribute.TestInProgress.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SmokeCoAlarmCluster) cluster).readTestInProgressAttribute(
//              (ChipClusters.BooleanAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBooleanAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSmokeCoAlarmTestInProgressCommandParams
        );
        result.put("readTestInProgressAttribute", readSmokeCoAlarmTestInProgressAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSmokeCoAlarmHardwareFaultAlertCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSmokeCoAlarmHardwareFaultAlertAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SmokeCoAlarm.ID, ClusterIDMapping.SmokeCoAlarm.Attribute.HardwareFaultAlert.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SmokeCoAlarmCluster) cluster).readHardwareFaultAlertAttribute(
//              (ChipClusters.BooleanAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBooleanAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSmokeCoAlarmHardwareFaultAlertCommandParams
        );
        result.put("readHardwareFaultAlertAttribute", readSmokeCoAlarmHardwareFaultAlertAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSmokeCoAlarmEndOfServiceAlertCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSmokeCoAlarmEndOfServiceAlertAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SmokeCoAlarm.ID, ClusterIDMapping.SmokeCoAlarm.Attribute.EndOfServiceAlert.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SmokeCoAlarmCluster) cluster).readEndOfServiceAlertAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSmokeCoAlarmEndOfServiceAlertCommandParams
        );
        result.put("readEndOfServiceAlertAttribute", readSmokeCoAlarmEndOfServiceAlertAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSmokeCoAlarmInterconnectSmokeAlarmCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSmokeCoAlarmInterconnectSmokeAlarmAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SmokeCoAlarm.ID, ClusterIDMapping.SmokeCoAlarm.Attribute.InterconnectSmokeAlarm.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SmokeCoAlarmCluster) cluster).readInterconnectSmokeAlarmAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSmokeCoAlarmInterconnectSmokeAlarmCommandParams
        );
        result.put("readInterconnectSmokeAlarmAttribute", readSmokeCoAlarmInterconnectSmokeAlarmAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSmokeCoAlarmInterconnectCOAlarmCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSmokeCoAlarmInterconnectCOAlarmAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SmokeCoAlarm.ID, ClusterIDMapping.SmokeCoAlarm.Attribute.InterconnectCOAlarm.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SmokeCoAlarmCluster) cluster).readInterconnectCOAlarmAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSmokeCoAlarmInterconnectCOAlarmCommandParams
        );
        result.put("readInterconnectCOAlarmAttribute", readSmokeCoAlarmInterconnectCOAlarmAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSmokeCoAlarmContaminationStateCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSmokeCoAlarmContaminationStateAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SmokeCoAlarm.ID, ClusterIDMapping.SmokeCoAlarm.Attribute.ContaminationState.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SmokeCoAlarmCluster) cluster).readContaminationStateAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSmokeCoAlarmContaminationStateCommandParams
        );
        result.put("readContaminationStateAttribute", readSmokeCoAlarmContaminationStateAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSmokeCoAlarmSensitivityLevelCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSmokeCoAlarmSensitivityLevelAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SmokeCoAlarm.ID, ClusterIDMapping.SmokeCoAlarm.Attribute.SensitivityLevel.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SmokeCoAlarmCluster) cluster).readSensitivityLevelAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSmokeCoAlarmSensitivityLevelCommandParams
        );
        result.put("readSensitivityLevelAttribute", readSmokeCoAlarmSensitivityLevelAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSmokeCoAlarmExpiryDateCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSmokeCoAlarmExpiryDateAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SmokeCoAlarm.ID, ClusterIDMapping.SmokeCoAlarm.Attribute.ExpiryDate.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SmokeCoAlarmCluster) cluster).readExpiryDateAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSmokeCoAlarmExpiryDateCommandParams
        );
        result.put("readExpiryDateAttribute", readSmokeCoAlarmExpiryDateAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSmokeCoAlarmGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSmokeCoAlarmGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SmokeCoAlarm.ID, ClusterIDMapping.SmokeCoAlarm.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SmokeCoAlarmCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.SmokeCoAlarmCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedSmokeCoAlarmClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSmokeCoAlarmGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readSmokeCoAlarmGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSmokeCoAlarmAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSmokeCoAlarmAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SmokeCoAlarm.ID, ClusterIDMapping.SmokeCoAlarm.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SmokeCoAlarmCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.SmokeCoAlarmCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedSmokeCoAlarmClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSmokeCoAlarmAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readSmokeCoAlarmAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSmokeCoAlarmEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSmokeCoAlarmEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SmokeCoAlarm.ID, ClusterIDMapping.SmokeCoAlarm.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SmokeCoAlarmCluster) cluster).readEventListAttribute(
//              (ChipClusters.SmokeCoAlarmCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedSmokeCoAlarmClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSmokeCoAlarmEventListCommandParams
        );
        result.put("readEventListAttribute", readSmokeCoAlarmEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSmokeCoAlarmAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSmokeCoAlarmAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SmokeCoAlarm.ID, ClusterIDMapping.SmokeCoAlarm.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SmokeCoAlarmCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.SmokeCoAlarmCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedSmokeCoAlarmClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSmokeCoAlarmAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readSmokeCoAlarmAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSmokeCoAlarmFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSmokeCoAlarmFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SmokeCoAlarm.ID, ClusterIDMapping.SmokeCoAlarm.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SmokeCoAlarmCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSmokeCoAlarmFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readSmokeCoAlarmFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSmokeCoAlarmClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSmokeCoAlarmClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SmokeCoAlarm.ID, ClusterIDMapping.SmokeCoAlarm.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SmokeCoAlarmCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSmokeCoAlarmClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readSmokeCoAlarmClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readDishwasherAlarmInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readDishwasherAlarmMaskCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDishwasherAlarmMaskAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DishwasherAlarm.ID, ClusterIDMapping.DishwasherAlarm.Attribute.Mask.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DishwasherAlarmCluster) cluster).readMaskAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDishwasherAlarmMaskCommandParams
        );
        result.put("readMaskAttribute", readDishwasherAlarmMaskAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDishwasherAlarmLatchCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDishwasherAlarmLatchAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DishwasherAlarm.ID, ClusterIDMapping.DishwasherAlarm.Attribute.Latch.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DishwasherAlarmCluster) cluster).readLatchAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDishwasherAlarmLatchCommandParams
        );
        result.put("readLatchAttribute", readDishwasherAlarmLatchAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDishwasherAlarmStateCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDishwasherAlarmStateAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DishwasherAlarm.ID, ClusterIDMapping.DishwasherAlarm.Attribute.State.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DishwasherAlarmCluster) cluster).readStateAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDishwasherAlarmStateCommandParams
        );
        result.put("readStateAttribute", readDishwasherAlarmStateAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDishwasherAlarmSupportedCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDishwasherAlarmSupportedAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DishwasherAlarm.ID, ClusterIDMapping.DishwasherAlarm.Attribute.Supported.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DishwasherAlarmCluster) cluster).readSupportedAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDishwasherAlarmSupportedCommandParams
        );
        result.put("readSupportedAttribute", readDishwasherAlarmSupportedAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDishwasherAlarmGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDishwasherAlarmGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DishwasherAlarm.ID, ClusterIDMapping.DishwasherAlarm.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DishwasherAlarmCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.DishwasherAlarmCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedDishwasherAlarmClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDishwasherAlarmGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readDishwasherAlarmGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDishwasherAlarmAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDishwasherAlarmAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DishwasherAlarm.ID, ClusterIDMapping.DishwasherAlarm.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DishwasherAlarmCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.DishwasherAlarmCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedDishwasherAlarmClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDishwasherAlarmAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readDishwasherAlarmAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDishwasherAlarmEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDishwasherAlarmEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DishwasherAlarm.ID, ClusterIDMapping.DishwasherAlarm.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DishwasherAlarmCluster) cluster).readEventListAttribute(
//              (ChipClusters.DishwasherAlarmCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedDishwasherAlarmClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDishwasherAlarmEventListCommandParams
        );
        result.put("readEventListAttribute", readDishwasherAlarmEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDishwasherAlarmAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDishwasherAlarmAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DishwasherAlarm.ID, ClusterIDMapping.DishwasherAlarm.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DishwasherAlarmCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.DishwasherAlarmCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedDishwasherAlarmClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDishwasherAlarmAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readDishwasherAlarmAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDishwasherAlarmFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDishwasherAlarmFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DishwasherAlarm.ID, ClusterIDMapping.DishwasherAlarm.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DishwasherAlarmCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDishwasherAlarmFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readDishwasherAlarmFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDishwasherAlarmClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDishwasherAlarmClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DishwasherAlarm.ID, ClusterIDMapping.DishwasherAlarm.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DishwasherAlarmCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDishwasherAlarmClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readDishwasherAlarmClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readOperationalStateInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readOperationalStatePhaseListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOperationalStatePhaseListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OperationalState.ID, ClusterIDMapping.OperationalState.Attribute.PhaseList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OperationalStateCluster) cluster).readPhaseListAttribute(
//              (ChipClusters.OperationalStateCluster.PhaseListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedOperationalStateClusterPhaseListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOperationalStatePhaseListCommandParams
        );
        result.put("readPhaseListAttribute", readOperationalStatePhaseListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOperationalStateCurrentPhaseCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOperationalStateCurrentPhaseAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OperationalState.ID, ClusterIDMapping.OperationalState.Attribute.CurrentPhase.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OperationalStateCluster) cluster).readCurrentPhaseAttribute(
//              (ChipClusters.OperationalStateCluster.CurrentPhaseAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedOperationalStateClusterCurrentPhaseAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOperationalStateCurrentPhaseCommandParams
        );
        result.put("readCurrentPhaseAttribute", readOperationalStateCurrentPhaseAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOperationalStateCountdownTimeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOperationalStateCountdownTimeAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OperationalState.ID, ClusterIDMapping.OperationalState.Attribute.CountdownTime.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OperationalStateCluster) cluster).readCountdownTimeAttribute(
//              (ChipClusters.OperationalStateCluster.CountdownTimeAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedOperationalStateClusterCountdownTimeAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOperationalStateCountdownTimeCommandParams
        );
        result.put("readCountdownTimeAttribute", readOperationalStateCountdownTimeAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOperationalStateOperationalStateListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOperationalStateOperationalStateListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OperationalState.ID, ClusterIDMapping.OperationalState.Attribute.OperationalStateList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OperationalStateCluster) cluster).readOperationalStateListAttribute(
//              (ChipClusters.OperationalStateCluster.OperationalStateListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedOperationalStateClusterOperationalStateListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOperationalStateOperationalStateListCommandParams
        );
        result.put("readOperationalStateListAttribute", readOperationalStateOperationalStateListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOperationalStateGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOperationalStateGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OperationalState.ID, ClusterIDMapping.OperationalState.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OperationalStateCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.OperationalStateCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedOperationalStateClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOperationalStateGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readOperationalStateGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOperationalStateAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOperationalStateAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OperationalState.ID, ClusterIDMapping.OperationalState.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OperationalStateCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.OperationalStateCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedOperationalStateClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOperationalStateAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readOperationalStateAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOperationalStateEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOperationalStateEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OperationalState.ID, ClusterIDMapping.OperationalState.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OperationalStateCluster) cluster).readEventListAttribute(
//              (ChipClusters.OperationalStateCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedOperationalStateClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOperationalStateEventListCommandParams
        );
        result.put("readEventListAttribute", readOperationalStateEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOperationalStateAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOperationalStateAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OperationalState.ID, ClusterIDMapping.OperationalState.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OperationalStateCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.OperationalStateCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedOperationalStateClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOperationalStateAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readOperationalStateAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOperationalStateFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOperationalStateFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OperationalState.ID, ClusterIDMapping.OperationalState.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OperationalStateCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOperationalStateFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readOperationalStateFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOperationalStateClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOperationalStateClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OperationalState.ID, ClusterIDMapping.OperationalState.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OperationalStateCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOperationalStateClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readOperationalStateClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readRvcOperationalStateInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readRvcOperationalStatePhaseListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readRvcOperationalStatePhaseListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.RvcOperationalState.ID, ClusterIDMapping.RvcOperationalState.Attribute.PhaseList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.RvcOperationalStateCluster) cluster).readPhaseListAttribute(
//              (ChipClusters.RvcOperationalStateCluster.PhaseListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedRvcOperationalStateClusterPhaseListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readRvcOperationalStatePhaseListCommandParams
        );
        result.put("readPhaseListAttribute", readRvcOperationalStatePhaseListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readRvcOperationalStateCurrentPhaseCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readRvcOperationalStateCurrentPhaseAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.RvcOperationalState.ID, ClusterIDMapping.RvcOperationalState.Attribute.CurrentPhase.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.RvcOperationalStateCluster) cluster).readCurrentPhaseAttribute(
//              (ChipClusters.RvcOperationalStateCluster.CurrentPhaseAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedRvcOperationalStateClusterCurrentPhaseAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readRvcOperationalStateCurrentPhaseCommandParams
        );
        result.put("readCurrentPhaseAttribute", readRvcOperationalStateCurrentPhaseAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readRvcOperationalStateCountdownTimeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readRvcOperationalStateCountdownTimeAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.RvcOperationalState.ID, ClusterIDMapping.RvcOperationalState.Attribute.CountdownTime.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.RvcOperationalStateCluster) cluster).readCountdownTimeAttribute(
//              (ChipClusters.RvcOperationalStateCluster.CountdownTimeAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedRvcOperationalStateClusterCountdownTimeAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readRvcOperationalStateCountdownTimeCommandParams
        );
        result.put("readCountdownTimeAttribute", readRvcOperationalStateCountdownTimeAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readRvcOperationalStateOperationalStateListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readRvcOperationalStateOperationalStateListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.RvcOperationalState.ID, ClusterIDMapping.RvcOperationalState.Attribute.OperationalStateList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.RvcOperationalStateCluster) cluster).readOperationalStateListAttribute(
//              (ChipClusters.RvcOperationalStateCluster.OperationalStateListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedRvcOperationalStateClusterOperationalStateListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readRvcOperationalStateOperationalStateListCommandParams
        );
        result.put("readOperationalStateListAttribute", readRvcOperationalStateOperationalStateListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readRvcOperationalStateGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readRvcOperationalStateGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.RvcOperationalState.ID, ClusterIDMapping.RvcOperationalState.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.RvcOperationalStateCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.RvcOperationalStateCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedRvcOperationalStateClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readRvcOperationalStateGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readRvcOperationalStateGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readRvcOperationalStateAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readRvcOperationalStateAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.RvcOperationalState.ID, ClusterIDMapping.RvcOperationalState.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.RvcOperationalStateCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.RvcOperationalStateCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedRvcOperationalStateClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readRvcOperationalStateAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readRvcOperationalStateAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readRvcOperationalStateEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readRvcOperationalStateEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.RvcOperationalState.ID, ClusterIDMapping.RvcOperationalState.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.RvcOperationalStateCluster) cluster).readEventListAttribute(
//              (ChipClusters.RvcOperationalStateCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedRvcOperationalStateClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readRvcOperationalStateEventListCommandParams
        );
        result.put("readEventListAttribute", readRvcOperationalStateEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readRvcOperationalStateAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readRvcOperationalStateAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.RvcOperationalState.ID, ClusterIDMapping.RvcOperationalState.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.RvcOperationalStateCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.RvcOperationalStateCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedRvcOperationalStateClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readRvcOperationalStateAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readRvcOperationalStateAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readRvcOperationalStateFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readRvcOperationalStateFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.RvcOperationalState.ID, ClusterIDMapping.RvcOperationalState.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.RvcOperationalStateCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readRvcOperationalStateFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readRvcOperationalStateFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readRvcOperationalStateClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readRvcOperationalStateClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.RvcOperationalState.ID, ClusterIDMapping.RvcOperationalState.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.RvcOperationalStateCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readRvcOperationalStateClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readRvcOperationalStateClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readHepaFilterMonitoringInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readHepaFilterMonitoringConditionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readHepaFilterMonitoringConditionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.HepaFilterMonitoring.ID, ClusterIDMapping.HepaFilterMonitoring.Attribute.Condition.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.HepaFilterMonitoringCluster) cluster).readConditionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readHepaFilterMonitoringConditionCommandParams
        );
        result.put("readConditionAttribute", readHepaFilterMonitoringConditionAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readHepaFilterMonitoringDegradationDirectionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readHepaFilterMonitoringDegradationDirectionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.HepaFilterMonitoring.ID, ClusterIDMapping.HepaFilterMonitoring.Attribute.DegradationDirection.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.HepaFilterMonitoringCluster) cluster).readDegradationDirectionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readHepaFilterMonitoringDegradationDirectionCommandParams
        );
        result.put("readDegradationDirectionAttribute", readHepaFilterMonitoringDegradationDirectionAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readHepaFilterMonitoringChangeIndicationCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readHepaFilterMonitoringChangeIndicationAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.HepaFilterMonitoring.ID, ClusterIDMapping.HepaFilterMonitoring.Attribute.ChangeIndication.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.HepaFilterMonitoringCluster) cluster).readChangeIndicationAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readHepaFilterMonitoringChangeIndicationCommandParams
        );
        result.put("readChangeIndicationAttribute", readHepaFilterMonitoringChangeIndicationAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readHepaFilterMonitoringInPlaceIndicatorCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readHepaFilterMonitoringInPlaceIndicatorAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.HepaFilterMonitoring.ID, ClusterIDMapping.HepaFilterMonitoring.Attribute.InPlaceIndicator.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.HepaFilterMonitoringCluster) cluster).readInPlaceIndicatorAttribute(
//              (ChipClusters.BooleanAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBooleanAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readHepaFilterMonitoringInPlaceIndicatorCommandParams
        );
        result.put("readInPlaceIndicatorAttribute", readHepaFilterMonitoringInPlaceIndicatorAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readHepaFilterMonitoringGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readHepaFilterMonitoringGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.HepaFilterMonitoring.ID, ClusterIDMapping.HepaFilterMonitoring.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.HepaFilterMonitoringCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.HepaFilterMonitoringCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedHepaFilterMonitoringClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readHepaFilterMonitoringGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readHepaFilterMonitoringGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readHepaFilterMonitoringAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readHepaFilterMonitoringAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.HepaFilterMonitoring.ID, ClusterIDMapping.HepaFilterMonitoring.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.HepaFilterMonitoringCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.HepaFilterMonitoringCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedHepaFilterMonitoringClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readHepaFilterMonitoringAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readHepaFilterMonitoringAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readHepaFilterMonitoringEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readHepaFilterMonitoringEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.HepaFilterMonitoring.ID, ClusterIDMapping.HepaFilterMonitoring.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.HepaFilterMonitoringCluster) cluster).readEventListAttribute(
//              (ChipClusters.HepaFilterMonitoringCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedHepaFilterMonitoringClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readHepaFilterMonitoringEventListCommandParams
        );
        result.put("readEventListAttribute", readHepaFilterMonitoringEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readHepaFilterMonitoringAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readHepaFilterMonitoringAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.HepaFilterMonitoring.ID, ClusterIDMapping.HepaFilterMonitoring.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.HepaFilterMonitoringCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.HepaFilterMonitoringCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedHepaFilterMonitoringClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readHepaFilterMonitoringAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readHepaFilterMonitoringAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readHepaFilterMonitoringFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readHepaFilterMonitoringFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.HepaFilterMonitoring.ID, ClusterIDMapping.HepaFilterMonitoring.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.HepaFilterMonitoringCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readHepaFilterMonitoringFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readHepaFilterMonitoringFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readHepaFilterMonitoringClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readHepaFilterMonitoringClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.HepaFilterMonitoring.ID, ClusterIDMapping.HepaFilterMonitoring.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.HepaFilterMonitoringCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readHepaFilterMonitoringClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readHepaFilterMonitoringClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readActivatedCarbonFilterMonitoringInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readActivatedCarbonFilterMonitoringConditionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readActivatedCarbonFilterMonitoringConditionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ActivatedCarbonFilterMonitoring.ID, ClusterIDMapping.ActivatedCarbonFilterMonitoring.Attribute.Condition.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ActivatedCarbonFilterMonitoringCluster) cluster).readConditionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readActivatedCarbonFilterMonitoringConditionCommandParams
        );
        result.put("readConditionAttribute", readActivatedCarbonFilterMonitoringConditionAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readActivatedCarbonFilterMonitoringDegradationDirectionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readActivatedCarbonFilterMonitoringDegradationDirectionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ActivatedCarbonFilterMonitoring.ID, ClusterIDMapping.ActivatedCarbonFilterMonitoring.Attribute.DegradationDirection.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ActivatedCarbonFilterMonitoringCluster) cluster).readDegradationDirectionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readActivatedCarbonFilterMonitoringDegradationDirectionCommandParams
        );
        result.put("readDegradationDirectionAttribute", readActivatedCarbonFilterMonitoringDegradationDirectionAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readActivatedCarbonFilterMonitoringChangeIndicationCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readActivatedCarbonFilterMonitoringChangeIndicationAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ActivatedCarbonFilterMonitoring.ID, ClusterIDMapping.ActivatedCarbonFilterMonitoring.Attribute.ChangeIndication.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ActivatedCarbonFilterMonitoringCluster) cluster).readChangeIndicationAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readActivatedCarbonFilterMonitoringChangeIndicationCommandParams
        );
        result.put("readChangeIndicationAttribute", readActivatedCarbonFilterMonitoringChangeIndicationAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readActivatedCarbonFilterMonitoringInPlaceIndicatorCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readActivatedCarbonFilterMonitoringInPlaceIndicatorAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ActivatedCarbonFilterMonitoring.ID, ClusterIDMapping.ActivatedCarbonFilterMonitoring.Attribute.InPlaceIndicator.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ActivatedCarbonFilterMonitoringCluster) cluster).readInPlaceIndicatorAttribute(
//              (ChipClusters.BooleanAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBooleanAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readActivatedCarbonFilterMonitoringInPlaceIndicatorCommandParams
        );
        result.put("readInPlaceIndicatorAttribute", readActivatedCarbonFilterMonitoringInPlaceIndicatorAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readActivatedCarbonFilterMonitoringGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readActivatedCarbonFilterMonitoringGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ActivatedCarbonFilterMonitoring.ID, ClusterIDMapping.ActivatedCarbonFilterMonitoring.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ActivatedCarbonFilterMonitoringCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.ActivatedCarbonFilterMonitoringCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedActivatedCarbonFilterMonitoringClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readActivatedCarbonFilterMonitoringGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readActivatedCarbonFilterMonitoringGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readActivatedCarbonFilterMonitoringAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readActivatedCarbonFilterMonitoringAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ActivatedCarbonFilterMonitoring.ID, ClusterIDMapping.ActivatedCarbonFilterMonitoring.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ActivatedCarbonFilterMonitoringCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.ActivatedCarbonFilterMonitoringCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedActivatedCarbonFilterMonitoringClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readActivatedCarbonFilterMonitoringAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readActivatedCarbonFilterMonitoringAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readActivatedCarbonFilterMonitoringEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readActivatedCarbonFilterMonitoringEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ActivatedCarbonFilterMonitoring.ID, ClusterIDMapping.ActivatedCarbonFilterMonitoring.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ActivatedCarbonFilterMonitoringCluster) cluster).readEventListAttribute(
//              (ChipClusters.ActivatedCarbonFilterMonitoringCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedActivatedCarbonFilterMonitoringClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readActivatedCarbonFilterMonitoringEventListCommandParams
        );
        result.put("readEventListAttribute", readActivatedCarbonFilterMonitoringEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readActivatedCarbonFilterMonitoringAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readActivatedCarbonFilterMonitoringAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ActivatedCarbonFilterMonitoring.ID, ClusterIDMapping.ActivatedCarbonFilterMonitoring.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ActivatedCarbonFilterMonitoringCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.ActivatedCarbonFilterMonitoringCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedActivatedCarbonFilterMonitoringClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readActivatedCarbonFilterMonitoringAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readActivatedCarbonFilterMonitoringAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readActivatedCarbonFilterMonitoringFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readActivatedCarbonFilterMonitoringFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ActivatedCarbonFilterMonitoring.ID, ClusterIDMapping.ActivatedCarbonFilterMonitoring.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ActivatedCarbonFilterMonitoringCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readActivatedCarbonFilterMonitoringFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readActivatedCarbonFilterMonitoringFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readActivatedCarbonFilterMonitoringClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readActivatedCarbonFilterMonitoringClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ActivatedCarbonFilterMonitoring.ID, ClusterIDMapping.ActivatedCarbonFilterMonitoring.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ActivatedCarbonFilterMonitoringCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readActivatedCarbonFilterMonitoringClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readActivatedCarbonFilterMonitoringClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readCeramicFilterMonitoringInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readCeramicFilterMonitoringConditionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readCeramicFilterMonitoringConditionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.CeramicFilterMonitoring.ID, ClusterIDMapping.CeramicFilterMonitoring.Attribute.Condition.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.CeramicFilterMonitoringCluster) cluster).readConditionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readCeramicFilterMonitoringConditionCommandParams
        );
        result.put("readConditionAttribute", readCeramicFilterMonitoringConditionAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readCeramicFilterMonitoringDegradationDirectionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readCeramicFilterMonitoringDegradationDirectionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.CeramicFilterMonitoring.ID, ClusterIDMapping.CeramicFilterMonitoring.Attribute.DegradationDirection.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.CeramicFilterMonitoringCluster) cluster).readDegradationDirectionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readCeramicFilterMonitoringDegradationDirectionCommandParams
        );
        result.put("readDegradationDirectionAttribute", readCeramicFilterMonitoringDegradationDirectionAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readCeramicFilterMonitoringChangeIndicationCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readCeramicFilterMonitoringChangeIndicationAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.CeramicFilterMonitoring.ID, ClusterIDMapping.CeramicFilterMonitoring.Attribute.ChangeIndication.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.CeramicFilterMonitoringCluster) cluster).readChangeIndicationAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readCeramicFilterMonitoringChangeIndicationCommandParams
        );
        result.put("readChangeIndicationAttribute", readCeramicFilterMonitoringChangeIndicationAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readCeramicFilterMonitoringInPlaceIndicatorCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readCeramicFilterMonitoringInPlaceIndicatorAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.CeramicFilterMonitoring.ID, ClusterIDMapping.CeramicFilterMonitoring.Attribute.InPlaceIndicator.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.CeramicFilterMonitoringCluster) cluster).readInPlaceIndicatorAttribute(
//              (ChipClusters.BooleanAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBooleanAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readCeramicFilterMonitoringInPlaceIndicatorCommandParams
        );
        result.put("readInPlaceIndicatorAttribute", readCeramicFilterMonitoringInPlaceIndicatorAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readCeramicFilterMonitoringGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readCeramicFilterMonitoringGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.CeramicFilterMonitoring.ID, ClusterIDMapping.CeramicFilterMonitoring.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.CeramicFilterMonitoringCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.CeramicFilterMonitoringCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedCeramicFilterMonitoringClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readCeramicFilterMonitoringGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readCeramicFilterMonitoringGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readCeramicFilterMonitoringAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readCeramicFilterMonitoringAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.CeramicFilterMonitoring.ID, ClusterIDMapping.CeramicFilterMonitoring.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.CeramicFilterMonitoringCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.CeramicFilterMonitoringCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedCeramicFilterMonitoringClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readCeramicFilterMonitoringAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readCeramicFilterMonitoringAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readCeramicFilterMonitoringEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readCeramicFilterMonitoringEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.CeramicFilterMonitoring.ID, ClusterIDMapping.CeramicFilterMonitoring.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.CeramicFilterMonitoringCluster) cluster).readEventListAttribute(
//              (ChipClusters.CeramicFilterMonitoringCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedCeramicFilterMonitoringClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readCeramicFilterMonitoringEventListCommandParams
        );
        result.put("readEventListAttribute", readCeramicFilterMonitoringEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readCeramicFilterMonitoringAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readCeramicFilterMonitoringAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.CeramicFilterMonitoring.ID, ClusterIDMapping.CeramicFilterMonitoring.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.CeramicFilterMonitoringCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.CeramicFilterMonitoringCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedCeramicFilterMonitoringClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readCeramicFilterMonitoringAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readCeramicFilterMonitoringAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readCeramicFilterMonitoringFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readCeramicFilterMonitoringFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.CeramicFilterMonitoring.ID, ClusterIDMapping.CeramicFilterMonitoring.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.CeramicFilterMonitoringCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readCeramicFilterMonitoringFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readCeramicFilterMonitoringFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readCeramicFilterMonitoringClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readCeramicFilterMonitoringClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.CeramicFilterMonitoring.ID, ClusterIDMapping.CeramicFilterMonitoring.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.CeramicFilterMonitoringCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readCeramicFilterMonitoringClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readCeramicFilterMonitoringClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readElectrostaticFilterMonitoringInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readElectrostaticFilterMonitoringConditionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectrostaticFilterMonitoringConditionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectrostaticFilterMonitoring.ID, ClusterIDMapping.ElectrostaticFilterMonitoring.Attribute.Condition.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectrostaticFilterMonitoringCluster) cluster).readConditionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectrostaticFilterMonitoringConditionCommandParams
        );
        result.put("readConditionAttribute", readElectrostaticFilterMonitoringConditionAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectrostaticFilterMonitoringDegradationDirectionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectrostaticFilterMonitoringDegradationDirectionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectrostaticFilterMonitoring.ID, ClusterIDMapping.ElectrostaticFilterMonitoring.Attribute.DegradationDirection.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectrostaticFilterMonitoringCluster) cluster).readDegradationDirectionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectrostaticFilterMonitoringDegradationDirectionCommandParams
        );
        result.put("readDegradationDirectionAttribute", readElectrostaticFilterMonitoringDegradationDirectionAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectrostaticFilterMonitoringChangeIndicationCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectrostaticFilterMonitoringChangeIndicationAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectrostaticFilterMonitoring.ID, ClusterIDMapping.ElectrostaticFilterMonitoring.Attribute.ChangeIndication.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectrostaticFilterMonitoringCluster) cluster).readChangeIndicationAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectrostaticFilterMonitoringChangeIndicationCommandParams
        );
        result.put("readChangeIndicationAttribute", readElectrostaticFilterMonitoringChangeIndicationAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectrostaticFilterMonitoringInPlaceIndicatorCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectrostaticFilterMonitoringInPlaceIndicatorAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectrostaticFilterMonitoring.ID, ClusterIDMapping.ElectrostaticFilterMonitoring.Attribute.InPlaceIndicator.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectrostaticFilterMonitoringCluster) cluster).readInPlaceIndicatorAttribute(
//              (ChipClusters.BooleanAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBooleanAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectrostaticFilterMonitoringInPlaceIndicatorCommandParams
        );
        result.put("readInPlaceIndicatorAttribute", readElectrostaticFilterMonitoringInPlaceIndicatorAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectrostaticFilterMonitoringGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectrostaticFilterMonitoringGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectrostaticFilterMonitoring.ID, ClusterIDMapping.ElectrostaticFilterMonitoring.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectrostaticFilterMonitoringCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.ElectrostaticFilterMonitoringCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedElectrostaticFilterMonitoringClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectrostaticFilterMonitoringGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readElectrostaticFilterMonitoringGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectrostaticFilterMonitoringAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectrostaticFilterMonitoringAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectrostaticFilterMonitoring.ID, ClusterIDMapping.ElectrostaticFilterMonitoring.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectrostaticFilterMonitoringCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.ElectrostaticFilterMonitoringCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedElectrostaticFilterMonitoringClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectrostaticFilterMonitoringAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readElectrostaticFilterMonitoringAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectrostaticFilterMonitoringEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectrostaticFilterMonitoringEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectrostaticFilterMonitoring.ID, ClusterIDMapping.ElectrostaticFilterMonitoring.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectrostaticFilterMonitoringCluster) cluster).readEventListAttribute(
//              (ChipClusters.ElectrostaticFilterMonitoringCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedElectrostaticFilterMonitoringClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectrostaticFilterMonitoringEventListCommandParams
        );
        result.put("readEventListAttribute", readElectrostaticFilterMonitoringEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectrostaticFilterMonitoringAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectrostaticFilterMonitoringAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectrostaticFilterMonitoring.ID, ClusterIDMapping.ElectrostaticFilterMonitoring.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectrostaticFilterMonitoringCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.ElectrostaticFilterMonitoringCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedElectrostaticFilterMonitoringClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectrostaticFilterMonitoringAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readElectrostaticFilterMonitoringAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectrostaticFilterMonitoringFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectrostaticFilterMonitoringFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectrostaticFilterMonitoring.ID, ClusterIDMapping.ElectrostaticFilterMonitoring.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectrostaticFilterMonitoringCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectrostaticFilterMonitoringFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readElectrostaticFilterMonitoringFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectrostaticFilterMonitoringClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectrostaticFilterMonitoringClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectrostaticFilterMonitoring.ID, ClusterIDMapping.ElectrostaticFilterMonitoring.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectrostaticFilterMonitoringCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectrostaticFilterMonitoringClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readElectrostaticFilterMonitoringClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readUvFilterMonitoringInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readUvFilterMonitoringConditionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUvFilterMonitoringConditionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UvFilterMonitoring.ID, ClusterIDMapping.UvFilterMonitoring.Attribute.Condition.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UvFilterMonitoringCluster) cluster).readConditionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUvFilterMonitoringConditionCommandParams
        );
        result.put("readConditionAttribute", readUvFilterMonitoringConditionAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUvFilterMonitoringDegradationDirectionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUvFilterMonitoringDegradationDirectionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UvFilterMonitoring.ID, ClusterIDMapping.UvFilterMonitoring.Attribute.DegradationDirection.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UvFilterMonitoringCluster) cluster).readDegradationDirectionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUvFilterMonitoringDegradationDirectionCommandParams
        );
        result.put("readDegradationDirectionAttribute", readUvFilterMonitoringDegradationDirectionAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUvFilterMonitoringChangeIndicationCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUvFilterMonitoringChangeIndicationAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UvFilterMonitoring.ID, ClusterIDMapping.UvFilterMonitoring.Attribute.ChangeIndication.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UvFilterMonitoringCluster) cluster).readChangeIndicationAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUvFilterMonitoringChangeIndicationCommandParams
        );
        result.put("readChangeIndicationAttribute", readUvFilterMonitoringChangeIndicationAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUvFilterMonitoringInPlaceIndicatorCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUvFilterMonitoringInPlaceIndicatorAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UvFilterMonitoring.ID, ClusterIDMapping.UvFilterMonitoring.Attribute.InPlaceIndicator.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UvFilterMonitoringCluster) cluster).readInPlaceIndicatorAttribute(
//              (ChipClusters.BooleanAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBooleanAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUvFilterMonitoringInPlaceIndicatorCommandParams
        );
        result.put("readInPlaceIndicatorAttribute", readUvFilterMonitoringInPlaceIndicatorAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUvFilterMonitoringGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUvFilterMonitoringGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UvFilterMonitoring.ID, ClusterIDMapping.UvFilterMonitoring.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UvFilterMonitoringCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.UvFilterMonitoringCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedUvFilterMonitoringClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUvFilterMonitoringGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readUvFilterMonitoringGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUvFilterMonitoringAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUvFilterMonitoringAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UvFilterMonitoring.ID, ClusterIDMapping.UvFilterMonitoring.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UvFilterMonitoringCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.UvFilterMonitoringCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedUvFilterMonitoringClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUvFilterMonitoringAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readUvFilterMonitoringAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUvFilterMonitoringEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUvFilterMonitoringEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UvFilterMonitoring.ID, ClusterIDMapping.UvFilterMonitoring.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UvFilterMonitoringCluster) cluster).readEventListAttribute(
//              (ChipClusters.UvFilterMonitoringCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedUvFilterMonitoringClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUvFilterMonitoringEventListCommandParams
        );
        result.put("readEventListAttribute", readUvFilterMonitoringEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUvFilterMonitoringAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUvFilterMonitoringAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UvFilterMonitoring.ID, ClusterIDMapping.UvFilterMonitoring.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UvFilterMonitoringCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.UvFilterMonitoringCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedUvFilterMonitoringClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUvFilterMonitoringAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readUvFilterMonitoringAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUvFilterMonitoringFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUvFilterMonitoringFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UvFilterMonitoring.ID, ClusterIDMapping.UvFilterMonitoring.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UvFilterMonitoringCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUvFilterMonitoringFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readUvFilterMonitoringFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUvFilterMonitoringClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUvFilterMonitoringClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UvFilterMonitoring.ID, ClusterIDMapping.UvFilterMonitoring.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UvFilterMonitoringCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUvFilterMonitoringClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readUvFilterMonitoringClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readIonizingFilterMonitoringInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readIonizingFilterMonitoringConditionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readIonizingFilterMonitoringConditionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.IonizingFilterMonitoring.ID, ClusterIDMapping.IonizingFilterMonitoring.Attribute.Condition.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.IonizingFilterMonitoringCluster) cluster).readConditionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readIonizingFilterMonitoringConditionCommandParams
        );
        result.put("readConditionAttribute", readIonizingFilterMonitoringConditionAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readIonizingFilterMonitoringDegradationDirectionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readIonizingFilterMonitoringDegradationDirectionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.IonizingFilterMonitoring.ID, ClusterIDMapping.IonizingFilterMonitoring.Attribute.DegradationDirection.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.IonizingFilterMonitoringCluster) cluster).readDegradationDirectionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readIonizingFilterMonitoringDegradationDirectionCommandParams
        );
        result.put("readDegradationDirectionAttribute", readIonizingFilterMonitoringDegradationDirectionAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readIonizingFilterMonitoringChangeIndicationCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readIonizingFilterMonitoringChangeIndicationAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.IonizingFilterMonitoring.ID, ClusterIDMapping.IonizingFilterMonitoring.Attribute.ChangeIndication.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.IonizingFilterMonitoringCluster) cluster).readChangeIndicationAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readIonizingFilterMonitoringChangeIndicationCommandParams
        );
        result.put("readChangeIndicationAttribute", readIonizingFilterMonitoringChangeIndicationAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readIonizingFilterMonitoringInPlaceIndicatorCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readIonizingFilterMonitoringInPlaceIndicatorAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.IonizingFilterMonitoring.ID, ClusterIDMapping.IonizingFilterMonitoring.Attribute.InPlaceIndicator.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.IonizingFilterMonitoringCluster) cluster).readInPlaceIndicatorAttribute(
//              (ChipClusters.BooleanAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBooleanAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readIonizingFilterMonitoringInPlaceIndicatorCommandParams
        );
        result.put("readInPlaceIndicatorAttribute", readIonizingFilterMonitoringInPlaceIndicatorAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readIonizingFilterMonitoringGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readIonizingFilterMonitoringGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.IonizingFilterMonitoring.ID, ClusterIDMapping.IonizingFilterMonitoring.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.IonizingFilterMonitoringCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.IonizingFilterMonitoringCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIonizingFilterMonitoringClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readIonizingFilterMonitoringGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readIonizingFilterMonitoringGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readIonizingFilterMonitoringAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readIonizingFilterMonitoringAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.IonizingFilterMonitoring.ID, ClusterIDMapping.IonizingFilterMonitoring.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.IonizingFilterMonitoringCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.IonizingFilterMonitoringCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIonizingFilterMonitoringClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readIonizingFilterMonitoringAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readIonizingFilterMonitoringAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readIonizingFilterMonitoringEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readIonizingFilterMonitoringEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.IonizingFilterMonitoring.ID, ClusterIDMapping.IonizingFilterMonitoring.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.IonizingFilterMonitoringCluster) cluster).readEventListAttribute(
//              (ChipClusters.IonizingFilterMonitoringCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIonizingFilterMonitoringClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readIonizingFilterMonitoringEventListCommandParams
        );
        result.put("readEventListAttribute", readIonizingFilterMonitoringEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readIonizingFilterMonitoringAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readIonizingFilterMonitoringAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.IonizingFilterMonitoring.ID, ClusterIDMapping.IonizingFilterMonitoring.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.IonizingFilterMonitoringCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.IonizingFilterMonitoringCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIonizingFilterMonitoringClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readIonizingFilterMonitoringAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readIonizingFilterMonitoringAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readIonizingFilterMonitoringFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readIonizingFilterMonitoringFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.IonizingFilterMonitoring.ID, ClusterIDMapping.IonizingFilterMonitoring.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.IonizingFilterMonitoringCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readIonizingFilterMonitoringFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readIonizingFilterMonitoringFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readIonizingFilterMonitoringClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readIonizingFilterMonitoringClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.IonizingFilterMonitoring.ID, ClusterIDMapping.IonizingFilterMonitoring.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.IonizingFilterMonitoringCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readIonizingFilterMonitoringClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readIonizingFilterMonitoringClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readZeoliteFilterMonitoringInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readZeoliteFilterMonitoringConditionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readZeoliteFilterMonitoringConditionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ZeoliteFilterMonitoring.ID, ClusterIDMapping.ZeoliteFilterMonitoring.Attribute.Condition.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ZeoliteFilterMonitoringCluster) cluster).readConditionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readZeoliteFilterMonitoringConditionCommandParams
        );
        result.put("readConditionAttribute", readZeoliteFilterMonitoringConditionAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readZeoliteFilterMonitoringDegradationDirectionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readZeoliteFilterMonitoringDegradationDirectionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ZeoliteFilterMonitoring.ID, ClusterIDMapping.ZeoliteFilterMonitoring.Attribute.DegradationDirection.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ZeoliteFilterMonitoringCluster) cluster).readDegradationDirectionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readZeoliteFilterMonitoringDegradationDirectionCommandParams
        );
        result.put("readDegradationDirectionAttribute", readZeoliteFilterMonitoringDegradationDirectionAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readZeoliteFilterMonitoringChangeIndicationCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readZeoliteFilterMonitoringChangeIndicationAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ZeoliteFilterMonitoring.ID, ClusterIDMapping.ZeoliteFilterMonitoring.Attribute.ChangeIndication.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ZeoliteFilterMonitoringCluster) cluster).readChangeIndicationAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readZeoliteFilterMonitoringChangeIndicationCommandParams
        );
        result.put("readChangeIndicationAttribute", readZeoliteFilterMonitoringChangeIndicationAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readZeoliteFilterMonitoringInPlaceIndicatorCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readZeoliteFilterMonitoringInPlaceIndicatorAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ZeoliteFilterMonitoring.ID, ClusterIDMapping.ZeoliteFilterMonitoring.Attribute.InPlaceIndicator.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ZeoliteFilterMonitoringCluster) cluster).readInPlaceIndicatorAttribute(
//              (ChipClusters.BooleanAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBooleanAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readZeoliteFilterMonitoringInPlaceIndicatorCommandParams
        );
        result.put("readInPlaceIndicatorAttribute", readZeoliteFilterMonitoringInPlaceIndicatorAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readZeoliteFilterMonitoringGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readZeoliteFilterMonitoringGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ZeoliteFilterMonitoring.ID, ClusterIDMapping.ZeoliteFilterMonitoring.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ZeoliteFilterMonitoringCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.ZeoliteFilterMonitoringCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedZeoliteFilterMonitoringClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readZeoliteFilterMonitoringGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readZeoliteFilterMonitoringGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readZeoliteFilterMonitoringAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readZeoliteFilterMonitoringAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ZeoliteFilterMonitoring.ID, ClusterIDMapping.ZeoliteFilterMonitoring.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ZeoliteFilterMonitoringCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.ZeoliteFilterMonitoringCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedZeoliteFilterMonitoringClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readZeoliteFilterMonitoringAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readZeoliteFilterMonitoringAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readZeoliteFilterMonitoringEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readZeoliteFilterMonitoringEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ZeoliteFilterMonitoring.ID, ClusterIDMapping.ZeoliteFilterMonitoring.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ZeoliteFilterMonitoringCluster) cluster).readEventListAttribute(
//              (ChipClusters.ZeoliteFilterMonitoringCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedZeoliteFilterMonitoringClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readZeoliteFilterMonitoringEventListCommandParams
        );
        result.put("readEventListAttribute", readZeoliteFilterMonitoringEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readZeoliteFilterMonitoringAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readZeoliteFilterMonitoringAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ZeoliteFilterMonitoring.ID, ClusterIDMapping.ZeoliteFilterMonitoring.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ZeoliteFilterMonitoringCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.ZeoliteFilterMonitoringCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedZeoliteFilterMonitoringClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readZeoliteFilterMonitoringAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readZeoliteFilterMonitoringAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readZeoliteFilterMonitoringFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readZeoliteFilterMonitoringFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ZeoliteFilterMonitoring.ID, ClusterIDMapping.ZeoliteFilterMonitoring.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ZeoliteFilterMonitoringCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readZeoliteFilterMonitoringFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readZeoliteFilterMonitoringFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readZeoliteFilterMonitoringClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readZeoliteFilterMonitoringClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ZeoliteFilterMonitoring.ID, ClusterIDMapping.ZeoliteFilterMonitoring.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ZeoliteFilterMonitoringCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readZeoliteFilterMonitoringClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readZeoliteFilterMonitoringClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readOzoneFilterMonitoringInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readOzoneFilterMonitoringConditionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOzoneFilterMonitoringConditionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OzoneFilterMonitoring.ID, ClusterIDMapping.OzoneFilterMonitoring.Attribute.Condition.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OzoneFilterMonitoringCluster) cluster).readConditionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOzoneFilterMonitoringConditionCommandParams
        );
        result.put("readConditionAttribute", readOzoneFilterMonitoringConditionAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOzoneFilterMonitoringDegradationDirectionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOzoneFilterMonitoringDegradationDirectionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OzoneFilterMonitoring.ID, ClusterIDMapping.OzoneFilterMonitoring.Attribute.DegradationDirection.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OzoneFilterMonitoringCluster) cluster).readDegradationDirectionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOzoneFilterMonitoringDegradationDirectionCommandParams
        );
        result.put("readDegradationDirectionAttribute", readOzoneFilterMonitoringDegradationDirectionAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOzoneFilterMonitoringChangeIndicationCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOzoneFilterMonitoringChangeIndicationAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OzoneFilterMonitoring.ID, ClusterIDMapping.OzoneFilterMonitoring.Attribute.ChangeIndication.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OzoneFilterMonitoringCluster) cluster).readChangeIndicationAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOzoneFilterMonitoringChangeIndicationCommandParams
        );
        result.put("readChangeIndicationAttribute", readOzoneFilterMonitoringChangeIndicationAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOzoneFilterMonitoringInPlaceIndicatorCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOzoneFilterMonitoringInPlaceIndicatorAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OzoneFilterMonitoring.ID, ClusterIDMapping.OzoneFilterMonitoring.Attribute.InPlaceIndicator.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OzoneFilterMonitoringCluster) cluster).readInPlaceIndicatorAttribute(
//              (ChipClusters.BooleanAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBooleanAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOzoneFilterMonitoringInPlaceIndicatorCommandParams
        );
        result.put("readInPlaceIndicatorAttribute", readOzoneFilterMonitoringInPlaceIndicatorAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOzoneFilterMonitoringGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOzoneFilterMonitoringGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OzoneFilterMonitoring.ID, ClusterIDMapping.OzoneFilterMonitoring.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OzoneFilterMonitoringCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.OzoneFilterMonitoringCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedOzoneFilterMonitoringClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOzoneFilterMonitoringGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readOzoneFilterMonitoringGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOzoneFilterMonitoringAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOzoneFilterMonitoringAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OzoneFilterMonitoring.ID, ClusterIDMapping.OzoneFilterMonitoring.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OzoneFilterMonitoringCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.OzoneFilterMonitoringCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedOzoneFilterMonitoringClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOzoneFilterMonitoringAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readOzoneFilterMonitoringAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOzoneFilterMonitoringEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOzoneFilterMonitoringEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OzoneFilterMonitoring.ID, ClusterIDMapping.OzoneFilterMonitoring.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OzoneFilterMonitoringCluster) cluster).readEventListAttribute(
//              (ChipClusters.OzoneFilterMonitoringCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedOzoneFilterMonitoringClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOzoneFilterMonitoringEventListCommandParams
        );
        result.put("readEventListAttribute", readOzoneFilterMonitoringEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOzoneFilterMonitoringAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOzoneFilterMonitoringAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OzoneFilterMonitoring.ID, ClusterIDMapping.OzoneFilterMonitoring.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OzoneFilterMonitoringCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.OzoneFilterMonitoringCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedOzoneFilterMonitoringClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOzoneFilterMonitoringAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readOzoneFilterMonitoringAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOzoneFilterMonitoringFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOzoneFilterMonitoringFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OzoneFilterMonitoring.ID, ClusterIDMapping.OzoneFilterMonitoring.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OzoneFilterMonitoringCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOzoneFilterMonitoringFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readOzoneFilterMonitoringFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOzoneFilterMonitoringClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOzoneFilterMonitoringClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OzoneFilterMonitoring.ID, ClusterIDMapping.OzoneFilterMonitoring.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OzoneFilterMonitoringCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOzoneFilterMonitoringClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readOzoneFilterMonitoringClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readWaterTankMonitoringInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readWaterTankMonitoringConditionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readWaterTankMonitoringConditionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.WaterTankMonitoring.ID, ClusterIDMapping.WaterTankMonitoring.Attribute.Condition.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.WaterTankMonitoringCluster) cluster).readConditionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readWaterTankMonitoringConditionCommandParams
        );
        result.put("readConditionAttribute", readWaterTankMonitoringConditionAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readWaterTankMonitoringDegradationDirectionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readWaterTankMonitoringDegradationDirectionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.WaterTankMonitoring.ID, ClusterIDMapping.WaterTankMonitoring.Attribute.DegradationDirection.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.WaterTankMonitoringCluster) cluster).readDegradationDirectionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readWaterTankMonitoringDegradationDirectionCommandParams
        );
        result.put("readDegradationDirectionAttribute", readWaterTankMonitoringDegradationDirectionAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readWaterTankMonitoringChangeIndicationCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readWaterTankMonitoringChangeIndicationAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.WaterTankMonitoring.ID, ClusterIDMapping.WaterTankMonitoring.Attribute.ChangeIndication.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.WaterTankMonitoringCluster) cluster).readChangeIndicationAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readWaterTankMonitoringChangeIndicationCommandParams
        );
        result.put("readChangeIndicationAttribute", readWaterTankMonitoringChangeIndicationAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readWaterTankMonitoringInPlaceIndicatorCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readWaterTankMonitoringInPlaceIndicatorAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.WaterTankMonitoring.ID, ClusterIDMapping.WaterTankMonitoring.Attribute.InPlaceIndicator.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.WaterTankMonitoringCluster) cluster).readInPlaceIndicatorAttribute(
//              (ChipClusters.BooleanAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBooleanAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readWaterTankMonitoringInPlaceIndicatorCommandParams
        );
        result.put("readInPlaceIndicatorAttribute", readWaterTankMonitoringInPlaceIndicatorAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readWaterTankMonitoringGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readWaterTankMonitoringGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.WaterTankMonitoring.ID, ClusterIDMapping.WaterTankMonitoring.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.WaterTankMonitoringCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.WaterTankMonitoringCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedWaterTankMonitoringClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readWaterTankMonitoringGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readWaterTankMonitoringGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readWaterTankMonitoringAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readWaterTankMonitoringAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.WaterTankMonitoring.ID, ClusterIDMapping.WaterTankMonitoring.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.WaterTankMonitoringCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.WaterTankMonitoringCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedWaterTankMonitoringClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readWaterTankMonitoringAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readWaterTankMonitoringAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readWaterTankMonitoringEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readWaterTankMonitoringEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.WaterTankMonitoring.ID, ClusterIDMapping.WaterTankMonitoring.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.WaterTankMonitoringCluster) cluster).readEventListAttribute(
//              (ChipClusters.WaterTankMonitoringCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedWaterTankMonitoringClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readWaterTankMonitoringEventListCommandParams
        );
        result.put("readEventListAttribute", readWaterTankMonitoringEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readWaterTankMonitoringAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readWaterTankMonitoringAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.WaterTankMonitoring.ID, ClusterIDMapping.WaterTankMonitoring.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.WaterTankMonitoringCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.WaterTankMonitoringCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedWaterTankMonitoringClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readWaterTankMonitoringAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readWaterTankMonitoringAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readWaterTankMonitoringFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readWaterTankMonitoringFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.WaterTankMonitoring.ID, ClusterIDMapping.WaterTankMonitoring.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.WaterTankMonitoringCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readWaterTankMonitoringFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readWaterTankMonitoringFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readWaterTankMonitoringClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readWaterTankMonitoringClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.WaterTankMonitoring.ID, ClusterIDMapping.WaterTankMonitoring.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.WaterTankMonitoringCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readWaterTankMonitoringClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readWaterTankMonitoringClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readFuelTankMonitoringInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readFuelTankMonitoringConditionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFuelTankMonitoringConditionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FuelTankMonitoring.ID, ClusterIDMapping.FuelTankMonitoring.Attribute.Condition.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FuelTankMonitoringCluster) cluster).readConditionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFuelTankMonitoringConditionCommandParams
        );
        result.put("readConditionAttribute", readFuelTankMonitoringConditionAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFuelTankMonitoringDegradationDirectionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFuelTankMonitoringDegradationDirectionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FuelTankMonitoring.ID, ClusterIDMapping.FuelTankMonitoring.Attribute.DegradationDirection.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FuelTankMonitoringCluster) cluster).readDegradationDirectionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFuelTankMonitoringDegradationDirectionCommandParams
        );
        result.put("readDegradationDirectionAttribute", readFuelTankMonitoringDegradationDirectionAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFuelTankMonitoringChangeIndicationCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFuelTankMonitoringChangeIndicationAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FuelTankMonitoring.ID, ClusterIDMapping.FuelTankMonitoring.Attribute.ChangeIndication.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FuelTankMonitoringCluster) cluster).readChangeIndicationAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFuelTankMonitoringChangeIndicationCommandParams
        );
        result.put("readChangeIndicationAttribute", readFuelTankMonitoringChangeIndicationAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFuelTankMonitoringInPlaceIndicatorCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFuelTankMonitoringInPlaceIndicatorAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FuelTankMonitoring.ID, ClusterIDMapping.FuelTankMonitoring.Attribute.InPlaceIndicator.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FuelTankMonitoringCluster) cluster).readInPlaceIndicatorAttribute(
//              (ChipClusters.BooleanAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBooleanAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFuelTankMonitoringInPlaceIndicatorCommandParams
        );
        result.put("readInPlaceIndicatorAttribute", readFuelTankMonitoringInPlaceIndicatorAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFuelTankMonitoringGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFuelTankMonitoringGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FuelTankMonitoring.ID, ClusterIDMapping.FuelTankMonitoring.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FuelTankMonitoringCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.FuelTankMonitoringCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFuelTankMonitoringClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFuelTankMonitoringGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readFuelTankMonitoringGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFuelTankMonitoringAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFuelTankMonitoringAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FuelTankMonitoring.ID, ClusterIDMapping.FuelTankMonitoring.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FuelTankMonitoringCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.FuelTankMonitoringCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFuelTankMonitoringClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFuelTankMonitoringAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readFuelTankMonitoringAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFuelTankMonitoringEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFuelTankMonitoringEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FuelTankMonitoring.ID, ClusterIDMapping.FuelTankMonitoring.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FuelTankMonitoringCluster) cluster).readEventListAttribute(
//              (ChipClusters.FuelTankMonitoringCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFuelTankMonitoringClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFuelTankMonitoringEventListCommandParams
        );
        result.put("readEventListAttribute", readFuelTankMonitoringEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFuelTankMonitoringAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFuelTankMonitoringAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FuelTankMonitoring.ID, ClusterIDMapping.FuelTankMonitoring.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FuelTankMonitoringCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.FuelTankMonitoringCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFuelTankMonitoringClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFuelTankMonitoringAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readFuelTankMonitoringAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFuelTankMonitoringFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFuelTankMonitoringFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FuelTankMonitoring.ID, ClusterIDMapping.FuelTankMonitoring.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FuelTankMonitoringCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFuelTankMonitoringFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readFuelTankMonitoringFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFuelTankMonitoringClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFuelTankMonitoringClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FuelTankMonitoring.ID, ClusterIDMapping.FuelTankMonitoring.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FuelTankMonitoringCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFuelTankMonitoringClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readFuelTankMonitoringClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readInkCartridgeMonitoringInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readInkCartridgeMonitoringConditionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readInkCartridgeMonitoringConditionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.InkCartridgeMonitoring.ID, ClusterIDMapping.InkCartridgeMonitoring.Attribute.Condition.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.InkCartridgeMonitoringCluster) cluster).readConditionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readInkCartridgeMonitoringConditionCommandParams
        );
        result.put("readConditionAttribute", readInkCartridgeMonitoringConditionAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readInkCartridgeMonitoringDegradationDirectionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readInkCartridgeMonitoringDegradationDirectionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.InkCartridgeMonitoring.ID, ClusterIDMapping.InkCartridgeMonitoring.Attribute.DegradationDirection.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.InkCartridgeMonitoringCluster) cluster).readDegradationDirectionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readInkCartridgeMonitoringDegradationDirectionCommandParams
        );
        result.put("readDegradationDirectionAttribute", readInkCartridgeMonitoringDegradationDirectionAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readInkCartridgeMonitoringChangeIndicationCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readInkCartridgeMonitoringChangeIndicationAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.InkCartridgeMonitoring.ID, ClusterIDMapping.InkCartridgeMonitoring.Attribute.ChangeIndication.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.InkCartridgeMonitoringCluster) cluster).readChangeIndicationAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readInkCartridgeMonitoringChangeIndicationCommandParams
        );
        result.put("readChangeIndicationAttribute", readInkCartridgeMonitoringChangeIndicationAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readInkCartridgeMonitoringInPlaceIndicatorCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readInkCartridgeMonitoringInPlaceIndicatorAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.InkCartridgeMonitoring.ID, ClusterIDMapping.InkCartridgeMonitoring.Attribute.InPlaceIndicator.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.InkCartridgeMonitoringCluster) cluster).readInPlaceIndicatorAttribute(
//              (ChipClusters.BooleanAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBooleanAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readInkCartridgeMonitoringInPlaceIndicatorCommandParams
        );
        result.put("readInPlaceIndicatorAttribute", readInkCartridgeMonitoringInPlaceIndicatorAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readInkCartridgeMonitoringGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readInkCartridgeMonitoringGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.InkCartridgeMonitoring.ID, ClusterIDMapping.InkCartridgeMonitoring.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.InkCartridgeMonitoringCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.InkCartridgeMonitoringCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedInkCartridgeMonitoringClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readInkCartridgeMonitoringGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readInkCartridgeMonitoringGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readInkCartridgeMonitoringAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readInkCartridgeMonitoringAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.InkCartridgeMonitoring.ID, ClusterIDMapping.InkCartridgeMonitoring.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.InkCartridgeMonitoringCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.InkCartridgeMonitoringCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedInkCartridgeMonitoringClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readInkCartridgeMonitoringAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readInkCartridgeMonitoringAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readInkCartridgeMonitoringEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readInkCartridgeMonitoringEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.InkCartridgeMonitoring.ID, ClusterIDMapping.InkCartridgeMonitoring.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.InkCartridgeMonitoringCluster) cluster).readEventListAttribute(
//              (ChipClusters.InkCartridgeMonitoringCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedInkCartridgeMonitoringClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readInkCartridgeMonitoringEventListCommandParams
        );
        result.put("readEventListAttribute", readInkCartridgeMonitoringEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readInkCartridgeMonitoringAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readInkCartridgeMonitoringAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.InkCartridgeMonitoring.ID, ClusterIDMapping.InkCartridgeMonitoring.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.InkCartridgeMonitoringCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.InkCartridgeMonitoringCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedInkCartridgeMonitoringClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readInkCartridgeMonitoringAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readInkCartridgeMonitoringAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readInkCartridgeMonitoringFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readInkCartridgeMonitoringFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.InkCartridgeMonitoring.ID, ClusterIDMapping.InkCartridgeMonitoring.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.InkCartridgeMonitoringCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readInkCartridgeMonitoringFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readInkCartridgeMonitoringFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readInkCartridgeMonitoringClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readInkCartridgeMonitoringClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.InkCartridgeMonitoring.ID, ClusterIDMapping.InkCartridgeMonitoring.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.InkCartridgeMonitoringCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readInkCartridgeMonitoringClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readInkCartridgeMonitoringClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readTonerCartridgeMonitoringInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readTonerCartridgeMonitoringConditionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTonerCartridgeMonitoringConditionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TonerCartridgeMonitoring.ID, ClusterIDMapping.TonerCartridgeMonitoring.Attribute.Condition.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TonerCartridgeMonitoringCluster) cluster).readConditionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTonerCartridgeMonitoringConditionCommandParams
        );
        result.put("readConditionAttribute", readTonerCartridgeMonitoringConditionAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTonerCartridgeMonitoringDegradationDirectionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTonerCartridgeMonitoringDegradationDirectionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TonerCartridgeMonitoring.ID, ClusterIDMapping.TonerCartridgeMonitoring.Attribute.DegradationDirection.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TonerCartridgeMonitoringCluster) cluster).readDegradationDirectionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTonerCartridgeMonitoringDegradationDirectionCommandParams
        );
        result.put("readDegradationDirectionAttribute", readTonerCartridgeMonitoringDegradationDirectionAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTonerCartridgeMonitoringChangeIndicationCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTonerCartridgeMonitoringChangeIndicationAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TonerCartridgeMonitoring.ID, ClusterIDMapping.TonerCartridgeMonitoring.Attribute.ChangeIndication.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TonerCartridgeMonitoringCluster) cluster).readChangeIndicationAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTonerCartridgeMonitoringChangeIndicationCommandParams
        );
        result.put("readChangeIndicationAttribute", readTonerCartridgeMonitoringChangeIndicationAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTonerCartridgeMonitoringInPlaceIndicatorCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTonerCartridgeMonitoringInPlaceIndicatorAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TonerCartridgeMonitoring.ID, ClusterIDMapping.TonerCartridgeMonitoring.Attribute.InPlaceIndicator.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TonerCartridgeMonitoringCluster) cluster).readInPlaceIndicatorAttribute(
//              (ChipClusters.BooleanAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBooleanAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTonerCartridgeMonitoringInPlaceIndicatorCommandParams
        );
        result.put("readInPlaceIndicatorAttribute", readTonerCartridgeMonitoringInPlaceIndicatorAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTonerCartridgeMonitoringGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTonerCartridgeMonitoringGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TonerCartridgeMonitoring.ID, ClusterIDMapping.TonerCartridgeMonitoring.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TonerCartridgeMonitoringCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.TonerCartridgeMonitoringCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedTonerCartridgeMonitoringClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTonerCartridgeMonitoringGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readTonerCartridgeMonitoringGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTonerCartridgeMonitoringAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTonerCartridgeMonitoringAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TonerCartridgeMonitoring.ID, ClusterIDMapping.TonerCartridgeMonitoring.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TonerCartridgeMonitoringCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.TonerCartridgeMonitoringCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedTonerCartridgeMonitoringClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTonerCartridgeMonitoringAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readTonerCartridgeMonitoringAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTonerCartridgeMonitoringEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTonerCartridgeMonitoringEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TonerCartridgeMonitoring.ID, ClusterIDMapping.TonerCartridgeMonitoring.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TonerCartridgeMonitoringCluster) cluster).readEventListAttribute(
//              (ChipClusters.TonerCartridgeMonitoringCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedTonerCartridgeMonitoringClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTonerCartridgeMonitoringEventListCommandParams
        );
        result.put("readEventListAttribute", readTonerCartridgeMonitoringEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTonerCartridgeMonitoringAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTonerCartridgeMonitoringAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TonerCartridgeMonitoring.ID, ClusterIDMapping.TonerCartridgeMonitoring.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TonerCartridgeMonitoringCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.TonerCartridgeMonitoringCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedTonerCartridgeMonitoringClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTonerCartridgeMonitoringAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readTonerCartridgeMonitoringAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTonerCartridgeMonitoringFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTonerCartridgeMonitoringFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TonerCartridgeMonitoring.ID, ClusterIDMapping.TonerCartridgeMonitoring.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TonerCartridgeMonitoringCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTonerCartridgeMonitoringFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readTonerCartridgeMonitoringFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTonerCartridgeMonitoringClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTonerCartridgeMonitoringClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TonerCartridgeMonitoring.ID, ClusterIDMapping.TonerCartridgeMonitoring.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TonerCartridgeMonitoringCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTonerCartridgeMonitoringClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readTonerCartridgeMonitoringClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readDoorLockInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readDoorLockLockStateCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDoorLockLockStateAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DoorLock.ID, ClusterIDMapping.DoorLock.Attribute.LockState.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DoorLockCluster) cluster).readLockStateAttribute(
//              (ChipClusters.DoorLockCluster.LockStateAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedDoorLockClusterLockStateAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDoorLockLockStateCommandParams
        );
        result.put("readLockStateAttribute", readDoorLockLockStateAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDoorLockLockTypeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDoorLockLockTypeAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DoorLock.ID, ClusterIDMapping.DoorLock.Attribute.LockType.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DoorLockCluster) cluster).readLockTypeAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDoorLockLockTypeCommandParams
        );
        result.put("readLockTypeAttribute", readDoorLockLockTypeAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDoorLockActuatorEnabledCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDoorLockActuatorEnabledAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DoorLock.ID, ClusterIDMapping.DoorLock.Attribute.ActuatorEnabled.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DoorLockCluster) cluster).readActuatorEnabledAttribute(
//              (ChipClusters.BooleanAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBooleanAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDoorLockActuatorEnabledCommandParams
        );
        result.put("readActuatorEnabledAttribute", readDoorLockActuatorEnabledAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDoorLockDoorStateCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDoorLockDoorStateAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DoorLock.ID, ClusterIDMapping.DoorLock.Attribute.DoorState.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DoorLockCluster) cluster).readDoorStateAttribute(
//              (ChipClusters.DoorLockCluster.DoorStateAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedDoorLockClusterDoorStateAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDoorLockDoorStateCommandParams
        );
        result.put("readDoorStateAttribute", readDoorLockDoorStateAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDoorLockDoorOpenEventsCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDoorLockDoorOpenEventsAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DoorLock.ID, ClusterIDMapping.DoorLock.Attribute.DoorOpenEvents.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DoorLockCluster) cluster).readDoorOpenEventsAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDoorLockDoorOpenEventsCommandParams
        );
        result.put("readDoorOpenEventsAttribute", readDoorLockDoorOpenEventsAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDoorLockDoorClosedEventsCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDoorLockDoorClosedEventsAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DoorLock.ID, ClusterIDMapping.DoorLock.Attribute.DoorClosedEvents.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DoorLockCluster) cluster).readDoorClosedEventsAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDoorLockDoorClosedEventsCommandParams
        );
        result.put("readDoorClosedEventsAttribute", readDoorLockDoorClosedEventsAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDoorLockOpenPeriodCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDoorLockOpenPeriodAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DoorLock.ID, ClusterIDMapping.DoorLock.Attribute.OpenPeriod.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DoorLockCluster) cluster).readOpenPeriodAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDoorLockOpenPeriodCommandParams
        );
        result.put("readOpenPeriodAttribute", readDoorLockOpenPeriodAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDoorLockNumberOfTotalUsersSupportedCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDoorLockNumberOfTotalUsersSupportedAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DoorLock.ID, ClusterIDMapping.DoorLock.Attribute.NumberOfTotalUsersSupported.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DoorLockCluster) cluster).readNumberOfTotalUsersSupportedAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDoorLockNumberOfTotalUsersSupportedCommandParams
        );
        result.put("readNumberOfTotalUsersSupportedAttribute", readDoorLockNumberOfTotalUsersSupportedAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDoorLockNumberOfPINUsersSupportedCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDoorLockNumberOfPINUsersSupportedAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DoorLock.ID, ClusterIDMapping.DoorLock.Attribute.NumberOfPINUsersSupported.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DoorLockCluster) cluster).readNumberOfPINUsersSupportedAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDoorLockNumberOfPINUsersSupportedCommandParams
        );
        result.put("readNumberOfPINUsersSupportedAttribute", readDoorLockNumberOfPINUsersSupportedAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDoorLockNumberOfRFIDUsersSupportedCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDoorLockNumberOfRFIDUsersSupportedAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DoorLock.ID, ClusterIDMapping.DoorLock.Attribute.NumberOfRFIDUsersSupported.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DoorLockCluster) cluster).readNumberOfRFIDUsersSupportedAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDoorLockNumberOfRFIDUsersSupportedCommandParams
        );
        result.put("readNumberOfRFIDUsersSupportedAttribute", readDoorLockNumberOfRFIDUsersSupportedAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDoorLockNumberOfWeekDaySchedulesSupportedPerUserCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDoorLockNumberOfWeekDaySchedulesSupportedPerUserAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DoorLock.ID, ClusterIDMapping.DoorLock.Attribute.NumberOfWeekDaySchedulesSupportedPerUser.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DoorLockCluster) cluster).readNumberOfWeekDaySchedulesSupportedPerUserAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDoorLockNumberOfWeekDaySchedulesSupportedPerUserCommandParams
        );
        result.put("readNumberOfWeekDaySchedulesSupportedPerUserAttribute", readDoorLockNumberOfWeekDaySchedulesSupportedPerUserAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDoorLockNumberOfYearDaySchedulesSupportedPerUserCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDoorLockNumberOfYearDaySchedulesSupportedPerUserAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DoorLock.ID, ClusterIDMapping.DoorLock.Attribute.NumberOfYearDaySchedulesSupportedPerUser.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DoorLockCluster) cluster).readNumberOfYearDaySchedulesSupportedPerUserAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDoorLockNumberOfYearDaySchedulesSupportedPerUserCommandParams
        );
        result.put("readNumberOfYearDaySchedulesSupportedPerUserAttribute", readDoorLockNumberOfYearDaySchedulesSupportedPerUserAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDoorLockNumberOfHolidaySchedulesSupportedCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDoorLockNumberOfHolidaySchedulesSupportedAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DoorLock.ID, ClusterIDMapping.DoorLock.Attribute.NumberOfHolidaySchedulesSupported.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DoorLockCluster) cluster).readNumberOfHolidaySchedulesSupportedAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDoorLockNumberOfHolidaySchedulesSupportedCommandParams
        );
        result.put("readNumberOfHolidaySchedulesSupportedAttribute", readDoorLockNumberOfHolidaySchedulesSupportedAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDoorLockMaxPINCodeLengthCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDoorLockMaxPINCodeLengthAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DoorLock.ID, ClusterIDMapping.DoorLock.Attribute.MaxPINCodeLength.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DoorLockCluster) cluster).readMaxPINCodeLengthAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDoorLockMaxPINCodeLengthCommandParams
        );
        result.put("readMaxPINCodeLengthAttribute", readDoorLockMaxPINCodeLengthAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDoorLockMinPINCodeLengthCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDoorLockMinPINCodeLengthAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DoorLock.ID, ClusterIDMapping.DoorLock.Attribute.MinPINCodeLength.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DoorLockCluster) cluster).readMinPINCodeLengthAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDoorLockMinPINCodeLengthCommandParams
        );
        result.put("readMinPINCodeLengthAttribute", readDoorLockMinPINCodeLengthAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDoorLockMaxRFIDCodeLengthCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDoorLockMaxRFIDCodeLengthAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DoorLock.ID, ClusterIDMapping.DoorLock.Attribute.MaxRFIDCodeLength.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DoorLockCluster) cluster).readMaxRFIDCodeLengthAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDoorLockMaxRFIDCodeLengthCommandParams
        );
        result.put("readMaxRFIDCodeLengthAttribute", readDoorLockMaxRFIDCodeLengthAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDoorLockMinRFIDCodeLengthCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDoorLockMinRFIDCodeLengthAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DoorLock.ID, ClusterIDMapping.DoorLock.Attribute.MinRFIDCodeLength.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DoorLockCluster) cluster).readMinRFIDCodeLengthAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDoorLockMinRFIDCodeLengthCommandParams
        );
        result.put("readMinRFIDCodeLengthAttribute", readDoorLockMinRFIDCodeLengthAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDoorLockCredentialRulesSupportCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDoorLockCredentialRulesSupportAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DoorLock.ID, ClusterIDMapping.DoorLock.Attribute.CredentialRulesSupport.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DoorLockCluster) cluster).readCredentialRulesSupportAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDoorLockCredentialRulesSupportCommandParams
        );
        result.put("readCredentialRulesSupportAttribute", readDoorLockCredentialRulesSupportAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDoorLockNumberOfCredentialsSupportedPerUserCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDoorLockNumberOfCredentialsSupportedPerUserAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DoorLock.ID, ClusterIDMapping.DoorLock.Attribute.NumberOfCredentialsSupportedPerUser.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DoorLockCluster) cluster).readNumberOfCredentialsSupportedPerUserAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDoorLockNumberOfCredentialsSupportedPerUserCommandParams
        );
        result.put("readNumberOfCredentialsSupportedPerUserAttribute", readDoorLockNumberOfCredentialsSupportedPerUserAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDoorLockLanguageCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDoorLockLanguageAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DoorLock.ID, ClusterIDMapping.DoorLock.Attribute.Language.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DoorLockCluster) cluster).readLanguageAttribute(
//              (ChipClusters.CharStringAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedCharStringAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDoorLockLanguageCommandParams
        );
        result.put("readLanguageAttribute", readDoorLockLanguageAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDoorLockLEDSettingsCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDoorLockLEDSettingsAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DoorLock.ID, ClusterIDMapping.DoorLock.Attribute.LEDSettings.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DoorLockCluster) cluster).readLEDSettingsAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDoorLockLEDSettingsCommandParams
        );
        result.put("readLEDSettingsAttribute", readDoorLockLEDSettingsAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDoorLockAutoRelockTimeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDoorLockAutoRelockTimeAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DoorLock.ID, ClusterIDMapping.DoorLock.Attribute.AutoRelockTime.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DoorLockCluster) cluster).readAutoRelockTimeAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDoorLockAutoRelockTimeCommandParams
        );
        result.put("readAutoRelockTimeAttribute", readDoorLockAutoRelockTimeAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDoorLockSoundVolumeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDoorLockSoundVolumeAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DoorLock.ID, ClusterIDMapping.DoorLock.Attribute.SoundVolume.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DoorLockCluster) cluster).readSoundVolumeAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDoorLockSoundVolumeCommandParams
        );
        result.put("readSoundVolumeAttribute", readDoorLockSoundVolumeAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDoorLockOperatingModeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDoorLockOperatingModeAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DoorLock.ID, ClusterIDMapping.DoorLock.Attribute.OperatingMode.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DoorLockCluster) cluster).readOperatingModeAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDoorLockOperatingModeCommandParams
        );
        result.put("readOperatingModeAttribute", readDoorLockOperatingModeAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDoorLockSupportedOperatingModesCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDoorLockSupportedOperatingModesAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DoorLock.ID, ClusterIDMapping.DoorLock.Attribute.SupportedOperatingModes.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DoorLockCluster) cluster).readSupportedOperatingModesAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDoorLockSupportedOperatingModesCommandParams
        );
        result.put("readSupportedOperatingModesAttribute", readDoorLockSupportedOperatingModesAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDoorLockDefaultConfigurationRegisterCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDoorLockDefaultConfigurationRegisterAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DoorLock.ID, ClusterIDMapping.DoorLock.Attribute.DefaultConfigurationRegister.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DoorLockCluster) cluster).readDefaultConfigurationRegisterAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDoorLockDefaultConfigurationRegisterCommandParams
        );
        result.put("readDefaultConfigurationRegisterAttribute", readDoorLockDefaultConfigurationRegisterAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDoorLockEnableLocalProgrammingCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDoorLockEnableLocalProgrammingAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DoorLock.ID, ClusterIDMapping.DoorLock.Attribute.EnableLocalProgramming.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DoorLockCluster) cluster).readEnableLocalProgrammingAttribute(
//              (ChipClusters.BooleanAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBooleanAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDoorLockEnableLocalProgrammingCommandParams
        );
        result.put("readEnableLocalProgrammingAttribute", readDoorLockEnableLocalProgrammingAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDoorLockEnableOneTouchLockingCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDoorLockEnableOneTouchLockingAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DoorLock.ID, ClusterIDMapping.DoorLock.Attribute.EnableOneTouchLocking.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DoorLockCluster) cluster).readEnableOneTouchLockingAttribute(
//              (ChipClusters.BooleanAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBooleanAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDoorLockEnableOneTouchLockingCommandParams
        );
        result.put("readEnableOneTouchLockingAttribute", readDoorLockEnableOneTouchLockingAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDoorLockEnableInsideStatusLEDCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDoorLockEnableInsideStatusLEDAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DoorLock.ID, ClusterIDMapping.DoorLock.Attribute.EnableInsideStatusLED.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DoorLockCluster) cluster).readEnableInsideStatusLEDAttribute(
//              (ChipClusters.BooleanAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBooleanAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDoorLockEnableInsideStatusLEDCommandParams
        );
        result.put("readEnableInsideStatusLEDAttribute", readDoorLockEnableInsideStatusLEDAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDoorLockEnablePrivacyModeButtonCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDoorLockEnablePrivacyModeButtonAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DoorLock.ID, ClusterIDMapping.DoorLock.Attribute.EnablePrivacyModeButton.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DoorLockCluster) cluster).readEnablePrivacyModeButtonAttribute(
//              (ChipClusters.BooleanAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBooleanAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDoorLockEnablePrivacyModeButtonCommandParams
        );
        result.put("readEnablePrivacyModeButtonAttribute", readDoorLockEnablePrivacyModeButtonAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDoorLockLocalProgrammingFeaturesCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDoorLockLocalProgrammingFeaturesAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DoorLock.ID, ClusterIDMapping.DoorLock.Attribute.LocalProgrammingFeatures.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DoorLockCluster) cluster).readLocalProgrammingFeaturesAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDoorLockLocalProgrammingFeaturesCommandParams
        );
        result.put("readLocalProgrammingFeaturesAttribute", readDoorLockLocalProgrammingFeaturesAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDoorLockWrongCodeEntryLimitCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDoorLockWrongCodeEntryLimitAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DoorLock.ID, ClusterIDMapping.DoorLock.Attribute.WrongCodeEntryLimit.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DoorLockCluster) cluster).readWrongCodeEntryLimitAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDoorLockWrongCodeEntryLimitCommandParams
        );
        result.put("readWrongCodeEntryLimitAttribute", readDoorLockWrongCodeEntryLimitAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDoorLockUserCodeTemporaryDisableTimeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDoorLockUserCodeTemporaryDisableTimeAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DoorLock.ID, ClusterIDMapping.DoorLock.Attribute.UserCodeTemporaryDisableTime.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DoorLockCluster) cluster).readUserCodeTemporaryDisableTimeAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDoorLockUserCodeTemporaryDisableTimeCommandParams
        );
        result.put("readUserCodeTemporaryDisableTimeAttribute", readDoorLockUserCodeTemporaryDisableTimeAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDoorLockSendPINOverTheAirCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDoorLockSendPINOverTheAirAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DoorLock.ID, ClusterIDMapping.DoorLock.Attribute.SendPINOverTheAir.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DoorLockCluster) cluster).readSendPINOverTheAirAttribute(
//              (ChipClusters.BooleanAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBooleanAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDoorLockSendPINOverTheAirCommandParams
        );
        result.put("readSendPINOverTheAirAttribute", readDoorLockSendPINOverTheAirAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDoorLockRequirePINforRemoteOperationCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDoorLockRequirePINforRemoteOperationAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DoorLock.ID, ClusterIDMapping.DoorLock.Attribute.RequirePINforRemoteOperation.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DoorLockCluster) cluster).readRequirePINforRemoteOperationAttribute(
//              (ChipClusters.BooleanAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBooleanAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDoorLockRequirePINforRemoteOperationCommandParams
        );
        result.put("readRequirePINforRemoteOperationAttribute", readDoorLockRequirePINforRemoteOperationAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDoorLockExpiringUserTimeoutCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDoorLockExpiringUserTimeoutAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DoorLock.ID, ClusterIDMapping.DoorLock.Attribute.ExpiringUserTimeout.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DoorLockCluster) cluster).readExpiringUserTimeoutAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDoorLockExpiringUserTimeoutCommandParams
        );
        result.put("readExpiringUserTimeoutAttribute", readDoorLockExpiringUserTimeoutAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDoorLockGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDoorLockGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DoorLock.ID, ClusterIDMapping.DoorLock.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DoorLockCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.DoorLockCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedDoorLockClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDoorLockGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readDoorLockGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDoorLockAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDoorLockAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DoorLock.ID, ClusterIDMapping.DoorLock.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DoorLockCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.DoorLockCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedDoorLockClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDoorLockAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readDoorLockAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDoorLockEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDoorLockEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DoorLock.ID, ClusterIDMapping.DoorLock.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DoorLockCluster) cluster).readEventListAttribute(
//              (ChipClusters.DoorLockCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedDoorLockClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDoorLockEventListCommandParams
        );
        result.put("readEventListAttribute", readDoorLockEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDoorLockAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDoorLockAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DoorLock.ID, ClusterIDMapping.DoorLock.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DoorLockCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.DoorLockCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedDoorLockClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDoorLockAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readDoorLockAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDoorLockFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDoorLockFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DoorLock.ID, ClusterIDMapping.DoorLock.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DoorLockCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDoorLockFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readDoorLockFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDoorLockClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDoorLockClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DoorLock.ID, ClusterIDMapping.DoorLock.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DoorLockCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDoorLockClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readDoorLockClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readWindowCoveringInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readWindowCoveringTypeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readWindowCoveringTypeAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.WindowCovering.ID, ClusterIDMapping.WindowCovering.Attribute.Type.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.WindowCoveringCluster) cluster).readTypeAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readWindowCoveringTypeCommandParams
        );
        result.put("readTypeAttribute", readWindowCoveringTypeAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readWindowCoveringPhysicalClosedLimitLiftCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readWindowCoveringPhysicalClosedLimitLiftAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.WindowCovering.ID, ClusterIDMapping.WindowCovering.Attribute.PhysicalClosedLimitLift.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.WindowCoveringCluster) cluster).readPhysicalClosedLimitLiftAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readWindowCoveringPhysicalClosedLimitLiftCommandParams
        );
        result.put("readPhysicalClosedLimitLiftAttribute", readWindowCoveringPhysicalClosedLimitLiftAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readWindowCoveringPhysicalClosedLimitTiltCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readWindowCoveringPhysicalClosedLimitTiltAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.WindowCovering.ID, ClusterIDMapping.WindowCovering.Attribute.PhysicalClosedLimitTilt.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.WindowCoveringCluster) cluster).readPhysicalClosedLimitTiltAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readWindowCoveringPhysicalClosedLimitTiltCommandParams
        );
        result.put("readPhysicalClosedLimitTiltAttribute", readWindowCoveringPhysicalClosedLimitTiltAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readWindowCoveringCurrentPositionLiftCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readWindowCoveringCurrentPositionLiftAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.WindowCovering.ID, ClusterIDMapping.WindowCovering.Attribute.CurrentPositionLift.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.WindowCoveringCluster) cluster).readCurrentPositionLiftAttribute(
//              (ChipClusters.WindowCoveringCluster.CurrentPositionLiftAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedWindowCoveringClusterCurrentPositionLiftAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readWindowCoveringCurrentPositionLiftCommandParams
        );
        result.put("readCurrentPositionLiftAttribute", readWindowCoveringCurrentPositionLiftAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readWindowCoveringCurrentPositionTiltCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readWindowCoveringCurrentPositionTiltAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.WindowCovering.ID, ClusterIDMapping.WindowCovering.Attribute.CurrentPositionTilt.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.WindowCoveringCluster) cluster).readCurrentPositionTiltAttribute(
//              (ChipClusters.WindowCoveringCluster.CurrentPositionTiltAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedWindowCoveringClusterCurrentPositionTiltAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readWindowCoveringCurrentPositionTiltCommandParams
        );
        result.put("readCurrentPositionTiltAttribute", readWindowCoveringCurrentPositionTiltAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readWindowCoveringNumberOfActuationsLiftCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readWindowCoveringNumberOfActuationsLiftAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.WindowCovering.ID, ClusterIDMapping.WindowCovering.Attribute.NumberOfActuationsLift.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.WindowCoveringCluster) cluster).readNumberOfActuationsLiftAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readWindowCoveringNumberOfActuationsLiftCommandParams
        );
        result.put("readNumberOfActuationsLiftAttribute", readWindowCoveringNumberOfActuationsLiftAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readWindowCoveringNumberOfActuationsTiltCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readWindowCoveringNumberOfActuationsTiltAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.WindowCovering.ID, ClusterIDMapping.WindowCovering.Attribute.NumberOfActuationsTilt.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.WindowCoveringCluster) cluster).readNumberOfActuationsTiltAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readWindowCoveringNumberOfActuationsTiltCommandParams
        );
        result.put("readNumberOfActuationsTiltAttribute", readWindowCoveringNumberOfActuationsTiltAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readWindowCoveringConfigStatusCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readWindowCoveringConfigStatusAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.WindowCovering.ID, ClusterIDMapping.WindowCovering.Attribute.ConfigStatus.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.WindowCoveringCluster) cluster).readConfigStatusAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readWindowCoveringConfigStatusCommandParams
        );
        result.put("readConfigStatusAttribute", readWindowCoveringConfigStatusAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readWindowCoveringCurrentPositionLiftPercentageCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readWindowCoveringCurrentPositionLiftPercentageAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.WindowCovering.ID, ClusterIDMapping.WindowCovering.Attribute.CurrentPositionLiftPercentage.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.WindowCoveringCluster) cluster).readCurrentPositionLiftPercentageAttribute(
//              (ChipClusters.WindowCoveringCluster.CurrentPositionLiftPercentageAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedWindowCoveringClusterCurrentPositionLiftPercentageAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readWindowCoveringCurrentPositionLiftPercentageCommandParams
        );
        result.put("readCurrentPositionLiftPercentageAttribute", readWindowCoveringCurrentPositionLiftPercentageAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readWindowCoveringCurrentPositionTiltPercentageCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readWindowCoveringCurrentPositionTiltPercentageAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.WindowCovering.ID, ClusterIDMapping.WindowCovering.Attribute.CurrentPositionTiltPercentage.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.WindowCoveringCluster) cluster).readCurrentPositionTiltPercentageAttribute(
//              (ChipClusters.WindowCoveringCluster.CurrentPositionTiltPercentageAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedWindowCoveringClusterCurrentPositionTiltPercentageAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readWindowCoveringCurrentPositionTiltPercentageCommandParams
        );
        result.put("readCurrentPositionTiltPercentageAttribute", readWindowCoveringCurrentPositionTiltPercentageAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readWindowCoveringOperationalStatusCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readWindowCoveringOperationalStatusAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.WindowCovering.ID, ClusterIDMapping.WindowCovering.Attribute.OperationalStatus.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.WindowCoveringCluster) cluster).readOperationalStatusAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readWindowCoveringOperationalStatusCommandParams
        );
        result.put("readOperationalStatusAttribute", readWindowCoveringOperationalStatusAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readWindowCoveringTargetPositionLiftPercent100thsCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readWindowCoveringTargetPositionLiftPercent100thsAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.WindowCovering.ID, ClusterIDMapping.WindowCovering.Attribute.TargetPositionLiftPercent100ths.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.WindowCoveringCluster) cluster).readTargetPositionLiftPercent100thsAttribute(
//              (ChipClusters.WindowCoveringCluster.TargetPositionLiftPercent100thsAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedWindowCoveringClusterTargetPositionLiftPercent100thsAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readWindowCoveringTargetPositionLiftPercent100thsCommandParams
        );
        result.put("readTargetPositionLiftPercent100thsAttribute", readWindowCoveringTargetPositionLiftPercent100thsAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readWindowCoveringTargetPositionTiltPercent100thsCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readWindowCoveringTargetPositionTiltPercent100thsAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.WindowCovering.ID, ClusterIDMapping.WindowCovering.Attribute.TargetPositionTiltPercent100ths.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.WindowCoveringCluster) cluster).readTargetPositionTiltPercent100thsAttribute(
//              (ChipClusters.WindowCoveringCluster.TargetPositionTiltPercent100thsAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedWindowCoveringClusterTargetPositionTiltPercent100thsAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readWindowCoveringTargetPositionTiltPercent100thsCommandParams
        );
        result.put("readTargetPositionTiltPercent100thsAttribute", readWindowCoveringTargetPositionTiltPercent100thsAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readWindowCoveringEndProductTypeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readWindowCoveringEndProductTypeAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.WindowCovering.ID, ClusterIDMapping.WindowCovering.Attribute.EndProductType.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.WindowCoveringCluster) cluster).readEndProductTypeAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readWindowCoveringEndProductTypeCommandParams
        );
        result.put("readEndProductTypeAttribute", readWindowCoveringEndProductTypeAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readWindowCoveringCurrentPositionLiftPercent100thsCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readWindowCoveringCurrentPositionLiftPercent100thsAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.WindowCovering.ID, ClusterIDMapping.WindowCovering.Attribute.CurrentPositionLiftPercent100ths.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.WindowCoveringCluster) cluster).readCurrentPositionLiftPercent100thsAttribute(
//              (ChipClusters.WindowCoveringCluster.CurrentPositionLiftPercent100thsAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedWindowCoveringClusterCurrentPositionLiftPercent100thsAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readWindowCoveringCurrentPositionLiftPercent100thsCommandParams
        );
        result.put("readCurrentPositionLiftPercent100thsAttribute", readWindowCoveringCurrentPositionLiftPercent100thsAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readWindowCoveringCurrentPositionTiltPercent100thsCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readWindowCoveringCurrentPositionTiltPercent100thsAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.WindowCovering.ID, ClusterIDMapping.WindowCovering.Attribute.CurrentPositionTiltPercent100ths.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.WindowCoveringCluster) cluster).readCurrentPositionTiltPercent100thsAttribute(
//              (ChipClusters.WindowCoveringCluster.CurrentPositionTiltPercent100thsAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedWindowCoveringClusterCurrentPositionTiltPercent100thsAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readWindowCoveringCurrentPositionTiltPercent100thsCommandParams
        );
        result.put("readCurrentPositionTiltPercent100thsAttribute", readWindowCoveringCurrentPositionTiltPercent100thsAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readWindowCoveringInstalledOpenLimitLiftCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readWindowCoveringInstalledOpenLimitLiftAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.WindowCovering.ID, ClusterIDMapping.WindowCovering.Attribute.InstalledOpenLimitLift.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.WindowCoveringCluster) cluster).readInstalledOpenLimitLiftAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readWindowCoveringInstalledOpenLimitLiftCommandParams
        );
        result.put("readInstalledOpenLimitLiftAttribute", readWindowCoveringInstalledOpenLimitLiftAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readWindowCoveringInstalledClosedLimitLiftCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readWindowCoveringInstalledClosedLimitLiftAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.WindowCovering.ID, ClusterIDMapping.WindowCovering.Attribute.InstalledClosedLimitLift.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.WindowCoveringCluster) cluster).readInstalledClosedLimitLiftAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readWindowCoveringInstalledClosedLimitLiftCommandParams
        );
        result.put("readInstalledClosedLimitLiftAttribute", readWindowCoveringInstalledClosedLimitLiftAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readWindowCoveringInstalledOpenLimitTiltCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readWindowCoveringInstalledOpenLimitTiltAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.WindowCovering.ID, ClusterIDMapping.WindowCovering.Attribute.InstalledOpenLimitTilt.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.WindowCoveringCluster) cluster).readInstalledOpenLimitTiltAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readWindowCoveringInstalledOpenLimitTiltCommandParams
        );
        result.put("readInstalledOpenLimitTiltAttribute", readWindowCoveringInstalledOpenLimitTiltAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readWindowCoveringInstalledClosedLimitTiltCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readWindowCoveringInstalledClosedLimitTiltAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.WindowCovering.ID, ClusterIDMapping.WindowCovering.Attribute.InstalledClosedLimitTilt.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.WindowCoveringCluster) cluster).readInstalledClosedLimitTiltAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readWindowCoveringInstalledClosedLimitTiltCommandParams
        );
        result.put("readInstalledClosedLimitTiltAttribute", readWindowCoveringInstalledClosedLimitTiltAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readWindowCoveringModeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readWindowCoveringModeAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.WindowCovering.ID, ClusterIDMapping.WindowCovering.Attribute.Mode.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.WindowCoveringCluster) cluster).readModeAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readWindowCoveringModeCommandParams
        );
        result.put("readModeAttribute", readWindowCoveringModeAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readWindowCoveringSafetyStatusCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readWindowCoveringSafetyStatusAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.WindowCovering.ID, ClusterIDMapping.WindowCovering.Attribute.SafetyStatus.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.WindowCoveringCluster) cluster).readSafetyStatusAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readWindowCoveringSafetyStatusCommandParams
        );
        result.put("readSafetyStatusAttribute", readWindowCoveringSafetyStatusAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readWindowCoveringGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readWindowCoveringGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.WindowCovering.ID, ClusterIDMapping.WindowCovering.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.WindowCoveringCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.WindowCoveringCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedWindowCoveringClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readWindowCoveringGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readWindowCoveringGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readWindowCoveringAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readWindowCoveringAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.WindowCovering.ID, ClusterIDMapping.WindowCovering.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.WindowCoveringCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.WindowCoveringCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedWindowCoveringClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readWindowCoveringAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readWindowCoveringAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readWindowCoveringEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readWindowCoveringEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.WindowCovering.ID, ClusterIDMapping.WindowCovering.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.WindowCoveringCluster) cluster).readEventListAttribute(
//              (ChipClusters.WindowCoveringCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedWindowCoveringClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readWindowCoveringEventListCommandParams
        );
        result.put("readEventListAttribute", readWindowCoveringEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readWindowCoveringAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readWindowCoveringAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.WindowCovering.ID, ClusterIDMapping.WindowCovering.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.WindowCoveringCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.WindowCoveringCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedWindowCoveringClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readWindowCoveringAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readWindowCoveringAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readWindowCoveringFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readWindowCoveringFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.WindowCovering.ID, ClusterIDMapping.WindowCovering.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.WindowCoveringCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readWindowCoveringFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readWindowCoveringFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readWindowCoveringClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readWindowCoveringClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.WindowCovering.ID, ClusterIDMapping.WindowCovering.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.WindowCoveringCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readWindowCoveringClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readWindowCoveringClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readBarrierControlInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readBarrierControlBarrierMovingStateCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBarrierControlBarrierMovingStateAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BarrierControl.ID, ClusterIDMapping.BarrierControl.Attribute.BarrierMovingState.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BarrierControlCluster) cluster).readBarrierMovingStateAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBarrierControlBarrierMovingStateCommandParams
        );
        result.put("readBarrierMovingStateAttribute", readBarrierControlBarrierMovingStateAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBarrierControlBarrierSafetyStatusCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBarrierControlBarrierSafetyStatusAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BarrierControl.ID, ClusterIDMapping.BarrierControl.Attribute.BarrierSafetyStatus.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BarrierControlCluster) cluster).readBarrierSafetyStatusAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBarrierControlBarrierSafetyStatusCommandParams
        );
        result.put("readBarrierSafetyStatusAttribute", readBarrierControlBarrierSafetyStatusAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBarrierControlBarrierCapabilitiesCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBarrierControlBarrierCapabilitiesAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BarrierControl.ID, ClusterIDMapping.BarrierControl.Attribute.BarrierCapabilities.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BarrierControlCluster) cluster).readBarrierCapabilitiesAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBarrierControlBarrierCapabilitiesCommandParams
        );
        result.put("readBarrierCapabilitiesAttribute", readBarrierControlBarrierCapabilitiesAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBarrierControlBarrierOpenEventsCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBarrierControlBarrierOpenEventsAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BarrierControl.ID, ClusterIDMapping.BarrierControl.Attribute.BarrierOpenEvents.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BarrierControlCluster) cluster).readBarrierOpenEventsAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBarrierControlBarrierOpenEventsCommandParams
        );
        result.put("readBarrierOpenEventsAttribute", readBarrierControlBarrierOpenEventsAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBarrierControlBarrierCloseEventsCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBarrierControlBarrierCloseEventsAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BarrierControl.ID, ClusterIDMapping.BarrierControl.Attribute.BarrierCloseEvents.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BarrierControlCluster) cluster).readBarrierCloseEventsAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBarrierControlBarrierCloseEventsCommandParams
        );
        result.put("readBarrierCloseEventsAttribute", readBarrierControlBarrierCloseEventsAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBarrierControlBarrierCommandOpenEventsCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBarrierControlBarrierCommandOpenEventsAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BarrierControl.ID, ClusterIDMapping.BarrierControl.Attribute.BarrierCommandOpenEvents.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BarrierControlCluster) cluster).readBarrierCommandOpenEventsAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBarrierControlBarrierCommandOpenEventsCommandParams
        );
        result.put("readBarrierCommandOpenEventsAttribute", readBarrierControlBarrierCommandOpenEventsAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBarrierControlBarrierCommandCloseEventsCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBarrierControlBarrierCommandCloseEventsAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BarrierControl.ID, ClusterIDMapping.BarrierControl.Attribute.BarrierCommandCloseEvents.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BarrierControlCluster) cluster).readBarrierCommandCloseEventsAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBarrierControlBarrierCommandCloseEventsCommandParams
        );
        result.put("readBarrierCommandCloseEventsAttribute", readBarrierControlBarrierCommandCloseEventsAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBarrierControlBarrierOpenPeriodCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBarrierControlBarrierOpenPeriodAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BarrierControl.ID, ClusterIDMapping.BarrierControl.Attribute.BarrierOpenPeriod.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BarrierControlCluster) cluster).readBarrierOpenPeriodAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBarrierControlBarrierOpenPeriodCommandParams
        );
        result.put("readBarrierOpenPeriodAttribute", readBarrierControlBarrierOpenPeriodAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBarrierControlBarrierClosePeriodCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBarrierControlBarrierClosePeriodAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BarrierControl.ID, ClusterIDMapping.BarrierControl.Attribute.BarrierClosePeriod.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BarrierControlCluster) cluster).readBarrierClosePeriodAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBarrierControlBarrierClosePeriodCommandParams
        );
        result.put("readBarrierClosePeriodAttribute", readBarrierControlBarrierClosePeriodAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBarrierControlBarrierPositionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBarrierControlBarrierPositionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BarrierControl.ID, ClusterIDMapping.BarrierControl.Attribute.BarrierPosition.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BarrierControlCluster) cluster).readBarrierPositionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBarrierControlBarrierPositionCommandParams
        );
        result.put("readBarrierPositionAttribute", readBarrierControlBarrierPositionAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBarrierControlGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBarrierControlGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BarrierControl.ID, ClusterIDMapping.BarrierControl.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BarrierControlCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.BarrierControlCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBarrierControlClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBarrierControlGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readBarrierControlGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBarrierControlAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBarrierControlAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BarrierControl.ID, ClusterIDMapping.BarrierControl.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BarrierControlCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.BarrierControlCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBarrierControlClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBarrierControlAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readBarrierControlAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBarrierControlEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBarrierControlEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BarrierControl.ID, ClusterIDMapping.BarrierControl.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BarrierControlCluster) cluster).readEventListAttribute(
//              (ChipClusters.BarrierControlCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBarrierControlClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBarrierControlEventListCommandParams
        );
        result.put("readEventListAttribute", readBarrierControlEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBarrierControlAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBarrierControlAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BarrierControl.ID, ClusterIDMapping.BarrierControl.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BarrierControlCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.BarrierControlCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBarrierControlClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBarrierControlAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readBarrierControlAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBarrierControlFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBarrierControlFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BarrierControl.ID, ClusterIDMapping.BarrierControl.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BarrierControlCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBarrierControlFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readBarrierControlFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBarrierControlClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBarrierControlClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BarrierControl.ID, ClusterIDMapping.BarrierControl.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BarrierControlCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBarrierControlClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readBarrierControlClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readPumpConfigurationAndControlInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readPumpConfigurationAndControlMaxPressureCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPumpConfigurationAndControlMaxPressureAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PumpConfigurationAndControl.ID, ClusterIDMapping.PumpConfigurationAndControl.Attribute.MaxPressure.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PumpConfigurationAndControlCluster) cluster).readMaxPressureAttribute(
//              (ChipClusters.PumpConfigurationAndControlCluster.MaxPressureAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPumpConfigurationAndControlClusterMaxPressureAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPumpConfigurationAndControlMaxPressureCommandParams
        );
        result.put("readMaxPressureAttribute", readPumpConfigurationAndControlMaxPressureAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPumpConfigurationAndControlMaxSpeedCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPumpConfigurationAndControlMaxSpeedAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PumpConfigurationAndControl.ID, ClusterIDMapping.PumpConfigurationAndControl.Attribute.MaxSpeed.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PumpConfigurationAndControlCluster) cluster).readMaxSpeedAttribute(
//              (ChipClusters.PumpConfigurationAndControlCluster.MaxSpeedAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPumpConfigurationAndControlClusterMaxSpeedAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPumpConfigurationAndControlMaxSpeedCommandParams
        );
        result.put("readMaxSpeedAttribute", readPumpConfigurationAndControlMaxSpeedAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPumpConfigurationAndControlMaxFlowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPumpConfigurationAndControlMaxFlowAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PumpConfigurationAndControl.ID, ClusterIDMapping.PumpConfigurationAndControl.Attribute.MaxFlow.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PumpConfigurationAndControlCluster) cluster).readMaxFlowAttribute(
//              (ChipClusters.PumpConfigurationAndControlCluster.MaxFlowAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPumpConfigurationAndControlClusterMaxFlowAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPumpConfigurationAndControlMaxFlowCommandParams
        );
        result.put("readMaxFlowAttribute", readPumpConfigurationAndControlMaxFlowAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPumpConfigurationAndControlMinConstPressureCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPumpConfigurationAndControlMinConstPressureAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PumpConfigurationAndControl.ID, ClusterIDMapping.PumpConfigurationAndControl.Attribute.MinConstPressure.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PumpConfigurationAndControlCluster) cluster).readMinConstPressureAttribute(
//              (ChipClusters.PumpConfigurationAndControlCluster.MinConstPressureAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPumpConfigurationAndControlClusterMinConstPressureAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPumpConfigurationAndControlMinConstPressureCommandParams
        );
        result.put("readMinConstPressureAttribute", readPumpConfigurationAndControlMinConstPressureAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPumpConfigurationAndControlMaxConstPressureCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPumpConfigurationAndControlMaxConstPressureAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PumpConfigurationAndControl.ID, ClusterIDMapping.PumpConfigurationAndControl.Attribute.MaxConstPressure.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PumpConfigurationAndControlCluster) cluster).readMaxConstPressureAttribute(
//              (ChipClusters.PumpConfigurationAndControlCluster.MaxConstPressureAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPumpConfigurationAndControlClusterMaxConstPressureAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPumpConfigurationAndControlMaxConstPressureCommandParams
        );
        result.put("readMaxConstPressureAttribute", readPumpConfigurationAndControlMaxConstPressureAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPumpConfigurationAndControlMinCompPressureCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPumpConfigurationAndControlMinCompPressureAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PumpConfigurationAndControl.ID, ClusterIDMapping.PumpConfigurationAndControl.Attribute.MinCompPressure.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PumpConfigurationAndControlCluster) cluster).readMinCompPressureAttribute(
//              (ChipClusters.PumpConfigurationAndControlCluster.MinCompPressureAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPumpConfigurationAndControlClusterMinCompPressureAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPumpConfigurationAndControlMinCompPressureCommandParams
        );
        result.put("readMinCompPressureAttribute", readPumpConfigurationAndControlMinCompPressureAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPumpConfigurationAndControlMaxCompPressureCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPumpConfigurationAndControlMaxCompPressureAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PumpConfigurationAndControl.ID, ClusterIDMapping.PumpConfigurationAndControl.Attribute.MaxCompPressure.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PumpConfigurationAndControlCluster) cluster).readMaxCompPressureAttribute(
//              (ChipClusters.PumpConfigurationAndControlCluster.MaxCompPressureAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPumpConfigurationAndControlClusterMaxCompPressureAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPumpConfigurationAndControlMaxCompPressureCommandParams
        );
        result.put("readMaxCompPressureAttribute", readPumpConfigurationAndControlMaxCompPressureAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPumpConfigurationAndControlMinConstSpeedCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPumpConfigurationAndControlMinConstSpeedAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PumpConfigurationAndControl.ID, ClusterIDMapping.PumpConfigurationAndControl.Attribute.MinConstSpeed.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PumpConfigurationAndControlCluster) cluster).readMinConstSpeedAttribute(
//              (ChipClusters.PumpConfigurationAndControlCluster.MinConstSpeedAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPumpConfigurationAndControlClusterMinConstSpeedAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPumpConfigurationAndControlMinConstSpeedCommandParams
        );
        result.put("readMinConstSpeedAttribute", readPumpConfigurationAndControlMinConstSpeedAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPumpConfigurationAndControlMaxConstSpeedCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPumpConfigurationAndControlMaxConstSpeedAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PumpConfigurationAndControl.ID, ClusterIDMapping.PumpConfigurationAndControl.Attribute.MaxConstSpeed.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PumpConfigurationAndControlCluster) cluster).readMaxConstSpeedAttribute(
//              (ChipClusters.PumpConfigurationAndControlCluster.MaxConstSpeedAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPumpConfigurationAndControlClusterMaxConstSpeedAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPumpConfigurationAndControlMaxConstSpeedCommandParams
        );
        result.put("readMaxConstSpeedAttribute", readPumpConfigurationAndControlMaxConstSpeedAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPumpConfigurationAndControlMinConstFlowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPumpConfigurationAndControlMinConstFlowAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PumpConfigurationAndControl.ID, ClusterIDMapping.PumpConfigurationAndControl.Attribute.MinConstFlow.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PumpConfigurationAndControlCluster) cluster).readMinConstFlowAttribute(
//              (ChipClusters.PumpConfigurationAndControlCluster.MinConstFlowAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPumpConfigurationAndControlClusterMinConstFlowAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPumpConfigurationAndControlMinConstFlowCommandParams
        );
        result.put("readMinConstFlowAttribute", readPumpConfigurationAndControlMinConstFlowAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPumpConfigurationAndControlMaxConstFlowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPumpConfigurationAndControlMaxConstFlowAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PumpConfigurationAndControl.ID, ClusterIDMapping.PumpConfigurationAndControl.Attribute.MaxConstFlow.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PumpConfigurationAndControlCluster) cluster).readMaxConstFlowAttribute(
//              (ChipClusters.PumpConfigurationAndControlCluster.MaxConstFlowAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPumpConfigurationAndControlClusterMaxConstFlowAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPumpConfigurationAndControlMaxConstFlowCommandParams
        );
        result.put("readMaxConstFlowAttribute", readPumpConfigurationAndControlMaxConstFlowAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPumpConfigurationAndControlMinConstTempCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPumpConfigurationAndControlMinConstTempAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PumpConfigurationAndControl.ID, ClusterIDMapping.PumpConfigurationAndControl.Attribute.MinConstTemp.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PumpConfigurationAndControlCluster) cluster).readMinConstTempAttribute(
//              (ChipClusters.PumpConfigurationAndControlCluster.MinConstTempAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPumpConfigurationAndControlClusterMinConstTempAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPumpConfigurationAndControlMinConstTempCommandParams
        );
        result.put("readMinConstTempAttribute", readPumpConfigurationAndControlMinConstTempAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPumpConfigurationAndControlMaxConstTempCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPumpConfigurationAndControlMaxConstTempAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PumpConfigurationAndControl.ID, ClusterIDMapping.PumpConfigurationAndControl.Attribute.MaxConstTemp.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PumpConfigurationAndControlCluster) cluster).readMaxConstTempAttribute(
//              (ChipClusters.PumpConfigurationAndControlCluster.MaxConstTempAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPumpConfigurationAndControlClusterMaxConstTempAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPumpConfigurationAndControlMaxConstTempCommandParams
        );
        result.put("readMaxConstTempAttribute", readPumpConfigurationAndControlMaxConstTempAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPumpConfigurationAndControlPumpStatusCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPumpConfigurationAndControlPumpStatusAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PumpConfigurationAndControl.ID, ClusterIDMapping.PumpConfigurationAndControl.Attribute.PumpStatus.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PumpConfigurationAndControlCluster) cluster).readPumpStatusAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPumpConfigurationAndControlPumpStatusCommandParams
        );
        result.put("readPumpStatusAttribute", readPumpConfigurationAndControlPumpStatusAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPumpConfigurationAndControlEffectiveOperationModeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPumpConfigurationAndControlEffectiveOperationModeAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PumpConfigurationAndControl.ID, ClusterIDMapping.PumpConfigurationAndControl.Attribute.EffectiveOperationMode.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PumpConfigurationAndControlCluster) cluster).readEffectiveOperationModeAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPumpConfigurationAndControlEffectiveOperationModeCommandParams
        );
        result.put("readEffectiveOperationModeAttribute", readPumpConfigurationAndControlEffectiveOperationModeAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPumpConfigurationAndControlEffectiveControlModeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPumpConfigurationAndControlEffectiveControlModeAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PumpConfigurationAndControl.ID, ClusterIDMapping.PumpConfigurationAndControl.Attribute.EffectiveControlMode.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PumpConfigurationAndControlCluster) cluster).readEffectiveControlModeAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPumpConfigurationAndControlEffectiveControlModeCommandParams
        );
        result.put("readEffectiveControlModeAttribute", readPumpConfigurationAndControlEffectiveControlModeAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPumpConfigurationAndControlCapacityCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPumpConfigurationAndControlCapacityAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PumpConfigurationAndControl.ID, ClusterIDMapping.PumpConfigurationAndControl.Attribute.Capacity.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PumpConfigurationAndControlCluster) cluster).readCapacityAttribute(
//              (ChipClusters.PumpConfigurationAndControlCluster.CapacityAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPumpConfigurationAndControlClusterCapacityAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPumpConfigurationAndControlCapacityCommandParams
        );
        result.put("readCapacityAttribute", readPumpConfigurationAndControlCapacityAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPumpConfigurationAndControlSpeedCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPumpConfigurationAndControlSpeedAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PumpConfigurationAndControl.ID, ClusterIDMapping.PumpConfigurationAndControl.Attribute.Speed.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PumpConfigurationAndControlCluster) cluster).readSpeedAttribute(
//              (ChipClusters.PumpConfigurationAndControlCluster.SpeedAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPumpConfigurationAndControlClusterSpeedAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPumpConfigurationAndControlSpeedCommandParams
        );
        result.put("readSpeedAttribute", readPumpConfigurationAndControlSpeedAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPumpConfigurationAndControlLifetimeRunningHoursCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPumpConfigurationAndControlLifetimeRunningHoursAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PumpConfigurationAndControl.ID, ClusterIDMapping.PumpConfigurationAndControl.Attribute.LifetimeRunningHours.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PumpConfigurationAndControlCluster) cluster).readLifetimeRunningHoursAttribute(
//              (ChipClusters.PumpConfigurationAndControlCluster.LifetimeRunningHoursAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPumpConfigurationAndControlClusterLifetimeRunningHoursAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPumpConfigurationAndControlLifetimeRunningHoursCommandParams
        );
        result.put("readLifetimeRunningHoursAttribute", readPumpConfigurationAndControlLifetimeRunningHoursAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPumpConfigurationAndControlPowerCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPumpConfigurationAndControlPowerAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PumpConfigurationAndControl.ID, ClusterIDMapping.PumpConfigurationAndControl.Attribute.Power.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PumpConfigurationAndControlCluster) cluster).readPowerAttribute(
//              (ChipClusters.PumpConfigurationAndControlCluster.PowerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPumpConfigurationAndControlClusterPowerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPumpConfigurationAndControlPowerCommandParams
        );
        result.put("readPowerAttribute", readPumpConfigurationAndControlPowerAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPumpConfigurationAndControlLifetimeEnergyConsumedCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPumpConfigurationAndControlLifetimeEnergyConsumedAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PumpConfigurationAndControl.ID, ClusterIDMapping.PumpConfigurationAndControl.Attribute.LifetimeEnergyConsumed.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PumpConfigurationAndControlCluster) cluster).readLifetimeEnergyConsumedAttribute(
//              (ChipClusters.PumpConfigurationAndControlCluster.LifetimeEnergyConsumedAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPumpConfigurationAndControlClusterLifetimeEnergyConsumedAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPumpConfigurationAndControlLifetimeEnergyConsumedCommandParams
        );
        result.put("readLifetimeEnergyConsumedAttribute", readPumpConfigurationAndControlLifetimeEnergyConsumedAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPumpConfigurationAndControlOperationModeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPumpConfigurationAndControlOperationModeAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PumpConfigurationAndControl.ID, ClusterIDMapping.PumpConfigurationAndControl.Attribute.OperationMode.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PumpConfigurationAndControlCluster) cluster).readOperationModeAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPumpConfigurationAndControlOperationModeCommandParams
        );
        result.put("readOperationModeAttribute", readPumpConfigurationAndControlOperationModeAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPumpConfigurationAndControlControlModeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPumpConfigurationAndControlControlModeAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PumpConfigurationAndControl.ID, ClusterIDMapping.PumpConfigurationAndControl.Attribute.ControlMode.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PumpConfigurationAndControlCluster) cluster).readControlModeAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPumpConfigurationAndControlControlModeCommandParams
        );
        result.put("readControlModeAttribute", readPumpConfigurationAndControlControlModeAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPumpConfigurationAndControlGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPumpConfigurationAndControlGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PumpConfigurationAndControl.ID, ClusterIDMapping.PumpConfigurationAndControl.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PumpConfigurationAndControlCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.PumpConfigurationAndControlCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPumpConfigurationAndControlClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPumpConfigurationAndControlGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readPumpConfigurationAndControlGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPumpConfigurationAndControlAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPumpConfigurationAndControlAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PumpConfigurationAndControl.ID, ClusterIDMapping.PumpConfigurationAndControl.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PumpConfigurationAndControlCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.PumpConfigurationAndControlCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPumpConfigurationAndControlClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPumpConfigurationAndControlAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readPumpConfigurationAndControlAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPumpConfigurationAndControlEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPumpConfigurationAndControlEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PumpConfigurationAndControl.ID, ClusterIDMapping.PumpConfigurationAndControl.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PumpConfigurationAndControlCluster) cluster).readEventListAttribute(
//              (ChipClusters.PumpConfigurationAndControlCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPumpConfigurationAndControlClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPumpConfigurationAndControlEventListCommandParams
        );
        result.put("readEventListAttribute", readPumpConfigurationAndControlEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPumpConfigurationAndControlAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPumpConfigurationAndControlAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PumpConfigurationAndControl.ID, ClusterIDMapping.PumpConfigurationAndControl.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PumpConfigurationAndControlCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.PumpConfigurationAndControlCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPumpConfigurationAndControlClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPumpConfigurationAndControlAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readPumpConfigurationAndControlAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPumpConfigurationAndControlFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPumpConfigurationAndControlFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PumpConfigurationAndControl.ID, ClusterIDMapping.PumpConfigurationAndControl.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PumpConfigurationAndControlCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPumpConfigurationAndControlFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readPumpConfigurationAndControlFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPumpConfigurationAndControlClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPumpConfigurationAndControlClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PumpConfigurationAndControl.ID, ClusterIDMapping.PumpConfigurationAndControl.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PumpConfigurationAndControlCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPumpConfigurationAndControlClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readPumpConfigurationAndControlClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readThermostatInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readThermostatLocalTemperatureCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThermostatLocalTemperatureAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Thermostat.ID, ClusterIDMapping.Thermostat.Attribute.LocalTemperature.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThermostatCluster) cluster).readLocalTemperatureAttribute(
//              (ChipClusters.ThermostatCluster.LocalTemperatureAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedThermostatClusterLocalTemperatureAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThermostatLocalTemperatureCommandParams
        );
        result.put("readLocalTemperatureAttribute", readThermostatLocalTemperatureAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThermostatOutdoorTemperatureCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThermostatOutdoorTemperatureAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Thermostat.ID, ClusterIDMapping.Thermostat.Attribute.OutdoorTemperature.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThermostatCluster) cluster).readOutdoorTemperatureAttribute(
//              (ChipClusters.ThermostatCluster.OutdoorTemperatureAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedThermostatClusterOutdoorTemperatureAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThermostatOutdoorTemperatureCommandParams
        );
        result.put("readOutdoorTemperatureAttribute", readThermostatOutdoorTemperatureAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThermostatOccupancyCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThermostatOccupancyAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Thermostat.ID, ClusterIDMapping.Thermostat.Attribute.Occupancy.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThermostatCluster) cluster).readOccupancyAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThermostatOccupancyCommandParams
        );
        result.put("readOccupancyAttribute", readThermostatOccupancyAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThermostatAbsMinHeatSetpointLimitCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThermostatAbsMinHeatSetpointLimitAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Thermostat.ID, ClusterIDMapping.Thermostat.Attribute.AbsMinHeatSetpointLimit.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThermostatCluster) cluster).readAbsMinHeatSetpointLimitAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThermostatAbsMinHeatSetpointLimitCommandParams
        );
        result.put("readAbsMinHeatSetpointLimitAttribute", readThermostatAbsMinHeatSetpointLimitAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThermostatAbsMaxHeatSetpointLimitCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThermostatAbsMaxHeatSetpointLimitAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Thermostat.ID, ClusterIDMapping.Thermostat.Attribute.AbsMaxHeatSetpointLimit.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThermostatCluster) cluster).readAbsMaxHeatSetpointLimitAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThermostatAbsMaxHeatSetpointLimitCommandParams
        );
        result.put("readAbsMaxHeatSetpointLimitAttribute", readThermostatAbsMaxHeatSetpointLimitAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThermostatAbsMinCoolSetpointLimitCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThermostatAbsMinCoolSetpointLimitAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Thermostat.ID, ClusterIDMapping.Thermostat.Attribute.AbsMinCoolSetpointLimit.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThermostatCluster) cluster).readAbsMinCoolSetpointLimitAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThermostatAbsMinCoolSetpointLimitCommandParams
        );
        result.put("readAbsMinCoolSetpointLimitAttribute", readThermostatAbsMinCoolSetpointLimitAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThermostatAbsMaxCoolSetpointLimitCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThermostatAbsMaxCoolSetpointLimitAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Thermostat.ID, ClusterIDMapping.Thermostat.Attribute.AbsMaxCoolSetpointLimit.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThermostatCluster) cluster).readAbsMaxCoolSetpointLimitAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThermostatAbsMaxCoolSetpointLimitCommandParams
        );
        result.put("readAbsMaxCoolSetpointLimitAttribute", readThermostatAbsMaxCoolSetpointLimitAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThermostatPICoolingDemandCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThermostatPICoolingDemandAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Thermostat.ID, ClusterIDMapping.Thermostat.Attribute.PICoolingDemand.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThermostatCluster) cluster).readPICoolingDemandAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThermostatPICoolingDemandCommandParams
        );
        result.put("readPICoolingDemandAttribute", readThermostatPICoolingDemandAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThermostatPIHeatingDemandCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThermostatPIHeatingDemandAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Thermostat.ID, ClusterIDMapping.Thermostat.Attribute.PIHeatingDemand.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThermostatCluster) cluster).readPIHeatingDemandAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThermostatPIHeatingDemandCommandParams
        );
        result.put("readPIHeatingDemandAttribute", readThermostatPIHeatingDemandAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThermostatHVACSystemTypeConfigurationCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThermostatHVACSystemTypeConfigurationAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Thermostat.ID, ClusterIDMapping.Thermostat.Attribute.HVACSystemTypeConfiguration.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThermostatCluster) cluster).readHVACSystemTypeConfigurationAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThermostatHVACSystemTypeConfigurationCommandParams
        );
        result.put("readHVACSystemTypeConfigurationAttribute", readThermostatHVACSystemTypeConfigurationAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThermostatLocalTemperatureCalibrationCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThermostatLocalTemperatureCalibrationAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Thermostat.ID, ClusterIDMapping.Thermostat.Attribute.LocalTemperatureCalibration.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThermostatCluster) cluster).readLocalTemperatureCalibrationAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThermostatLocalTemperatureCalibrationCommandParams
        );
        result.put("readLocalTemperatureCalibrationAttribute", readThermostatLocalTemperatureCalibrationAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThermostatOccupiedCoolingSetpointCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThermostatOccupiedCoolingSetpointAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Thermostat.ID, ClusterIDMapping.Thermostat.Attribute.OccupiedCoolingSetpoint.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThermostatCluster) cluster).readOccupiedCoolingSetpointAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThermostatOccupiedCoolingSetpointCommandParams
        );
        result.put("readOccupiedCoolingSetpointAttribute", readThermostatOccupiedCoolingSetpointAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThermostatOccupiedHeatingSetpointCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThermostatOccupiedHeatingSetpointAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Thermostat.ID, ClusterIDMapping.Thermostat.Attribute.OccupiedHeatingSetpoint.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThermostatCluster) cluster).readOccupiedHeatingSetpointAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThermostatOccupiedHeatingSetpointCommandParams
        );
        result.put("readOccupiedHeatingSetpointAttribute", readThermostatOccupiedHeatingSetpointAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThermostatUnoccupiedCoolingSetpointCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThermostatUnoccupiedCoolingSetpointAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Thermostat.ID, ClusterIDMapping.Thermostat.Attribute.UnoccupiedCoolingSetpoint.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThermostatCluster) cluster).readUnoccupiedCoolingSetpointAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThermostatUnoccupiedCoolingSetpointCommandParams
        );
        result.put("readUnoccupiedCoolingSetpointAttribute", readThermostatUnoccupiedCoolingSetpointAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThermostatUnoccupiedHeatingSetpointCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThermostatUnoccupiedHeatingSetpointAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Thermostat.ID, ClusterIDMapping.Thermostat.Attribute.UnoccupiedHeatingSetpoint.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThermostatCluster) cluster).readUnoccupiedHeatingSetpointAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThermostatUnoccupiedHeatingSetpointCommandParams
        );
        result.put("readUnoccupiedHeatingSetpointAttribute", readThermostatUnoccupiedHeatingSetpointAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThermostatMinHeatSetpointLimitCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThermostatMinHeatSetpointLimitAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Thermostat.ID, ClusterIDMapping.Thermostat.Attribute.MinHeatSetpointLimit.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThermostatCluster) cluster).readMinHeatSetpointLimitAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThermostatMinHeatSetpointLimitCommandParams
        );
        result.put("readMinHeatSetpointLimitAttribute", readThermostatMinHeatSetpointLimitAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThermostatMaxHeatSetpointLimitCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThermostatMaxHeatSetpointLimitAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Thermostat.ID, ClusterIDMapping.Thermostat.Attribute.MaxHeatSetpointLimit.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThermostatCluster) cluster).readMaxHeatSetpointLimitAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThermostatMaxHeatSetpointLimitCommandParams
        );
        result.put("readMaxHeatSetpointLimitAttribute", readThermostatMaxHeatSetpointLimitAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThermostatMinCoolSetpointLimitCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThermostatMinCoolSetpointLimitAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Thermostat.ID, ClusterIDMapping.Thermostat.Attribute.MinCoolSetpointLimit.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThermostatCluster) cluster).readMinCoolSetpointLimitAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThermostatMinCoolSetpointLimitCommandParams
        );
        result.put("readMinCoolSetpointLimitAttribute", readThermostatMinCoolSetpointLimitAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThermostatMaxCoolSetpointLimitCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThermostatMaxCoolSetpointLimitAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Thermostat.ID, ClusterIDMapping.Thermostat.Attribute.MaxCoolSetpointLimit.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThermostatCluster) cluster).readMaxCoolSetpointLimitAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThermostatMaxCoolSetpointLimitCommandParams
        );
        result.put("readMaxCoolSetpointLimitAttribute", readThermostatMaxCoolSetpointLimitAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThermostatMinSetpointDeadBandCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThermostatMinSetpointDeadBandAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Thermostat.ID, ClusterIDMapping.Thermostat.Attribute.MinSetpointDeadBand.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThermostatCluster) cluster).readMinSetpointDeadBandAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThermostatMinSetpointDeadBandCommandParams
        );
        result.put("readMinSetpointDeadBandAttribute", readThermostatMinSetpointDeadBandAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThermostatRemoteSensingCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThermostatRemoteSensingAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Thermostat.ID, ClusterIDMapping.Thermostat.Attribute.RemoteSensing.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThermostatCluster) cluster).readRemoteSensingAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThermostatRemoteSensingCommandParams
        );
        result.put("readRemoteSensingAttribute", readThermostatRemoteSensingAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThermostatControlSequenceOfOperationCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThermostatControlSequenceOfOperationAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Thermostat.ID, ClusterIDMapping.Thermostat.Attribute.ControlSequenceOfOperation.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThermostatCluster) cluster).readControlSequenceOfOperationAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThermostatControlSequenceOfOperationCommandParams
        );
        result.put("readControlSequenceOfOperationAttribute", readThermostatControlSequenceOfOperationAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThermostatSystemModeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThermostatSystemModeAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Thermostat.ID, ClusterIDMapping.Thermostat.Attribute.SystemMode.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThermostatCluster) cluster).readSystemModeAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThermostatSystemModeCommandParams
        );
        result.put("readSystemModeAttribute", readThermostatSystemModeAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThermostatThermostatRunningModeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThermostatThermostatRunningModeAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Thermostat.ID, ClusterIDMapping.Thermostat.Attribute.ThermostatRunningMode.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThermostatCluster) cluster).readThermostatRunningModeAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThermostatThermostatRunningModeCommandParams
        );
        result.put("readThermostatRunningModeAttribute", readThermostatThermostatRunningModeAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThermostatStartOfWeekCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThermostatStartOfWeekAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Thermostat.ID, ClusterIDMapping.Thermostat.Attribute.StartOfWeek.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThermostatCluster) cluster).readStartOfWeekAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThermostatStartOfWeekCommandParams
        );
        result.put("readStartOfWeekAttribute", readThermostatStartOfWeekAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThermostatNumberOfWeeklyTransitionsCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThermostatNumberOfWeeklyTransitionsAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Thermostat.ID, ClusterIDMapping.Thermostat.Attribute.NumberOfWeeklyTransitions.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThermostatCluster) cluster).readNumberOfWeeklyTransitionsAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThermostatNumberOfWeeklyTransitionsCommandParams
        );
        result.put("readNumberOfWeeklyTransitionsAttribute", readThermostatNumberOfWeeklyTransitionsAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThermostatNumberOfDailyTransitionsCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThermostatNumberOfDailyTransitionsAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Thermostat.ID, ClusterIDMapping.Thermostat.Attribute.NumberOfDailyTransitions.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThermostatCluster) cluster).readNumberOfDailyTransitionsAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThermostatNumberOfDailyTransitionsCommandParams
        );
        result.put("readNumberOfDailyTransitionsAttribute", readThermostatNumberOfDailyTransitionsAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThermostatTemperatureSetpointHoldCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThermostatTemperatureSetpointHoldAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Thermostat.ID, ClusterIDMapping.Thermostat.Attribute.TemperatureSetpointHold.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThermostatCluster) cluster).readTemperatureSetpointHoldAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThermostatTemperatureSetpointHoldCommandParams
        );
        result.put("readTemperatureSetpointHoldAttribute", readThermostatTemperatureSetpointHoldAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThermostatTemperatureSetpointHoldDurationCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThermostatTemperatureSetpointHoldDurationAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Thermostat.ID, ClusterIDMapping.Thermostat.Attribute.TemperatureSetpointHoldDuration.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThermostatCluster) cluster).readTemperatureSetpointHoldDurationAttribute(
//              (ChipClusters.ThermostatCluster.TemperatureSetpointHoldDurationAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedThermostatClusterTemperatureSetpointHoldDurationAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThermostatTemperatureSetpointHoldDurationCommandParams
        );
        result.put("readTemperatureSetpointHoldDurationAttribute", readThermostatTemperatureSetpointHoldDurationAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThermostatThermostatProgrammingOperationModeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThermostatThermostatProgrammingOperationModeAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Thermostat.ID, ClusterIDMapping.Thermostat.Attribute.ThermostatProgrammingOperationMode.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThermostatCluster) cluster).readThermostatProgrammingOperationModeAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThermostatThermostatProgrammingOperationModeCommandParams
        );
        result.put("readThermostatProgrammingOperationModeAttribute", readThermostatThermostatProgrammingOperationModeAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThermostatThermostatRunningStateCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThermostatThermostatRunningStateAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Thermostat.ID, ClusterIDMapping.Thermostat.Attribute.ThermostatRunningState.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThermostatCluster) cluster).readThermostatRunningStateAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThermostatThermostatRunningStateCommandParams
        );
        result.put("readThermostatRunningStateAttribute", readThermostatThermostatRunningStateAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThermostatSetpointChangeSourceCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThermostatSetpointChangeSourceAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Thermostat.ID, ClusterIDMapping.Thermostat.Attribute.SetpointChangeSource.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThermostatCluster) cluster).readSetpointChangeSourceAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThermostatSetpointChangeSourceCommandParams
        );
        result.put("readSetpointChangeSourceAttribute", readThermostatSetpointChangeSourceAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThermostatSetpointChangeAmountCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThermostatSetpointChangeAmountAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Thermostat.ID, ClusterIDMapping.Thermostat.Attribute.SetpointChangeAmount.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThermostatCluster) cluster).readSetpointChangeAmountAttribute(
//              (ChipClusters.ThermostatCluster.SetpointChangeAmountAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedThermostatClusterSetpointChangeAmountAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThermostatSetpointChangeAmountCommandParams
        );
        result.put("readSetpointChangeAmountAttribute", readThermostatSetpointChangeAmountAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThermostatSetpointChangeSourceTimestampCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThermostatSetpointChangeSourceTimestampAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Thermostat.ID, ClusterIDMapping.Thermostat.Attribute.SetpointChangeSourceTimestamp.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThermostatCluster) cluster).readSetpointChangeSourceTimestampAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThermostatSetpointChangeSourceTimestampCommandParams
        );
        result.put("readSetpointChangeSourceTimestampAttribute", readThermostatSetpointChangeSourceTimestampAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThermostatOccupiedSetbackCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThermostatOccupiedSetbackAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Thermostat.ID, ClusterIDMapping.Thermostat.Attribute.OccupiedSetback.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThermostatCluster) cluster).readOccupiedSetbackAttribute(
//              (ChipClusters.ThermostatCluster.OccupiedSetbackAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedThermostatClusterOccupiedSetbackAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThermostatOccupiedSetbackCommandParams
        );
        result.put("readOccupiedSetbackAttribute", readThermostatOccupiedSetbackAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThermostatOccupiedSetbackMinCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThermostatOccupiedSetbackMinAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Thermostat.ID, ClusterIDMapping.Thermostat.Attribute.OccupiedSetbackMin.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThermostatCluster) cluster).readOccupiedSetbackMinAttribute(
//              (ChipClusters.ThermostatCluster.OccupiedSetbackMinAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedThermostatClusterOccupiedSetbackMinAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThermostatOccupiedSetbackMinCommandParams
        );
        result.put("readOccupiedSetbackMinAttribute", readThermostatOccupiedSetbackMinAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThermostatOccupiedSetbackMaxCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThermostatOccupiedSetbackMaxAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Thermostat.ID, ClusterIDMapping.Thermostat.Attribute.OccupiedSetbackMax.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThermostatCluster) cluster).readOccupiedSetbackMaxAttribute(
//              (ChipClusters.ThermostatCluster.OccupiedSetbackMaxAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedThermostatClusterOccupiedSetbackMaxAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThermostatOccupiedSetbackMaxCommandParams
        );
        result.put("readOccupiedSetbackMaxAttribute", readThermostatOccupiedSetbackMaxAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThermostatUnoccupiedSetbackCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThermostatUnoccupiedSetbackAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Thermostat.ID, ClusterIDMapping.Thermostat.Attribute.UnoccupiedSetback.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThermostatCluster) cluster).readUnoccupiedSetbackAttribute(
//              (ChipClusters.ThermostatCluster.UnoccupiedSetbackAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedThermostatClusterUnoccupiedSetbackAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThermostatUnoccupiedSetbackCommandParams
        );
        result.put("readUnoccupiedSetbackAttribute", readThermostatUnoccupiedSetbackAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThermostatUnoccupiedSetbackMinCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThermostatUnoccupiedSetbackMinAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Thermostat.ID, ClusterIDMapping.Thermostat.Attribute.UnoccupiedSetbackMin.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThermostatCluster) cluster).readUnoccupiedSetbackMinAttribute(
//              (ChipClusters.ThermostatCluster.UnoccupiedSetbackMinAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedThermostatClusterUnoccupiedSetbackMinAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThermostatUnoccupiedSetbackMinCommandParams
        );
        result.put("readUnoccupiedSetbackMinAttribute", readThermostatUnoccupiedSetbackMinAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThermostatUnoccupiedSetbackMaxCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThermostatUnoccupiedSetbackMaxAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Thermostat.ID, ClusterIDMapping.Thermostat.Attribute.UnoccupiedSetbackMax.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThermostatCluster) cluster).readUnoccupiedSetbackMaxAttribute(
//              (ChipClusters.ThermostatCluster.UnoccupiedSetbackMaxAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedThermostatClusterUnoccupiedSetbackMaxAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThermostatUnoccupiedSetbackMaxCommandParams
        );
        result.put("readUnoccupiedSetbackMaxAttribute", readThermostatUnoccupiedSetbackMaxAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThermostatEmergencyHeatDeltaCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThermostatEmergencyHeatDeltaAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Thermostat.ID, ClusterIDMapping.Thermostat.Attribute.EmergencyHeatDelta.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThermostatCluster) cluster).readEmergencyHeatDeltaAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThermostatEmergencyHeatDeltaCommandParams
        );
        result.put("readEmergencyHeatDeltaAttribute", readThermostatEmergencyHeatDeltaAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThermostatACTypeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThermostatACTypeAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Thermostat.ID, ClusterIDMapping.Thermostat.Attribute.ACType.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThermostatCluster) cluster).readACTypeAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThermostatACTypeCommandParams
        );
        result.put("readACTypeAttribute", readThermostatACTypeAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThermostatACCapacityCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThermostatACCapacityAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Thermostat.ID, ClusterIDMapping.Thermostat.Attribute.ACCapacity.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThermostatCluster) cluster).readACCapacityAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThermostatACCapacityCommandParams
        );
        result.put("readACCapacityAttribute", readThermostatACCapacityAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThermostatACRefrigerantTypeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThermostatACRefrigerantTypeAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Thermostat.ID, ClusterIDMapping.Thermostat.Attribute.ACRefrigerantType.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThermostatCluster) cluster).readACRefrigerantTypeAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThermostatACRefrigerantTypeCommandParams
        );
        result.put("readACRefrigerantTypeAttribute", readThermostatACRefrigerantTypeAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThermostatACCompressorTypeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThermostatACCompressorTypeAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Thermostat.ID, ClusterIDMapping.Thermostat.Attribute.ACCompressorType.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThermostatCluster) cluster).readACCompressorTypeAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThermostatACCompressorTypeCommandParams
        );
        result.put("readACCompressorTypeAttribute", readThermostatACCompressorTypeAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThermostatACErrorCodeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThermostatACErrorCodeAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Thermostat.ID, ClusterIDMapping.Thermostat.Attribute.ACErrorCode.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThermostatCluster) cluster).readACErrorCodeAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThermostatACErrorCodeCommandParams
        );
        result.put("readACErrorCodeAttribute", readThermostatACErrorCodeAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThermostatACLouverPositionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThermostatACLouverPositionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Thermostat.ID, ClusterIDMapping.Thermostat.Attribute.ACLouverPosition.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThermostatCluster) cluster).readACLouverPositionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThermostatACLouverPositionCommandParams
        );
        result.put("readACLouverPositionAttribute", readThermostatACLouverPositionAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThermostatACCoilTemperatureCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThermostatACCoilTemperatureAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Thermostat.ID, ClusterIDMapping.Thermostat.Attribute.ACCoilTemperature.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThermostatCluster) cluster).readACCoilTemperatureAttribute(
//              (ChipClusters.ThermostatCluster.ACCoilTemperatureAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedThermostatClusterACCoilTemperatureAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThermostatACCoilTemperatureCommandParams
        );
        result.put("readACCoilTemperatureAttribute", readThermostatACCoilTemperatureAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThermostatACCapacityformatCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThermostatACCapacityformatAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Thermostat.ID, ClusterIDMapping.Thermostat.Attribute.ACCapacityformat.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThermostatCluster) cluster).readACCapacityformatAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThermostatACCapacityformatCommandParams
        );
        result.put("readACCapacityformatAttribute", readThermostatACCapacityformatAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThermostatGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThermostatGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Thermostat.ID, ClusterIDMapping.Thermostat.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThermostatCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.ThermostatCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedThermostatClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThermostatGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readThermostatGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThermostatAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThermostatAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Thermostat.ID, ClusterIDMapping.Thermostat.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThermostatCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.ThermostatCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedThermostatClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThermostatAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readThermostatAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThermostatEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThermostatEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Thermostat.ID, ClusterIDMapping.Thermostat.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThermostatCluster) cluster).readEventListAttribute(
//              (ChipClusters.ThermostatCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedThermostatClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThermostatEventListCommandParams
        );
        result.put("readEventListAttribute", readThermostatEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThermostatAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThermostatAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Thermostat.ID, ClusterIDMapping.Thermostat.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThermostatCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.ThermostatCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedThermostatClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThermostatAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readThermostatAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThermostatFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThermostatFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Thermostat.ID, ClusterIDMapping.Thermostat.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThermostatCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThermostatFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readThermostatFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThermostatClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThermostatClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Thermostat.ID, ClusterIDMapping.Thermostat.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThermostatCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThermostatClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readThermostatClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readFanControlInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readFanControlFanModeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFanControlFanModeAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FanControl.ID, ClusterIDMapping.FanControl.Attribute.FanMode.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FanControlCluster) cluster).readFanModeAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFanControlFanModeCommandParams
        );
        result.put("readFanModeAttribute", readFanControlFanModeAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFanControlFanModeSequenceCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFanControlFanModeSequenceAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FanControl.ID, ClusterIDMapping.FanControl.Attribute.FanModeSequence.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FanControlCluster) cluster).readFanModeSequenceAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFanControlFanModeSequenceCommandParams
        );
        result.put("readFanModeSequenceAttribute", readFanControlFanModeSequenceAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFanControlPercentSettingCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFanControlPercentSettingAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FanControl.ID, ClusterIDMapping.FanControl.Attribute.PercentSetting.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FanControlCluster) cluster).readPercentSettingAttribute(
//              (ChipClusters.FanControlCluster.PercentSettingAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFanControlClusterPercentSettingAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFanControlPercentSettingCommandParams
        );
        result.put("readPercentSettingAttribute", readFanControlPercentSettingAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFanControlPercentCurrentCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFanControlPercentCurrentAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FanControl.ID, ClusterIDMapping.FanControl.Attribute.PercentCurrent.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FanControlCluster) cluster).readPercentCurrentAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFanControlPercentCurrentCommandParams
        );
        result.put("readPercentCurrentAttribute", readFanControlPercentCurrentAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFanControlSpeedMaxCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFanControlSpeedMaxAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FanControl.ID, ClusterIDMapping.FanControl.Attribute.SpeedMax.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FanControlCluster) cluster).readSpeedMaxAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFanControlSpeedMaxCommandParams
        );
        result.put("readSpeedMaxAttribute", readFanControlSpeedMaxAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFanControlSpeedSettingCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFanControlSpeedSettingAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FanControl.ID, ClusterIDMapping.FanControl.Attribute.SpeedSetting.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FanControlCluster) cluster).readSpeedSettingAttribute(
//              (ChipClusters.FanControlCluster.SpeedSettingAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFanControlClusterSpeedSettingAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFanControlSpeedSettingCommandParams
        );
        result.put("readSpeedSettingAttribute", readFanControlSpeedSettingAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFanControlSpeedCurrentCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFanControlSpeedCurrentAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FanControl.ID, ClusterIDMapping.FanControl.Attribute.SpeedCurrent.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FanControlCluster) cluster).readSpeedCurrentAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFanControlSpeedCurrentCommandParams
        );
        result.put("readSpeedCurrentAttribute", readFanControlSpeedCurrentAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFanControlRockSupportCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFanControlRockSupportAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FanControl.ID, ClusterIDMapping.FanControl.Attribute.RockSupport.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FanControlCluster) cluster).readRockSupportAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFanControlRockSupportCommandParams
        );
        result.put("readRockSupportAttribute", readFanControlRockSupportAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFanControlRockSettingCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFanControlRockSettingAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FanControl.ID, ClusterIDMapping.FanControl.Attribute.RockSetting.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FanControlCluster) cluster).readRockSettingAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFanControlRockSettingCommandParams
        );
        result.put("readRockSettingAttribute", readFanControlRockSettingAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFanControlWindSupportCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFanControlWindSupportAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FanControl.ID, ClusterIDMapping.FanControl.Attribute.WindSupport.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FanControlCluster) cluster).readWindSupportAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFanControlWindSupportCommandParams
        );
        result.put("readWindSupportAttribute", readFanControlWindSupportAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFanControlWindSettingCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFanControlWindSettingAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FanControl.ID, ClusterIDMapping.FanControl.Attribute.WindSetting.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FanControlCluster) cluster).readWindSettingAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFanControlWindSettingCommandParams
        );
        result.put("readWindSettingAttribute", readFanControlWindSettingAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFanControlAirflowDirectionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFanControlAirflowDirectionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FanControl.ID, ClusterIDMapping.FanControl.Attribute.AirflowDirection.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FanControlCluster) cluster).readAirflowDirectionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFanControlAirflowDirectionCommandParams
        );
        result.put("readAirflowDirectionAttribute", readFanControlAirflowDirectionAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFanControlGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFanControlGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FanControl.ID, ClusterIDMapping.FanControl.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FanControlCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.FanControlCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFanControlClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFanControlGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readFanControlGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFanControlAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFanControlAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FanControl.ID, ClusterIDMapping.FanControl.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FanControlCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.FanControlCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFanControlClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFanControlAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readFanControlAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFanControlEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFanControlEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FanControl.ID, ClusterIDMapping.FanControl.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FanControlCluster) cluster).readEventListAttribute(
//              (ChipClusters.FanControlCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFanControlClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFanControlEventListCommandParams
        );
        result.put("readEventListAttribute", readFanControlEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFanControlAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFanControlAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FanControl.ID, ClusterIDMapping.FanControl.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FanControlCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.FanControlCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFanControlClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFanControlAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readFanControlAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFanControlFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFanControlFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FanControl.ID, ClusterIDMapping.FanControl.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FanControlCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFanControlFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readFanControlFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFanControlClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFanControlClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FanControl.ID, ClusterIDMapping.FanControl.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FanControlCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFanControlClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readFanControlClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readThermostatUserInterfaceConfigurationInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readThermostatUserInterfaceConfigurationTemperatureDisplayModeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThermostatUserInterfaceConfigurationTemperatureDisplayModeAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ThermostatUserInterfaceConfiguration.ID, ClusterIDMapping.ThermostatUserInterfaceConfiguration.Attribute.TemperatureDisplayMode.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThermostatUserInterfaceConfigurationCluster) cluster).readTemperatureDisplayModeAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThermostatUserInterfaceConfigurationTemperatureDisplayModeCommandParams
        );
        result.put("readTemperatureDisplayModeAttribute", readThermostatUserInterfaceConfigurationTemperatureDisplayModeAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThermostatUserInterfaceConfigurationKeypadLockoutCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThermostatUserInterfaceConfigurationKeypadLockoutAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ThermostatUserInterfaceConfiguration.ID, ClusterIDMapping.ThermostatUserInterfaceConfiguration.Attribute.KeypadLockout.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThermostatUserInterfaceConfigurationCluster) cluster).readKeypadLockoutAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThermostatUserInterfaceConfigurationKeypadLockoutCommandParams
        );
        result.put("readKeypadLockoutAttribute", readThermostatUserInterfaceConfigurationKeypadLockoutAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThermostatUserInterfaceConfigurationScheduleProgrammingVisibilityCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThermostatUserInterfaceConfigurationScheduleProgrammingVisibilityAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ThermostatUserInterfaceConfiguration.ID, ClusterIDMapping.ThermostatUserInterfaceConfiguration.Attribute.ScheduleProgrammingVisibility.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThermostatUserInterfaceConfigurationCluster) cluster).readScheduleProgrammingVisibilityAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThermostatUserInterfaceConfigurationScheduleProgrammingVisibilityCommandParams
        );
        result.put("readScheduleProgrammingVisibilityAttribute", readThermostatUserInterfaceConfigurationScheduleProgrammingVisibilityAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThermostatUserInterfaceConfigurationGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThermostatUserInterfaceConfigurationGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ThermostatUserInterfaceConfiguration.ID, ClusterIDMapping.ThermostatUserInterfaceConfiguration.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThermostatUserInterfaceConfigurationCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.ThermostatUserInterfaceConfigurationCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedThermostatUserInterfaceConfigurationClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThermostatUserInterfaceConfigurationGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readThermostatUserInterfaceConfigurationGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThermostatUserInterfaceConfigurationAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThermostatUserInterfaceConfigurationAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ThermostatUserInterfaceConfiguration.ID, ClusterIDMapping.ThermostatUserInterfaceConfiguration.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThermostatUserInterfaceConfigurationCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.ThermostatUserInterfaceConfigurationCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedThermostatUserInterfaceConfigurationClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThermostatUserInterfaceConfigurationAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readThermostatUserInterfaceConfigurationAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThermostatUserInterfaceConfigurationEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThermostatUserInterfaceConfigurationEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ThermostatUserInterfaceConfiguration.ID, ClusterIDMapping.ThermostatUserInterfaceConfiguration.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThermostatUserInterfaceConfigurationCluster) cluster).readEventListAttribute(
//              (ChipClusters.ThermostatUserInterfaceConfigurationCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedThermostatUserInterfaceConfigurationClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThermostatUserInterfaceConfigurationEventListCommandParams
        );
        result.put("readEventListAttribute", readThermostatUserInterfaceConfigurationEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThermostatUserInterfaceConfigurationAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThermostatUserInterfaceConfigurationAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ThermostatUserInterfaceConfiguration.ID, ClusterIDMapping.ThermostatUserInterfaceConfiguration.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThermostatUserInterfaceConfigurationCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.ThermostatUserInterfaceConfigurationCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedThermostatUserInterfaceConfigurationClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThermostatUserInterfaceConfigurationAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readThermostatUserInterfaceConfigurationAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThermostatUserInterfaceConfigurationFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThermostatUserInterfaceConfigurationFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ThermostatUserInterfaceConfiguration.ID, ClusterIDMapping.ThermostatUserInterfaceConfiguration.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThermostatUserInterfaceConfigurationCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThermostatUserInterfaceConfigurationFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readThermostatUserInterfaceConfigurationFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readThermostatUserInterfaceConfigurationClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readThermostatUserInterfaceConfigurationClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ThermostatUserInterfaceConfiguration.ID, ClusterIDMapping.ThermostatUserInterfaceConfiguration.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ThermostatUserInterfaceConfigurationCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readThermostatUserInterfaceConfigurationClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readThermostatUserInterfaceConfigurationClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readColorControlInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readColorControlCurrentHueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readColorControlCurrentHueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Attribute.CurrentHue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ColorControlCluster) cluster).readCurrentHueAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readColorControlCurrentHueCommandParams
        );
        result.put("readCurrentHueAttribute", readColorControlCurrentHueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readColorControlCurrentSaturationCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readColorControlCurrentSaturationAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Attribute.CurrentSaturation.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ColorControlCluster) cluster).readCurrentSaturationAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readColorControlCurrentSaturationCommandParams
        );
        result.put("readCurrentSaturationAttribute", readColorControlCurrentSaturationAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readColorControlRemainingTimeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readColorControlRemainingTimeAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Attribute.RemainingTime.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ColorControlCluster) cluster).readRemainingTimeAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readColorControlRemainingTimeCommandParams
        );
        result.put("readRemainingTimeAttribute", readColorControlRemainingTimeAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readColorControlCurrentXCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readColorControlCurrentXAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Attribute.CurrentX.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ColorControlCluster) cluster).readCurrentXAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readColorControlCurrentXCommandParams
        );
        result.put("readCurrentXAttribute", readColorControlCurrentXAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readColorControlCurrentYCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readColorControlCurrentYAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Attribute.CurrentY.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ColorControlCluster) cluster).readCurrentYAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readColorControlCurrentYCommandParams
        );
        result.put("readCurrentYAttribute", readColorControlCurrentYAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readColorControlDriftCompensationCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readColorControlDriftCompensationAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Attribute.DriftCompensation.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ColorControlCluster) cluster).readDriftCompensationAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readColorControlDriftCompensationCommandParams
        );
        result.put("readDriftCompensationAttribute", readColorControlDriftCompensationAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readColorControlCompensationTextCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readColorControlCompensationTextAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Attribute.CompensationText.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ColorControlCluster) cluster).readCompensationTextAttribute(
//              (ChipClusters.CharStringAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedCharStringAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readColorControlCompensationTextCommandParams
        );
        result.put("readCompensationTextAttribute", readColorControlCompensationTextAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readColorControlColorTemperatureMiredsCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readColorControlColorTemperatureMiredsAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Attribute.ColorTemperatureMireds.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ColorControlCluster) cluster).readColorTemperatureMiredsAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readColorControlColorTemperatureMiredsCommandParams
        );
        result.put("readColorTemperatureMiredsAttribute", readColorControlColorTemperatureMiredsAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readColorControlColorModeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readColorControlColorModeAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Attribute.ColorMode.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ColorControlCluster) cluster).readColorModeAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readColorControlColorModeCommandParams
        );
        result.put("readColorModeAttribute", readColorControlColorModeAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readColorControlOptionsCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readColorControlOptionsAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Attribute.Options.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ColorControlCluster) cluster).readOptionsAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readColorControlOptionsCommandParams
        );
        result.put("readOptionsAttribute", readColorControlOptionsAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readColorControlNumberOfPrimariesCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readColorControlNumberOfPrimariesAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Attribute.NumberOfPrimaries.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ColorControlCluster) cluster).readNumberOfPrimariesAttribute(
//              (ChipClusters.ColorControlCluster.NumberOfPrimariesAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedColorControlClusterNumberOfPrimariesAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readColorControlNumberOfPrimariesCommandParams
        );
        result.put("readNumberOfPrimariesAttribute", readColorControlNumberOfPrimariesAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readColorControlPrimary1XCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readColorControlPrimary1XAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Attribute.Primary1X.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ColorControlCluster) cluster).readPrimary1XAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readColorControlPrimary1XCommandParams
        );
        result.put("readPrimary1XAttribute", readColorControlPrimary1XAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readColorControlPrimary1YCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readColorControlPrimary1YAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Attribute.Primary1Y.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ColorControlCluster) cluster).readPrimary1YAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readColorControlPrimary1YCommandParams
        );
        result.put("readPrimary1YAttribute", readColorControlPrimary1YAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readColorControlPrimary1IntensityCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readColorControlPrimary1IntensityAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Attribute.Primary1Intensity.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ColorControlCluster) cluster).readPrimary1IntensityAttribute(
//              (ChipClusters.ColorControlCluster.Primary1IntensityAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedColorControlClusterPrimary1IntensityAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readColorControlPrimary1IntensityCommandParams
        );
        result.put("readPrimary1IntensityAttribute", readColorControlPrimary1IntensityAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readColorControlPrimary2XCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readColorControlPrimary2XAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Attribute.Primary2X.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ColorControlCluster) cluster).readPrimary2XAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readColorControlPrimary2XCommandParams
        );
        result.put("readPrimary2XAttribute", readColorControlPrimary2XAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readColorControlPrimary2YCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readColorControlPrimary2YAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Attribute.Primary2Y.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ColorControlCluster) cluster).readPrimary2YAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readColorControlPrimary2YCommandParams
        );
        result.put("readPrimary2YAttribute", readColorControlPrimary2YAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readColorControlPrimary2IntensityCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readColorControlPrimary2IntensityAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Attribute.Primary2Intensity.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ColorControlCluster) cluster).readPrimary2IntensityAttribute(
//              (ChipClusters.ColorControlCluster.Primary2IntensityAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedColorControlClusterPrimary2IntensityAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readColorControlPrimary2IntensityCommandParams
        );
        result.put("readPrimary2IntensityAttribute", readColorControlPrimary2IntensityAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readColorControlPrimary3XCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readColorControlPrimary3XAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Attribute.Primary3X.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ColorControlCluster) cluster).readPrimary3XAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readColorControlPrimary3XCommandParams
        );
        result.put("readPrimary3XAttribute", readColorControlPrimary3XAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readColorControlPrimary3YCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readColorControlPrimary3YAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Attribute.Primary3Y.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ColorControlCluster) cluster).readPrimary3YAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readColorControlPrimary3YCommandParams
        );
        result.put("readPrimary3YAttribute", readColorControlPrimary3YAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readColorControlPrimary3IntensityCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readColorControlPrimary3IntensityAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Attribute.Primary3Intensity.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ColorControlCluster) cluster).readPrimary3IntensityAttribute(
//              (ChipClusters.ColorControlCluster.Primary3IntensityAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedColorControlClusterPrimary3IntensityAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readColorControlPrimary3IntensityCommandParams
        );
        result.put("readPrimary3IntensityAttribute", readColorControlPrimary3IntensityAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readColorControlPrimary4XCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readColorControlPrimary4XAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Attribute.Primary4X.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ColorControlCluster) cluster).readPrimary4XAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readColorControlPrimary4XCommandParams
        );
        result.put("readPrimary4XAttribute", readColorControlPrimary4XAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readColorControlPrimary4YCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readColorControlPrimary4YAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Attribute.Primary4Y.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ColorControlCluster) cluster).readPrimary4YAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readColorControlPrimary4YCommandParams
        );
        result.put("readPrimary4YAttribute", readColorControlPrimary4YAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readColorControlPrimary4IntensityCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readColorControlPrimary4IntensityAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Attribute.Primary4Intensity.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ColorControlCluster) cluster).readPrimary4IntensityAttribute(
//              (ChipClusters.ColorControlCluster.Primary4IntensityAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedColorControlClusterPrimary4IntensityAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readColorControlPrimary4IntensityCommandParams
        );
        result.put("readPrimary4IntensityAttribute", readColorControlPrimary4IntensityAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readColorControlPrimary5XCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readColorControlPrimary5XAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Attribute.Primary5X.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ColorControlCluster) cluster).readPrimary5XAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readColorControlPrimary5XCommandParams
        );
        result.put("readPrimary5XAttribute", readColorControlPrimary5XAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readColorControlPrimary5YCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readColorControlPrimary5YAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Attribute.Primary5Y.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ColorControlCluster) cluster).readPrimary5YAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readColorControlPrimary5YCommandParams
        );
        result.put("readPrimary5YAttribute", readColorControlPrimary5YAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readColorControlPrimary5IntensityCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readColorControlPrimary5IntensityAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Attribute.Primary5Intensity.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ColorControlCluster) cluster).readPrimary5IntensityAttribute(
//              (ChipClusters.ColorControlCluster.Primary5IntensityAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedColorControlClusterPrimary5IntensityAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readColorControlPrimary5IntensityCommandParams
        );
        result.put("readPrimary5IntensityAttribute", readColorControlPrimary5IntensityAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readColorControlPrimary6XCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readColorControlPrimary6XAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Attribute.Primary6X.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ColorControlCluster) cluster).readPrimary6XAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readColorControlPrimary6XCommandParams
        );
        result.put("readPrimary6XAttribute", readColorControlPrimary6XAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readColorControlPrimary6YCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readColorControlPrimary6YAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Attribute.Primary6Y.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ColorControlCluster) cluster).readPrimary6YAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readColorControlPrimary6YCommandParams
        );
        result.put("readPrimary6YAttribute", readColorControlPrimary6YAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readColorControlPrimary6IntensityCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readColorControlPrimary6IntensityAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Attribute.Primary6Intensity.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ColorControlCluster) cluster).readPrimary6IntensityAttribute(
//              (ChipClusters.ColorControlCluster.Primary6IntensityAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedColorControlClusterPrimary6IntensityAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readColorControlPrimary6IntensityCommandParams
        );
        result.put("readPrimary6IntensityAttribute", readColorControlPrimary6IntensityAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readColorControlWhitePointXCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readColorControlWhitePointXAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Attribute.WhitePointX.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ColorControlCluster) cluster).readWhitePointXAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readColorControlWhitePointXCommandParams
        );
        result.put("readWhitePointXAttribute", readColorControlWhitePointXAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readColorControlWhitePointYCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readColorControlWhitePointYAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Attribute.WhitePointY.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ColorControlCluster) cluster).readWhitePointYAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readColorControlWhitePointYCommandParams
        );
        result.put("readWhitePointYAttribute", readColorControlWhitePointYAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readColorControlColorPointRXCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readColorControlColorPointRXAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Attribute.ColorPointRX.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ColorControlCluster) cluster).readColorPointRXAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readColorControlColorPointRXCommandParams
        );
        result.put("readColorPointRXAttribute", readColorControlColorPointRXAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readColorControlColorPointRYCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readColorControlColorPointRYAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Attribute.ColorPointRY.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ColorControlCluster) cluster).readColorPointRYAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readColorControlColorPointRYCommandParams
        );
        result.put("readColorPointRYAttribute", readColorControlColorPointRYAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readColorControlColorPointRIntensityCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readColorControlColorPointRIntensityAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Attribute.ColorPointRIntensity.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ColorControlCluster) cluster).readColorPointRIntensityAttribute(
//              (ChipClusters.ColorControlCluster.ColorPointRIntensityAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedColorControlClusterColorPointRIntensityAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readColorControlColorPointRIntensityCommandParams
        );
        result.put("readColorPointRIntensityAttribute", readColorControlColorPointRIntensityAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readColorControlColorPointGXCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readColorControlColorPointGXAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Attribute.ColorPointGX.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ColorControlCluster) cluster).readColorPointGXAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readColorControlColorPointGXCommandParams
        );
        result.put("readColorPointGXAttribute", readColorControlColorPointGXAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readColorControlColorPointGYCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readColorControlColorPointGYAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Attribute.ColorPointGY.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ColorControlCluster) cluster).readColorPointGYAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readColorControlColorPointGYCommandParams
        );
        result.put("readColorPointGYAttribute", readColorControlColorPointGYAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readColorControlColorPointGIntensityCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readColorControlColorPointGIntensityAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Attribute.ColorPointGIntensity.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ColorControlCluster) cluster).readColorPointGIntensityAttribute(
//              (ChipClusters.ColorControlCluster.ColorPointGIntensityAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedColorControlClusterColorPointGIntensityAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readColorControlColorPointGIntensityCommandParams
        );
        result.put("readColorPointGIntensityAttribute", readColorControlColorPointGIntensityAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readColorControlColorPointBXCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readColorControlColorPointBXAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Attribute.ColorPointBX.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ColorControlCluster) cluster).readColorPointBXAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readColorControlColorPointBXCommandParams
        );
        result.put("readColorPointBXAttribute", readColorControlColorPointBXAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readColorControlColorPointBYCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readColorControlColorPointBYAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Attribute.ColorPointBY.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ColorControlCluster) cluster).readColorPointBYAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readColorControlColorPointBYCommandParams
        );
        result.put("readColorPointBYAttribute", readColorControlColorPointBYAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readColorControlColorPointBIntensityCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readColorControlColorPointBIntensityAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Attribute.ColorPointBIntensity.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ColorControlCluster) cluster).readColorPointBIntensityAttribute(
//              (ChipClusters.ColorControlCluster.ColorPointBIntensityAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedColorControlClusterColorPointBIntensityAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readColorControlColorPointBIntensityCommandParams
        );
        result.put("readColorPointBIntensityAttribute", readColorControlColorPointBIntensityAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readColorControlEnhancedCurrentHueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readColorControlEnhancedCurrentHueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Attribute.EnhancedCurrentHue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ColorControlCluster) cluster).readEnhancedCurrentHueAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readColorControlEnhancedCurrentHueCommandParams
        );
        result.put("readEnhancedCurrentHueAttribute", readColorControlEnhancedCurrentHueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readColorControlEnhancedColorModeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readColorControlEnhancedColorModeAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Attribute.EnhancedColorMode.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ColorControlCluster) cluster).readEnhancedColorModeAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readColorControlEnhancedColorModeCommandParams
        );
        result.put("readEnhancedColorModeAttribute", readColorControlEnhancedColorModeAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readColorControlColorLoopActiveCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readColorControlColorLoopActiveAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Attribute.ColorLoopActive.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ColorControlCluster) cluster).readColorLoopActiveAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readColorControlColorLoopActiveCommandParams
        );
        result.put("readColorLoopActiveAttribute", readColorControlColorLoopActiveAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readColorControlColorLoopDirectionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readColorControlColorLoopDirectionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Attribute.ColorLoopDirection.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ColorControlCluster) cluster).readColorLoopDirectionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readColorControlColorLoopDirectionCommandParams
        );
        result.put("readColorLoopDirectionAttribute", readColorControlColorLoopDirectionAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readColorControlColorLoopTimeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readColorControlColorLoopTimeAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Attribute.ColorLoopTime.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ColorControlCluster) cluster).readColorLoopTimeAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readColorControlColorLoopTimeCommandParams
        );
        result.put("readColorLoopTimeAttribute", readColorControlColorLoopTimeAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readColorControlColorLoopStartEnhancedHueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readColorControlColorLoopStartEnhancedHueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Attribute.ColorLoopStartEnhancedHue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ColorControlCluster) cluster).readColorLoopStartEnhancedHueAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readColorControlColorLoopStartEnhancedHueCommandParams
        );
        result.put("readColorLoopStartEnhancedHueAttribute", readColorControlColorLoopStartEnhancedHueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readColorControlColorLoopStoredEnhancedHueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readColorControlColorLoopStoredEnhancedHueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Attribute.ColorLoopStoredEnhancedHue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ColorControlCluster) cluster).readColorLoopStoredEnhancedHueAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readColorControlColorLoopStoredEnhancedHueCommandParams
        );
        result.put("readColorLoopStoredEnhancedHueAttribute", readColorControlColorLoopStoredEnhancedHueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readColorControlColorCapabilitiesCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readColorControlColorCapabilitiesAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Attribute.ColorCapabilities.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ColorControlCluster) cluster).readColorCapabilitiesAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readColorControlColorCapabilitiesCommandParams
        );
        result.put("readColorCapabilitiesAttribute", readColorControlColorCapabilitiesAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readColorControlColorTempPhysicalMinMiredsCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readColorControlColorTempPhysicalMinMiredsAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Attribute.ColorTempPhysicalMinMireds.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ColorControlCluster) cluster).readColorTempPhysicalMinMiredsAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readColorControlColorTempPhysicalMinMiredsCommandParams
        );
        result.put("readColorTempPhysicalMinMiredsAttribute", readColorControlColorTempPhysicalMinMiredsAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readColorControlColorTempPhysicalMaxMiredsCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readColorControlColorTempPhysicalMaxMiredsAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Attribute.ColorTempPhysicalMaxMireds.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ColorControlCluster) cluster).readColorTempPhysicalMaxMiredsAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readColorControlColorTempPhysicalMaxMiredsCommandParams
        );
        result.put("readColorTempPhysicalMaxMiredsAttribute", readColorControlColorTempPhysicalMaxMiredsAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readColorControlCoupleColorTempToLevelMinMiredsCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readColorControlCoupleColorTempToLevelMinMiredsAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Attribute.CoupleColorTempToLevelMinMireds.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ColorControlCluster) cluster).readCoupleColorTempToLevelMinMiredsAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readColorControlCoupleColorTempToLevelMinMiredsCommandParams
        );
        result.put("readCoupleColorTempToLevelMinMiredsAttribute", readColorControlCoupleColorTempToLevelMinMiredsAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readColorControlStartUpColorTemperatureMiredsCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readColorControlStartUpColorTemperatureMiredsAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Attribute.StartUpColorTemperatureMireds.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ColorControlCluster) cluster).readStartUpColorTemperatureMiredsAttribute(
//              (ChipClusters.ColorControlCluster.StartUpColorTemperatureMiredsAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedColorControlClusterStartUpColorTemperatureMiredsAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readColorControlStartUpColorTemperatureMiredsCommandParams
        );
        result.put("readStartUpColorTemperatureMiredsAttribute", readColorControlStartUpColorTemperatureMiredsAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readColorControlGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readColorControlGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ColorControlCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.ColorControlCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedColorControlClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readColorControlGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readColorControlGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readColorControlAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readColorControlAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ColorControlCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.ColorControlCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedColorControlClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readColorControlAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readColorControlAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readColorControlEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readColorControlEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ColorControlCluster) cluster).readEventListAttribute(
//              (ChipClusters.ColorControlCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedColorControlClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readColorControlEventListCommandParams
        );
        result.put("readEventListAttribute", readColorControlEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readColorControlAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readColorControlAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ColorControlCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.ColorControlCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedColorControlClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readColorControlAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readColorControlAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readColorControlFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readColorControlFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ColorControlCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readColorControlFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readColorControlFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readColorControlClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readColorControlClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ColorControl.ID, ClusterIDMapping.ColorControl.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ColorControlCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readColorControlClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readColorControlClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readBallastConfigurationInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readBallastConfigurationPhysicalMinLevelCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBallastConfigurationPhysicalMinLevelAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BallastConfiguration.ID, ClusterIDMapping.BallastConfiguration.Attribute.PhysicalMinLevel.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BallastConfigurationCluster) cluster).readPhysicalMinLevelAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBallastConfigurationPhysicalMinLevelCommandParams
        );
        result.put("readPhysicalMinLevelAttribute", readBallastConfigurationPhysicalMinLevelAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBallastConfigurationPhysicalMaxLevelCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBallastConfigurationPhysicalMaxLevelAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BallastConfiguration.ID, ClusterIDMapping.BallastConfiguration.Attribute.PhysicalMaxLevel.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BallastConfigurationCluster) cluster).readPhysicalMaxLevelAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBallastConfigurationPhysicalMaxLevelCommandParams
        );
        result.put("readPhysicalMaxLevelAttribute", readBallastConfigurationPhysicalMaxLevelAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBallastConfigurationBallastStatusCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBallastConfigurationBallastStatusAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BallastConfiguration.ID, ClusterIDMapping.BallastConfiguration.Attribute.BallastStatus.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BallastConfigurationCluster) cluster).readBallastStatusAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBallastConfigurationBallastStatusCommandParams
        );
        result.put("readBallastStatusAttribute", readBallastConfigurationBallastStatusAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBallastConfigurationMinLevelCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBallastConfigurationMinLevelAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BallastConfiguration.ID, ClusterIDMapping.BallastConfiguration.Attribute.MinLevel.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BallastConfigurationCluster) cluster).readMinLevelAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBallastConfigurationMinLevelCommandParams
        );
        result.put("readMinLevelAttribute", readBallastConfigurationMinLevelAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBallastConfigurationMaxLevelCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBallastConfigurationMaxLevelAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BallastConfiguration.ID, ClusterIDMapping.BallastConfiguration.Attribute.MaxLevel.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BallastConfigurationCluster) cluster).readMaxLevelAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBallastConfigurationMaxLevelCommandParams
        );
        result.put("readMaxLevelAttribute", readBallastConfigurationMaxLevelAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBallastConfigurationIntrinsicBallastFactorCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBallastConfigurationIntrinsicBallastFactorAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BallastConfiguration.ID, ClusterIDMapping.BallastConfiguration.Attribute.IntrinsicBallastFactor.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BallastConfigurationCluster) cluster).readIntrinsicBallastFactorAttribute(
//              (ChipClusters.BallastConfigurationCluster.IntrinsicBallastFactorAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBallastConfigurationClusterIntrinsicBallastFactorAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBallastConfigurationIntrinsicBallastFactorCommandParams
        );
        result.put("readIntrinsicBallastFactorAttribute", readBallastConfigurationIntrinsicBallastFactorAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBallastConfigurationBallastFactorAdjustmentCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBallastConfigurationBallastFactorAdjustmentAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BallastConfiguration.ID, ClusterIDMapping.BallastConfiguration.Attribute.BallastFactorAdjustment.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BallastConfigurationCluster) cluster).readBallastFactorAdjustmentAttribute(
//              (ChipClusters.BallastConfigurationCluster.BallastFactorAdjustmentAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBallastConfigurationClusterBallastFactorAdjustmentAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBallastConfigurationBallastFactorAdjustmentCommandParams
        );
        result.put("readBallastFactorAdjustmentAttribute", readBallastConfigurationBallastFactorAdjustmentAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBallastConfigurationLampQuantityCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBallastConfigurationLampQuantityAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BallastConfiguration.ID, ClusterIDMapping.BallastConfiguration.Attribute.LampQuantity.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BallastConfigurationCluster) cluster).readLampQuantityAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBallastConfigurationLampQuantityCommandParams
        );
        result.put("readLampQuantityAttribute", readBallastConfigurationLampQuantityAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBallastConfigurationLampTypeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBallastConfigurationLampTypeAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BallastConfiguration.ID, ClusterIDMapping.BallastConfiguration.Attribute.LampType.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BallastConfigurationCluster) cluster).readLampTypeAttribute(
//              (ChipClusters.CharStringAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedCharStringAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBallastConfigurationLampTypeCommandParams
        );
        result.put("readLampTypeAttribute", readBallastConfigurationLampTypeAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBallastConfigurationLampManufacturerCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBallastConfigurationLampManufacturerAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BallastConfiguration.ID, ClusterIDMapping.BallastConfiguration.Attribute.LampManufacturer.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BallastConfigurationCluster) cluster).readLampManufacturerAttribute(
//              (ChipClusters.CharStringAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedCharStringAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBallastConfigurationLampManufacturerCommandParams
        );
        result.put("readLampManufacturerAttribute", readBallastConfigurationLampManufacturerAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBallastConfigurationLampRatedHoursCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBallastConfigurationLampRatedHoursAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BallastConfiguration.ID, ClusterIDMapping.BallastConfiguration.Attribute.LampRatedHours.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BallastConfigurationCluster) cluster).readLampRatedHoursAttribute(
//              (ChipClusters.BallastConfigurationCluster.LampRatedHoursAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBallastConfigurationClusterLampRatedHoursAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBallastConfigurationLampRatedHoursCommandParams
        );
        result.put("readLampRatedHoursAttribute", readBallastConfigurationLampRatedHoursAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBallastConfigurationLampBurnHoursCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBallastConfigurationLampBurnHoursAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BallastConfiguration.ID, ClusterIDMapping.BallastConfiguration.Attribute.LampBurnHours.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BallastConfigurationCluster) cluster).readLampBurnHoursAttribute(
//              (ChipClusters.BallastConfigurationCluster.LampBurnHoursAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBallastConfigurationClusterLampBurnHoursAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBallastConfigurationLampBurnHoursCommandParams
        );
        result.put("readLampBurnHoursAttribute", readBallastConfigurationLampBurnHoursAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBallastConfigurationLampAlarmModeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBallastConfigurationLampAlarmModeAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BallastConfiguration.ID, ClusterIDMapping.BallastConfiguration.Attribute.LampAlarmMode.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BallastConfigurationCluster) cluster).readLampAlarmModeAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBallastConfigurationLampAlarmModeCommandParams
        );
        result.put("readLampAlarmModeAttribute", readBallastConfigurationLampAlarmModeAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBallastConfigurationLampBurnHoursTripPointCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBallastConfigurationLampBurnHoursTripPointAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BallastConfiguration.ID, ClusterIDMapping.BallastConfiguration.Attribute.LampBurnHoursTripPoint.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BallastConfigurationCluster) cluster).readLampBurnHoursTripPointAttribute(
//              (ChipClusters.BallastConfigurationCluster.LampBurnHoursTripPointAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBallastConfigurationClusterLampBurnHoursTripPointAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBallastConfigurationLampBurnHoursTripPointCommandParams
        );
        result.put("readLampBurnHoursTripPointAttribute", readBallastConfigurationLampBurnHoursTripPointAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBallastConfigurationGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBallastConfigurationGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BallastConfiguration.ID, ClusterIDMapping.BallastConfiguration.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BallastConfigurationCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.BallastConfigurationCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBallastConfigurationClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBallastConfigurationGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readBallastConfigurationGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBallastConfigurationAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBallastConfigurationAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BallastConfiguration.ID, ClusterIDMapping.BallastConfiguration.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BallastConfigurationCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.BallastConfigurationCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBallastConfigurationClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBallastConfigurationAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readBallastConfigurationAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBallastConfigurationEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBallastConfigurationEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BallastConfiguration.ID, ClusterIDMapping.BallastConfiguration.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BallastConfigurationCluster) cluster).readEventListAttribute(
//              (ChipClusters.BallastConfigurationCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBallastConfigurationClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBallastConfigurationEventListCommandParams
        );
        result.put("readEventListAttribute", readBallastConfigurationEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBallastConfigurationAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBallastConfigurationAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BallastConfiguration.ID, ClusterIDMapping.BallastConfiguration.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BallastConfigurationCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.BallastConfigurationCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBallastConfigurationClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBallastConfigurationAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readBallastConfigurationAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBallastConfigurationFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBallastConfigurationFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BallastConfiguration.ID, ClusterIDMapping.BallastConfiguration.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BallastConfigurationCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBallastConfigurationFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readBallastConfigurationFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBallastConfigurationClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBallastConfigurationClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BallastConfiguration.ID, ClusterIDMapping.BallastConfiguration.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BallastConfigurationCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBallastConfigurationClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readBallastConfigurationClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readIlluminanceMeasurementInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readIlluminanceMeasurementMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readIlluminanceMeasurementMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.IlluminanceMeasurement.ID, ClusterIDMapping.IlluminanceMeasurement.Attribute.MeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.IlluminanceMeasurementCluster) cluster).readMeasuredValueAttribute(
//              (ChipClusters.IlluminanceMeasurementCluster.MeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIlluminanceMeasurementClusterMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readIlluminanceMeasurementMeasuredValueCommandParams
        );
        result.put("readMeasuredValueAttribute", readIlluminanceMeasurementMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readIlluminanceMeasurementMinMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readIlluminanceMeasurementMinMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.IlluminanceMeasurement.ID, ClusterIDMapping.IlluminanceMeasurement.Attribute.MinMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.IlluminanceMeasurementCluster) cluster).readMinMeasuredValueAttribute(
//              (ChipClusters.IlluminanceMeasurementCluster.MinMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIlluminanceMeasurementClusterMinMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readIlluminanceMeasurementMinMeasuredValueCommandParams
        );
        result.put("readMinMeasuredValueAttribute", readIlluminanceMeasurementMinMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readIlluminanceMeasurementMaxMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readIlluminanceMeasurementMaxMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.IlluminanceMeasurement.ID, ClusterIDMapping.IlluminanceMeasurement.Attribute.MaxMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.IlluminanceMeasurementCluster) cluster).readMaxMeasuredValueAttribute(
//              (ChipClusters.IlluminanceMeasurementCluster.MaxMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIlluminanceMeasurementClusterMaxMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readIlluminanceMeasurementMaxMeasuredValueCommandParams
        );
        result.put("readMaxMeasuredValueAttribute", readIlluminanceMeasurementMaxMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readIlluminanceMeasurementToleranceCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readIlluminanceMeasurementToleranceAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.IlluminanceMeasurement.ID, ClusterIDMapping.IlluminanceMeasurement.Attribute.Tolerance.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.IlluminanceMeasurementCluster) cluster).readToleranceAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readIlluminanceMeasurementToleranceCommandParams
        );
        result.put("readToleranceAttribute", readIlluminanceMeasurementToleranceAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readIlluminanceMeasurementLightSensorTypeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readIlluminanceMeasurementLightSensorTypeAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.IlluminanceMeasurement.ID, ClusterIDMapping.IlluminanceMeasurement.Attribute.LightSensorType.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.IlluminanceMeasurementCluster) cluster).readLightSensorTypeAttribute(
//              (ChipClusters.IlluminanceMeasurementCluster.LightSensorTypeAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIlluminanceMeasurementClusterLightSensorTypeAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readIlluminanceMeasurementLightSensorTypeCommandParams
        );
        result.put("readLightSensorTypeAttribute", readIlluminanceMeasurementLightSensorTypeAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readIlluminanceMeasurementGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readIlluminanceMeasurementGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.IlluminanceMeasurement.ID, ClusterIDMapping.IlluminanceMeasurement.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.IlluminanceMeasurementCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.IlluminanceMeasurementCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIlluminanceMeasurementClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readIlluminanceMeasurementGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readIlluminanceMeasurementGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readIlluminanceMeasurementAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readIlluminanceMeasurementAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.IlluminanceMeasurement.ID, ClusterIDMapping.IlluminanceMeasurement.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.IlluminanceMeasurementCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.IlluminanceMeasurementCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIlluminanceMeasurementClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readIlluminanceMeasurementAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readIlluminanceMeasurementAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readIlluminanceMeasurementEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readIlluminanceMeasurementEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.IlluminanceMeasurement.ID, ClusterIDMapping.IlluminanceMeasurement.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.IlluminanceMeasurementCluster) cluster).readEventListAttribute(
//              (ChipClusters.IlluminanceMeasurementCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIlluminanceMeasurementClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readIlluminanceMeasurementEventListCommandParams
        );
        result.put("readEventListAttribute", readIlluminanceMeasurementEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readIlluminanceMeasurementAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readIlluminanceMeasurementAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.IlluminanceMeasurement.ID, ClusterIDMapping.IlluminanceMeasurement.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.IlluminanceMeasurementCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.IlluminanceMeasurementCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIlluminanceMeasurementClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readIlluminanceMeasurementAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readIlluminanceMeasurementAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readIlluminanceMeasurementFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readIlluminanceMeasurementFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.IlluminanceMeasurement.ID, ClusterIDMapping.IlluminanceMeasurement.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.IlluminanceMeasurementCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readIlluminanceMeasurementFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readIlluminanceMeasurementFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readIlluminanceMeasurementClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readIlluminanceMeasurementClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.IlluminanceMeasurement.ID, ClusterIDMapping.IlluminanceMeasurement.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.IlluminanceMeasurementCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readIlluminanceMeasurementClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readIlluminanceMeasurementClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readTemperatureMeasurementInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readTemperatureMeasurementMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTemperatureMeasurementMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TemperatureMeasurement.ID, ClusterIDMapping.TemperatureMeasurement.Attribute.MeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TemperatureMeasurementCluster) cluster).readMeasuredValueAttribute(
//              (ChipClusters.TemperatureMeasurementCluster.MeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedTemperatureMeasurementClusterMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTemperatureMeasurementMeasuredValueCommandParams
        );
        result.put("readMeasuredValueAttribute", readTemperatureMeasurementMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTemperatureMeasurementMinMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTemperatureMeasurementMinMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TemperatureMeasurement.ID, ClusterIDMapping.TemperatureMeasurement.Attribute.MinMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TemperatureMeasurementCluster) cluster).readMinMeasuredValueAttribute(
//              (ChipClusters.TemperatureMeasurementCluster.MinMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedTemperatureMeasurementClusterMinMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTemperatureMeasurementMinMeasuredValueCommandParams
        );
        result.put("readMinMeasuredValueAttribute", readTemperatureMeasurementMinMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTemperatureMeasurementMaxMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTemperatureMeasurementMaxMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TemperatureMeasurement.ID, ClusterIDMapping.TemperatureMeasurement.Attribute.MaxMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TemperatureMeasurementCluster) cluster).readMaxMeasuredValueAttribute(
//              (ChipClusters.TemperatureMeasurementCluster.MaxMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedTemperatureMeasurementClusterMaxMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTemperatureMeasurementMaxMeasuredValueCommandParams
        );
        result.put("readMaxMeasuredValueAttribute", readTemperatureMeasurementMaxMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTemperatureMeasurementToleranceCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTemperatureMeasurementToleranceAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TemperatureMeasurement.ID, ClusterIDMapping.TemperatureMeasurement.Attribute.Tolerance.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TemperatureMeasurementCluster) cluster).readToleranceAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTemperatureMeasurementToleranceCommandParams
        );
        result.put("readToleranceAttribute", readTemperatureMeasurementToleranceAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTemperatureMeasurementGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTemperatureMeasurementGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TemperatureMeasurement.ID, ClusterIDMapping.TemperatureMeasurement.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TemperatureMeasurementCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.TemperatureMeasurementCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedTemperatureMeasurementClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTemperatureMeasurementGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readTemperatureMeasurementGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTemperatureMeasurementAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTemperatureMeasurementAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TemperatureMeasurement.ID, ClusterIDMapping.TemperatureMeasurement.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TemperatureMeasurementCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.TemperatureMeasurementCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedTemperatureMeasurementClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTemperatureMeasurementAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readTemperatureMeasurementAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTemperatureMeasurementEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTemperatureMeasurementEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TemperatureMeasurement.ID, ClusterIDMapping.TemperatureMeasurement.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TemperatureMeasurementCluster) cluster).readEventListAttribute(
//              (ChipClusters.TemperatureMeasurementCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedTemperatureMeasurementClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTemperatureMeasurementEventListCommandParams
        );
        result.put("readEventListAttribute", readTemperatureMeasurementEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTemperatureMeasurementAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTemperatureMeasurementAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TemperatureMeasurement.ID, ClusterIDMapping.TemperatureMeasurement.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TemperatureMeasurementCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.TemperatureMeasurementCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedTemperatureMeasurementClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTemperatureMeasurementAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readTemperatureMeasurementAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTemperatureMeasurementFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTemperatureMeasurementFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TemperatureMeasurement.ID, ClusterIDMapping.TemperatureMeasurement.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TemperatureMeasurementCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTemperatureMeasurementFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readTemperatureMeasurementFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTemperatureMeasurementClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTemperatureMeasurementClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TemperatureMeasurement.ID, ClusterIDMapping.TemperatureMeasurement.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TemperatureMeasurementCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTemperatureMeasurementClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readTemperatureMeasurementClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readPressureMeasurementInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readPressureMeasurementMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPressureMeasurementMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PressureMeasurement.ID, ClusterIDMapping.PressureMeasurement.Attribute.MeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PressureMeasurementCluster) cluster).readMeasuredValueAttribute(
//              (ChipClusters.PressureMeasurementCluster.MeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPressureMeasurementClusterMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPressureMeasurementMeasuredValueCommandParams
        );
        result.put("readMeasuredValueAttribute", readPressureMeasurementMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPressureMeasurementMinMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPressureMeasurementMinMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PressureMeasurement.ID, ClusterIDMapping.PressureMeasurement.Attribute.MinMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PressureMeasurementCluster) cluster).readMinMeasuredValueAttribute(
//              (ChipClusters.PressureMeasurementCluster.MinMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPressureMeasurementClusterMinMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPressureMeasurementMinMeasuredValueCommandParams
        );
        result.put("readMinMeasuredValueAttribute", readPressureMeasurementMinMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPressureMeasurementMaxMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPressureMeasurementMaxMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PressureMeasurement.ID, ClusterIDMapping.PressureMeasurement.Attribute.MaxMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PressureMeasurementCluster) cluster).readMaxMeasuredValueAttribute(
//              (ChipClusters.PressureMeasurementCluster.MaxMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPressureMeasurementClusterMaxMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPressureMeasurementMaxMeasuredValueCommandParams
        );
        result.put("readMaxMeasuredValueAttribute", readPressureMeasurementMaxMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPressureMeasurementToleranceCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPressureMeasurementToleranceAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PressureMeasurement.ID, ClusterIDMapping.PressureMeasurement.Attribute.Tolerance.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PressureMeasurementCluster) cluster).readToleranceAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPressureMeasurementToleranceCommandParams
        );
        result.put("readToleranceAttribute", readPressureMeasurementToleranceAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPressureMeasurementScaledValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPressureMeasurementScaledValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PressureMeasurement.ID, ClusterIDMapping.PressureMeasurement.Attribute.ScaledValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PressureMeasurementCluster) cluster).readScaledValueAttribute(
//              (ChipClusters.PressureMeasurementCluster.ScaledValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPressureMeasurementClusterScaledValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPressureMeasurementScaledValueCommandParams
        );
        result.put("readScaledValueAttribute", readPressureMeasurementScaledValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPressureMeasurementMinScaledValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPressureMeasurementMinScaledValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PressureMeasurement.ID, ClusterIDMapping.PressureMeasurement.Attribute.MinScaledValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PressureMeasurementCluster) cluster).readMinScaledValueAttribute(
//              (ChipClusters.PressureMeasurementCluster.MinScaledValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPressureMeasurementClusterMinScaledValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPressureMeasurementMinScaledValueCommandParams
        );
        result.put("readMinScaledValueAttribute", readPressureMeasurementMinScaledValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPressureMeasurementMaxScaledValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPressureMeasurementMaxScaledValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PressureMeasurement.ID, ClusterIDMapping.PressureMeasurement.Attribute.MaxScaledValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PressureMeasurementCluster) cluster).readMaxScaledValueAttribute(
//              (ChipClusters.PressureMeasurementCluster.MaxScaledValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPressureMeasurementClusterMaxScaledValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPressureMeasurementMaxScaledValueCommandParams
        );
        result.put("readMaxScaledValueAttribute", readPressureMeasurementMaxScaledValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPressureMeasurementScaledToleranceCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPressureMeasurementScaledToleranceAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PressureMeasurement.ID, ClusterIDMapping.PressureMeasurement.Attribute.ScaledTolerance.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PressureMeasurementCluster) cluster).readScaledToleranceAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPressureMeasurementScaledToleranceCommandParams
        );
        result.put("readScaledToleranceAttribute", readPressureMeasurementScaledToleranceAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPressureMeasurementScaleCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPressureMeasurementScaleAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PressureMeasurement.ID, ClusterIDMapping.PressureMeasurement.Attribute.Scale.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PressureMeasurementCluster) cluster).readScaleAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPressureMeasurementScaleCommandParams
        );
        result.put("readScaleAttribute", readPressureMeasurementScaleAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPressureMeasurementGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPressureMeasurementGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PressureMeasurement.ID, ClusterIDMapping.PressureMeasurement.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PressureMeasurementCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.PressureMeasurementCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPressureMeasurementClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPressureMeasurementGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readPressureMeasurementGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPressureMeasurementAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPressureMeasurementAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PressureMeasurement.ID, ClusterIDMapping.PressureMeasurement.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PressureMeasurementCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.PressureMeasurementCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPressureMeasurementClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPressureMeasurementAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readPressureMeasurementAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPressureMeasurementEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPressureMeasurementEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PressureMeasurement.ID, ClusterIDMapping.PressureMeasurement.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PressureMeasurementCluster) cluster).readEventListAttribute(
//              (ChipClusters.PressureMeasurementCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPressureMeasurementClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPressureMeasurementEventListCommandParams
        );
        result.put("readEventListAttribute", readPressureMeasurementEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPressureMeasurementAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPressureMeasurementAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PressureMeasurement.ID, ClusterIDMapping.PressureMeasurement.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PressureMeasurementCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.PressureMeasurementCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPressureMeasurementClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPressureMeasurementAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readPressureMeasurementAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPressureMeasurementFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPressureMeasurementFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PressureMeasurement.ID, ClusterIDMapping.PressureMeasurement.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PressureMeasurementCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPressureMeasurementFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readPressureMeasurementFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPressureMeasurementClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPressureMeasurementClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.PressureMeasurement.ID, ClusterIDMapping.PressureMeasurement.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.PressureMeasurementCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPressureMeasurementClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readPressureMeasurementClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readFlowMeasurementInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readFlowMeasurementMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFlowMeasurementMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FlowMeasurement.ID, ClusterIDMapping.FlowMeasurement.Attribute.MeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FlowMeasurementCluster) cluster).readMeasuredValueAttribute(
//              (ChipClusters.FlowMeasurementCluster.MeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFlowMeasurementClusterMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFlowMeasurementMeasuredValueCommandParams
        );
        result.put("readMeasuredValueAttribute", readFlowMeasurementMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFlowMeasurementMinMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFlowMeasurementMinMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FlowMeasurement.ID, ClusterIDMapping.FlowMeasurement.Attribute.MinMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FlowMeasurementCluster) cluster).readMinMeasuredValueAttribute(
//              (ChipClusters.FlowMeasurementCluster.MinMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFlowMeasurementClusterMinMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFlowMeasurementMinMeasuredValueCommandParams
        );
        result.put("readMinMeasuredValueAttribute", readFlowMeasurementMinMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFlowMeasurementMaxMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFlowMeasurementMaxMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FlowMeasurement.ID, ClusterIDMapping.FlowMeasurement.Attribute.MaxMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FlowMeasurementCluster) cluster).readMaxMeasuredValueAttribute(
//              (ChipClusters.FlowMeasurementCluster.MaxMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFlowMeasurementClusterMaxMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFlowMeasurementMaxMeasuredValueCommandParams
        );
        result.put("readMaxMeasuredValueAttribute", readFlowMeasurementMaxMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFlowMeasurementToleranceCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFlowMeasurementToleranceAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FlowMeasurement.ID, ClusterIDMapping.FlowMeasurement.Attribute.Tolerance.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FlowMeasurementCluster) cluster).readToleranceAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFlowMeasurementToleranceCommandParams
        );
        result.put("readToleranceAttribute", readFlowMeasurementToleranceAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFlowMeasurementGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFlowMeasurementGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FlowMeasurement.ID, ClusterIDMapping.FlowMeasurement.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FlowMeasurementCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.FlowMeasurementCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFlowMeasurementClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFlowMeasurementGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readFlowMeasurementGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFlowMeasurementAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFlowMeasurementAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FlowMeasurement.ID, ClusterIDMapping.FlowMeasurement.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FlowMeasurementCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.FlowMeasurementCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFlowMeasurementClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFlowMeasurementAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readFlowMeasurementAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFlowMeasurementEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFlowMeasurementEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FlowMeasurement.ID, ClusterIDMapping.FlowMeasurement.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FlowMeasurementCluster) cluster).readEventListAttribute(
//              (ChipClusters.FlowMeasurementCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFlowMeasurementClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFlowMeasurementEventListCommandParams
        );
        result.put("readEventListAttribute", readFlowMeasurementEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFlowMeasurementAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFlowMeasurementAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FlowMeasurement.ID, ClusterIDMapping.FlowMeasurement.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FlowMeasurementCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.FlowMeasurementCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFlowMeasurementClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFlowMeasurementAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readFlowMeasurementAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFlowMeasurementFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFlowMeasurementFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FlowMeasurement.ID, ClusterIDMapping.FlowMeasurement.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FlowMeasurementCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFlowMeasurementFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readFlowMeasurementFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFlowMeasurementClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFlowMeasurementClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FlowMeasurement.ID, ClusterIDMapping.FlowMeasurement.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FlowMeasurementCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFlowMeasurementClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readFlowMeasurementClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readRelativeHumidityMeasurementInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readRelativeHumidityMeasurementMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readRelativeHumidityMeasurementMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.RelativeHumidityMeasurement.ID, ClusterIDMapping.RelativeHumidityMeasurement.Attribute.MeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.RelativeHumidityMeasurementCluster) cluster).readMeasuredValueAttribute(
//              (ChipClusters.RelativeHumidityMeasurementCluster.MeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedRelativeHumidityMeasurementClusterMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readRelativeHumidityMeasurementMeasuredValueCommandParams
        );
        result.put("readMeasuredValueAttribute", readRelativeHumidityMeasurementMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readRelativeHumidityMeasurementMinMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readRelativeHumidityMeasurementMinMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.RelativeHumidityMeasurement.ID, ClusterIDMapping.RelativeHumidityMeasurement.Attribute.MinMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.RelativeHumidityMeasurementCluster) cluster).readMinMeasuredValueAttribute(
//              (ChipClusters.RelativeHumidityMeasurementCluster.MinMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedRelativeHumidityMeasurementClusterMinMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readRelativeHumidityMeasurementMinMeasuredValueCommandParams
        );
        result.put("readMinMeasuredValueAttribute", readRelativeHumidityMeasurementMinMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readRelativeHumidityMeasurementMaxMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readRelativeHumidityMeasurementMaxMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.RelativeHumidityMeasurement.ID, ClusterIDMapping.RelativeHumidityMeasurement.Attribute.MaxMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.RelativeHumidityMeasurementCluster) cluster).readMaxMeasuredValueAttribute(
//              (ChipClusters.RelativeHumidityMeasurementCluster.MaxMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedRelativeHumidityMeasurementClusterMaxMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readRelativeHumidityMeasurementMaxMeasuredValueCommandParams
        );
        result.put("readMaxMeasuredValueAttribute", readRelativeHumidityMeasurementMaxMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readRelativeHumidityMeasurementToleranceCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readRelativeHumidityMeasurementToleranceAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.RelativeHumidityMeasurement.ID, ClusterIDMapping.RelativeHumidityMeasurement.Attribute.Tolerance.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.RelativeHumidityMeasurementCluster) cluster).readToleranceAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readRelativeHumidityMeasurementToleranceCommandParams
        );
        result.put("readToleranceAttribute", readRelativeHumidityMeasurementToleranceAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readRelativeHumidityMeasurementGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readRelativeHumidityMeasurementGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.RelativeHumidityMeasurement.ID, ClusterIDMapping.RelativeHumidityMeasurement.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.RelativeHumidityMeasurementCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.RelativeHumidityMeasurementCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedRelativeHumidityMeasurementClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readRelativeHumidityMeasurementGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readRelativeHumidityMeasurementGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readRelativeHumidityMeasurementAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readRelativeHumidityMeasurementAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.RelativeHumidityMeasurement.ID, ClusterIDMapping.RelativeHumidityMeasurement.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.RelativeHumidityMeasurementCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.RelativeHumidityMeasurementCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedRelativeHumidityMeasurementClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readRelativeHumidityMeasurementAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readRelativeHumidityMeasurementAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readRelativeHumidityMeasurementEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readRelativeHumidityMeasurementEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.RelativeHumidityMeasurement.ID, ClusterIDMapping.RelativeHumidityMeasurement.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.RelativeHumidityMeasurementCluster) cluster).readEventListAttribute(
//              (ChipClusters.RelativeHumidityMeasurementCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedRelativeHumidityMeasurementClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readRelativeHumidityMeasurementEventListCommandParams
        );
        result.put("readEventListAttribute", readRelativeHumidityMeasurementEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readRelativeHumidityMeasurementAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readRelativeHumidityMeasurementAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.RelativeHumidityMeasurement.ID, ClusterIDMapping.RelativeHumidityMeasurement.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.RelativeHumidityMeasurementCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.RelativeHumidityMeasurementCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedRelativeHumidityMeasurementClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readRelativeHumidityMeasurementAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readRelativeHumidityMeasurementAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readRelativeHumidityMeasurementFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readRelativeHumidityMeasurementFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.RelativeHumidityMeasurement.ID, ClusterIDMapping.RelativeHumidityMeasurement.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.RelativeHumidityMeasurementCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readRelativeHumidityMeasurementFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readRelativeHumidityMeasurementFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readRelativeHumidityMeasurementClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readRelativeHumidityMeasurementClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.RelativeHumidityMeasurement.ID, ClusterIDMapping.RelativeHumidityMeasurement.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.RelativeHumidityMeasurementCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readRelativeHumidityMeasurementClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readRelativeHumidityMeasurementClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readOccupancySensingInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readOccupancySensingOccupancyCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOccupancySensingOccupancyAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OccupancySensing.ID, ClusterIDMapping.OccupancySensing.Attribute.Occupancy.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OccupancySensingCluster) cluster).readOccupancyAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOccupancySensingOccupancyCommandParams
        );
        result.put("readOccupancyAttribute", readOccupancySensingOccupancyAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOccupancySensingOccupancySensorTypeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOccupancySensingOccupancySensorTypeAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OccupancySensing.ID, ClusterIDMapping.OccupancySensing.Attribute.OccupancySensorType.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OccupancySensingCluster) cluster).readOccupancySensorTypeAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOccupancySensingOccupancySensorTypeCommandParams
        );
        result.put("readOccupancySensorTypeAttribute", readOccupancySensingOccupancySensorTypeAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOccupancySensingOccupancySensorTypeBitmapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOccupancySensingOccupancySensorTypeBitmapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OccupancySensing.ID, ClusterIDMapping.OccupancySensing.Attribute.OccupancySensorTypeBitmap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OccupancySensingCluster) cluster).readOccupancySensorTypeBitmapAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOccupancySensingOccupancySensorTypeBitmapCommandParams
        );
        result.put("readOccupancySensorTypeBitmapAttribute", readOccupancySensingOccupancySensorTypeBitmapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOccupancySensingPIROccupiedToUnoccupiedDelayCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOccupancySensingPIROccupiedToUnoccupiedDelayAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OccupancySensing.ID, ClusterIDMapping.OccupancySensing.Attribute.PIROccupiedToUnoccupiedDelay.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OccupancySensingCluster) cluster).readPIROccupiedToUnoccupiedDelayAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOccupancySensingPIROccupiedToUnoccupiedDelayCommandParams
        );
        result.put("readPIROccupiedToUnoccupiedDelayAttribute", readOccupancySensingPIROccupiedToUnoccupiedDelayAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOccupancySensingPIRUnoccupiedToOccupiedDelayCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOccupancySensingPIRUnoccupiedToOccupiedDelayAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OccupancySensing.ID, ClusterIDMapping.OccupancySensing.Attribute.PIRUnoccupiedToOccupiedDelay.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OccupancySensingCluster) cluster).readPIRUnoccupiedToOccupiedDelayAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOccupancySensingPIRUnoccupiedToOccupiedDelayCommandParams
        );
        result.put("readPIRUnoccupiedToOccupiedDelayAttribute", readOccupancySensingPIRUnoccupiedToOccupiedDelayAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOccupancySensingPIRUnoccupiedToOccupiedThresholdCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOccupancySensingPIRUnoccupiedToOccupiedThresholdAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OccupancySensing.ID, ClusterIDMapping.OccupancySensing.Attribute.PIRUnoccupiedToOccupiedThreshold.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OccupancySensingCluster) cluster).readPIRUnoccupiedToOccupiedThresholdAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOccupancySensingPIRUnoccupiedToOccupiedThresholdCommandParams
        );
        result.put("readPIRUnoccupiedToOccupiedThresholdAttribute", readOccupancySensingPIRUnoccupiedToOccupiedThresholdAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOccupancySensingUltrasonicOccupiedToUnoccupiedDelayCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOccupancySensingUltrasonicOccupiedToUnoccupiedDelayAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OccupancySensing.ID, ClusterIDMapping.OccupancySensing.Attribute.UltrasonicOccupiedToUnoccupiedDelay.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OccupancySensingCluster) cluster).readUltrasonicOccupiedToUnoccupiedDelayAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOccupancySensingUltrasonicOccupiedToUnoccupiedDelayCommandParams
        );
        result.put("readUltrasonicOccupiedToUnoccupiedDelayAttribute", readOccupancySensingUltrasonicOccupiedToUnoccupiedDelayAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOccupancySensingUltrasonicUnoccupiedToOccupiedDelayCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOccupancySensingUltrasonicUnoccupiedToOccupiedDelayAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OccupancySensing.ID, ClusterIDMapping.OccupancySensing.Attribute.UltrasonicUnoccupiedToOccupiedDelay.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OccupancySensingCluster) cluster).readUltrasonicUnoccupiedToOccupiedDelayAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOccupancySensingUltrasonicUnoccupiedToOccupiedDelayCommandParams
        );
        result.put("readUltrasonicUnoccupiedToOccupiedDelayAttribute", readOccupancySensingUltrasonicUnoccupiedToOccupiedDelayAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOccupancySensingUltrasonicUnoccupiedToOccupiedThresholdCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOccupancySensingUltrasonicUnoccupiedToOccupiedThresholdAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OccupancySensing.ID, ClusterIDMapping.OccupancySensing.Attribute.UltrasonicUnoccupiedToOccupiedThreshold.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OccupancySensingCluster) cluster).readUltrasonicUnoccupiedToOccupiedThresholdAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOccupancySensingUltrasonicUnoccupiedToOccupiedThresholdCommandParams
        );
        result.put("readUltrasonicUnoccupiedToOccupiedThresholdAttribute", readOccupancySensingUltrasonicUnoccupiedToOccupiedThresholdAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOccupancySensingPhysicalContactOccupiedToUnoccupiedDelayCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOccupancySensingPhysicalContactOccupiedToUnoccupiedDelayAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OccupancySensing.ID, ClusterIDMapping.OccupancySensing.Attribute.PhysicalContactOccupiedToUnoccupiedDelay.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OccupancySensingCluster) cluster).readPhysicalContactOccupiedToUnoccupiedDelayAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOccupancySensingPhysicalContactOccupiedToUnoccupiedDelayCommandParams
        );
        result.put("readPhysicalContactOccupiedToUnoccupiedDelayAttribute", readOccupancySensingPhysicalContactOccupiedToUnoccupiedDelayAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOccupancySensingPhysicalContactUnoccupiedToOccupiedDelayCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOccupancySensingPhysicalContactUnoccupiedToOccupiedDelayAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OccupancySensing.ID, ClusterIDMapping.OccupancySensing.Attribute.PhysicalContactUnoccupiedToOccupiedDelay.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OccupancySensingCluster) cluster).readPhysicalContactUnoccupiedToOccupiedDelayAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOccupancySensingPhysicalContactUnoccupiedToOccupiedDelayCommandParams
        );
        result.put("readPhysicalContactUnoccupiedToOccupiedDelayAttribute", readOccupancySensingPhysicalContactUnoccupiedToOccupiedDelayAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOccupancySensingPhysicalContactUnoccupiedToOccupiedThresholdCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOccupancySensingPhysicalContactUnoccupiedToOccupiedThresholdAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OccupancySensing.ID, ClusterIDMapping.OccupancySensing.Attribute.PhysicalContactUnoccupiedToOccupiedThreshold.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OccupancySensingCluster) cluster).readPhysicalContactUnoccupiedToOccupiedThresholdAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOccupancySensingPhysicalContactUnoccupiedToOccupiedThresholdCommandParams
        );
        result.put("readPhysicalContactUnoccupiedToOccupiedThresholdAttribute", readOccupancySensingPhysicalContactUnoccupiedToOccupiedThresholdAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOccupancySensingGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOccupancySensingGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OccupancySensing.ID, ClusterIDMapping.OccupancySensing.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OccupancySensingCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.OccupancySensingCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedOccupancySensingClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOccupancySensingGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readOccupancySensingGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOccupancySensingAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOccupancySensingAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OccupancySensing.ID, ClusterIDMapping.OccupancySensing.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OccupancySensingCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.OccupancySensingCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedOccupancySensingClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOccupancySensingAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readOccupancySensingAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOccupancySensingEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOccupancySensingEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OccupancySensing.ID, ClusterIDMapping.OccupancySensing.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OccupancySensingCluster) cluster).readEventListAttribute(
//              (ChipClusters.OccupancySensingCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedOccupancySensingClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOccupancySensingEventListCommandParams
        );
        result.put("readEventListAttribute", readOccupancySensingEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOccupancySensingAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOccupancySensingAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OccupancySensing.ID, ClusterIDMapping.OccupancySensing.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OccupancySensingCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.OccupancySensingCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedOccupancySensingClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOccupancySensingAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readOccupancySensingAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOccupancySensingFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOccupancySensingFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OccupancySensing.ID, ClusterIDMapping.OccupancySensing.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OccupancySensingCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOccupancySensingFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readOccupancySensingFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOccupancySensingClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOccupancySensingClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OccupancySensing.ID, ClusterIDMapping.OccupancySensing.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OccupancySensingCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOccupancySensingClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readOccupancySensingClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readCarbonMonoxideConcentrationMeasurementInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readCarbonMonoxideConcentrationMeasurementMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readCarbonMonoxideConcentrationMeasurementMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.CarbonMonoxideConcentrationMeasurement.ID, ClusterIDMapping.CarbonMonoxideConcentrationMeasurement.Attribute.MeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.CarbonMonoxideConcentrationMeasurementCluster) cluster).readMeasuredValueAttribute(
//              (ChipClusters.CarbonMonoxideConcentrationMeasurementCluster.MeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedCarbonMonoxideConcentrationMeasurementClusterMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readCarbonMonoxideConcentrationMeasurementMeasuredValueCommandParams
        );
        result.put("readMeasuredValueAttribute", readCarbonMonoxideConcentrationMeasurementMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readCarbonMonoxideConcentrationMeasurementMinMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readCarbonMonoxideConcentrationMeasurementMinMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.CarbonMonoxideConcentrationMeasurement.ID, ClusterIDMapping.CarbonMonoxideConcentrationMeasurement.Attribute.MinMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.CarbonMonoxideConcentrationMeasurementCluster) cluster).readMinMeasuredValueAttribute(
//              (ChipClusters.CarbonMonoxideConcentrationMeasurementCluster.MinMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedCarbonMonoxideConcentrationMeasurementClusterMinMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readCarbonMonoxideConcentrationMeasurementMinMeasuredValueCommandParams
        );
        result.put("readMinMeasuredValueAttribute", readCarbonMonoxideConcentrationMeasurementMinMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readCarbonMonoxideConcentrationMeasurementMaxMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readCarbonMonoxideConcentrationMeasurementMaxMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.CarbonMonoxideConcentrationMeasurement.ID, ClusterIDMapping.CarbonMonoxideConcentrationMeasurement.Attribute.MaxMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.CarbonMonoxideConcentrationMeasurementCluster) cluster).readMaxMeasuredValueAttribute(
//              (ChipClusters.CarbonMonoxideConcentrationMeasurementCluster.MaxMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedCarbonMonoxideConcentrationMeasurementClusterMaxMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readCarbonMonoxideConcentrationMeasurementMaxMeasuredValueCommandParams
        );
        result.put("readMaxMeasuredValueAttribute", readCarbonMonoxideConcentrationMeasurementMaxMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readCarbonMonoxideConcentrationMeasurementPeakMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readCarbonMonoxideConcentrationMeasurementPeakMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.CarbonMonoxideConcentrationMeasurement.ID, ClusterIDMapping.CarbonMonoxideConcentrationMeasurement.Attribute.PeakMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.CarbonMonoxideConcentrationMeasurementCluster) cluster).readPeakMeasuredValueAttribute(
//              (ChipClusters.CarbonMonoxideConcentrationMeasurementCluster.PeakMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedCarbonMonoxideConcentrationMeasurementClusterPeakMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readCarbonMonoxideConcentrationMeasurementPeakMeasuredValueCommandParams
        );
        result.put("readPeakMeasuredValueAttribute", readCarbonMonoxideConcentrationMeasurementPeakMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readCarbonMonoxideConcentrationMeasurementPeakMeasuredValueWindowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readCarbonMonoxideConcentrationMeasurementPeakMeasuredValueWindowAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.CarbonMonoxideConcentrationMeasurement.ID, ClusterIDMapping.CarbonMonoxideConcentrationMeasurement.Attribute.PeakMeasuredValueWindow.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.CarbonMonoxideConcentrationMeasurementCluster) cluster).readPeakMeasuredValueWindowAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readCarbonMonoxideConcentrationMeasurementPeakMeasuredValueWindowCommandParams
        );
        result.put("readPeakMeasuredValueWindowAttribute", readCarbonMonoxideConcentrationMeasurementPeakMeasuredValueWindowAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readCarbonMonoxideConcentrationMeasurementAverageMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readCarbonMonoxideConcentrationMeasurementAverageMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.CarbonMonoxideConcentrationMeasurement.ID, ClusterIDMapping.CarbonMonoxideConcentrationMeasurement.Attribute.AverageMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.CarbonMonoxideConcentrationMeasurementCluster) cluster).readAverageMeasuredValueAttribute(
//              (ChipClusters.CarbonMonoxideConcentrationMeasurementCluster.AverageMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedCarbonMonoxideConcentrationMeasurementClusterAverageMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readCarbonMonoxideConcentrationMeasurementAverageMeasuredValueCommandParams
        );
        result.put("readAverageMeasuredValueAttribute", readCarbonMonoxideConcentrationMeasurementAverageMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readCarbonMonoxideConcentrationMeasurementAverageMeasuredValueWindowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readCarbonMonoxideConcentrationMeasurementAverageMeasuredValueWindowAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.CarbonMonoxideConcentrationMeasurement.ID, ClusterIDMapping.CarbonMonoxideConcentrationMeasurement.Attribute.AverageMeasuredValueWindow.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.CarbonMonoxideConcentrationMeasurementCluster) cluster).readAverageMeasuredValueWindowAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readCarbonMonoxideConcentrationMeasurementAverageMeasuredValueWindowCommandParams
        );
        result.put("readAverageMeasuredValueWindowAttribute", readCarbonMonoxideConcentrationMeasurementAverageMeasuredValueWindowAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readCarbonMonoxideConcentrationMeasurementUncertaintyCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readCarbonMonoxideConcentrationMeasurementUncertaintyAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.CarbonMonoxideConcentrationMeasurement.ID, ClusterIDMapping.CarbonMonoxideConcentrationMeasurement.Attribute.Uncertainty.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.CarbonMonoxideConcentrationMeasurementCluster) cluster).readUncertaintyAttribute(
//              (ChipClusters.FloatAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFloatAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readCarbonMonoxideConcentrationMeasurementUncertaintyCommandParams
        );
        result.put("readUncertaintyAttribute", readCarbonMonoxideConcentrationMeasurementUncertaintyAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readCarbonMonoxideConcentrationMeasurementMeasurementUnitCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readCarbonMonoxideConcentrationMeasurementMeasurementUnitAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.CarbonMonoxideConcentrationMeasurement.ID, ClusterIDMapping.CarbonMonoxideConcentrationMeasurement.Attribute.MeasurementUnit.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.CarbonMonoxideConcentrationMeasurementCluster) cluster).readMeasurementUnitAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readCarbonMonoxideConcentrationMeasurementMeasurementUnitCommandParams
        );
        result.put("readMeasurementUnitAttribute", readCarbonMonoxideConcentrationMeasurementMeasurementUnitAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readCarbonMonoxideConcentrationMeasurementMeasurementMediumCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readCarbonMonoxideConcentrationMeasurementMeasurementMediumAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.CarbonMonoxideConcentrationMeasurement.ID, ClusterIDMapping.CarbonMonoxideConcentrationMeasurement.Attribute.MeasurementMedium.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.CarbonMonoxideConcentrationMeasurementCluster) cluster).readMeasurementMediumAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readCarbonMonoxideConcentrationMeasurementMeasurementMediumCommandParams
        );
        result.put("readMeasurementMediumAttribute", readCarbonMonoxideConcentrationMeasurementMeasurementMediumAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readCarbonMonoxideConcentrationMeasurementLevelValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readCarbonMonoxideConcentrationMeasurementLevelValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.CarbonMonoxideConcentrationMeasurement.ID, ClusterIDMapping.CarbonMonoxideConcentrationMeasurement.Attribute.LevelValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.CarbonMonoxideConcentrationMeasurementCluster) cluster).readLevelValueAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readCarbonMonoxideConcentrationMeasurementLevelValueCommandParams
        );
        result.put("readLevelValueAttribute", readCarbonMonoxideConcentrationMeasurementLevelValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readCarbonMonoxideConcentrationMeasurementGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readCarbonMonoxideConcentrationMeasurementGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.CarbonMonoxideConcentrationMeasurement.ID, ClusterIDMapping.CarbonMonoxideConcentrationMeasurement.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.CarbonMonoxideConcentrationMeasurementCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.CarbonMonoxideConcentrationMeasurementCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedCarbonMonoxideConcentrationMeasurementClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readCarbonMonoxideConcentrationMeasurementGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readCarbonMonoxideConcentrationMeasurementGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readCarbonMonoxideConcentrationMeasurementAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readCarbonMonoxideConcentrationMeasurementAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.CarbonMonoxideConcentrationMeasurement.ID, ClusterIDMapping.CarbonMonoxideConcentrationMeasurement.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.CarbonMonoxideConcentrationMeasurementCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.CarbonMonoxideConcentrationMeasurementCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedCarbonMonoxideConcentrationMeasurementClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readCarbonMonoxideConcentrationMeasurementAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readCarbonMonoxideConcentrationMeasurementAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readCarbonMonoxideConcentrationMeasurementEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readCarbonMonoxideConcentrationMeasurementEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.CarbonMonoxideConcentrationMeasurement.ID, ClusterIDMapping.CarbonMonoxideConcentrationMeasurement.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.CarbonMonoxideConcentrationMeasurementCluster) cluster).readEventListAttribute(
//              (ChipClusters.CarbonMonoxideConcentrationMeasurementCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedCarbonMonoxideConcentrationMeasurementClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readCarbonMonoxideConcentrationMeasurementEventListCommandParams
        );
        result.put("readEventListAttribute", readCarbonMonoxideConcentrationMeasurementEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readCarbonMonoxideConcentrationMeasurementAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readCarbonMonoxideConcentrationMeasurementAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.CarbonMonoxideConcentrationMeasurement.ID, ClusterIDMapping.CarbonMonoxideConcentrationMeasurement.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.CarbonMonoxideConcentrationMeasurementCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.CarbonMonoxideConcentrationMeasurementCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedCarbonMonoxideConcentrationMeasurementClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readCarbonMonoxideConcentrationMeasurementAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readCarbonMonoxideConcentrationMeasurementAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readCarbonMonoxideConcentrationMeasurementFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readCarbonMonoxideConcentrationMeasurementFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.CarbonMonoxideConcentrationMeasurement.ID, ClusterIDMapping.CarbonMonoxideConcentrationMeasurement.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.CarbonMonoxideConcentrationMeasurementCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readCarbonMonoxideConcentrationMeasurementFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readCarbonMonoxideConcentrationMeasurementFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readCarbonMonoxideConcentrationMeasurementClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readCarbonMonoxideConcentrationMeasurementClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.CarbonMonoxideConcentrationMeasurement.ID, ClusterIDMapping.CarbonMonoxideConcentrationMeasurement.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.CarbonMonoxideConcentrationMeasurementCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readCarbonMonoxideConcentrationMeasurementClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readCarbonMonoxideConcentrationMeasurementClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readCarbonDioxideConcentrationMeasurementInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readCarbonDioxideConcentrationMeasurementMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readCarbonDioxideConcentrationMeasurementMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.CarbonDioxideConcentrationMeasurement.ID, ClusterIDMapping.CarbonDioxideConcentrationMeasurement.Attribute.MeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.CarbonDioxideConcentrationMeasurementCluster) cluster).readMeasuredValueAttribute(
//              (ChipClusters.CarbonDioxideConcentrationMeasurementCluster.MeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedCarbonDioxideConcentrationMeasurementClusterMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readCarbonDioxideConcentrationMeasurementMeasuredValueCommandParams
        );
        result.put("readMeasuredValueAttribute", readCarbonDioxideConcentrationMeasurementMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readCarbonDioxideConcentrationMeasurementMinMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readCarbonDioxideConcentrationMeasurementMinMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.CarbonDioxideConcentrationMeasurement.ID, ClusterIDMapping.CarbonDioxideConcentrationMeasurement.Attribute.MinMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.CarbonDioxideConcentrationMeasurementCluster) cluster).readMinMeasuredValueAttribute(
//              (ChipClusters.CarbonDioxideConcentrationMeasurementCluster.MinMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedCarbonDioxideConcentrationMeasurementClusterMinMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readCarbonDioxideConcentrationMeasurementMinMeasuredValueCommandParams
        );
        result.put("readMinMeasuredValueAttribute", readCarbonDioxideConcentrationMeasurementMinMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readCarbonDioxideConcentrationMeasurementMaxMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readCarbonDioxideConcentrationMeasurementMaxMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.CarbonDioxideConcentrationMeasurement.ID, ClusterIDMapping.CarbonDioxideConcentrationMeasurement.Attribute.MaxMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.CarbonDioxideConcentrationMeasurementCluster) cluster).readMaxMeasuredValueAttribute(
//              (ChipClusters.CarbonDioxideConcentrationMeasurementCluster.MaxMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedCarbonDioxideConcentrationMeasurementClusterMaxMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readCarbonDioxideConcentrationMeasurementMaxMeasuredValueCommandParams
        );
        result.put("readMaxMeasuredValueAttribute", readCarbonDioxideConcentrationMeasurementMaxMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readCarbonDioxideConcentrationMeasurementPeakMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readCarbonDioxideConcentrationMeasurementPeakMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.CarbonDioxideConcentrationMeasurement.ID, ClusterIDMapping.CarbonDioxideConcentrationMeasurement.Attribute.PeakMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.CarbonDioxideConcentrationMeasurementCluster) cluster).readPeakMeasuredValueAttribute(
//              (ChipClusters.CarbonDioxideConcentrationMeasurementCluster.PeakMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedCarbonDioxideConcentrationMeasurementClusterPeakMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readCarbonDioxideConcentrationMeasurementPeakMeasuredValueCommandParams
        );
        result.put("readPeakMeasuredValueAttribute", readCarbonDioxideConcentrationMeasurementPeakMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readCarbonDioxideConcentrationMeasurementPeakMeasuredValueWindowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readCarbonDioxideConcentrationMeasurementPeakMeasuredValueWindowAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.CarbonDioxideConcentrationMeasurement.ID, ClusterIDMapping.CarbonDioxideConcentrationMeasurement.Attribute.PeakMeasuredValueWindow.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.CarbonDioxideConcentrationMeasurementCluster) cluster).readPeakMeasuredValueWindowAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readCarbonDioxideConcentrationMeasurementPeakMeasuredValueWindowCommandParams
        );
        result.put("readPeakMeasuredValueWindowAttribute", readCarbonDioxideConcentrationMeasurementPeakMeasuredValueWindowAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readCarbonDioxideConcentrationMeasurementAverageMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readCarbonDioxideConcentrationMeasurementAverageMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.CarbonDioxideConcentrationMeasurement.ID, ClusterIDMapping.CarbonDioxideConcentrationMeasurement.Attribute.AverageMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.CarbonDioxideConcentrationMeasurementCluster) cluster).readAverageMeasuredValueAttribute(
//              (ChipClusters.CarbonDioxideConcentrationMeasurementCluster.AverageMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedCarbonDioxideConcentrationMeasurementClusterAverageMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readCarbonDioxideConcentrationMeasurementAverageMeasuredValueCommandParams
        );
        result.put("readAverageMeasuredValueAttribute", readCarbonDioxideConcentrationMeasurementAverageMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readCarbonDioxideConcentrationMeasurementAverageMeasuredValueWindowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readCarbonDioxideConcentrationMeasurementAverageMeasuredValueWindowAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.CarbonDioxideConcentrationMeasurement.ID, ClusterIDMapping.CarbonDioxideConcentrationMeasurement.Attribute.AverageMeasuredValueWindow.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.CarbonDioxideConcentrationMeasurementCluster) cluster).readAverageMeasuredValueWindowAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readCarbonDioxideConcentrationMeasurementAverageMeasuredValueWindowCommandParams
        );
        result.put("readAverageMeasuredValueWindowAttribute", readCarbonDioxideConcentrationMeasurementAverageMeasuredValueWindowAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readCarbonDioxideConcentrationMeasurementUncertaintyCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readCarbonDioxideConcentrationMeasurementUncertaintyAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.CarbonDioxideConcentrationMeasurement.ID, ClusterIDMapping.CarbonDioxideConcentrationMeasurement.Attribute.Uncertainty.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.CarbonDioxideConcentrationMeasurementCluster) cluster).readUncertaintyAttribute(
//              (ChipClusters.FloatAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFloatAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readCarbonDioxideConcentrationMeasurementUncertaintyCommandParams
        );
        result.put("readUncertaintyAttribute", readCarbonDioxideConcentrationMeasurementUncertaintyAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readCarbonDioxideConcentrationMeasurementMeasurementUnitCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readCarbonDioxideConcentrationMeasurementMeasurementUnitAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.CarbonDioxideConcentrationMeasurement.ID, ClusterIDMapping.CarbonDioxideConcentrationMeasurement.Attribute.MeasurementUnit.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.CarbonDioxideConcentrationMeasurementCluster) cluster).readMeasurementUnitAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readCarbonDioxideConcentrationMeasurementMeasurementUnitCommandParams
        );
        result.put("readMeasurementUnitAttribute", readCarbonDioxideConcentrationMeasurementMeasurementUnitAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readCarbonDioxideConcentrationMeasurementMeasurementMediumCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readCarbonDioxideConcentrationMeasurementMeasurementMediumAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.CarbonDioxideConcentrationMeasurement.ID, ClusterIDMapping.CarbonDioxideConcentrationMeasurement.Attribute.MeasurementMedium.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.CarbonDioxideConcentrationMeasurementCluster) cluster).readMeasurementMediumAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readCarbonDioxideConcentrationMeasurementMeasurementMediumCommandParams
        );
        result.put("readMeasurementMediumAttribute", readCarbonDioxideConcentrationMeasurementMeasurementMediumAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readCarbonDioxideConcentrationMeasurementLevelValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readCarbonDioxideConcentrationMeasurementLevelValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.CarbonDioxideConcentrationMeasurement.ID, ClusterIDMapping.CarbonDioxideConcentrationMeasurement.Attribute.LevelValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.CarbonDioxideConcentrationMeasurementCluster) cluster).readLevelValueAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readCarbonDioxideConcentrationMeasurementLevelValueCommandParams
        );
        result.put("readLevelValueAttribute", readCarbonDioxideConcentrationMeasurementLevelValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readCarbonDioxideConcentrationMeasurementGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readCarbonDioxideConcentrationMeasurementGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.CarbonDioxideConcentrationMeasurement.ID, ClusterIDMapping.CarbonDioxideConcentrationMeasurement.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.CarbonDioxideConcentrationMeasurementCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.CarbonDioxideConcentrationMeasurementCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedCarbonDioxideConcentrationMeasurementClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readCarbonDioxideConcentrationMeasurementGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readCarbonDioxideConcentrationMeasurementGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readCarbonDioxideConcentrationMeasurementAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readCarbonDioxideConcentrationMeasurementAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.CarbonDioxideConcentrationMeasurement.ID, ClusterIDMapping.CarbonDioxideConcentrationMeasurement.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.CarbonDioxideConcentrationMeasurementCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.CarbonDioxideConcentrationMeasurementCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedCarbonDioxideConcentrationMeasurementClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readCarbonDioxideConcentrationMeasurementAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readCarbonDioxideConcentrationMeasurementAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readCarbonDioxideConcentrationMeasurementEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readCarbonDioxideConcentrationMeasurementEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.CarbonDioxideConcentrationMeasurement.ID, ClusterIDMapping.CarbonDioxideConcentrationMeasurement.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.CarbonDioxideConcentrationMeasurementCluster) cluster).readEventListAttribute(
//              (ChipClusters.CarbonDioxideConcentrationMeasurementCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedCarbonDioxideConcentrationMeasurementClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readCarbonDioxideConcentrationMeasurementEventListCommandParams
        );
        result.put("readEventListAttribute", readCarbonDioxideConcentrationMeasurementEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readCarbonDioxideConcentrationMeasurementAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readCarbonDioxideConcentrationMeasurementAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.CarbonDioxideConcentrationMeasurement.ID, ClusterIDMapping.CarbonDioxideConcentrationMeasurement.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.CarbonDioxideConcentrationMeasurementCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.CarbonDioxideConcentrationMeasurementCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedCarbonDioxideConcentrationMeasurementClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readCarbonDioxideConcentrationMeasurementAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readCarbonDioxideConcentrationMeasurementAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readCarbonDioxideConcentrationMeasurementFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readCarbonDioxideConcentrationMeasurementFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.CarbonDioxideConcentrationMeasurement.ID, ClusterIDMapping.CarbonDioxideConcentrationMeasurement.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.CarbonDioxideConcentrationMeasurementCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readCarbonDioxideConcentrationMeasurementFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readCarbonDioxideConcentrationMeasurementFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readCarbonDioxideConcentrationMeasurementClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readCarbonDioxideConcentrationMeasurementClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.CarbonDioxideConcentrationMeasurement.ID, ClusterIDMapping.CarbonDioxideConcentrationMeasurement.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.CarbonDioxideConcentrationMeasurementCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readCarbonDioxideConcentrationMeasurementClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readCarbonDioxideConcentrationMeasurementClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readEthyleneConcentrationMeasurementInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readEthyleneConcentrationMeasurementMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readEthyleneConcentrationMeasurementMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.EthyleneConcentrationMeasurement.ID, ClusterIDMapping.EthyleneConcentrationMeasurement.Attribute.MeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.EthyleneConcentrationMeasurementCluster) cluster).readMeasuredValueAttribute(
//              (ChipClusters.EthyleneConcentrationMeasurementCluster.MeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedEthyleneConcentrationMeasurementClusterMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readEthyleneConcentrationMeasurementMeasuredValueCommandParams
        );
        result.put("readMeasuredValueAttribute", readEthyleneConcentrationMeasurementMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readEthyleneConcentrationMeasurementMinMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readEthyleneConcentrationMeasurementMinMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.EthyleneConcentrationMeasurement.ID, ClusterIDMapping.EthyleneConcentrationMeasurement.Attribute.MinMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.EthyleneConcentrationMeasurementCluster) cluster).readMinMeasuredValueAttribute(
//              (ChipClusters.EthyleneConcentrationMeasurementCluster.MinMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedEthyleneConcentrationMeasurementClusterMinMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readEthyleneConcentrationMeasurementMinMeasuredValueCommandParams
        );
        result.put("readMinMeasuredValueAttribute", readEthyleneConcentrationMeasurementMinMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readEthyleneConcentrationMeasurementMaxMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readEthyleneConcentrationMeasurementMaxMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.EthyleneConcentrationMeasurement.ID, ClusterIDMapping.EthyleneConcentrationMeasurement.Attribute.MaxMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.EthyleneConcentrationMeasurementCluster) cluster).readMaxMeasuredValueAttribute(
//              (ChipClusters.EthyleneConcentrationMeasurementCluster.MaxMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedEthyleneConcentrationMeasurementClusterMaxMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readEthyleneConcentrationMeasurementMaxMeasuredValueCommandParams
        );
        result.put("readMaxMeasuredValueAttribute", readEthyleneConcentrationMeasurementMaxMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readEthyleneConcentrationMeasurementPeakMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readEthyleneConcentrationMeasurementPeakMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.EthyleneConcentrationMeasurement.ID, ClusterIDMapping.EthyleneConcentrationMeasurement.Attribute.PeakMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.EthyleneConcentrationMeasurementCluster) cluster).readPeakMeasuredValueAttribute(
//              (ChipClusters.EthyleneConcentrationMeasurementCluster.PeakMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedEthyleneConcentrationMeasurementClusterPeakMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readEthyleneConcentrationMeasurementPeakMeasuredValueCommandParams
        );
        result.put("readPeakMeasuredValueAttribute", readEthyleneConcentrationMeasurementPeakMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readEthyleneConcentrationMeasurementPeakMeasuredValueWindowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readEthyleneConcentrationMeasurementPeakMeasuredValueWindowAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.EthyleneConcentrationMeasurement.ID, ClusterIDMapping.EthyleneConcentrationMeasurement.Attribute.PeakMeasuredValueWindow.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.EthyleneConcentrationMeasurementCluster) cluster).readPeakMeasuredValueWindowAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readEthyleneConcentrationMeasurementPeakMeasuredValueWindowCommandParams
        );
        result.put("readPeakMeasuredValueWindowAttribute", readEthyleneConcentrationMeasurementPeakMeasuredValueWindowAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readEthyleneConcentrationMeasurementAverageMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readEthyleneConcentrationMeasurementAverageMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.EthyleneConcentrationMeasurement.ID, ClusterIDMapping.EthyleneConcentrationMeasurement.Attribute.AverageMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.EthyleneConcentrationMeasurementCluster) cluster).readAverageMeasuredValueAttribute(
//              (ChipClusters.EthyleneConcentrationMeasurementCluster.AverageMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedEthyleneConcentrationMeasurementClusterAverageMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readEthyleneConcentrationMeasurementAverageMeasuredValueCommandParams
        );
        result.put("readAverageMeasuredValueAttribute", readEthyleneConcentrationMeasurementAverageMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readEthyleneConcentrationMeasurementAverageMeasuredValueWindowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readEthyleneConcentrationMeasurementAverageMeasuredValueWindowAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.EthyleneConcentrationMeasurement.ID, ClusterIDMapping.EthyleneConcentrationMeasurement.Attribute.AverageMeasuredValueWindow.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.EthyleneConcentrationMeasurementCluster) cluster).readAverageMeasuredValueWindowAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readEthyleneConcentrationMeasurementAverageMeasuredValueWindowCommandParams
        );
        result.put("readAverageMeasuredValueWindowAttribute", readEthyleneConcentrationMeasurementAverageMeasuredValueWindowAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readEthyleneConcentrationMeasurementUncertaintyCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readEthyleneConcentrationMeasurementUncertaintyAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.EthyleneConcentrationMeasurement.ID, ClusterIDMapping.EthyleneConcentrationMeasurement.Attribute.Uncertainty.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.EthyleneConcentrationMeasurementCluster) cluster).readUncertaintyAttribute(
//              (ChipClusters.FloatAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFloatAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readEthyleneConcentrationMeasurementUncertaintyCommandParams
        );
        result.put("readUncertaintyAttribute", readEthyleneConcentrationMeasurementUncertaintyAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readEthyleneConcentrationMeasurementMeasurementUnitCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readEthyleneConcentrationMeasurementMeasurementUnitAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.EthyleneConcentrationMeasurement.ID, ClusterIDMapping.EthyleneConcentrationMeasurement.Attribute.MeasurementUnit.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.EthyleneConcentrationMeasurementCluster) cluster).readMeasurementUnitAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readEthyleneConcentrationMeasurementMeasurementUnitCommandParams
        );
        result.put("readMeasurementUnitAttribute", readEthyleneConcentrationMeasurementMeasurementUnitAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readEthyleneConcentrationMeasurementMeasurementMediumCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readEthyleneConcentrationMeasurementMeasurementMediumAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.EthyleneConcentrationMeasurement.ID, ClusterIDMapping.EthyleneConcentrationMeasurement.Attribute.MeasurementMedium.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.EthyleneConcentrationMeasurementCluster) cluster).readMeasurementMediumAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readEthyleneConcentrationMeasurementMeasurementMediumCommandParams
        );
        result.put("readMeasurementMediumAttribute", readEthyleneConcentrationMeasurementMeasurementMediumAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readEthyleneConcentrationMeasurementLevelValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readEthyleneConcentrationMeasurementLevelValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.EthyleneConcentrationMeasurement.ID, ClusterIDMapping.EthyleneConcentrationMeasurement.Attribute.LevelValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.EthyleneConcentrationMeasurementCluster) cluster).readLevelValueAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readEthyleneConcentrationMeasurementLevelValueCommandParams
        );
        result.put("readLevelValueAttribute", readEthyleneConcentrationMeasurementLevelValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readEthyleneConcentrationMeasurementGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readEthyleneConcentrationMeasurementGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.EthyleneConcentrationMeasurement.ID, ClusterIDMapping.EthyleneConcentrationMeasurement.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.EthyleneConcentrationMeasurementCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.EthyleneConcentrationMeasurementCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedEthyleneConcentrationMeasurementClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readEthyleneConcentrationMeasurementGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readEthyleneConcentrationMeasurementGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readEthyleneConcentrationMeasurementAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readEthyleneConcentrationMeasurementAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.EthyleneConcentrationMeasurement.ID, ClusterIDMapping.EthyleneConcentrationMeasurement.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.EthyleneConcentrationMeasurementCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.EthyleneConcentrationMeasurementCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedEthyleneConcentrationMeasurementClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readEthyleneConcentrationMeasurementAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readEthyleneConcentrationMeasurementAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readEthyleneConcentrationMeasurementEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readEthyleneConcentrationMeasurementEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.EthyleneConcentrationMeasurement.ID, ClusterIDMapping.EthyleneConcentrationMeasurement.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.EthyleneConcentrationMeasurementCluster) cluster).readEventListAttribute(
//              (ChipClusters.EthyleneConcentrationMeasurementCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedEthyleneConcentrationMeasurementClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readEthyleneConcentrationMeasurementEventListCommandParams
        );
        result.put("readEventListAttribute", readEthyleneConcentrationMeasurementEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readEthyleneConcentrationMeasurementAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readEthyleneConcentrationMeasurementAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.EthyleneConcentrationMeasurement.ID, ClusterIDMapping.EthyleneConcentrationMeasurement.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.EthyleneConcentrationMeasurementCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.EthyleneConcentrationMeasurementCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedEthyleneConcentrationMeasurementClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readEthyleneConcentrationMeasurementAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readEthyleneConcentrationMeasurementAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readEthyleneConcentrationMeasurementFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readEthyleneConcentrationMeasurementFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.EthyleneConcentrationMeasurement.ID, ClusterIDMapping.EthyleneConcentrationMeasurement.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.EthyleneConcentrationMeasurementCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readEthyleneConcentrationMeasurementFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readEthyleneConcentrationMeasurementFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readEthyleneConcentrationMeasurementClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readEthyleneConcentrationMeasurementClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.EthyleneConcentrationMeasurement.ID, ClusterIDMapping.EthyleneConcentrationMeasurement.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.EthyleneConcentrationMeasurementCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readEthyleneConcentrationMeasurementClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readEthyleneConcentrationMeasurementClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readEthyleneOxideConcentrationMeasurementInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readEthyleneOxideConcentrationMeasurementMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readEthyleneOxideConcentrationMeasurementMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.EthyleneOxideConcentrationMeasurement.ID, ClusterIDMapping.EthyleneOxideConcentrationMeasurement.Attribute.MeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.EthyleneOxideConcentrationMeasurementCluster) cluster).readMeasuredValueAttribute(
//              (ChipClusters.EthyleneOxideConcentrationMeasurementCluster.MeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedEthyleneOxideConcentrationMeasurementClusterMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readEthyleneOxideConcentrationMeasurementMeasuredValueCommandParams
        );
        result.put("readMeasuredValueAttribute", readEthyleneOxideConcentrationMeasurementMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readEthyleneOxideConcentrationMeasurementMinMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readEthyleneOxideConcentrationMeasurementMinMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.EthyleneOxideConcentrationMeasurement.ID, ClusterIDMapping.EthyleneOxideConcentrationMeasurement.Attribute.MinMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.EthyleneOxideConcentrationMeasurementCluster) cluster).readMinMeasuredValueAttribute(
//              (ChipClusters.EthyleneOxideConcentrationMeasurementCluster.MinMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedEthyleneOxideConcentrationMeasurementClusterMinMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readEthyleneOxideConcentrationMeasurementMinMeasuredValueCommandParams
        );
        result.put("readMinMeasuredValueAttribute", readEthyleneOxideConcentrationMeasurementMinMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readEthyleneOxideConcentrationMeasurementMaxMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readEthyleneOxideConcentrationMeasurementMaxMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.EthyleneOxideConcentrationMeasurement.ID, ClusterIDMapping.EthyleneOxideConcentrationMeasurement.Attribute.MaxMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.EthyleneOxideConcentrationMeasurementCluster) cluster).readMaxMeasuredValueAttribute(
//              (ChipClusters.EthyleneOxideConcentrationMeasurementCluster.MaxMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedEthyleneOxideConcentrationMeasurementClusterMaxMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readEthyleneOxideConcentrationMeasurementMaxMeasuredValueCommandParams
        );
        result.put("readMaxMeasuredValueAttribute", readEthyleneOxideConcentrationMeasurementMaxMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readEthyleneOxideConcentrationMeasurementPeakMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readEthyleneOxideConcentrationMeasurementPeakMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.EthyleneOxideConcentrationMeasurement.ID, ClusterIDMapping.EthyleneOxideConcentrationMeasurement.Attribute.PeakMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.EthyleneOxideConcentrationMeasurementCluster) cluster).readPeakMeasuredValueAttribute(
//              (ChipClusters.EthyleneOxideConcentrationMeasurementCluster.PeakMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedEthyleneOxideConcentrationMeasurementClusterPeakMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readEthyleneOxideConcentrationMeasurementPeakMeasuredValueCommandParams
        );
        result.put("readPeakMeasuredValueAttribute", readEthyleneOxideConcentrationMeasurementPeakMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readEthyleneOxideConcentrationMeasurementPeakMeasuredValueWindowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readEthyleneOxideConcentrationMeasurementPeakMeasuredValueWindowAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.EthyleneOxideConcentrationMeasurement.ID, ClusterIDMapping.EthyleneOxideConcentrationMeasurement.Attribute.PeakMeasuredValueWindow.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.EthyleneOxideConcentrationMeasurementCluster) cluster).readPeakMeasuredValueWindowAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readEthyleneOxideConcentrationMeasurementPeakMeasuredValueWindowCommandParams
        );
        result.put("readPeakMeasuredValueWindowAttribute", readEthyleneOxideConcentrationMeasurementPeakMeasuredValueWindowAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readEthyleneOxideConcentrationMeasurementAverageMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readEthyleneOxideConcentrationMeasurementAverageMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.EthyleneOxideConcentrationMeasurement.ID, ClusterIDMapping.EthyleneOxideConcentrationMeasurement.Attribute.AverageMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.EthyleneOxideConcentrationMeasurementCluster) cluster).readAverageMeasuredValueAttribute(
//              (ChipClusters.EthyleneOxideConcentrationMeasurementCluster.AverageMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedEthyleneOxideConcentrationMeasurementClusterAverageMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readEthyleneOxideConcentrationMeasurementAverageMeasuredValueCommandParams
        );
        result.put("readAverageMeasuredValueAttribute", readEthyleneOxideConcentrationMeasurementAverageMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readEthyleneOxideConcentrationMeasurementAverageMeasuredValueWindowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readEthyleneOxideConcentrationMeasurementAverageMeasuredValueWindowAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.EthyleneOxideConcentrationMeasurement.ID, ClusterIDMapping.EthyleneOxideConcentrationMeasurement.Attribute.AverageMeasuredValueWindow.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.EthyleneOxideConcentrationMeasurementCluster) cluster).readAverageMeasuredValueWindowAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readEthyleneOxideConcentrationMeasurementAverageMeasuredValueWindowCommandParams
        );
        result.put("readAverageMeasuredValueWindowAttribute", readEthyleneOxideConcentrationMeasurementAverageMeasuredValueWindowAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readEthyleneOxideConcentrationMeasurementUncertaintyCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readEthyleneOxideConcentrationMeasurementUncertaintyAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.EthyleneOxideConcentrationMeasurement.ID, ClusterIDMapping.EthyleneOxideConcentrationMeasurement.Attribute.Uncertainty.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.EthyleneOxideConcentrationMeasurementCluster) cluster).readUncertaintyAttribute(
//              (ChipClusters.FloatAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFloatAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readEthyleneOxideConcentrationMeasurementUncertaintyCommandParams
        );
        result.put("readUncertaintyAttribute", readEthyleneOxideConcentrationMeasurementUncertaintyAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readEthyleneOxideConcentrationMeasurementMeasurementUnitCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readEthyleneOxideConcentrationMeasurementMeasurementUnitAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.EthyleneOxideConcentrationMeasurement.ID, ClusterIDMapping.EthyleneOxideConcentrationMeasurement.Attribute.MeasurementUnit.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.EthyleneOxideConcentrationMeasurementCluster) cluster).readMeasurementUnitAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readEthyleneOxideConcentrationMeasurementMeasurementUnitCommandParams
        );
        result.put("readMeasurementUnitAttribute", readEthyleneOxideConcentrationMeasurementMeasurementUnitAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readEthyleneOxideConcentrationMeasurementMeasurementMediumCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readEthyleneOxideConcentrationMeasurementMeasurementMediumAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.EthyleneOxideConcentrationMeasurement.ID, ClusterIDMapping.EthyleneOxideConcentrationMeasurement.Attribute.MeasurementMedium.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.EthyleneOxideConcentrationMeasurementCluster) cluster).readMeasurementMediumAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readEthyleneOxideConcentrationMeasurementMeasurementMediumCommandParams
        );
        result.put("readMeasurementMediumAttribute", readEthyleneOxideConcentrationMeasurementMeasurementMediumAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readEthyleneOxideConcentrationMeasurementLevelValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readEthyleneOxideConcentrationMeasurementLevelValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.EthyleneOxideConcentrationMeasurement.ID, ClusterIDMapping.EthyleneOxideConcentrationMeasurement.Attribute.LevelValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.EthyleneOxideConcentrationMeasurementCluster) cluster).readLevelValueAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readEthyleneOxideConcentrationMeasurementLevelValueCommandParams
        );
        result.put("readLevelValueAttribute", readEthyleneOxideConcentrationMeasurementLevelValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readEthyleneOxideConcentrationMeasurementGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readEthyleneOxideConcentrationMeasurementGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.EthyleneOxideConcentrationMeasurement.ID, ClusterIDMapping.EthyleneOxideConcentrationMeasurement.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.EthyleneOxideConcentrationMeasurementCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.EthyleneOxideConcentrationMeasurementCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedEthyleneOxideConcentrationMeasurementClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readEthyleneOxideConcentrationMeasurementGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readEthyleneOxideConcentrationMeasurementGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readEthyleneOxideConcentrationMeasurementAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readEthyleneOxideConcentrationMeasurementAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.EthyleneOxideConcentrationMeasurement.ID, ClusterIDMapping.EthyleneOxideConcentrationMeasurement.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.EthyleneOxideConcentrationMeasurementCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.EthyleneOxideConcentrationMeasurementCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedEthyleneOxideConcentrationMeasurementClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readEthyleneOxideConcentrationMeasurementAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readEthyleneOxideConcentrationMeasurementAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readEthyleneOxideConcentrationMeasurementEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readEthyleneOxideConcentrationMeasurementEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.EthyleneOxideConcentrationMeasurement.ID, ClusterIDMapping.EthyleneOxideConcentrationMeasurement.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.EthyleneOxideConcentrationMeasurementCluster) cluster).readEventListAttribute(
//              (ChipClusters.EthyleneOxideConcentrationMeasurementCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedEthyleneOxideConcentrationMeasurementClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readEthyleneOxideConcentrationMeasurementEventListCommandParams
        );
        result.put("readEventListAttribute", readEthyleneOxideConcentrationMeasurementEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readEthyleneOxideConcentrationMeasurementAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readEthyleneOxideConcentrationMeasurementAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.EthyleneOxideConcentrationMeasurement.ID, ClusterIDMapping.EthyleneOxideConcentrationMeasurement.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.EthyleneOxideConcentrationMeasurementCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.EthyleneOxideConcentrationMeasurementCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedEthyleneOxideConcentrationMeasurementClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readEthyleneOxideConcentrationMeasurementAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readEthyleneOxideConcentrationMeasurementAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readEthyleneOxideConcentrationMeasurementFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readEthyleneOxideConcentrationMeasurementFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.EthyleneOxideConcentrationMeasurement.ID, ClusterIDMapping.EthyleneOxideConcentrationMeasurement.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.EthyleneOxideConcentrationMeasurementCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readEthyleneOxideConcentrationMeasurementFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readEthyleneOxideConcentrationMeasurementFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readEthyleneOxideConcentrationMeasurementClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readEthyleneOxideConcentrationMeasurementClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.EthyleneOxideConcentrationMeasurement.ID, ClusterIDMapping.EthyleneOxideConcentrationMeasurement.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.EthyleneOxideConcentrationMeasurementCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readEthyleneOxideConcentrationMeasurementClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readEthyleneOxideConcentrationMeasurementClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readHydrogenConcentrationMeasurementInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readHydrogenConcentrationMeasurementMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readHydrogenConcentrationMeasurementMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.HydrogenConcentrationMeasurement.ID, ClusterIDMapping.HydrogenConcentrationMeasurement.Attribute.MeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.HydrogenConcentrationMeasurementCluster) cluster).readMeasuredValueAttribute(
//              (ChipClusters.HydrogenConcentrationMeasurementCluster.MeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedHydrogenConcentrationMeasurementClusterMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readHydrogenConcentrationMeasurementMeasuredValueCommandParams
        );
        result.put("readMeasuredValueAttribute", readHydrogenConcentrationMeasurementMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readHydrogenConcentrationMeasurementMinMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readHydrogenConcentrationMeasurementMinMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.HydrogenConcentrationMeasurement.ID, ClusterIDMapping.HydrogenConcentrationMeasurement.Attribute.MinMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.HydrogenConcentrationMeasurementCluster) cluster).readMinMeasuredValueAttribute(
//              (ChipClusters.HydrogenConcentrationMeasurementCluster.MinMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedHydrogenConcentrationMeasurementClusterMinMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readHydrogenConcentrationMeasurementMinMeasuredValueCommandParams
        );
        result.put("readMinMeasuredValueAttribute", readHydrogenConcentrationMeasurementMinMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readHydrogenConcentrationMeasurementMaxMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readHydrogenConcentrationMeasurementMaxMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.HydrogenConcentrationMeasurement.ID, ClusterIDMapping.HydrogenConcentrationMeasurement.Attribute.MaxMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.HydrogenConcentrationMeasurementCluster) cluster).readMaxMeasuredValueAttribute(
//              (ChipClusters.HydrogenConcentrationMeasurementCluster.MaxMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedHydrogenConcentrationMeasurementClusterMaxMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readHydrogenConcentrationMeasurementMaxMeasuredValueCommandParams
        );
        result.put("readMaxMeasuredValueAttribute", readHydrogenConcentrationMeasurementMaxMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readHydrogenConcentrationMeasurementPeakMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readHydrogenConcentrationMeasurementPeakMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.HydrogenConcentrationMeasurement.ID, ClusterIDMapping.HydrogenConcentrationMeasurement.Attribute.PeakMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.HydrogenConcentrationMeasurementCluster) cluster).readPeakMeasuredValueAttribute(
//              (ChipClusters.HydrogenConcentrationMeasurementCluster.PeakMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedHydrogenConcentrationMeasurementClusterPeakMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readHydrogenConcentrationMeasurementPeakMeasuredValueCommandParams
        );
        result.put("readPeakMeasuredValueAttribute", readHydrogenConcentrationMeasurementPeakMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readHydrogenConcentrationMeasurementPeakMeasuredValueWindowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readHydrogenConcentrationMeasurementPeakMeasuredValueWindowAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.HydrogenConcentrationMeasurement.ID, ClusterIDMapping.HydrogenConcentrationMeasurement.Attribute.PeakMeasuredValueWindow.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.HydrogenConcentrationMeasurementCluster) cluster).readPeakMeasuredValueWindowAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readHydrogenConcentrationMeasurementPeakMeasuredValueWindowCommandParams
        );
        result.put("readPeakMeasuredValueWindowAttribute", readHydrogenConcentrationMeasurementPeakMeasuredValueWindowAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readHydrogenConcentrationMeasurementAverageMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readHydrogenConcentrationMeasurementAverageMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.HydrogenConcentrationMeasurement.ID, ClusterIDMapping.HydrogenConcentrationMeasurement.Attribute.AverageMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.HydrogenConcentrationMeasurementCluster) cluster).readAverageMeasuredValueAttribute(
//              (ChipClusters.HydrogenConcentrationMeasurementCluster.AverageMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedHydrogenConcentrationMeasurementClusterAverageMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readHydrogenConcentrationMeasurementAverageMeasuredValueCommandParams
        );
        result.put("readAverageMeasuredValueAttribute", readHydrogenConcentrationMeasurementAverageMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readHydrogenConcentrationMeasurementAverageMeasuredValueWindowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readHydrogenConcentrationMeasurementAverageMeasuredValueWindowAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.HydrogenConcentrationMeasurement.ID, ClusterIDMapping.HydrogenConcentrationMeasurement.Attribute.AverageMeasuredValueWindow.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.HydrogenConcentrationMeasurementCluster) cluster).readAverageMeasuredValueWindowAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readHydrogenConcentrationMeasurementAverageMeasuredValueWindowCommandParams
        );
        result.put("readAverageMeasuredValueWindowAttribute", readHydrogenConcentrationMeasurementAverageMeasuredValueWindowAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readHydrogenConcentrationMeasurementUncertaintyCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readHydrogenConcentrationMeasurementUncertaintyAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.HydrogenConcentrationMeasurement.ID, ClusterIDMapping.HydrogenConcentrationMeasurement.Attribute.Uncertainty.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.HydrogenConcentrationMeasurementCluster) cluster).readUncertaintyAttribute(
//              (ChipClusters.FloatAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFloatAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readHydrogenConcentrationMeasurementUncertaintyCommandParams
        );
        result.put("readUncertaintyAttribute", readHydrogenConcentrationMeasurementUncertaintyAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readHydrogenConcentrationMeasurementMeasurementUnitCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readHydrogenConcentrationMeasurementMeasurementUnitAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.HydrogenConcentrationMeasurement.ID, ClusterIDMapping.HydrogenConcentrationMeasurement.Attribute.MeasurementUnit.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.HydrogenConcentrationMeasurementCluster) cluster).readMeasurementUnitAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readHydrogenConcentrationMeasurementMeasurementUnitCommandParams
        );
        result.put("readMeasurementUnitAttribute", readHydrogenConcentrationMeasurementMeasurementUnitAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readHydrogenConcentrationMeasurementMeasurementMediumCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readHydrogenConcentrationMeasurementMeasurementMediumAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.HydrogenConcentrationMeasurement.ID, ClusterIDMapping.HydrogenConcentrationMeasurement.Attribute.MeasurementMedium.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.HydrogenConcentrationMeasurementCluster) cluster).readMeasurementMediumAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readHydrogenConcentrationMeasurementMeasurementMediumCommandParams
        );
        result.put("readMeasurementMediumAttribute", readHydrogenConcentrationMeasurementMeasurementMediumAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readHydrogenConcentrationMeasurementLevelValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readHydrogenConcentrationMeasurementLevelValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.HydrogenConcentrationMeasurement.ID, ClusterIDMapping.HydrogenConcentrationMeasurement.Attribute.LevelValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.HydrogenConcentrationMeasurementCluster) cluster).readLevelValueAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readHydrogenConcentrationMeasurementLevelValueCommandParams
        );
        result.put("readLevelValueAttribute", readHydrogenConcentrationMeasurementLevelValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readHydrogenConcentrationMeasurementGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readHydrogenConcentrationMeasurementGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.HydrogenConcentrationMeasurement.ID, ClusterIDMapping.HydrogenConcentrationMeasurement.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.HydrogenConcentrationMeasurementCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.HydrogenConcentrationMeasurementCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedHydrogenConcentrationMeasurementClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readHydrogenConcentrationMeasurementGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readHydrogenConcentrationMeasurementGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readHydrogenConcentrationMeasurementAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readHydrogenConcentrationMeasurementAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.HydrogenConcentrationMeasurement.ID, ClusterIDMapping.HydrogenConcentrationMeasurement.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.HydrogenConcentrationMeasurementCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.HydrogenConcentrationMeasurementCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedHydrogenConcentrationMeasurementClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readHydrogenConcentrationMeasurementAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readHydrogenConcentrationMeasurementAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readHydrogenConcentrationMeasurementEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readHydrogenConcentrationMeasurementEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.HydrogenConcentrationMeasurement.ID, ClusterIDMapping.HydrogenConcentrationMeasurement.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.HydrogenConcentrationMeasurementCluster) cluster).readEventListAttribute(
//              (ChipClusters.HydrogenConcentrationMeasurementCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedHydrogenConcentrationMeasurementClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readHydrogenConcentrationMeasurementEventListCommandParams
        );
        result.put("readEventListAttribute", readHydrogenConcentrationMeasurementEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readHydrogenConcentrationMeasurementAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readHydrogenConcentrationMeasurementAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.HydrogenConcentrationMeasurement.ID, ClusterIDMapping.HydrogenConcentrationMeasurement.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.HydrogenConcentrationMeasurementCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.HydrogenConcentrationMeasurementCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedHydrogenConcentrationMeasurementClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readHydrogenConcentrationMeasurementAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readHydrogenConcentrationMeasurementAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readHydrogenConcentrationMeasurementFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readHydrogenConcentrationMeasurementFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.HydrogenConcentrationMeasurement.ID, ClusterIDMapping.HydrogenConcentrationMeasurement.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.HydrogenConcentrationMeasurementCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readHydrogenConcentrationMeasurementFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readHydrogenConcentrationMeasurementFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readHydrogenConcentrationMeasurementClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readHydrogenConcentrationMeasurementClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.HydrogenConcentrationMeasurement.ID, ClusterIDMapping.HydrogenConcentrationMeasurement.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.HydrogenConcentrationMeasurementCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readHydrogenConcentrationMeasurementClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readHydrogenConcentrationMeasurementClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readHydrogenSulfideConcentrationMeasurementInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readHydrogenSulfideConcentrationMeasurementMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readHydrogenSulfideConcentrationMeasurementMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.HydrogenSulfideConcentrationMeasurement.ID, ClusterIDMapping.HydrogenSulfideConcentrationMeasurement.Attribute.MeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.HydrogenSulfideConcentrationMeasurementCluster) cluster).readMeasuredValueAttribute(
//              (ChipClusters.HydrogenSulfideConcentrationMeasurementCluster.MeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedHydrogenSulfideConcentrationMeasurementClusterMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readHydrogenSulfideConcentrationMeasurementMeasuredValueCommandParams
        );
        result.put("readMeasuredValueAttribute", readHydrogenSulfideConcentrationMeasurementMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readHydrogenSulfideConcentrationMeasurementMinMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readHydrogenSulfideConcentrationMeasurementMinMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.HydrogenSulfideConcentrationMeasurement.ID, ClusterIDMapping.HydrogenSulfideConcentrationMeasurement.Attribute.MinMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.HydrogenSulfideConcentrationMeasurementCluster) cluster).readMinMeasuredValueAttribute(
//              (ChipClusters.HydrogenSulfideConcentrationMeasurementCluster.MinMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedHydrogenSulfideConcentrationMeasurementClusterMinMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readHydrogenSulfideConcentrationMeasurementMinMeasuredValueCommandParams
        );
        result.put("readMinMeasuredValueAttribute", readHydrogenSulfideConcentrationMeasurementMinMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readHydrogenSulfideConcentrationMeasurementMaxMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readHydrogenSulfideConcentrationMeasurementMaxMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.HydrogenSulfideConcentrationMeasurement.ID, ClusterIDMapping.HydrogenSulfideConcentrationMeasurement.Attribute.MaxMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.HydrogenSulfideConcentrationMeasurementCluster) cluster).readMaxMeasuredValueAttribute(
//              (ChipClusters.HydrogenSulfideConcentrationMeasurementCluster.MaxMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedHydrogenSulfideConcentrationMeasurementClusterMaxMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readHydrogenSulfideConcentrationMeasurementMaxMeasuredValueCommandParams
        );
        result.put("readMaxMeasuredValueAttribute", readHydrogenSulfideConcentrationMeasurementMaxMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readHydrogenSulfideConcentrationMeasurementPeakMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readHydrogenSulfideConcentrationMeasurementPeakMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.HydrogenSulfideConcentrationMeasurement.ID, ClusterIDMapping.HydrogenSulfideConcentrationMeasurement.Attribute.PeakMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.HydrogenSulfideConcentrationMeasurementCluster) cluster).readPeakMeasuredValueAttribute(
//              (ChipClusters.HydrogenSulfideConcentrationMeasurementCluster.PeakMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedHydrogenSulfideConcentrationMeasurementClusterPeakMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readHydrogenSulfideConcentrationMeasurementPeakMeasuredValueCommandParams
        );
        result.put("readPeakMeasuredValueAttribute", readHydrogenSulfideConcentrationMeasurementPeakMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readHydrogenSulfideConcentrationMeasurementPeakMeasuredValueWindowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readHydrogenSulfideConcentrationMeasurementPeakMeasuredValueWindowAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.HydrogenSulfideConcentrationMeasurement.ID, ClusterIDMapping.HydrogenSulfideConcentrationMeasurement.Attribute.PeakMeasuredValueWindow.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.HydrogenSulfideConcentrationMeasurementCluster) cluster).readPeakMeasuredValueWindowAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readHydrogenSulfideConcentrationMeasurementPeakMeasuredValueWindowCommandParams
        );
        result.put("readPeakMeasuredValueWindowAttribute", readHydrogenSulfideConcentrationMeasurementPeakMeasuredValueWindowAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readHydrogenSulfideConcentrationMeasurementAverageMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readHydrogenSulfideConcentrationMeasurementAverageMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.HydrogenSulfideConcentrationMeasurement.ID, ClusterIDMapping.HydrogenSulfideConcentrationMeasurement.Attribute.AverageMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.HydrogenSulfideConcentrationMeasurementCluster) cluster).readAverageMeasuredValueAttribute(
//              (ChipClusters.HydrogenSulfideConcentrationMeasurementCluster.AverageMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedHydrogenSulfideConcentrationMeasurementClusterAverageMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readHydrogenSulfideConcentrationMeasurementAverageMeasuredValueCommandParams
        );
        result.put("readAverageMeasuredValueAttribute", readHydrogenSulfideConcentrationMeasurementAverageMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readHydrogenSulfideConcentrationMeasurementAverageMeasuredValueWindowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readHydrogenSulfideConcentrationMeasurementAverageMeasuredValueWindowAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.HydrogenSulfideConcentrationMeasurement.ID, ClusterIDMapping.HydrogenSulfideConcentrationMeasurement.Attribute.AverageMeasuredValueWindow.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.HydrogenSulfideConcentrationMeasurementCluster) cluster).readAverageMeasuredValueWindowAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readHydrogenSulfideConcentrationMeasurementAverageMeasuredValueWindowCommandParams
        );
        result.put("readAverageMeasuredValueWindowAttribute", readHydrogenSulfideConcentrationMeasurementAverageMeasuredValueWindowAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readHydrogenSulfideConcentrationMeasurementUncertaintyCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readHydrogenSulfideConcentrationMeasurementUncertaintyAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.HydrogenSulfideConcentrationMeasurement.ID, ClusterIDMapping.HydrogenSulfideConcentrationMeasurement.Attribute.Uncertainty.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.HydrogenSulfideConcentrationMeasurementCluster) cluster).readUncertaintyAttribute(
//              (ChipClusters.FloatAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFloatAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readHydrogenSulfideConcentrationMeasurementUncertaintyCommandParams
        );
        result.put("readUncertaintyAttribute", readHydrogenSulfideConcentrationMeasurementUncertaintyAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readHydrogenSulfideConcentrationMeasurementMeasurementUnitCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readHydrogenSulfideConcentrationMeasurementMeasurementUnitAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.HydrogenSulfideConcentrationMeasurement.ID, ClusterIDMapping.HydrogenSulfideConcentrationMeasurement.Attribute.MeasurementUnit.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.HydrogenSulfideConcentrationMeasurementCluster) cluster).readMeasurementUnitAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readHydrogenSulfideConcentrationMeasurementMeasurementUnitCommandParams
        );
        result.put("readMeasurementUnitAttribute", readHydrogenSulfideConcentrationMeasurementMeasurementUnitAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readHydrogenSulfideConcentrationMeasurementMeasurementMediumCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readHydrogenSulfideConcentrationMeasurementMeasurementMediumAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.HydrogenSulfideConcentrationMeasurement.ID, ClusterIDMapping.HydrogenSulfideConcentrationMeasurement.Attribute.MeasurementMedium.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.HydrogenSulfideConcentrationMeasurementCluster) cluster).readMeasurementMediumAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readHydrogenSulfideConcentrationMeasurementMeasurementMediumCommandParams
        );
        result.put("readMeasurementMediumAttribute", readHydrogenSulfideConcentrationMeasurementMeasurementMediumAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readHydrogenSulfideConcentrationMeasurementLevelValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readHydrogenSulfideConcentrationMeasurementLevelValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.HydrogenSulfideConcentrationMeasurement.ID, ClusterIDMapping.HydrogenSulfideConcentrationMeasurement.Attribute.LevelValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.HydrogenSulfideConcentrationMeasurementCluster) cluster).readLevelValueAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readHydrogenSulfideConcentrationMeasurementLevelValueCommandParams
        );
        result.put("readLevelValueAttribute", readHydrogenSulfideConcentrationMeasurementLevelValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readHydrogenSulfideConcentrationMeasurementGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readHydrogenSulfideConcentrationMeasurementGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.HydrogenSulfideConcentrationMeasurement.ID, ClusterIDMapping.HydrogenSulfideConcentrationMeasurement.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.HydrogenSulfideConcentrationMeasurementCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.HydrogenSulfideConcentrationMeasurementCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedHydrogenSulfideConcentrationMeasurementClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readHydrogenSulfideConcentrationMeasurementGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readHydrogenSulfideConcentrationMeasurementGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readHydrogenSulfideConcentrationMeasurementAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readHydrogenSulfideConcentrationMeasurementAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.HydrogenSulfideConcentrationMeasurement.ID, ClusterIDMapping.HydrogenSulfideConcentrationMeasurement.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.HydrogenSulfideConcentrationMeasurementCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.HydrogenSulfideConcentrationMeasurementCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedHydrogenSulfideConcentrationMeasurementClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readHydrogenSulfideConcentrationMeasurementAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readHydrogenSulfideConcentrationMeasurementAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readHydrogenSulfideConcentrationMeasurementEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readHydrogenSulfideConcentrationMeasurementEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.HydrogenSulfideConcentrationMeasurement.ID, ClusterIDMapping.HydrogenSulfideConcentrationMeasurement.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.HydrogenSulfideConcentrationMeasurementCluster) cluster).readEventListAttribute(
//              (ChipClusters.HydrogenSulfideConcentrationMeasurementCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedHydrogenSulfideConcentrationMeasurementClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readHydrogenSulfideConcentrationMeasurementEventListCommandParams
        );
        result.put("readEventListAttribute", readHydrogenSulfideConcentrationMeasurementEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readHydrogenSulfideConcentrationMeasurementAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readHydrogenSulfideConcentrationMeasurementAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.HydrogenSulfideConcentrationMeasurement.ID, ClusterIDMapping.HydrogenSulfideConcentrationMeasurement.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.HydrogenSulfideConcentrationMeasurementCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.HydrogenSulfideConcentrationMeasurementCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedHydrogenSulfideConcentrationMeasurementClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readHydrogenSulfideConcentrationMeasurementAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readHydrogenSulfideConcentrationMeasurementAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readHydrogenSulfideConcentrationMeasurementFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readHydrogenSulfideConcentrationMeasurementFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.HydrogenSulfideConcentrationMeasurement.ID, ClusterIDMapping.HydrogenSulfideConcentrationMeasurement.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.HydrogenSulfideConcentrationMeasurementCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readHydrogenSulfideConcentrationMeasurementFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readHydrogenSulfideConcentrationMeasurementFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readHydrogenSulfideConcentrationMeasurementClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readHydrogenSulfideConcentrationMeasurementClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.HydrogenSulfideConcentrationMeasurement.ID, ClusterIDMapping.HydrogenSulfideConcentrationMeasurement.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.HydrogenSulfideConcentrationMeasurementCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readHydrogenSulfideConcentrationMeasurementClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readHydrogenSulfideConcentrationMeasurementClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readNitricOxideConcentrationMeasurementInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readNitricOxideConcentrationMeasurementMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readNitricOxideConcentrationMeasurementMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.NitricOxideConcentrationMeasurement.ID, ClusterIDMapping.NitricOxideConcentrationMeasurement.Attribute.MeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.NitricOxideConcentrationMeasurementCluster) cluster).readMeasuredValueAttribute(
//              (ChipClusters.NitricOxideConcentrationMeasurementCluster.MeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedNitricOxideConcentrationMeasurementClusterMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readNitricOxideConcentrationMeasurementMeasuredValueCommandParams
        );
        result.put("readMeasuredValueAttribute", readNitricOxideConcentrationMeasurementMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readNitricOxideConcentrationMeasurementMinMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readNitricOxideConcentrationMeasurementMinMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.NitricOxideConcentrationMeasurement.ID, ClusterIDMapping.NitricOxideConcentrationMeasurement.Attribute.MinMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.NitricOxideConcentrationMeasurementCluster) cluster).readMinMeasuredValueAttribute(
//              (ChipClusters.NitricOxideConcentrationMeasurementCluster.MinMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedNitricOxideConcentrationMeasurementClusterMinMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readNitricOxideConcentrationMeasurementMinMeasuredValueCommandParams
        );
        result.put("readMinMeasuredValueAttribute", readNitricOxideConcentrationMeasurementMinMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readNitricOxideConcentrationMeasurementMaxMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readNitricOxideConcentrationMeasurementMaxMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.NitricOxideConcentrationMeasurement.ID, ClusterIDMapping.NitricOxideConcentrationMeasurement.Attribute.MaxMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.NitricOxideConcentrationMeasurementCluster) cluster).readMaxMeasuredValueAttribute(
//              (ChipClusters.NitricOxideConcentrationMeasurementCluster.MaxMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedNitricOxideConcentrationMeasurementClusterMaxMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readNitricOxideConcentrationMeasurementMaxMeasuredValueCommandParams
        );
        result.put("readMaxMeasuredValueAttribute", readNitricOxideConcentrationMeasurementMaxMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readNitricOxideConcentrationMeasurementPeakMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readNitricOxideConcentrationMeasurementPeakMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.NitricOxideConcentrationMeasurement.ID, ClusterIDMapping.NitricOxideConcentrationMeasurement.Attribute.PeakMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.NitricOxideConcentrationMeasurementCluster) cluster).readPeakMeasuredValueAttribute(
//              (ChipClusters.NitricOxideConcentrationMeasurementCluster.PeakMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedNitricOxideConcentrationMeasurementClusterPeakMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readNitricOxideConcentrationMeasurementPeakMeasuredValueCommandParams
        );
        result.put("readPeakMeasuredValueAttribute", readNitricOxideConcentrationMeasurementPeakMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readNitricOxideConcentrationMeasurementPeakMeasuredValueWindowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readNitricOxideConcentrationMeasurementPeakMeasuredValueWindowAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.NitricOxideConcentrationMeasurement.ID, ClusterIDMapping.NitricOxideConcentrationMeasurement.Attribute.PeakMeasuredValueWindow.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.NitricOxideConcentrationMeasurementCluster) cluster).readPeakMeasuredValueWindowAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readNitricOxideConcentrationMeasurementPeakMeasuredValueWindowCommandParams
        );
        result.put("readPeakMeasuredValueWindowAttribute", readNitricOxideConcentrationMeasurementPeakMeasuredValueWindowAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readNitricOxideConcentrationMeasurementAverageMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readNitricOxideConcentrationMeasurementAverageMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.NitricOxideConcentrationMeasurement.ID, ClusterIDMapping.NitricOxideConcentrationMeasurement.Attribute.AverageMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.NitricOxideConcentrationMeasurementCluster) cluster).readAverageMeasuredValueAttribute(
//              (ChipClusters.NitricOxideConcentrationMeasurementCluster.AverageMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedNitricOxideConcentrationMeasurementClusterAverageMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readNitricOxideConcentrationMeasurementAverageMeasuredValueCommandParams
        );
        result.put("readAverageMeasuredValueAttribute", readNitricOxideConcentrationMeasurementAverageMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readNitricOxideConcentrationMeasurementAverageMeasuredValueWindowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readNitricOxideConcentrationMeasurementAverageMeasuredValueWindowAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.NitricOxideConcentrationMeasurement.ID, ClusterIDMapping.NitricOxideConcentrationMeasurement.Attribute.AverageMeasuredValueWindow.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.NitricOxideConcentrationMeasurementCluster) cluster).readAverageMeasuredValueWindowAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readNitricOxideConcentrationMeasurementAverageMeasuredValueWindowCommandParams
        );
        result.put("readAverageMeasuredValueWindowAttribute", readNitricOxideConcentrationMeasurementAverageMeasuredValueWindowAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readNitricOxideConcentrationMeasurementUncertaintyCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readNitricOxideConcentrationMeasurementUncertaintyAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.NitricOxideConcentrationMeasurement.ID, ClusterIDMapping.NitricOxideConcentrationMeasurement.Attribute.Uncertainty.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.NitricOxideConcentrationMeasurementCluster) cluster).readUncertaintyAttribute(
//              (ChipClusters.FloatAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFloatAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readNitricOxideConcentrationMeasurementUncertaintyCommandParams
        );
        result.put("readUncertaintyAttribute", readNitricOxideConcentrationMeasurementUncertaintyAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readNitricOxideConcentrationMeasurementMeasurementUnitCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readNitricOxideConcentrationMeasurementMeasurementUnitAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.NitricOxideConcentrationMeasurement.ID, ClusterIDMapping.NitricOxideConcentrationMeasurement.Attribute.MeasurementUnit.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.NitricOxideConcentrationMeasurementCluster) cluster).readMeasurementUnitAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readNitricOxideConcentrationMeasurementMeasurementUnitCommandParams
        );
        result.put("readMeasurementUnitAttribute", readNitricOxideConcentrationMeasurementMeasurementUnitAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readNitricOxideConcentrationMeasurementMeasurementMediumCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readNitricOxideConcentrationMeasurementMeasurementMediumAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.NitricOxideConcentrationMeasurement.ID, ClusterIDMapping.NitricOxideConcentrationMeasurement.Attribute.MeasurementMedium.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.NitricOxideConcentrationMeasurementCluster) cluster).readMeasurementMediumAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readNitricOxideConcentrationMeasurementMeasurementMediumCommandParams
        );
        result.put("readMeasurementMediumAttribute", readNitricOxideConcentrationMeasurementMeasurementMediumAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readNitricOxideConcentrationMeasurementLevelValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readNitricOxideConcentrationMeasurementLevelValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.NitricOxideConcentrationMeasurement.ID, ClusterIDMapping.NitricOxideConcentrationMeasurement.Attribute.LevelValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.NitricOxideConcentrationMeasurementCluster) cluster).readLevelValueAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readNitricOxideConcentrationMeasurementLevelValueCommandParams
        );
        result.put("readLevelValueAttribute", readNitricOxideConcentrationMeasurementLevelValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readNitricOxideConcentrationMeasurementGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readNitricOxideConcentrationMeasurementGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.NitricOxideConcentrationMeasurement.ID, ClusterIDMapping.NitricOxideConcentrationMeasurement.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.NitricOxideConcentrationMeasurementCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.NitricOxideConcentrationMeasurementCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedNitricOxideConcentrationMeasurementClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readNitricOxideConcentrationMeasurementGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readNitricOxideConcentrationMeasurementGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readNitricOxideConcentrationMeasurementAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readNitricOxideConcentrationMeasurementAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.NitricOxideConcentrationMeasurement.ID, ClusterIDMapping.NitricOxideConcentrationMeasurement.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.NitricOxideConcentrationMeasurementCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.NitricOxideConcentrationMeasurementCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedNitricOxideConcentrationMeasurementClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readNitricOxideConcentrationMeasurementAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readNitricOxideConcentrationMeasurementAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readNitricOxideConcentrationMeasurementEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readNitricOxideConcentrationMeasurementEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.NitricOxideConcentrationMeasurement.ID, ClusterIDMapping.NitricOxideConcentrationMeasurement.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.NitricOxideConcentrationMeasurementCluster) cluster).readEventListAttribute(
//              (ChipClusters.NitricOxideConcentrationMeasurementCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedNitricOxideConcentrationMeasurementClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readNitricOxideConcentrationMeasurementEventListCommandParams
        );
        result.put("readEventListAttribute", readNitricOxideConcentrationMeasurementEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readNitricOxideConcentrationMeasurementAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readNitricOxideConcentrationMeasurementAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.NitricOxideConcentrationMeasurement.ID, ClusterIDMapping.NitricOxideConcentrationMeasurement.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.NitricOxideConcentrationMeasurementCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.NitricOxideConcentrationMeasurementCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedNitricOxideConcentrationMeasurementClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readNitricOxideConcentrationMeasurementAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readNitricOxideConcentrationMeasurementAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readNitricOxideConcentrationMeasurementFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readNitricOxideConcentrationMeasurementFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.NitricOxideConcentrationMeasurement.ID, ClusterIDMapping.NitricOxideConcentrationMeasurement.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.NitricOxideConcentrationMeasurementCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readNitricOxideConcentrationMeasurementFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readNitricOxideConcentrationMeasurementFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readNitricOxideConcentrationMeasurementClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readNitricOxideConcentrationMeasurementClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.NitricOxideConcentrationMeasurement.ID, ClusterIDMapping.NitricOxideConcentrationMeasurement.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.NitricOxideConcentrationMeasurementCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readNitricOxideConcentrationMeasurementClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readNitricOxideConcentrationMeasurementClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readNitrogenDioxideConcentrationMeasurementInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readNitrogenDioxideConcentrationMeasurementMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readNitrogenDioxideConcentrationMeasurementMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.NitrogenDioxideConcentrationMeasurement.ID, ClusterIDMapping.NitrogenDioxideConcentrationMeasurement.Attribute.MeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.NitrogenDioxideConcentrationMeasurementCluster) cluster).readMeasuredValueAttribute(
//              (ChipClusters.NitrogenDioxideConcentrationMeasurementCluster.MeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedNitrogenDioxideConcentrationMeasurementClusterMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readNitrogenDioxideConcentrationMeasurementMeasuredValueCommandParams
        );
        result.put("readMeasuredValueAttribute", readNitrogenDioxideConcentrationMeasurementMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readNitrogenDioxideConcentrationMeasurementMinMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readNitrogenDioxideConcentrationMeasurementMinMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.NitrogenDioxideConcentrationMeasurement.ID, ClusterIDMapping.NitrogenDioxideConcentrationMeasurement.Attribute.MinMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.NitrogenDioxideConcentrationMeasurementCluster) cluster).readMinMeasuredValueAttribute(
//              (ChipClusters.NitrogenDioxideConcentrationMeasurementCluster.MinMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedNitrogenDioxideConcentrationMeasurementClusterMinMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readNitrogenDioxideConcentrationMeasurementMinMeasuredValueCommandParams
        );
        result.put("readMinMeasuredValueAttribute", readNitrogenDioxideConcentrationMeasurementMinMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readNitrogenDioxideConcentrationMeasurementMaxMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readNitrogenDioxideConcentrationMeasurementMaxMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.NitrogenDioxideConcentrationMeasurement.ID, ClusterIDMapping.NitrogenDioxideConcentrationMeasurement.Attribute.MaxMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.NitrogenDioxideConcentrationMeasurementCluster) cluster).readMaxMeasuredValueAttribute(
//              (ChipClusters.NitrogenDioxideConcentrationMeasurementCluster.MaxMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedNitrogenDioxideConcentrationMeasurementClusterMaxMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readNitrogenDioxideConcentrationMeasurementMaxMeasuredValueCommandParams
        );
        result.put("readMaxMeasuredValueAttribute", readNitrogenDioxideConcentrationMeasurementMaxMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readNitrogenDioxideConcentrationMeasurementPeakMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readNitrogenDioxideConcentrationMeasurementPeakMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.NitrogenDioxideConcentrationMeasurement.ID, ClusterIDMapping.NitrogenDioxideConcentrationMeasurement.Attribute.PeakMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.NitrogenDioxideConcentrationMeasurementCluster) cluster).readPeakMeasuredValueAttribute(
//              (ChipClusters.NitrogenDioxideConcentrationMeasurementCluster.PeakMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedNitrogenDioxideConcentrationMeasurementClusterPeakMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readNitrogenDioxideConcentrationMeasurementPeakMeasuredValueCommandParams
        );
        result.put("readPeakMeasuredValueAttribute", readNitrogenDioxideConcentrationMeasurementPeakMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readNitrogenDioxideConcentrationMeasurementPeakMeasuredValueWindowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readNitrogenDioxideConcentrationMeasurementPeakMeasuredValueWindowAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.NitrogenDioxideConcentrationMeasurement.ID, ClusterIDMapping.NitrogenDioxideConcentrationMeasurement.Attribute.PeakMeasuredValueWindow.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.NitrogenDioxideConcentrationMeasurementCluster) cluster).readPeakMeasuredValueWindowAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readNitrogenDioxideConcentrationMeasurementPeakMeasuredValueWindowCommandParams
        );
        result.put("readPeakMeasuredValueWindowAttribute", readNitrogenDioxideConcentrationMeasurementPeakMeasuredValueWindowAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readNitrogenDioxideConcentrationMeasurementAverageMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readNitrogenDioxideConcentrationMeasurementAverageMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.NitrogenDioxideConcentrationMeasurement.ID, ClusterIDMapping.NitrogenDioxideConcentrationMeasurement.Attribute.AverageMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.NitrogenDioxideConcentrationMeasurementCluster) cluster).readAverageMeasuredValueAttribute(
//              (ChipClusters.NitrogenDioxideConcentrationMeasurementCluster.AverageMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedNitrogenDioxideConcentrationMeasurementClusterAverageMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readNitrogenDioxideConcentrationMeasurementAverageMeasuredValueCommandParams
        );
        result.put("readAverageMeasuredValueAttribute", readNitrogenDioxideConcentrationMeasurementAverageMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readNitrogenDioxideConcentrationMeasurementAverageMeasuredValueWindowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readNitrogenDioxideConcentrationMeasurementAverageMeasuredValueWindowAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.NitrogenDioxideConcentrationMeasurement.ID, ClusterIDMapping.NitrogenDioxideConcentrationMeasurement.Attribute.AverageMeasuredValueWindow.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.NitrogenDioxideConcentrationMeasurementCluster) cluster).readAverageMeasuredValueWindowAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readNitrogenDioxideConcentrationMeasurementAverageMeasuredValueWindowCommandParams
        );
        result.put("readAverageMeasuredValueWindowAttribute", readNitrogenDioxideConcentrationMeasurementAverageMeasuredValueWindowAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readNitrogenDioxideConcentrationMeasurementUncertaintyCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readNitrogenDioxideConcentrationMeasurementUncertaintyAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.NitrogenDioxideConcentrationMeasurement.ID, ClusterIDMapping.NitrogenDioxideConcentrationMeasurement.Attribute.Uncertainty.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.NitrogenDioxideConcentrationMeasurementCluster) cluster).readUncertaintyAttribute(
//              (ChipClusters.FloatAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFloatAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readNitrogenDioxideConcentrationMeasurementUncertaintyCommandParams
        );
        result.put("readUncertaintyAttribute", readNitrogenDioxideConcentrationMeasurementUncertaintyAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readNitrogenDioxideConcentrationMeasurementMeasurementUnitCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readNitrogenDioxideConcentrationMeasurementMeasurementUnitAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.NitrogenDioxideConcentrationMeasurement.ID, ClusterIDMapping.NitrogenDioxideConcentrationMeasurement.Attribute.MeasurementUnit.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.NitrogenDioxideConcentrationMeasurementCluster) cluster).readMeasurementUnitAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readNitrogenDioxideConcentrationMeasurementMeasurementUnitCommandParams
        );
        result.put("readMeasurementUnitAttribute", readNitrogenDioxideConcentrationMeasurementMeasurementUnitAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readNitrogenDioxideConcentrationMeasurementMeasurementMediumCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readNitrogenDioxideConcentrationMeasurementMeasurementMediumAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.NitrogenDioxideConcentrationMeasurement.ID, ClusterIDMapping.NitrogenDioxideConcentrationMeasurement.Attribute.MeasurementMedium.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.NitrogenDioxideConcentrationMeasurementCluster) cluster).readMeasurementMediumAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readNitrogenDioxideConcentrationMeasurementMeasurementMediumCommandParams
        );
        result.put("readMeasurementMediumAttribute", readNitrogenDioxideConcentrationMeasurementMeasurementMediumAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readNitrogenDioxideConcentrationMeasurementLevelValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readNitrogenDioxideConcentrationMeasurementLevelValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.NitrogenDioxideConcentrationMeasurement.ID, ClusterIDMapping.NitrogenDioxideConcentrationMeasurement.Attribute.LevelValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.NitrogenDioxideConcentrationMeasurementCluster) cluster).readLevelValueAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readNitrogenDioxideConcentrationMeasurementLevelValueCommandParams
        );
        result.put("readLevelValueAttribute", readNitrogenDioxideConcentrationMeasurementLevelValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readNitrogenDioxideConcentrationMeasurementGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readNitrogenDioxideConcentrationMeasurementGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.NitrogenDioxideConcentrationMeasurement.ID, ClusterIDMapping.NitrogenDioxideConcentrationMeasurement.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.NitrogenDioxideConcentrationMeasurementCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.NitrogenDioxideConcentrationMeasurementCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedNitrogenDioxideConcentrationMeasurementClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readNitrogenDioxideConcentrationMeasurementGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readNitrogenDioxideConcentrationMeasurementGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readNitrogenDioxideConcentrationMeasurementAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readNitrogenDioxideConcentrationMeasurementAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.NitrogenDioxideConcentrationMeasurement.ID, ClusterIDMapping.NitrogenDioxideConcentrationMeasurement.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.NitrogenDioxideConcentrationMeasurementCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.NitrogenDioxideConcentrationMeasurementCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedNitrogenDioxideConcentrationMeasurementClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readNitrogenDioxideConcentrationMeasurementAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readNitrogenDioxideConcentrationMeasurementAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readNitrogenDioxideConcentrationMeasurementEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readNitrogenDioxideConcentrationMeasurementEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.NitrogenDioxideConcentrationMeasurement.ID, ClusterIDMapping.NitrogenDioxideConcentrationMeasurement.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.NitrogenDioxideConcentrationMeasurementCluster) cluster).readEventListAttribute(
//              (ChipClusters.NitrogenDioxideConcentrationMeasurementCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedNitrogenDioxideConcentrationMeasurementClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readNitrogenDioxideConcentrationMeasurementEventListCommandParams
        );
        result.put("readEventListAttribute", readNitrogenDioxideConcentrationMeasurementEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readNitrogenDioxideConcentrationMeasurementAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readNitrogenDioxideConcentrationMeasurementAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.NitrogenDioxideConcentrationMeasurement.ID, ClusterIDMapping.NitrogenDioxideConcentrationMeasurement.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.NitrogenDioxideConcentrationMeasurementCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.NitrogenDioxideConcentrationMeasurementCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedNitrogenDioxideConcentrationMeasurementClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readNitrogenDioxideConcentrationMeasurementAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readNitrogenDioxideConcentrationMeasurementAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readNitrogenDioxideConcentrationMeasurementFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readNitrogenDioxideConcentrationMeasurementFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.NitrogenDioxideConcentrationMeasurement.ID, ClusterIDMapping.NitrogenDioxideConcentrationMeasurement.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.NitrogenDioxideConcentrationMeasurementCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readNitrogenDioxideConcentrationMeasurementFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readNitrogenDioxideConcentrationMeasurementFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readNitrogenDioxideConcentrationMeasurementClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readNitrogenDioxideConcentrationMeasurementClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.NitrogenDioxideConcentrationMeasurement.ID, ClusterIDMapping.NitrogenDioxideConcentrationMeasurement.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.NitrogenDioxideConcentrationMeasurementCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readNitrogenDioxideConcentrationMeasurementClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readNitrogenDioxideConcentrationMeasurementClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readOxygenConcentrationMeasurementInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readOxygenConcentrationMeasurementMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOxygenConcentrationMeasurementMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OxygenConcentrationMeasurement.ID, ClusterIDMapping.OxygenConcentrationMeasurement.Attribute.MeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OxygenConcentrationMeasurementCluster) cluster).readMeasuredValueAttribute(
//              (ChipClusters.OxygenConcentrationMeasurementCluster.MeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedOxygenConcentrationMeasurementClusterMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOxygenConcentrationMeasurementMeasuredValueCommandParams
        );
        result.put("readMeasuredValueAttribute", readOxygenConcentrationMeasurementMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOxygenConcentrationMeasurementMinMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOxygenConcentrationMeasurementMinMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OxygenConcentrationMeasurement.ID, ClusterIDMapping.OxygenConcentrationMeasurement.Attribute.MinMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OxygenConcentrationMeasurementCluster) cluster).readMinMeasuredValueAttribute(
//              (ChipClusters.OxygenConcentrationMeasurementCluster.MinMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedOxygenConcentrationMeasurementClusterMinMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOxygenConcentrationMeasurementMinMeasuredValueCommandParams
        );
        result.put("readMinMeasuredValueAttribute", readOxygenConcentrationMeasurementMinMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOxygenConcentrationMeasurementMaxMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOxygenConcentrationMeasurementMaxMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OxygenConcentrationMeasurement.ID, ClusterIDMapping.OxygenConcentrationMeasurement.Attribute.MaxMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OxygenConcentrationMeasurementCluster) cluster).readMaxMeasuredValueAttribute(
//              (ChipClusters.OxygenConcentrationMeasurementCluster.MaxMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedOxygenConcentrationMeasurementClusterMaxMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOxygenConcentrationMeasurementMaxMeasuredValueCommandParams
        );
        result.put("readMaxMeasuredValueAttribute", readOxygenConcentrationMeasurementMaxMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOxygenConcentrationMeasurementPeakMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOxygenConcentrationMeasurementPeakMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OxygenConcentrationMeasurement.ID, ClusterIDMapping.OxygenConcentrationMeasurement.Attribute.PeakMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OxygenConcentrationMeasurementCluster) cluster).readPeakMeasuredValueAttribute(
//              (ChipClusters.OxygenConcentrationMeasurementCluster.PeakMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedOxygenConcentrationMeasurementClusterPeakMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOxygenConcentrationMeasurementPeakMeasuredValueCommandParams
        );
        result.put("readPeakMeasuredValueAttribute", readOxygenConcentrationMeasurementPeakMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOxygenConcentrationMeasurementPeakMeasuredValueWindowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOxygenConcentrationMeasurementPeakMeasuredValueWindowAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OxygenConcentrationMeasurement.ID, ClusterIDMapping.OxygenConcentrationMeasurement.Attribute.PeakMeasuredValueWindow.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OxygenConcentrationMeasurementCluster) cluster).readPeakMeasuredValueWindowAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOxygenConcentrationMeasurementPeakMeasuredValueWindowCommandParams
        );
        result.put("readPeakMeasuredValueWindowAttribute", readOxygenConcentrationMeasurementPeakMeasuredValueWindowAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOxygenConcentrationMeasurementAverageMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOxygenConcentrationMeasurementAverageMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OxygenConcentrationMeasurement.ID, ClusterIDMapping.OxygenConcentrationMeasurement.Attribute.AverageMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OxygenConcentrationMeasurementCluster) cluster).readAverageMeasuredValueAttribute(
//              (ChipClusters.OxygenConcentrationMeasurementCluster.AverageMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedOxygenConcentrationMeasurementClusterAverageMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOxygenConcentrationMeasurementAverageMeasuredValueCommandParams
        );
        result.put("readAverageMeasuredValueAttribute", readOxygenConcentrationMeasurementAverageMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOxygenConcentrationMeasurementAverageMeasuredValueWindowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOxygenConcentrationMeasurementAverageMeasuredValueWindowAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OxygenConcentrationMeasurement.ID, ClusterIDMapping.OxygenConcentrationMeasurement.Attribute.AverageMeasuredValueWindow.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OxygenConcentrationMeasurementCluster) cluster).readAverageMeasuredValueWindowAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOxygenConcentrationMeasurementAverageMeasuredValueWindowCommandParams
        );
        result.put("readAverageMeasuredValueWindowAttribute", readOxygenConcentrationMeasurementAverageMeasuredValueWindowAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOxygenConcentrationMeasurementUncertaintyCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOxygenConcentrationMeasurementUncertaintyAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OxygenConcentrationMeasurement.ID, ClusterIDMapping.OxygenConcentrationMeasurement.Attribute.Uncertainty.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OxygenConcentrationMeasurementCluster) cluster).readUncertaintyAttribute(
//              (ChipClusters.FloatAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFloatAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOxygenConcentrationMeasurementUncertaintyCommandParams
        );
        result.put("readUncertaintyAttribute", readOxygenConcentrationMeasurementUncertaintyAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOxygenConcentrationMeasurementMeasurementUnitCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOxygenConcentrationMeasurementMeasurementUnitAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OxygenConcentrationMeasurement.ID, ClusterIDMapping.OxygenConcentrationMeasurement.Attribute.MeasurementUnit.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OxygenConcentrationMeasurementCluster) cluster).readMeasurementUnitAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOxygenConcentrationMeasurementMeasurementUnitCommandParams
        );
        result.put("readMeasurementUnitAttribute", readOxygenConcentrationMeasurementMeasurementUnitAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOxygenConcentrationMeasurementMeasurementMediumCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOxygenConcentrationMeasurementMeasurementMediumAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OxygenConcentrationMeasurement.ID, ClusterIDMapping.OxygenConcentrationMeasurement.Attribute.MeasurementMedium.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OxygenConcentrationMeasurementCluster) cluster).readMeasurementMediumAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOxygenConcentrationMeasurementMeasurementMediumCommandParams
        );
        result.put("readMeasurementMediumAttribute", readOxygenConcentrationMeasurementMeasurementMediumAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOxygenConcentrationMeasurementLevelValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOxygenConcentrationMeasurementLevelValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OxygenConcentrationMeasurement.ID, ClusterIDMapping.OxygenConcentrationMeasurement.Attribute.LevelValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OxygenConcentrationMeasurementCluster) cluster).readLevelValueAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOxygenConcentrationMeasurementLevelValueCommandParams
        );
        result.put("readLevelValueAttribute", readOxygenConcentrationMeasurementLevelValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOxygenConcentrationMeasurementGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOxygenConcentrationMeasurementGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OxygenConcentrationMeasurement.ID, ClusterIDMapping.OxygenConcentrationMeasurement.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OxygenConcentrationMeasurementCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.OxygenConcentrationMeasurementCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedOxygenConcentrationMeasurementClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOxygenConcentrationMeasurementGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readOxygenConcentrationMeasurementGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOxygenConcentrationMeasurementAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOxygenConcentrationMeasurementAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OxygenConcentrationMeasurement.ID, ClusterIDMapping.OxygenConcentrationMeasurement.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OxygenConcentrationMeasurementCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.OxygenConcentrationMeasurementCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedOxygenConcentrationMeasurementClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOxygenConcentrationMeasurementAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readOxygenConcentrationMeasurementAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOxygenConcentrationMeasurementEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOxygenConcentrationMeasurementEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OxygenConcentrationMeasurement.ID, ClusterIDMapping.OxygenConcentrationMeasurement.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OxygenConcentrationMeasurementCluster) cluster).readEventListAttribute(
//              (ChipClusters.OxygenConcentrationMeasurementCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedOxygenConcentrationMeasurementClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOxygenConcentrationMeasurementEventListCommandParams
        );
        result.put("readEventListAttribute", readOxygenConcentrationMeasurementEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOxygenConcentrationMeasurementAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOxygenConcentrationMeasurementAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OxygenConcentrationMeasurement.ID, ClusterIDMapping.OxygenConcentrationMeasurement.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OxygenConcentrationMeasurementCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.OxygenConcentrationMeasurementCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedOxygenConcentrationMeasurementClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOxygenConcentrationMeasurementAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readOxygenConcentrationMeasurementAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOxygenConcentrationMeasurementFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOxygenConcentrationMeasurementFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OxygenConcentrationMeasurement.ID, ClusterIDMapping.OxygenConcentrationMeasurement.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OxygenConcentrationMeasurementCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOxygenConcentrationMeasurementFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readOxygenConcentrationMeasurementFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOxygenConcentrationMeasurementClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOxygenConcentrationMeasurementClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OxygenConcentrationMeasurement.ID, ClusterIDMapping.OxygenConcentrationMeasurement.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OxygenConcentrationMeasurementCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOxygenConcentrationMeasurementClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readOxygenConcentrationMeasurementClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readOzoneConcentrationMeasurementInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readOzoneConcentrationMeasurementMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOzoneConcentrationMeasurementMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OzoneConcentrationMeasurement.ID, ClusterIDMapping.OzoneConcentrationMeasurement.Attribute.MeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OzoneConcentrationMeasurementCluster) cluster).readMeasuredValueAttribute(
//              (ChipClusters.OzoneConcentrationMeasurementCluster.MeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedOzoneConcentrationMeasurementClusterMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOzoneConcentrationMeasurementMeasuredValueCommandParams
        );
        result.put("readMeasuredValueAttribute", readOzoneConcentrationMeasurementMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOzoneConcentrationMeasurementMinMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOzoneConcentrationMeasurementMinMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OzoneConcentrationMeasurement.ID, ClusterIDMapping.OzoneConcentrationMeasurement.Attribute.MinMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OzoneConcentrationMeasurementCluster) cluster).readMinMeasuredValueAttribute(
//              (ChipClusters.OzoneConcentrationMeasurementCluster.MinMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedOzoneConcentrationMeasurementClusterMinMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOzoneConcentrationMeasurementMinMeasuredValueCommandParams
        );
        result.put("readMinMeasuredValueAttribute", readOzoneConcentrationMeasurementMinMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOzoneConcentrationMeasurementMaxMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOzoneConcentrationMeasurementMaxMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OzoneConcentrationMeasurement.ID, ClusterIDMapping.OzoneConcentrationMeasurement.Attribute.MaxMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OzoneConcentrationMeasurementCluster) cluster).readMaxMeasuredValueAttribute(
//              (ChipClusters.OzoneConcentrationMeasurementCluster.MaxMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedOzoneConcentrationMeasurementClusterMaxMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOzoneConcentrationMeasurementMaxMeasuredValueCommandParams
        );
        result.put("readMaxMeasuredValueAttribute", readOzoneConcentrationMeasurementMaxMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOzoneConcentrationMeasurementPeakMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOzoneConcentrationMeasurementPeakMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OzoneConcentrationMeasurement.ID, ClusterIDMapping.OzoneConcentrationMeasurement.Attribute.PeakMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OzoneConcentrationMeasurementCluster) cluster).readPeakMeasuredValueAttribute(
//              (ChipClusters.OzoneConcentrationMeasurementCluster.PeakMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedOzoneConcentrationMeasurementClusterPeakMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOzoneConcentrationMeasurementPeakMeasuredValueCommandParams
        );
        result.put("readPeakMeasuredValueAttribute", readOzoneConcentrationMeasurementPeakMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOzoneConcentrationMeasurementPeakMeasuredValueWindowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOzoneConcentrationMeasurementPeakMeasuredValueWindowAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OzoneConcentrationMeasurement.ID, ClusterIDMapping.OzoneConcentrationMeasurement.Attribute.PeakMeasuredValueWindow.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OzoneConcentrationMeasurementCluster) cluster).readPeakMeasuredValueWindowAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOzoneConcentrationMeasurementPeakMeasuredValueWindowCommandParams
        );
        result.put("readPeakMeasuredValueWindowAttribute", readOzoneConcentrationMeasurementPeakMeasuredValueWindowAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOzoneConcentrationMeasurementAverageMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOzoneConcentrationMeasurementAverageMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OzoneConcentrationMeasurement.ID, ClusterIDMapping.OzoneConcentrationMeasurement.Attribute.AverageMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OzoneConcentrationMeasurementCluster) cluster).readAverageMeasuredValueAttribute(
//              (ChipClusters.OzoneConcentrationMeasurementCluster.AverageMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedOzoneConcentrationMeasurementClusterAverageMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOzoneConcentrationMeasurementAverageMeasuredValueCommandParams
        );
        result.put("readAverageMeasuredValueAttribute", readOzoneConcentrationMeasurementAverageMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOzoneConcentrationMeasurementAverageMeasuredValueWindowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOzoneConcentrationMeasurementAverageMeasuredValueWindowAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OzoneConcentrationMeasurement.ID, ClusterIDMapping.OzoneConcentrationMeasurement.Attribute.AverageMeasuredValueWindow.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OzoneConcentrationMeasurementCluster) cluster).readAverageMeasuredValueWindowAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOzoneConcentrationMeasurementAverageMeasuredValueWindowCommandParams
        );
        result.put("readAverageMeasuredValueWindowAttribute", readOzoneConcentrationMeasurementAverageMeasuredValueWindowAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOzoneConcentrationMeasurementUncertaintyCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOzoneConcentrationMeasurementUncertaintyAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OzoneConcentrationMeasurement.ID, ClusterIDMapping.OzoneConcentrationMeasurement.Attribute.Uncertainty.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OzoneConcentrationMeasurementCluster) cluster).readUncertaintyAttribute(
//              (ChipClusters.FloatAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFloatAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOzoneConcentrationMeasurementUncertaintyCommandParams
        );
        result.put("readUncertaintyAttribute", readOzoneConcentrationMeasurementUncertaintyAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOzoneConcentrationMeasurementMeasurementUnitCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOzoneConcentrationMeasurementMeasurementUnitAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OzoneConcentrationMeasurement.ID, ClusterIDMapping.OzoneConcentrationMeasurement.Attribute.MeasurementUnit.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OzoneConcentrationMeasurementCluster) cluster).readMeasurementUnitAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOzoneConcentrationMeasurementMeasurementUnitCommandParams
        );
        result.put("readMeasurementUnitAttribute", readOzoneConcentrationMeasurementMeasurementUnitAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOzoneConcentrationMeasurementMeasurementMediumCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOzoneConcentrationMeasurementMeasurementMediumAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OzoneConcentrationMeasurement.ID, ClusterIDMapping.OzoneConcentrationMeasurement.Attribute.MeasurementMedium.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OzoneConcentrationMeasurementCluster) cluster).readMeasurementMediumAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOzoneConcentrationMeasurementMeasurementMediumCommandParams
        );
        result.put("readMeasurementMediumAttribute", readOzoneConcentrationMeasurementMeasurementMediumAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOzoneConcentrationMeasurementLevelValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOzoneConcentrationMeasurementLevelValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OzoneConcentrationMeasurement.ID, ClusterIDMapping.OzoneConcentrationMeasurement.Attribute.LevelValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OzoneConcentrationMeasurementCluster) cluster).readLevelValueAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOzoneConcentrationMeasurementLevelValueCommandParams
        );
        result.put("readLevelValueAttribute", readOzoneConcentrationMeasurementLevelValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOzoneConcentrationMeasurementGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOzoneConcentrationMeasurementGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OzoneConcentrationMeasurement.ID, ClusterIDMapping.OzoneConcentrationMeasurement.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OzoneConcentrationMeasurementCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.OzoneConcentrationMeasurementCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedOzoneConcentrationMeasurementClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOzoneConcentrationMeasurementGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readOzoneConcentrationMeasurementGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOzoneConcentrationMeasurementAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOzoneConcentrationMeasurementAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OzoneConcentrationMeasurement.ID, ClusterIDMapping.OzoneConcentrationMeasurement.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OzoneConcentrationMeasurementCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.OzoneConcentrationMeasurementCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedOzoneConcentrationMeasurementClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOzoneConcentrationMeasurementAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readOzoneConcentrationMeasurementAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOzoneConcentrationMeasurementEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOzoneConcentrationMeasurementEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OzoneConcentrationMeasurement.ID, ClusterIDMapping.OzoneConcentrationMeasurement.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OzoneConcentrationMeasurementCluster) cluster).readEventListAttribute(
//              (ChipClusters.OzoneConcentrationMeasurementCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedOzoneConcentrationMeasurementClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOzoneConcentrationMeasurementEventListCommandParams
        );
        result.put("readEventListAttribute", readOzoneConcentrationMeasurementEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOzoneConcentrationMeasurementAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOzoneConcentrationMeasurementAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OzoneConcentrationMeasurement.ID, ClusterIDMapping.OzoneConcentrationMeasurement.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OzoneConcentrationMeasurementCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.OzoneConcentrationMeasurementCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedOzoneConcentrationMeasurementClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOzoneConcentrationMeasurementAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readOzoneConcentrationMeasurementAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOzoneConcentrationMeasurementFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOzoneConcentrationMeasurementFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OzoneConcentrationMeasurement.ID, ClusterIDMapping.OzoneConcentrationMeasurement.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OzoneConcentrationMeasurementCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOzoneConcentrationMeasurementFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readOzoneConcentrationMeasurementFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readOzoneConcentrationMeasurementClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readOzoneConcentrationMeasurementClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.OzoneConcentrationMeasurement.ID, ClusterIDMapping.OzoneConcentrationMeasurement.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.OzoneConcentrationMeasurementCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readOzoneConcentrationMeasurementClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readOzoneConcentrationMeasurementClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readSulfurDioxideConcentrationMeasurementInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readSulfurDioxideConcentrationMeasurementMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSulfurDioxideConcentrationMeasurementMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SulfurDioxideConcentrationMeasurement.ID, ClusterIDMapping.SulfurDioxideConcentrationMeasurement.Attribute.MeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SulfurDioxideConcentrationMeasurementCluster) cluster).readMeasuredValueAttribute(
//              (ChipClusters.SulfurDioxideConcentrationMeasurementCluster.MeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedSulfurDioxideConcentrationMeasurementClusterMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSulfurDioxideConcentrationMeasurementMeasuredValueCommandParams
        );
        result.put("readMeasuredValueAttribute", readSulfurDioxideConcentrationMeasurementMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSulfurDioxideConcentrationMeasurementMinMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSulfurDioxideConcentrationMeasurementMinMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SulfurDioxideConcentrationMeasurement.ID, ClusterIDMapping.SulfurDioxideConcentrationMeasurement.Attribute.MinMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SulfurDioxideConcentrationMeasurementCluster) cluster).readMinMeasuredValueAttribute(
//              (ChipClusters.SulfurDioxideConcentrationMeasurementCluster.MinMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedSulfurDioxideConcentrationMeasurementClusterMinMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSulfurDioxideConcentrationMeasurementMinMeasuredValueCommandParams
        );
        result.put("readMinMeasuredValueAttribute", readSulfurDioxideConcentrationMeasurementMinMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSulfurDioxideConcentrationMeasurementMaxMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSulfurDioxideConcentrationMeasurementMaxMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SulfurDioxideConcentrationMeasurement.ID, ClusterIDMapping.SulfurDioxideConcentrationMeasurement.Attribute.MaxMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SulfurDioxideConcentrationMeasurementCluster) cluster).readMaxMeasuredValueAttribute(
//              (ChipClusters.SulfurDioxideConcentrationMeasurementCluster.MaxMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedSulfurDioxideConcentrationMeasurementClusterMaxMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSulfurDioxideConcentrationMeasurementMaxMeasuredValueCommandParams
        );
        result.put("readMaxMeasuredValueAttribute", readSulfurDioxideConcentrationMeasurementMaxMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSulfurDioxideConcentrationMeasurementPeakMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSulfurDioxideConcentrationMeasurementPeakMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SulfurDioxideConcentrationMeasurement.ID, ClusterIDMapping.SulfurDioxideConcentrationMeasurement.Attribute.PeakMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SulfurDioxideConcentrationMeasurementCluster) cluster).readPeakMeasuredValueAttribute(
//              (ChipClusters.SulfurDioxideConcentrationMeasurementCluster.PeakMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedSulfurDioxideConcentrationMeasurementClusterPeakMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSulfurDioxideConcentrationMeasurementPeakMeasuredValueCommandParams
        );
        result.put("readPeakMeasuredValueAttribute", readSulfurDioxideConcentrationMeasurementPeakMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSulfurDioxideConcentrationMeasurementPeakMeasuredValueWindowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSulfurDioxideConcentrationMeasurementPeakMeasuredValueWindowAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SulfurDioxideConcentrationMeasurement.ID, ClusterIDMapping.SulfurDioxideConcentrationMeasurement.Attribute.PeakMeasuredValueWindow.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SulfurDioxideConcentrationMeasurementCluster) cluster).readPeakMeasuredValueWindowAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSulfurDioxideConcentrationMeasurementPeakMeasuredValueWindowCommandParams
        );
        result.put("readPeakMeasuredValueWindowAttribute", readSulfurDioxideConcentrationMeasurementPeakMeasuredValueWindowAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSulfurDioxideConcentrationMeasurementAverageMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSulfurDioxideConcentrationMeasurementAverageMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SulfurDioxideConcentrationMeasurement.ID, ClusterIDMapping.SulfurDioxideConcentrationMeasurement.Attribute.AverageMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SulfurDioxideConcentrationMeasurementCluster) cluster).readAverageMeasuredValueAttribute(
//              (ChipClusters.SulfurDioxideConcentrationMeasurementCluster.AverageMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedSulfurDioxideConcentrationMeasurementClusterAverageMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSulfurDioxideConcentrationMeasurementAverageMeasuredValueCommandParams
        );
        result.put("readAverageMeasuredValueAttribute", readSulfurDioxideConcentrationMeasurementAverageMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSulfurDioxideConcentrationMeasurementAverageMeasuredValueWindowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSulfurDioxideConcentrationMeasurementAverageMeasuredValueWindowAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SulfurDioxideConcentrationMeasurement.ID, ClusterIDMapping.SulfurDioxideConcentrationMeasurement.Attribute.AverageMeasuredValueWindow.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SulfurDioxideConcentrationMeasurementCluster) cluster).readAverageMeasuredValueWindowAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSulfurDioxideConcentrationMeasurementAverageMeasuredValueWindowCommandParams
        );
        result.put("readAverageMeasuredValueWindowAttribute", readSulfurDioxideConcentrationMeasurementAverageMeasuredValueWindowAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSulfurDioxideConcentrationMeasurementUncertaintyCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSulfurDioxideConcentrationMeasurementUncertaintyAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SulfurDioxideConcentrationMeasurement.ID, ClusterIDMapping.SulfurDioxideConcentrationMeasurement.Attribute.Uncertainty.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SulfurDioxideConcentrationMeasurementCluster) cluster).readUncertaintyAttribute(
//              (ChipClusters.FloatAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFloatAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSulfurDioxideConcentrationMeasurementUncertaintyCommandParams
        );
        result.put("readUncertaintyAttribute", readSulfurDioxideConcentrationMeasurementUncertaintyAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSulfurDioxideConcentrationMeasurementMeasurementUnitCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSulfurDioxideConcentrationMeasurementMeasurementUnitAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SulfurDioxideConcentrationMeasurement.ID, ClusterIDMapping.SulfurDioxideConcentrationMeasurement.Attribute.MeasurementUnit.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SulfurDioxideConcentrationMeasurementCluster) cluster).readMeasurementUnitAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSulfurDioxideConcentrationMeasurementMeasurementUnitCommandParams
        );
        result.put("readMeasurementUnitAttribute", readSulfurDioxideConcentrationMeasurementMeasurementUnitAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSulfurDioxideConcentrationMeasurementMeasurementMediumCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSulfurDioxideConcentrationMeasurementMeasurementMediumAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SulfurDioxideConcentrationMeasurement.ID, ClusterIDMapping.SulfurDioxideConcentrationMeasurement.Attribute.MeasurementMedium.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SulfurDioxideConcentrationMeasurementCluster) cluster).readMeasurementMediumAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSulfurDioxideConcentrationMeasurementMeasurementMediumCommandParams
        );
        result.put("readMeasurementMediumAttribute", readSulfurDioxideConcentrationMeasurementMeasurementMediumAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSulfurDioxideConcentrationMeasurementLevelValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSulfurDioxideConcentrationMeasurementLevelValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SulfurDioxideConcentrationMeasurement.ID, ClusterIDMapping.SulfurDioxideConcentrationMeasurement.Attribute.LevelValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SulfurDioxideConcentrationMeasurementCluster) cluster).readLevelValueAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSulfurDioxideConcentrationMeasurementLevelValueCommandParams
        );
        result.put("readLevelValueAttribute", readSulfurDioxideConcentrationMeasurementLevelValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSulfurDioxideConcentrationMeasurementGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSulfurDioxideConcentrationMeasurementGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SulfurDioxideConcentrationMeasurement.ID, ClusterIDMapping.SulfurDioxideConcentrationMeasurement.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SulfurDioxideConcentrationMeasurementCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.SulfurDioxideConcentrationMeasurementCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedSulfurDioxideConcentrationMeasurementClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSulfurDioxideConcentrationMeasurementGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readSulfurDioxideConcentrationMeasurementGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSulfurDioxideConcentrationMeasurementAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSulfurDioxideConcentrationMeasurementAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SulfurDioxideConcentrationMeasurement.ID, ClusterIDMapping.SulfurDioxideConcentrationMeasurement.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SulfurDioxideConcentrationMeasurementCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.SulfurDioxideConcentrationMeasurementCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedSulfurDioxideConcentrationMeasurementClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSulfurDioxideConcentrationMeasurementAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readSulfurDioxideConcentrationMeasurementAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSulfurDioxideConcentrationMeasurementEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSulfurDioxideConcentrationMeasurementEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SulfurDioxideConcentrationMeasurement.ID, ClusterIDMapping.SulfurDioxideConcentrationMeasurement.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SulfurDioxideConcentrationMeasurementCluster) cluster).readEventListAttribute(
//              (ChipClusters.SulfurDioxideConcentrationMeasurementCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedSulfurDioxideConcentrationMeasurementClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSulfurDioxideConcentrationMeasurementEventListCommandParams
        );
        result.put("readEventListAttribute", readSulfurDioxideConcentrationMeasurementEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSulfurDioxideConcentrationMeasurementAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSulfurDioxideConcentrationMeasurementAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SulfurDioxideConcentrationMeasurement.ID, ClusterIDMapping.SulfurDioxideConcentrationMeasurement.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SulfurDioxideConcentrationMeasurementCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.SulfurDioxideConcentrationMeasurementCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedSulfurDioxideConcentrationMeasurementClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSulfurDioxideConcentrationMeasurementAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readSulfurDioxideConcentrationMeasurementAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSulfurDioxideConcentrationMeasurementFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSulfurDioxideConcentrationMeasurementFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SulfurDioxideConcentrationMeasurement.ID, ClusterIDMapping.SulfurDioxideConcentrationMeasurement.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SulfurDioxideConcentrationMeasurementCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSulfurDioxideConcentrationMeasurementFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readSulfurDioxideConcentrationMeasurementFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSulfurDioxideConcentrationMeasurementClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSulfurDioxideConcentrationMeasurementClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SulfurDioxideConcentrationMeasurement.ID, ClusterIDMapping.SulfurDioxideConcentrationMeasurement.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SulfurDioxideConcentrationMeasurementCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSulfurDioxideConcentrationMeasurementClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readSulfurDioxideConcentrationMeasurementClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readDissolvedOxygenConcentrationMeasurementInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readDissolvedOxygenConcentrationMeasurementMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDissolvedOxygenConcentrationMeasurementMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DissolvedOxygenConcentrationMeasurement.ID, ClusterIDMapping.DissolvedOxygenConcentrationMeasurement.Attribute.MeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DissolvedOxygenConcentrationMeasurementCluster) cluster).readMeasuredValueAttribute(
//              (ChipClusters.DissolvedOxygenConcentrationMeasurementCluster.MeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedDissolvedOxygenConcentrationMeasurementClusterMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDissolvedOxygenConcentrationMeasurementMeasuredValueCommandParams
        );
        result.put("readMeasuredValueAttribute", readDissolvedOxygenConcentrationMeasurementMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDissolvedOxygenConcentrationMeasurementMinMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDissolvedOxygenConcentrationMeasurementMinMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DissolvedOxygenConcentrationMeasurement.ID, ClusterIDMapping.DissolvedOxygenConcentrationMeasurement.Attribute.MinMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DissolvedOxygenConcentrationMeasurementCluster) cluster).readMinMeasuredValueAttribute(
//              (ChipClusters.DissolvedOxygenConcentrationMeasurementCluster.MinMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedDissolvedOxygenConcentrationMeasurementClusterMinMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDissolvedOxygenConcentrationMeasurementMinMeasuredValueCommandParams
        );
        result.put("readMinMeasuredValueAttribute", readDissolvedOxygenConcentrationMeasurementMinMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDissolvedOxygenConcentrationMeasurementMaxMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDissolvedOxygenConcentrationMeasurementMaxMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DissolvedOxygenConcentrationMeasurement.ID, ClusterIDMapping.DissolvedOxygenConcentrationMeasurement.Attribute.MaxMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DissolvedOxygenConcentrationMeasurementCluster) cluster).readMaxMeasuredValueAttribute(
//              (ChipClusters.DissolvedOxygenConcentrationMeasurementCluster.MaxMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedDissolvedOxygenConcentrationMeasurementClusterMaxMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDissolvedOxygenConcentrationMeasurementMaxMeasuredValueCommandParams
        );
        result.put("readMaxMeasuredValueAttribute", readDissolvedOxygenConcentrationMeasurementMaxMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDissolvedOxygenConcentrationMeasurementPeakMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDissolvedOxygenConcentrationMeasurementPeakMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DissolvedOxygenConcentrationMeasurement.ID, ClusterIDMapping.DissolvedOxygenConcentrationMeasurement.Attribute.PeakMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DissolvedOxygenConcentrationMeasurementCluster) cluster).readPeakMeasuredValueAttribute(
//              (ChipClusters.DissolvedOxygenConcentrationMeasurementCluster.PeakMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedDissolvedOxygenConcentrationMeasurementClusterPeakMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDissolvedOxygenConcentrationMeasurementPeakMeasuredValueCommandParams
        );
        result.put("readPeakMeasuredValueAttribute", readDissolvedOxygenConcentrationMeasurementPeakMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDissolvedOxygenConcentrationMeasurementPeakMeasuredValueWindowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDissolvedOxygenConcentrationMeasurementPeakMeasuredValueWindowAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DissolvedOxygenConcentrationMeasurement.ID, ClusterIDMapping.DissolvedOxygenConcentrationMeasurement.Attribute.PeakMeasuredValueWindow.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DissolvedOxygenConcentrationMeasurementCluster) cluster).readPeakMeasuredValueWindowAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDissolvedOxygenConcentrationMeasurementPeakMeasuredValueWindowCommandParams
        );
        result.put("readPeakMeasuredValueWindowAttribute", readDissolvedOxygenConcentrationMeasurementPeakMeasuredValueWindowAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDissolvedOxygenConcentrationMeasurementAverageMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDissolvedOxygenConcentrationMeasurementAverageMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DissolvedOxygenConcentrationMeasurement.ID, ClusterIDMapping.DissolvedOxygenConcentrationMeasurement.Attribute.AverageMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DissolvedOxygenConcentrationMeasurementCluster) cluster).readAverageMeasuredValueAttribute(
//              (ChipClusters.DissolvedOxygenConcentrationMeasurementCluster.AverageMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedDissolvedOxygenConcentrationMeasurementClusterAverageMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDissolvedOxygenConcentrationMeasurementAverageMeasuredValueCommandParams
        );
        result.put("readAverageMeasuredValueAttribute", readDissolvedOxygenConcentrationMeasurementAverageMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDissolvedOxygenConcentrationMeasurementAverageMeasuredValueWindowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDissolvedOxygenConcentrationMeasurementAverageMeasuredValueWindowAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DissolvedOxygenConcentrationMeasurement.ID, ClusterIDMapping.DissolvedOxygenConcentrationMeasurement.Attribute.AverageMeasuredValueWindow.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DissolvedOxygenConcentrationMeasurementCluster) cluster).readAverageMeasuredValueWindowAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDissolvedOxygenConcentrationMeasurementAverageMeasuredValueWindowCommandParams
        );
        result.put("readAverageMeasuredValueWindowAttribute", readDissolvedOxygenConcentrationMeasurementAverageMeasuredValueWindowAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDissolvedOxygenConcentrationMeasurementUncertaintyCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDissolvedOxygenConcentrationMeasurementUncertaintyAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DissolvedOxygenConcentrationMeasurement.ID, ClusterIDMapping.DissolvedOxygenConcentrationMeasurement.Attribute.Uncertainty.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DissolvedOxygenConcentrationMeasurementCluster) cluster).readUncertaintyAttribute(
//              (ChipClusters.FloatAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFloatAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDissolvedOxygenConcentrationMeasurementUncertaintyCommandParams
        );
        result.put("readUncertaintyAttribute", readDissolvedOxygenConcentrationMeasurementUncertaintyAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDissolvedOxygenConcentrationMeasurementMeasurementUnitCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDissolvedOxygenConcentrationMeasurementMeasurementUnitAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DissolvedOxygenConcentrationMeasurement.ID, ClusterIDMapping.DissolvedOxygenConcentrationMeasurement.Attribute.MeasurementUnit.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DissolvedOxygenConcentrationMeasurementCluster) cluster).readMeasurementUnitAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDissolvedOxygenConcentrationMeasurementMeasurementUnitCommandParams
        );
        result.put("readMeasurementUnitAttribute", readDissolvedOxygenConcentrationMeasurementMeasurementUnitAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDissolvedOxygenConcentrationMeasurementMeasurementMediumCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDissolvedOxygenConcentrationMeasurementMeasurementMediumAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DissolvedOxygenConcentrationMeasurement.ID, ClusterIDMapping.DissolvedOxygenConcentrationMeasurement.Attribute.MeasurementMedium.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DissolvedOxygenConcentrationMeasurementCluster) cluster).readMeasurementMediumAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDissolvedOxygenConcentrationMeasurementMeasurementMediumCommandParams
        );
        result.put("readMeasurementMediumAttribute", readDissolvedOxygenConcentrationMeasurementMeasurementMediumAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDissolvedOxygenConcentrationMeasurementLevelValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDissolvedOxygenConcentrationMeasurementLevelValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DissolvedOxygenConcentrationMeasurement.ID, ClusterIDMapping.DissolvedOxygenConcentrationMeasurement.Attribute.LevelValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DissolvedOxygenConcentrationMeasurementCluster) cluster).readLevelValueAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDissolvedOxygenConcentrationMeasurementLevelValueCommandParams
        );
        result.put("readLevelValueAttribute", readDissolvedOxygenConcentrationMeasurementLevelValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDissolvedOxygenConcentrationMeasurementGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDissolvedOxygenConcentrationMeasurementGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DissolvedOxygenConcentrationMeasurement.ID, ClusterIDMapping.DissolvedOxygenConcentrationMeasurement.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DissolvedOxygenConcentrationMeasurementCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.DissolvedOxygenConcentrationMeasurementCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedDissolvedOxygenConcentrationMeasurementClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDissolvedOxygenConcentrationMeasurementGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readDissolvedOxygenConcentrationMeasurementGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDissolvedOxygenConcentrationMeasurementAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDissolvedOxygenConcentrationMeasurementAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DissolvedOxygenConcentrationMeasurement.ID, ClusterIDMapping.DissolvedOxygenConcentrationMeasurement.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DissolvedOxygenConcentrationMeasurementCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.DissolvedOxygenConcentrationMeasurementCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedDissolvedOxygenConcentrationMeasurementClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDissolvedOxygenConcentrationMeasurementAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readDissolvedOxygenConcentrationMeasurementAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDissolvedOxygenConcentrationMeasurementEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDissolvedOxygenConcentrationMeasurementEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DissolvedOxygenConcentrationMeasurement.ID, ClusterIDMapping.DissolvedOxygenConcentrationMeasurement.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DissolvedOxygenConcentrationMeasurementCluster) cluster).readEventListAttribute(
//              (ChipClusters.DissolvedOxygenConcentrationMeasurementCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedDissolvedOxygenConcentrationMeasurementClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDissolvedOxygenConcentrationMeasurementEventListCommandParams
        );
        result.put("readEventListAttribute", readDissolvedOxygenConcentrationMeasurementEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDissolvedOxygenConcentrationMeasurementAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDissolvedOxygenConcentrationMeasurementAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DissolvedOxygenConcentrationMeasurement.ID, ClusterIDMapping.DissolvedOxygenConcentrationMeasurement.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DissolvedOxygenConcentrationMeasurementCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.DissolvedOxygenConcentrationMeasurementCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedDissolvedOxygenConcentrationMeasurementClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDissolvedOxygenConcentrationMeasurementAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readDissolvedOxygenConcentrationMeasurementAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDissolvedOxygenConcentrationMeasurementFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDissolvedOxygenConcentrationMeasurementFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DissolvedOxygenConcentrationMeasurement.ID, ClusterIDMapping.DissolvedOxygenConcentrationMeasurement.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DissolvedOxygenConcentrationMeasurementCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDissolvedOxygenConcentrationMeasurementFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readDissolvedOxygenConcentrationMeasurementFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readDissolvedOxygenConcentrationMeasurementClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readDissolvedOxygenConcentrationMeasurementClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.DissolvedOxygenConcentrationMeasurement.ID, ClusterIDMapping.DissolvedOxygenConcentrationMeasurement.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.DissolvedOxygenConcentrationMeasurementCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readDissolvedOxygenConcentrationMeasurementClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readDissolvedOxygenConcentrationMeasurementClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readBromateConcentrationMeasurementInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readBromateConcentrationMeasurementMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBromateConcentrationMeasurementMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BromateConcentrationMeasurement.ID, ClusterIDMapping.BromateConcentrationMeasurement.Attribute.MeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BromateConcentrationMeasurementCluster) cluster).readMeasuredValueAttribute(
//              (ChipClusters.BromateConcentrationMeasurementCluster.MeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBromateConcentrationMeasurementClusterMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBromateConcentrationMeasurementMeasuredValueCommandParams
        );
        result.put("readMeasuredValueAttribute", readBromateConcentrationMeasurementMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBromateConcentrationMeasurementMinMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBromateConcentrationMeasurementMinMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BromateConcentrationMeasurement.ID, ClusterIDMapping.BromateConcentrationMeasurement.Attribute.MinMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BromateConcentrationMeasurementCluster) cluster).readMinMeasuredValueAttribute(
//              (ChipClusters.BromateConcentrationMeasurementCluster.MinMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBromateConcentrationMeasurementClusterMinMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBromateConcentrationMeasurementMinMeasuredValueCommandParams
        );
        result.put("readMinMeasuredValueAttribute", readBromateConcentrationMeasurementMinMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBromateConcentrationMeasurementMaxMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBromateConcentrationMeasurementMaxMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BromateConcentrationMeasurement.ID, ClusterIDMapping.BromateConcentrationMeasurement.Attribute.MaxMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BromateConcentrationMeasurementCluster) cluster).readMaxMeasuredValueAttribute(
//              (ChipClusters.BromateConcentrationMeasurementCluster.MaxMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBromateConcentrationMeasurementClusterMaxMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBromateConcentrationMeasurementMaxMeasuredValueCommandParams
        );
        result.put("readMaxMeasuredValueAttribute", readBromateConcentrationMeasurementMaxMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBromateConcentrationMeasurementPeakMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBromateConcentrationMeasurementPeakMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BromateConcentrationMeasurement.ID, ClusterIDMapping.BromateConcentrationMeasurement.Attribute.PeakMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BromateConcentrationMeasurementCluster) cluster).readPeakMeasuredValueAttribute(
//              (ChipClusters.BromateConcentrationMeasurementCluster.PeakMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBromateConcentrationMeasurementClusterPeakMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBromateConcentrationMeasurementPeakMeasuredValueCommandParams
        );
        result.put("readPeakMeasuredValueAttribute", readBromateConcentrationMeasurementPeakMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBromateConcentrationMeasurementPeakMeasuredValueWindowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBromateConcentrationMeasurementPeakMeasuredValueWindowAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BromateConcentrationMeasurement.ID, ClusterIDMapping.BromateConcentrationMeasurement.Attribute.PeakMeasuredValueWindow.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BromateConcentrationMeasurementCluster) cluster).readPeakMeasuredValueWindowAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBromateConcentrationMeasurementPeakMeasuredValueWindowCommandParams
        );
        result.put("readPeakMeasuredValueWindowAttribute", readBromateConcentrationMeasurementPeakMeasuredValueWindowAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBromateConcentrationMeasurementAverageMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBromateConcentrationMeasurementAverageMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BromateConcentrationMeasurement.ID, ClusterIDMapping.BromateConcentrationMeasurement.Attribute.AverageMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BromateConcentrationMeasurementCluster) cluster).readAverageMeasuredValueAttribute(
//              (ChipClusters.BromateConcentrationMeasurementCluster.AverageMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBromateConcentrationMeasurementClusterAverageMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBromateConcentrationMeasurementAverageMeasuredValueCommandParams
        );
        result.put("readAverageMeasuredValueAttribute", readBromateConcentrationMeasurementAverageMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBromateConcentrationMeasurementAverageMeasuredValueWindowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBromateConcentrationMeasurementAverageMeasuredValueWindowAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BromateConcentrationMeasurement.ID, ClusterIDMapping.BromateConcentrationMeasurement.Attribute.AverageMeasuredValueWindow.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BromateConcentrationMeasurementCluster) cluster).readAverageMeasuredValueWindowAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBromateConcentrationMeasurementAverageMeasuredValueWindowCommandParams
        );
        result.put("readAverageMeasuredValueWindowAttribute", readBromateConcentrationMeasurementAverageMeasuredValueWindowAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBromateConcentrationMeasurementUncertaintyCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBromateConcentrationMeasurementUncertaintyAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BromateConcentrationMeasurement.ID, ClusterIDMapping.BromateConcentrationMeasurement.Attribute.Uncertainty.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BromateConcentrationMeasurementCluster) cluster).readUncertaintyAttribute(
//              (ChipClusters.FloatAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFloatAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBromateConcentrationMeasurementUncertaintyCommandParams
        );
        result.put("readUncertaintyAttribute", readBromateConcentrationMeasurementUncertaintyAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBromateConcentrationMeasurementMeasurementUnitCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBromateConcentrationMeasurementMeasurementUnitAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BromateConcentrationMeasurement.ID, ClusterIDMapping.BromateConcentrationMeasurement.Attribute.MeasurementUnit.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BromateConcentrationMeasurementCluster) cluster).readMeasurementUnitAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBromateConcentrationMeasurementMeasurementUnitCommandParams
        );
        result.put("readMeasurementUnitAttribute", readBromateConcentrationMeasurementMeasurementUnitAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBromateConcentrationMeasurementMeasurementMediumCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBromateConcentrationMeasurementMeasurementMediumAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BromateConcentrationMeasurement.ID, ClusterIDMapping.BromateConcentrationMeasurement.Attribute.MeasurementMedium.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BromateConcentrationMeasurementCluster) cluster).readMeasurementMediumAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBromateConcentrationMeasurementMeasurementMediumCommandParams
        );
        result.put("readMeasurementMediumAttribute", readBromateConcentrationMeasurementMeasurementMediumAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBromateConcentrationMeasurementLevelValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBromateConcentrationMeasurementLevelValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BromateConcentrationMeasurement.ID, ClusterIDMapping.BromateConcentrationMeasurement.Attribute.LevelValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BromateConcentrationMeasurementCluster) cluster).readLevelValueAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBromateConcentrationMeasurementLevelValueCommandParams
        );
        result.put("readLevelValueAttribute", readBromateConcentrationMeasurementLevelValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBromateConcentrationMeasurementGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBromateConcentrationMeasurementGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BromateConcentrationMeasurement.ID, ClusterIDMapping.BromateConcentrationMeasurement.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BromateConcentrationMeasurementCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.BromateConcentrationMeasurementCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBromateConcentrationMeasurementClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBromateConcentrationMeasurementGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readBromateConcentrationMeasurementGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBromateConcentrationMeasurementAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBromateConcentrationMeasurementAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BromateConcentrationMeasurement.ID, ClusterIDMapping.BromateConcentrationMeasurement.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BromateConcentrationMeasurementCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.BromateConcentrationMeasurementCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBromateConcentrationMeasurementClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBromateConcentrationMeasurementAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readBromateConcentrationMeasurementAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBromateConcentrationMeasurementEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBromateConcentrationMeasurementEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BromateConcentrationMeasurement.ID, ClusterIDMapping.BromateConcentrationMeasurement.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BromateConcentrationMeasurementCluster) cluster).readEventListAttribute(
//              (ChipClusters.BromateConcentrationMeasurementCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBromateConcentrationMeasurementClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBromateConcentrationMeasurementEventListCommandParams
        );
        result.put("readEventListAttribute", readBromateConcentrationMeasurementEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBromateConcentrationMeasurementAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBromateConcentrationMeasurementAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BromateConcentrationMeasurement.ID, ClusterIDMapping.BromateConcentrationMeasurement.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BromateConcentrationMeasurementCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.BromateConcentrationMeasurementCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBromateConcentrationMeasurementClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBromateConcentrationMeasurementAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readBromateConcentrationMeasurementAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBromateConcentrationMeasurementFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBromateConcentrationMeasurementFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BromateConcentrationMeasurement.ID, ClusterIDMapping.BromateConcentrationMeasurement.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BromateConcentrationMeasurementCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBromateConcentrationMeasurementFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readBromateConcentrationMeasurementFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBromateConcentrationMeasurementClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBromateConcentrationMeasurementClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BromateConcentrationMeasurement.ID, ClusterIDMapping.BromateConcentrationMeasurement.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BromateConcentrationMeasurementCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBromateConcentrationMeasurementClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readBromateConcentrationMeasurementClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readChloraminesConcentrationMeasurementInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readChloraminesConcentrationMeasurementMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readChloraminesConcentrationMeasurementMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ChloraminesConcentrationMeasurement.ID, ClusterIDMapping.ChloraminesConcentrationMeasurement.Attribute.MeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ChloraminesConcentrationMeasurementCluster) cluster).readMeasuredValueAttribute(
//              (ChipClusters.ChloraminesConcentrationMeasurementCluster.MeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedChloraminesConcentrationMeasurementClusterMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readChloraminesConcentrationMeasurementMeasuredValueCommandParams
        );
        result.put("readMeasuredValueAttribute", readChloraminesConcentrationMeasurementMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readChloraminesConcentrationMeasurementMinMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readChloraminesConcentrationMeasurementMinMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ChloraminesConcentrationMeasurement.ID, ClusterIDMapping.ChloraminesConcentrationMeasurement.Attribute.MinMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ChloraminesConcentrationMeasurementCluster) cluster).readMinMeasuredValueAttribute(
//              (ChipClusters.ChloraminesConcentrationMeasurementCluster.MinMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedChloraminesConcentrationMeasurementClusterMinMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readChloraminesConcentrationMeasurementMinMeasuredValueCommandParams
        );
        result.put("readMinMeasuredValueAttribute", readChloraminesConcentrationMeasurementMinMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readChloraminesConcentrationMeasurementMaxMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readChloraminesConcentrationMeasurementMaxMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ChloraminesConcentrationMeasurement.ID, ClusterIDMapping.ChloraminesConcentrationMeasurement.Attribute.MaxMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ChloraminesConcentrationMeasurementCluster) cluster).readMaxMeasuredValueAttribute(
//              (ChipClusters.ChloraminesConcentrationMeasurementCluster.MaxMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedChloraminesConcentrationMeasurementClusterMaxMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readChloraminesConcentrationMeasurementMaxMeasuredValueCommandParams
        );
        result.put("readMaxMeasuredValueAttribute", readChloraminesConcentrationMeasurementMaxMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readChloraminesConcentrationMeasurementPeakMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readChloraminesConcentrationMeasurementPeakMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ChloraminesConcentrationMeasurement.ID, ClusterIDMapping.ChloraminesConcentrationMeasurement.Attribute.PeakMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ChloraminesConcentrationMeasurementCluster) cluster).readPeakMeasuredValueAttribute(
//              (ChipClusters.ChloraminesConcentrationMeasurementCluster.PeakMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedChloraminesConcentrationMeasurementClusterPeakMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readChloraminesConcentrationMeasurementPeakMeasuredValueCommandParams
        );
        result.put("readPeakMeasuredValueAttribute", readChloraminesConcentrationMeasurementPeakMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readChloraminesConcentrationMeasurementPeakMeasuredValueWindowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readChloraminesConcentrationMeasurementPeakMeasuredValueWindowAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ChloraminesConcentrationMeasurement.ID, ClusterIDMapping.ChloraminesConcentrationMeasurement.Attribute.PeakMeasuredValueWindow.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ChloraminesConcentrationMeasurementCluster) cluster).readPeakMeasuredValueWindowAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readChloraminesConcentrationMeasurementPeakMeasuredValueWindowCommandParams
        );
        result.put("readPeakMeasuredValueWindowAttribute", readChloraminesConcentrationMeasurementPeakMeasuredValueWindowAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readChloraminesConcentrationMeasurementAverageMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readChloraminesConcentrationMeasurementAverageMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ChloraminesConcentrationMeasurement.ID, ClusterIDMapping.ChloraminesConcentrationMeasurement.Attribute.AverageMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ChloraminesConcentrationMeasurementCluster) cluster).readAverageMeasuredValueAttribute(
//              (ChipClusters.ChloraminesConcentrationMeasurementCluster.AverageMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedChloraminesConcentrationMeasurementClusterAverageMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readChloraminesConcentrationMeasurementAverageMeasuredValueCommandParams
        );
        result.put("readAverageMeasuredValueAttribute", readChloraminesConcentrationMeasurementAverageMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readChloraminesConcentrationMeasurementAverageMeasuredValueWindowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readChloraminesConcentrationMeasurementAverageMeasuredValueWindowAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ChloraminesConcentrationMeasurement.ID, ClusterIDMapping.ChloraminesConcentrationMeasurement.Attribute.AverageMeasuredValueWindow.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ChloraminesConcentrationMeasurementCluster) cluster).readAverageMeasuredValueWindowAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readChloraminesConcentrationMeasurementAverageMeasuredValueWindowCommandParams
        );
        result.put("readAverageMeasuredValueWindowAttribute", readChloraminesConcentrationMeasurementAverageMeasuredValueWindowAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readChloraminesConcentrationMeasurementUncertaintyCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readChloraminesConcentrationMeasurementUncertaintyAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ChloraminesConcentrationMeasurement.ID, ClusterIDMapping.ChloraminesConcentrationMeasurement.Attribute.Uncertainty.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ChloraminesConcentrationMeasurementCluster) cluster).readUncertaintyAttribute(
//              (ChipClusters.FloatAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFloatAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readChloraminesConcentrationMeasurementUncertaintyCommandParams
        );
        result.put("readUncertaintyAttribute", readChloraminesConcentrationMeasurementUncertaintyAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readChloraminesConcentrationMeasurementMeasurementUnitCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readChloraminesConcentrationMeasurementMeasurementUnitAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ChloraminesConcentrationMeasurement.ID, ClusterIDMapping.ChloraminesConcentrationMeasurement.Attribute.MeasurementUnit.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ChloraminesConcentrationMeasurementCluster) cluster).readMeasurementUnitAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readChloraminesConcentrationMeasurementMeasurementUnitCommandParams
        );
        result.put("readMeasurementUnitAttribute", readChloraminesConcentrationMeasurementMeasurementUnitAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readChloraminesConcentrationMeasurementMeasurementMediumCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readChloraminesConcentrationMeasurementMeasurementMediumAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ChloraminesConcentrationMeasurement.ID, ClusterIDMapping.ChloraminesConcentrationMeasurement.Attribute.MeasurementMedium.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ChloraminesConcentrationMeasurementCluster) cluster).readMeasurementMediumAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readChloraminesConcentrationMeasurementMeasurementMediumCommandParams
        );
        result.put("readMeasurementMediumAttribute", readChloraminesConcentrationMeasurementMeasurementMediumAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readChloraminesConcentrationMeasurementLevelValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readChloraminesConcentrationMeasurementLevelValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ChloraminesConcentrationMeasurement.ID, ClusterIDMapping.ChloraminesConcentrationMeasurement.Attribute.LevelValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ChloraminesConcentrationMeasurementCluster) cluster).readLevelValueAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readChloraminesConcentrationMeasurementLevelValueCommandParams
        );
        result.put("readLevelValueAttribute", readChloraminesConcentrationMeasurementLevelValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readChloraminesConcentrationMeasurementGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readChloraminesConcentrationMeasurementGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ChloraminesConcentrationMeasurement.ID, ClusterIDMapping.ChloraminesConcentrationMeasurement.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ChloraminesConcentrationMeasurementCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.ChloraminesConcentrationMeasurementCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedChloraminesConcentrationMeasurementClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readChloraminesConcentrationMeasurementGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readChloraminesConcentrationMeasurementGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readChloraminesConcentrationMeasurementAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readChloraminesConcentrationMeasurementAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ChloraminesConcentrationMeasurement.ID, ClusterIDMapping.ChloraminesConcentrationMeasurement.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ChloraminesConcentrationMeasurementCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.ChloraminesConcentrationMeasurementCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedChloraminesConcentrationMeasurementClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readChloraminesConcentrationMeasurementAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readChloraminesConcentrationMeasurementAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readChloraminesConcentrationMeasurementEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readChloraminesConcentrationMeasurementEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ChloraminesConcentrationMeasurement.ID, ClusterIDMapping.ChloraminesConcentrationMeasurement.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ChloraminesConcentrationMeasurementCluster) cluster).readEventListAttribute(
//              (ChipClusters.ChloraminesConcentrationMeasurementCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedChloraminesConcentrationMeasurementClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readChloraminesConcentrationMeasurementEventListCommandParams
        );
        result.put("readEventListAttribute", readChloraminesConcentrationMeasurementEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readChloraminesConcentrationMeasurementAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readChloraminesConcentrationMeasurementAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ChloraminesConcentrationMeasurement.ID, ClusterIDMapping.ChloraminesConcentrationMeasurement.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ChloraminesConcentrationMeasurementCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.ChloraminesConcentrationMeasurementCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedChloraminesConcentrationMeasurementClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readChloraminesConcentrationMeasurementAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readChloraminesConcentrationMeasurementAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readChloraminesConcentrationMeasurementFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readChloraminesConcentrationMeasurementFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ChloraminesConcentrationMeasurement.ID, ClusterIDMapping.ChloraminesConcentrationMeasurement.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ChloraminesConcentrationMeasurementCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readChloraminesConcentrationMeasurementFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readChloraminesConcentrationMeasurementFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readChloraminesConcentrationMeasurementClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readChloraminesConcentrationMeasurementClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ChloraminesConcentrationMeasurement.ID, ClusterIDMapping.ChloraminesConcentrationMeasurement.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ChloraminesConcentrationMeasurementCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readChloraminesConcentrationMeasurementClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readChloraminesConcentrationMeasurementClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readChlorineConcentrationMeasurementInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readChlorineConcentrationMeasurementMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readChlorineConcentrationMeasurementMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ChlorineConcentrationMeasurement.ID, ClusterIDMapping.ChlorineConcentrationMeasurement.Attribute.MeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ChlorineConcentrationMeasurementCluster) cluster).readMeasuredValueAttribute(
//              (ChipClusters.ChlorineConcentrationMeasurementCluster.MeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedChlorineConcentrationMeasurementClusterMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readChlorineConcentrationMeasurementMeasuredValueCommandParams
        );
        result.put("readMeasuredValueAttribute", readChlorineConcentrationMeasurementMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readChlorineConcentrationMeasurementMinMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readChlorineConcentrationMeasurementMinMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ChlorineConcentrationMeasurement.ID, ClusterIDMapping.ChlorineConcentrationMeasurement.Attribute.MinMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ChlorineConcentrationMeasurementCluster) cluster).readMinMeasuredValueAttribute(
//              (ChipClusters.ChlorineConcentrationMeasurementCluster.MinMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedChlorineConcentrationMeasurementClusterMinMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readChlorineConcentrationMeasurementMinMeasuredValueCommandParams
        );
        result.put("readMinMeasuredValueAttribute", readChlorineConcentrationMeasurementMinMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readChlorineConcentrationMeasurementMaxMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readChlorineConcentrationMeasurementMaxMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ChlorineConcentrationMeasurement.ID, ClusterIDMapping.ChlorineConcentrationMeasurement.Attribute.MaxMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ChlorineConcentrationMeasurementCluster) cluster).readMaxMeasuredValueAttribute(
//              (ChipClusters.ChlorineConcentrationMeasurementCluster.MaxMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedChlorineConcentrationMeasurementClusterMaxMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readChlorineConcentrationMeasurementMaxMeasuredValueCommandParams
        );
        result.put("readMaxMeasuredValueAttribute", readChlorineConcentrationMeasurementMaxMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readChlorineConcentrationMeasurementPeakMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readChlorineConcentrationMeasurementPeakMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ChlorineConcentrationMeasurement.ID, ClusterIDMapping.ChlorineConcentrationMeasurement.Attribute.PeakMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ChlorineConcentrationMeasurementCluster) cluster).readPeakMeasuredValueAttribute(
//              (ChipClusters.ChlorineConcentrationMeasurementCluster.PeakMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedChlorineConcentrationMeasurementClusterPeakMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readChlorineConcentrationMeasurementPeakMeasuredValueCommandParams
        );
        result.put("readPeakMeasuredValueAttribute", readChlorineConcentrationMeasurementPeakMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readChlorineConcentrationMeasurementPeakMeasuredValueWindowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readChlorineConcentrationMeasurementPeakMeasuredValueWindowAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ChlorineConcentrationMeasurement.ID, ClusterIDMapping.ChlorineConcentrationMeasurement.Attribute.PeakMeasuredValueWindow.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ChlorineConcentrationMeasurementCluster) cluster).readPeakMeasuredValueWindowAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readChlorineConcentrationMeasurementPeakMeasuredValueWindowCommandParams
        );
        result.put("readPeakMeasuredValueWindowAttribute", readChlorineConcentrationMeasurementPeakMeasuredValueWindowAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readChlorineConcentrationMeasurementAverageMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readChlorineConcentrationMeasurementAverageMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ChlorineConcentrationMeasurement.ID, ClusterIDMapping.ChlorineConcentrationMeasurement.Attribute.AverageMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ChlorineConcentrationMeasurementCluster) cluster).readAverageMeasuredValueAttribute(
//              (ChipClusters.ChlorineConcentrationMeasurementCluster.AverageMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedChlorineConcentrationMeasurementClusterAverageMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readChlorineConcentrationMeasurementAverageMeasuredValueCommandParams
        );
        result.put("readAverageMeasuredValueAttribute", readChlorineConcentrationMeasurementAverageMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readChlorineConcentrationMeasurementAverageMeasuredValueWindowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readChlorineConcentrationMeasurementAverageMeasuredValueWindowAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ChlorineConcentrationMeasurement.ID, ClusterIDMapping.ChlorineConcentrationMeasurement.Attribute.AverageMeasuredValueWindow.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ChlorineConcentrationMeasurementCluster) cluster).readAverageMeasuredValueWindowAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readChlorineConcentrationMeasurementAverageMeasuredValueWindowCommandParams
        );
        result.put("readAverageMeasuredValueWindowAttribute", readChlorineConcentrationMeasurementAverageMeasuredValueWindowAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readChlorineConcentrationMeasurementUncertaintyCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readChlorineConcentrationMeasurementUncertaintyAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ChlorineConcentrationMeasurement.ID, ClusterIDMapping.ChlorineConcentrationMeasurement.Attribute.Uncertainty.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ChlorineConcentrationMeasurementCluster) cluster).readUncertaintyAttribute(
//              (ChipClusters.FloatAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFloatAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readChlorineConcentrationMeasurementUncertaintyCommandParams
        );
        result.put("readUncertaintyAttribute", readChlorineConcentrationMeasurementUncertaintyAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readChlorineConcentrationMeasurementMeasurementUnitCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readChlorineConcentrationMeasurementMeasurementUnitAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ChlorineConcentrationMeasurement.ID, ClusterIDMapping.ChlorineConcentrationMeasurement.Attribute.MeasurementUnit.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ChlorineConcentrationMeasurementCluster) cluster).readMeasurementUnitAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readChlorineConcentrationMeasurementMeasurementUnitCommandParams
        );
        result.put("readMeasurementUnitAttribute", readChlorineConcentrationMeasurementMeasurementUnitAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readChlorineConcentrationMeasurementMeasurementMediumCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readChlorineConcentrationMeasurementMeasurementMediumAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ChlorineConcentrationMeasurement.ID, ClusterIDMapping.ChlorineConcentrationMeasurement.Attribute.MeasurementMedium.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ChlorineConcentrationMeasurementCluster) cluster).readMeasurementMediumAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readChlorineConcentrationMeasurementMeasurementMediumCommandParams
        );
        result.put("readMeasurementMediumAttribute", readChlorineConcentrationMeasurementMeasurementMediumAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readChlorineConcentrationMeasurementLevelValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readChlorineConcentrationMeasurementLevelValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ChlorineConcentrationMeasurement.ID, ClusterIDMapping.ChlorineConcentrationMeasurement.Attribute.LevelValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ChlorineConcentrationMeasurementCluster) cluster).readLevelValueAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readChlorineConcentrationMeasurementLevelValueCommandParams
        );
        result.put("readLevelValueAttribute", readChlorineConcentrationMeasurementLevelValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readChlorineConcentrationMeasurementGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readChlorineConcentrationMeasurementGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ChlorineConcentrationMeasurement.ID, ClusterIDMapping.ChlorineConcentrationMeasurement.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ChlorineConcentrationMeasurementCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.ChlorineConcentrationMeasurementCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedChlorineConcentrationMeasurementClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readChlorineConcentrationMeasurementGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readChlorineConcentrationMeasurementGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readChlorineConcentrationMeasurementAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readChlorineConcentrationMeasurementAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ChlorineConcentrationMeasurement.ID, ClusterIDMapping.ChlorineConcentrationMeasurement.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ChlorineConcentrationMeasurementCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.ChlorineConcentrationMeasurementCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedChlorineConcentrationMeasurementClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readChlorineConcentrationMeasurementAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readChlorineConcentrationMeasurementAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readChlorineConcentrationMeasurementEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readChlorineConcentrationMeasurementEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ChlorineConcentrationMeasurement.ID, ClusterIDMapping.ChlorineConcentrationMeasurement.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ChlorineConcentrationMeasurementCluster) cluster).readEventListAttribute(
//              (ChipClusters.ChlorineConcentrationMeasurementCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedChlorineConcentrationMeasurementClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readChlorineConcentrationMeasurementEventListCommandParams
        );
        result.put("readEventListAttribute", readChlorineConcentrationMeasurementEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readChlorineConcentrationMeasurementAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readChlorineConcentrationMeasurementAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ChlorineConcentrationMeasurement.ID, ClusterIDMapping.ChlorineConcentrationMeasurement.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ChlorineConcentrationMeasurementCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.ChlorineConcentrationMeasurementCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedChlorineConcentrationMeasurementClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readChlorineConcentrationMeasurementAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readChlorineConcentrationMeasurementAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readChlorineConcentrationMeasurementFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readChlorineConcentrationMeasurementFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ChlorineConcentrationMeasurement.ID, ClusterIDMapping.ChlorineConcentrationMeasurement.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ChlorineConcentrationMeasurementCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readChlorineConcentrationMeasurementFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readChlorineConcentrationMeasurementFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readChlorineConcentrationMeasurementClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readChlorineConcentrationMeasurementClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ChlorineConcentrationMeasurement.ID, ClusterIDMapping.ChlorineConcentrationMeasurement.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ChlorineConcentrationMeasurementCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readChlorineConcentrationMeasurementClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readChlorineConcentrationMeasurementClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readFecalColiformEColiConcentrationMeasurementInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readFecalColiformEColiConcentrationMeasurementMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFecalColiformEColiConcentrationMeasurementMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FecalColiformEColiConcentrationMeasurement.ID, ClusterIDMapping.FecalColiformEColiConcentrationMeasurement.Attribute.MeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FecalColiformEColiConcentrationMeasurementCluster) cluster).readMeasuredValueAttribute(
//              (ChipClusters.FecalColiformEColiConcentrationMeasurementCluster.MeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFecalColiformEColiConcentrationMeasurementClusterMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFecalColiformEColiConcentrationMeasurementMeasuredValueCommandParams
        );
        result.put("readMeasuredValueAttribute", readFecalColiformEColiConcentrationMeasurementMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFecalColiformEColiConcentrationMeasurementMinMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFecalColiformEColiConcentrationMeasurementMinMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FecalColiformEColiConcentrationMeasurement.ID, ClusterIDMapping.FecalColiformEColiConcentrationMeasurement.Attribute.MinMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FecalColiformEColiConcentrationMeasurementCluster) cluster).readMinMeasuredValueAttribute(
//              (ChipClusters.FecalColiformEColiConcentrationMeasurementCluster.MinMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFecalColiformEColiConcentrationMeasurementClusterMinMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFecalColiformEColiConcentrationMeasurementMinMeasuredValueCommandParams
        );
        result.put("readMinMeasuredValueAttribute", readFecalColiformEColiConcentrationMeasurementMinMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFecalColiformEColiConcentrationMeasurementMaxMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFecalColiformEColiConcentrationMeasurementMaxMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FecalColiformEColiConcentrationMeasurement.ID, ClusterIDMapping.FecalColiformEColiConcentrationMeasurement.Attribute.MaxMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FecalColiformEColiConcentrationMeasurementCluster) cluster).readMaxMeasuredValueAttribute(
//              (ChipClusters.FecalColiformEColiConcentrationMeasurementCluster.MaxMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFecalColiformEColiConcentrationMeasurementClusterMaxMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFecalColiformEColiConcentrationMeasurementMaxMeasuredValueCommandParams
        );
        result.put("readMaxMeasuredValueAttribute", readFecalColiformEColiConcentrationMeasurementMaxMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFecalColiformEColiConcentrationMeasurementPeakMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFecalColiformEColiConcentrationMeasurementPeakMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FecalColiformEColiConcentrationMeasurement.ID, ClusterIDMapping.FecalColiformEColiConcentrationMeasurement.Attribute.PeakMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FecalColiformEColiConcentrationMeasurementCluster) cluster).readPeakMeasuredValueAttribute(
//              (ChipClusters.FecalColiformEColiConcentrationMeasurementCluster.PeakMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFecalColiformEColiConcentrationMeasurementClusterPeakMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFecalColiformEColiConcentrationMeasurementPeakMeasuredValueCommandParams
        );
        result.put("readPeakMeasuredValueAttribute", readFecalColiformEColiConcentrationMeasurementPeakMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFecalColiformEColiConcentrationMeasurementPeakMeasuredValueWindowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFecalColiformEColiConcentrationMeasurementPeakMeasuredValueWindowAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FecalColiformEColiConcentrationMeasurement.ID, ClusterIDMapping.FecalColiformEColiConcentrationMeasurement.Attribute.PeakMeasuredValueWindow.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FecalColiformEColiConcentrationMeasurementCluster) cluster).readPeakMeasuredValueWindowAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFecalColiformEColiConcentrationMeasurementPeakMeasuredValueWindowCommandParams
        );
        result.put("readPeakMeasuredValueWindowAttribute", readFecalColiformEColiConcentrationMeasurementPeakMeasuredValueWindowAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFecalColiformEColiConcentrationMeasurementAverageMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFecalColiformEColiConcentrationMeasurementAverageMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FecalColiformEColiConcentrationMeasurement.ID, ClusterIDMapping.FecalColiformEColiConcentrationMeasurement.Attribute.AverageMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FecalColiformEColiConcentrationMeasurementCluster) cluster).readAverageMeasuredValueAttribute(
//              (ChipClusters.FecalColiformEColiConcentrationMeasurementCluster.AverageMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFecalColiformEColiConcentrationMeasurementClusterAverageMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFecalColiformEColiConcentrationMeasurementAverageMeasuredValueCommandParams
        );
        result.put("readAverageMeasuredValueAttribute", readFecalColiformEColiConcentrationMeasurementAverageMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFecalColiformEColiConcentrationMeasurementAverageMeasuredValueWindowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFecalColiformEColiConcentrationMeasurementAverageMeasuredValueWindowAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FecalColiformEColiConcentrationMeasurement.ID, ClusterIDMapping.FecalColiformEColiConcentrationMeasurement.Attribute.AverageMeasuredValueWindow.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FecalColiformEColiConcentrationMeasurementCluster) cluster).readAverageMeasuredValueWindowAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFecalColiformEColiConcentrationMeasurementAverageMeasuredValueWindowCommandParams
        );
        result.put("readAverageMeasuredValueWindowAttribute", readFecalColiformEColiConcentrationMeasurementAverageMeasuredValueWindowAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFecalColiformEColiConcentrationMeasurementUncertaintyCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFecalColiformEColiConcentrationMeasurementUncertaintyAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FecalColiformEColiConcentrationMeasurement.ID, ClusterIDMapping.FecalColiformEColiConcentrationMeasurement.Attribute.Uncertainty.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FecalColiformEColiConcentrationMeasurementCluster) cluster).readUncertaintyAttribute(
//              (ChipClusters.FloatAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFloatAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFecalColiformEColiConcentrationMeasurementUncertaintyCommandParams
        );
        result.put("readUncertaintyAttribute", readFecalColiformEColiConcentrationMeasurementUncertaintyAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFecalColiformEColiConcentrationMeasurementMeasurementUnitCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFecalColiformEColiConcentrationMeasurementMeasurementUnitAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FecalColiformEColiConcentrationMeasurement.ID, ClusterIDMapping.FecalColiformEColiConcentrationMeasurement.Attribute.MeasurementUnit.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FecalColiformEColiConcentrationMeasurementCluster) cluster).readMeasurementUnitAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFecalColiformEColiConcentrationMeasurementMeasurementUnitCommandParams
        );
        result.put("readMeasurementUnitAttribute", readFecalColiformEColiConcentrationMeasurementMeasurementUnitAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFecalColiformEColiConcentrationMeasurementMeasurementMediumCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFecalColiformEColiConcentrationMeasurementMeasurementMediumAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FecalColiformEColiConcentrationMeasurement.ID, ClusterIDMapping.FecalColiformEColiConcentrationMeasurement.Attribute.MeasurementMedium.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FecalColiformEColiConcentrationMeasurementCluster) cluster).readMeasurementMediumAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFecalColiformEColiConcentrationMeasurementMeasurementMediumCommandParams
        );
        result.put("readMeasurementMediumAttribute", readFecalColiformEColiConcentrationMeasurementMeasurementMediumAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFecalColiformEColiConcentrationMeasurementLevelValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFecalColiformEColiConcentrationMeasurementLevelValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FecalColiformEColiConcentrationMeasurement.ID, ClusterIDMapping.FecalColiformEColiConcentrationMeasurement.Attribute.LevelValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FecalColiformEColiConcentrationMeasurementCluster) cluster).readLevelValueAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFecalColiformEColiConcentrationMeasurementLevelValueCommandParams
        );
        result.put("readLevelValueAttribute", readFecalColiformEColiConcentrationMeasurementLevelValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFecalColiformEColiConcentrationMeasurementGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFecalColiformEColiConcentrationMeasurementGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FecalColiformEColiConcentrationMeasurement.ID, ClusterIDMapping.FecalColiformEColiConcentrationMeasurement.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FecalColiformEColiConcentrationMeasurementCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.FecalColiformEColiConcentrationMeasurementCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFecalColiformEColiConcentrationMeasurementClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFecalColiformEColiConcentrationMeasurementGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readFecalColiformEColiConcentrationMeasurementGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFecalColiformEColiConcentrationMeasurementAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFecalColiformEColiConcentrationMeasurementAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FecalColiformEColiConcentrationMeasurement.ID, ClusterIDMapping.FecalColiformEColiConcentrationMeasurement.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FecalColiformEColiConcentrationMeasurementCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.FecalColiformEColiConcentrationMeasurementCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFecalColiformEColiConcentrationMeasurementClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFecalColiformEColiConcentrationMeasurementAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readFecalColiformEColiConcentrationMeasurementAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFecalColiformEColiConcentrationMeasurementEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFecalColiformEColiConcentrationMeasurementEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FecalColiformEColiConcentrationMeasurement.ID, ClusterIDMapping.FecalColiformEColiConcentrationMeasurement.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FecalColiformEColiConcentrationMeasurementCluster) cluster).readEventListAttribute(
//              (ChipClusters.FecalColiformEColiConcentrationMeasurementCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFecalColiformEColiConcentrationMeasurementClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFecalColiformEColiConcentrationMeasurementEventListCommandParams
        );
        result.put("readEventListAttribute", readFecalColiformEColiConcentrationMeasurementEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFecalColiformEColiConcentrationMeasurementAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFecalColiformEColiConcentrationMeasurementAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FecalColiformEColiConcentrationMeasurement.ID, ClusterIDMapping.FecalColiformEColiConcentrationMeasurement.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FecalColiformEColiConcentrationMeasurementCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.FecalColiformEColiConcentrationMeasurementCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFecalColiformEColiConcentrationMeasurementClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFecalColiformEColiConcentrationMeasurementAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readFecalColiformEColiConcentrationMeasurementAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFecalColiformEColiConcentrationMeasurementFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFecalColiformEColiConcentrationMeasurementFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FecalColiformEColiConcentrationMeasurement.ID, ClusterIDMapping.FecalColiformEColiConcentrationMeasurement.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FecalColiformEColiConcentrationMeasurementCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFecalColiformEColiConcentrationMeasurementFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readFecalColiformEColiConcentrationMeasurementFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFecalColiformEColiConcentrationMeasurementClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFecalColiformEColiConcentrationMeasurementClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FecalColiformEColiConcentrationMeasurement.ID, ClusterIDMapping.FecalColiformEColiConcentrationMeasurement.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FecalColiformEColiConcentrationMeasurementCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFecalColiformEColiConcentrationMeasurementClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readFecalColiformEColiConcentrationMeasurementClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readFluorideConcentrationMeasurementInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readFluorideConcentrationMeasurementMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFluorideConcentrationMeasurementMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FluorideConcentrationMeasurement.ID, ClusterIDMapping.FluorideConcentrationMeasurement.Attribute.MeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FluorideConcentrationMeasurementCluster) cluster).readMeasuredValueAttribute(
//              (ChipClusters.FluorideConcentrationMeasurementCluster.MeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFluorideConcentrationMeasurementClusterMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFluorideConcentrationMeasurementMeasuredValueCommandParams
        );
        result.put("readMeasuredValueAttribute", readFluorideConcentrationMeasurementMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFluorideConcentrationMeasurementMinMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFluorideConcentrationMeasurementMinMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FluorideConcentrationMeasurement.ID, ClusterIDMapping.FluorideConcentrationMeasurement.Attribute.MinMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FluorideConcentrationMeasurementCluster) cluster).readMinMeasuredValueAttribute(
//              (ChipClusters.FluorideConcentrationMeasurementCluster.MinMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFluorideConcentrationMeasurementClusterMinMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFluorideConcentrationMeasurementMinMeasuredValueCommandParams
        );
        result.put("readMinMeasuredValueAttribute", readFluorideConcentrationMeasurementMinMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFluorideConcentrationMeasurementMaxMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFluorideConcentrationMeasurementMaxMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FluorideConcentrationMeasurement.ID, ClusterIDMapping.FluorideConcentrationMeasurement.Attribute.MaxMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FluorideConcentrationMeasurementCluster) cluster).readMaxMeasuredValueAttribute(
//              (ChipClusters.FluorideConcentrationMeasurementCluster.MaxMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFluorideConcentrationMeasurementClusterMaxMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFluorideConcentrationMeasurementMaxMeasuredValueCommandParams
        );
        result.put("readMaxMeasuredValueAttribute", readFluorideConcentrationMeasurementMaxMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFluorideConcentrationMeasurementPeakMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFluorideConcentrationMeasurementPeakMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FluorideConcentrationMeasurement.ID, ClusterIDMapping.FluorideConcentrationMeasurement.Attribute.PeakMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FluorideConcentrationMeasurementCluster) cluster).readPeakMeasuredValueAttribute(
//              (ChipClusters.FluorideConcentrationMeasurementCluster.PeakMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFluorideConcentrationMeasurementClusterPeakMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFluorideConcentrationMeasurementPeakMeasuredValueCommandParams
        );
        result.put("readPeakMeasuredValueAttribute", readFluorideConcentrationMeasurementPeakMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFluorideConcentrationMeasurementPeakMeasuredValueWindowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFluorideConcentrationMeasurementPeakMeasuredValueWindowAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FluorideConcentrationMeasurement.ID, ClusterIDMapping.FluorideConcentrationMeasurement.Attribute.PeakMeasuredValueWindow.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FluorideConcentrationMeasurementCluster) cluster).readPeakMeasuredValueWindowAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFluorideConcentrationMeasurementPeakMeasuredValueWindowCommandParams
        );
        result.put("readPeakMeasuredValueWindowAttribute", readFluorideConcentrationMeasurementPeakMeasuredValueWindowAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFluorideConcentrationMeasurementAverageMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFluorideConcentrationMeasurementAverageMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FluorideConcentrationMeasurement.ID, ClusterIDMapping.FluorideConcentrationMeasurement.Attribute.AverageMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FluorideConcentrationMeasurementCluster) cluster).readAverageMeasuredValueAttribute(
//              (ChipClusters.FluorideConcentrationMeasurementCluster.AverageMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFluorideConcentrationMeasurementClusterAverageMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFluorideConcentrationMeasurementAverageMeasuredValueCommandParams
        );
        result.put("readAverageMeasuredValueAttribute", readFluorideConcentrationMeasurementAverageMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFluorideConcentrationMeasurementAverageMeasuredValueWindowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFluorideConcentrationMeasurementAverageMeasuredValueWindowAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FluorideConcentrationMeasurement.ID, ClusterIDMapping.FluorideConcentrationMeasurement.Attribute.AverageMeasuredValueWindow.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FluorideConcentrationMeasurementCluster) cluster).readAverageMeasuredValueWindowAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFluorideConcentrationMeasurementAverageMeasuredValueWindowCommandParams
        );
        result.put("readAverageMeasuredValueWindowAttribute", readFluorideConcentrationMeasurementAverageMeasuredValueWindowAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFluorideConcentrationMeasurementUncertaintyCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFluorideConcentrationMeasurementUncertaintyAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FluorideConcentrationMeasurement.ID, ClusterIDMapping.FluorideConcentrationMeasurement.Attribute.Uncertainty.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FluorideConcentrationMeasurementCluster) cluster).readUncertaintyAttribute(
//              (ChipClusters.FloatAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFloatAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFluorideConcentrationMeasurementUncertaintyCommandParams
        );
        result.put("readUncertaintyAttribute", readFluorideConcentrationMeasurementUncertaintyAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFluorideConcentrationMeasurementMeasurementUnitCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFluorideConcentrationMeasurementMeasurementUnitAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FluorideConcentrationMeasurement.ID, ClusterIDMapping.FluorideConcentrationMeasurement.Attribute.MeasurementUnit.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FluorideConcentrationMeasurementCluster) cluster).readMeasurementUnitAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFluorideConcentrationMeasurementMeasurementUnitCommandParams
        );
        result.put("readMeasurementUnitAttribute", readFluorideConcentrationMeasurementMeasurementUnitAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFluorideConcentrationMeasurementMeasurementMediumCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFluorideConcentrationMeasurementMeasurementMediumAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FluorideConcentrationMeasurement.ID, ClusterIDMapping.FluorideConcentrationMeasurement.Attribute.MeasurementMedium.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FluorideConcentrationMeasurementCluster) cluster).readMeasurementMediumAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFluorideConcentrationMeasurementMeasurementMediumCommandParams
        );
        result.put("readMeasurementMediumAttribute", readFluorideConcentrationMeasurementMeasurementMediumAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFluorideConcentrationMeasurementLevelValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFluorideConcentrationMeasurementLevelValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FluorideConcentrationMeasurement.ID, ClusterIDMapping.FluorideConcentrationMeasurement.Attribute.LevelValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FluorideConcentrationMeasurementCluster) cluster).readLevelValueAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFluorideConcentrationMeasurementLevelValueCommandParams
        );
        result.put("readLevelValueAttribute", readFluorideConcentrationMeasurementLevelValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFluorideConcentrationMeasurementGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFluorideConcentrationMeasurementGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FluorideConcentrationMeasurement.ID, ClusterIDMapping.FluorideConcentrationMeasurement.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FluorideConcentrationMeasurementCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.FluorideConcentrationMeasurementCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFluorideConcentrationMeasurementClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFluorideConcentrationMeasurementGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readFluorideConcentrationMeasurementGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFluorideConcentrationMeasurementAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFluorideConcentrationMeasurementAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FluorideConcentrationMeasurement.ID, ClusterIDMapping.FluorideConcentrationMeasurement.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FluorideConcentrationMeasurementCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.FluorideConcentrationMeasurementCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFluorideConcentrationMeasurementClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFluorideConcentrationMeasurementAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readFluorideConcentrationMeasurementAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFluorideConcentrationMeasurementEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFluorideConcentrationMeasurementEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FluorideConcentrationMeasurement.ID, ClusterIDMapping.FluorideConcentrationMeasurement.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FluorideConcentrationMeasurementCluster) cluster).readEventListAttribute(
//              (ChipClusters.FluorideConcentrationMeasurementCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFluorideConcentrationMeasurementClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFluorideConcentrationMeasurementEventListCommandParams
        );
        result.put("readEventListAttribute", readFluorideConcentrationMeasurementEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFluorideConcentrationMeasurementAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFluorideConcentrationMeasurementAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FluorideConcentrationMeasurement.ID, ClusterIDMapping.FluorideConcentrationMeasurement.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FluorideConcentrationMeasurementCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.FluorideConcentrationMeasurementCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFluorideConcentrationMeasurementClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFluorideConcentrationMeasurementAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readFluorideConcentrationMeasurementAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFluorideConcentrationMeasurementFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFluorideConcentrationMeasurementFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FluorideConcentrationMeasurement.ID, ClusterIDMapping.FluorideConcentrationMeasurement.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FluorideConcentrationMeasurementCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFluorideConcentrationMeasurementFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readFluorideConcentrationMeasurementFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFluorideConcentrationMeasurementClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFluorideConcentrationMeasurementClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FluorideConcentrationMeasurement.ID, ClusterIDMapping.FluorideConcentrationMeasurement.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FluorideConcentrationMeasurementCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFluorideConcentrationMeasurementClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readFluorideConcentrationMeasurementClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readHaloaceticAcidsConcentrationMeasurementInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readHaloaceticAcidsConcentrationMeasurementMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readHaloaceticAcidsConcentrationMeasurementMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.HaloaceticAcidsConcentrationMeasurement.ID, ClusterIDMapping.HaloaceticAcidsConcentrationMeasurement.Attribute.MeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.HaloaceticAcidsConcentrationMeasurementCluster) cluster).readMeasuredValueAttribute(
//              (ChipClusters.HaloaceticAcidsConcentrationMeasurementCluster.MeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedHaloaceticAcidsConcentrationMeasurementClusterMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readHaloaceticAcidsConcentrationMeasurementMeasuredValueCommandParams
        );
        result.put("readMeasuredValueAttribute", readHaloaceticAcidsConcentrationMeasurementMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readHaloaceticAcidsConcentrationMeasurementMinMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readHaloaceticAcidsConcentrationMeasurementMinMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.HaloaceticAcidsConcentrationMeasurement.ID, ClusterIDMapping.HaloaceticAcidsConcentrationMeasurement.Attribute.MinMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.HaloaceticAcidsConcentrationMeasurementCluster) cluster).readMinMeasuredValueAttribute(
//              (ChipClusters.HaloaceticAcidsConcentrationMeasurementCluster.MinMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedHaloaceticAcidsConcentrationMeasurementClusterMinMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readHaloaceticAcidsConcentrationMeasurementMinMeasuredValueCommandParams
        );
        result.put("readMinMeasuredValueAttribute", readHaloaceticAcidsConcentrationMeasurementMinMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readHaloaceticAcidsConcentrationMeasurementMaxMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readHaloaceticAcidsConcentrationMeasurementMaxMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.HaloaceticAcidsConcentrationMeasurement.ID, ClusterIDMapping.HaloaceticAcidsConcentrationMeasurement.Attribute.MaxMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.HaloaceticAcidsConcentrationMeasurementCluster) cluster).readMaxMeasuredValueAttribute(
//              (ChipClusters.HaloaceticAcidsConcentrationMeasurementCluster.MaxMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedHaloaceticAcidsConcentrationMeasurementClusterMaxMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readHaloaceticAcidsConcentrationMeasurementMaxMeasuredValueCommandParams
        );
        result.put("readMaxMeasuredValueAttribute", readHaloaceticAcidsConcentrationMeasurementMaxMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readHaloaceticAcidsConcentrationMeasurementPeakMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readHaloaceticAcidsConcentrationMeasurementPeakMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.HaloaceticAcidsConcentrationMeasurement.ID, ClusterIDMapping.HaloaceticAcidsConcentrationMeasurement.Attribute.PeakMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.HaloaceticAcidsConcentrationMeasurementCluster) cluster).readPeakMeasuredValueAttribute(
//              (ChipClusters.HaloaceticAcidsConcentrationMeasurementCluster.PeakMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedHaloaceticAcidsConcentrationMeasurementClusterPeakMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readHaloaceticAcidsConcentrationMeasurementPeakMeasuredValueCommandParams
        );
        result.put("readPeakMeasuredValueAttribute", readHaloaceticAcidsConcentrationMeasurementPeakMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readHaloaceticAcidsConcentrationMeasurementPeakMeasuredValueWindowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readHaloaceticAcidsConcentrationMeasurementPeakMeasuredValueWindowAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.HaloaceticAcidsConcentrationMeasurement.ID, ClusterIDMapping.HaloaceticAcidsConcentrationMeasurement.Attribute.PeakMeasuredValueWindow.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.HaloaceticAcidsConcentrationMeasurementCluster) cluster).readPeakMeasuredValueWindowAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readHaloaceticAcidsConcentrationMeasurementPeakMeasuredValueWindowCommandParams
        );
        result.put("readPeakMeasuredValueWindowAttribute", readHaloaceticAcidsConcentrationMeasurementPeakMeasuredValueWindowAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readHaloaceticAcidsConcentrationMeasurementAverageMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readHaloaceticAcidsConcentrationMeasurementAverageMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.HaloaceticAcidsConcentrationMeasurement.ID, ClusterIDMapping.HaloaceticAcidsConcentrationMeasurement.Attribute.AverageMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.HaloaceticAcidsConcentrationMeasurementCluster) cluster).readAverageMeasuredValueAttribute(
//              (ChipClusters.HaloaceticAcidsConcentrationMeasurementCluster.AverageMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedHaloaceticAcidsConcentrationMeasurementClusterAverageMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readHaloaceticAcidsConcentrationMeasurementAverageMeasuredValueCommandParams
        );
        result.put("readAverageMeasuredValueAttribute", readHaloaceticAcidsConcentrationMeasurementAverageMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readHaloaceticAcidsConcentrationMeasurementAverageMeasuredValueWindowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readHaloaceticAcidsConcentrationMeasurementAverageMeasuredValueWindowAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.HaloaceticAcidsConcentrationMeasurement.ID, ClusterIDMapping.HaloaceticAcidsConcentrationMeasurement.Attribute.AverageMeasuredValueWindow.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.HaloaceticAcidsConcentrationMeasurementCluster) cluster).readAverageMeasuredValueWindowAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readHaloaceticAcidsConcentrationMeasurementAverageMeasuredValueWindowCommandParams
        );
        result.put("readAverageMeasuredValueWindowAttribute", readHaloaceticAcidsConcentrationMeasurementAverageMeasuredValueWindowAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readHaloaceticAcidsConcentrationMeasurementUncertaintyCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readHaloaceticAcidsConcentrationMeasurementUncertaintyAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.HaloaceticAcidsConcentrationMeasurement.ID, ClusterIDMapping.HaloaceticAcidsConcentrationMeasurement.Attribute.Uncertainty.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.HaloaceticAcidsConcentrationMeasurementCluster) cluster).readUncertaintyAttribute(
//              (ChipClusters.FloatAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFloatAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readHaloaceticAcidsConcentrationMeasurementUncertaintyCommandParams
        );
        result.put("readUncertaintyAttribute", readHaloaceticAcidsConcentrationMeasurementUncertaintyAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readHaloaceticAcidsConcentrationMeasurementMeasurementUnitCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readHaloaceticAcidsConcentrationMeasurementMeasurementUnitAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.HaloaceticAcidsConcentrationMeasurement.ID, ClusterIDMapping.HaloaceticAcidsConcentrationMeasurement.Attribute.MeasurementUnit.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.HaloaceticAcidsConcentrationMeasurementCluster) cluster).readMeasurementUnitAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readHaloaceticAcidsConcentrationMeasurementMeasurementUnitCommandParams
        );
        result.put("readMeasurementUnitAttribute", readHaloaceticAcidsConcentrationMeasurementMeasurementUnitAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readHaloaceticAcidsConcentrationMeasurementMeasurementMediumCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readHaloaceticAcidsConcentrationMeasurementMeasurementMediumAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.HaloaceticAcidsConcentrationMeasurement.ID, ClusterIDMapping.HaloaceticAcidsConcentrationMeasurement.Attribute.MeasurementMedium.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.HaloaceticAcidsConcentrationMeasurementCluster) cluster).readMeasurementMediumAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readHaloaceticAcidsConcentrationMeasurementMeasurementMediumCommandParams
        );
        result.put("readMeasurementMediumAttribute", readHaloaceticAcidsConcentrationMeasurementMeasurementMediumAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readHaloaceticAcidsConcentrationMeasurementLevelValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readHaloaceticAcidsConcentrationMeasurementLevelValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.HaloaceticAcidsConcentrationMeasurement.ID, ClusterIDMapping.HaloaceticAcidsConcentrationMeasurement.Attribute.LevelValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.HaloaceticAcidsConcentrationMeasurementCluster) cluster).readLevelValueAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readHaloaceticAcidsConcentrationMeasurementLevelValueCommandParams
        );
        result.put("readLevelValueAttribute", readHaloaceticAcidsConcentrationMeasurementLevelValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readHaloaceticAcidsConcentrationMeasurementGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readHaloaceticAcidsConcentrationMeasurementGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.HaloaceticAcidsConcentrationMeasurement.ID, ClusterIDMapping.HaloaceticAcidsConcentrationMeasurement.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.HaloaceticAcidsConcentrationMeasurementCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.HaloaceticAcidsConcentrationMeasurementCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedHaloaceticAcidsConcentrationMeasurementClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readHaloaceticAcidsConcentrationMeasurementGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readHaloaceticAcidsConcentrationMeasurementGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readHaloaceticAcidsConcentrationMeasurementAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readHaloaceticAcidsConcentrationMeasurementAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.HaloaceticAcidsConcentrationMeasurement.ID, ClusterIDMapping.HaloaceticAcidsConcentrationMeasurement.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.HaloaceticAcidsConcentrationMeasurementCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.HaloaceticAcidsConcentrationMeasurementCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedHaloaceticAcidsConcentrationMeasurementClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readHaloaceticAcidsConcentrationMeasurementAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readHaloaceticAcidsConcentrationMeasurementAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readHaloaceticAcidsConcentrationMeasurementEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readHaloaceticAcidsConcentrationMeasurementEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.HaloaceticAcidsConcentrationMeasurement.ID, ClusterIDMapping.HaloaceticAcidsConcentrationMeasurement.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.HaloaceticAcidsConcentrationMeasurementCluster) cluster).readEventListAttribute(
//              (ChipClusters.HaloaceticAcidsConcentrationMeasurementCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedHaloaceticAcidsConcentrationMeasurementClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readHaloaceticAcidsConcentrationMeasurementEventListCommandParams
        );
        result.put("readEventListAttribute", readHaloaceticAcidsConcentrationMeasurementEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readHaloaceticAcidsConcentrationMeasurementAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readHaloaceticAcidsConcentrationMeasurementAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.HaloaceticAcidsConcentrationMeasurement.ID, ClusterIDMapping.HaloaceticAcidsConcentrationMeasurement.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.HaloaceticAcidsConcentrationMeasurementCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.HaloaceticAcidsConcentrationMeasurementCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedHaloaceticAcidsConcentrationMeasurementClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readHaloaceticAcidsConcentrationMeasurementAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readHaloaceticAcidsConcentrationMeasurementAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readHaloaceticAcidsConcentrationMeasurementFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readHaloaceticAcidsConcentrationMeasurementFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.HaloaceticAcidsConcentrationMeasurement.ID, ClusterIDMapping.HaloaceticAcidsConcentrationMeasurement.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.HaloaceticAcidsConcentrationMeasurementCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readHaloaceticAcidsConcentrationMeasurementFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readHaloaceticAcidsConcentrationMeasurementFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readHaloaceticAcidsConcentrationMeasurementClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readHaloaceticAcidsConcentrationMeasurementClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.HaloaceticAcidsConcentrationMeasurement.ID, ClusterIDMapping.HaloaceticAcidsConcentrationMeasurement.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.HaloaceticAcidsConcentrationMeasurementCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readHaloaceticAcidsConcentrationMeasurementClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readHaloaceticAcidsConcentrationMeasurementClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readTotalTrihalomethanesConcentrationMeasurementInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readTotalTrihalomethanesConcentrationMeasurementMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTotalTrihalomethanesConcentrationMeasurementMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TotalTrihalomethanesConcentrationMeasurement.ID, ClusterIDMapping.TotalTrihalomethanesConcentrationMeasurement.Attribute.MeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TotalTrihalomethanesConcentrationMeasurementCluster) cluster).readMeasuredValueAttribute(
//              (ChipClusters.TotalTrihalomethanesConcentrationMeasurementCluster.MeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedTotalTrihalomethanesConcentrationMeasurementClusterMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTotalTrihalomethanesConcentrationMeasurementMeasuredValueCommandParams
        );
        result.put("readMeasuredValueAttribute", readTotalTrihalomethanesConcentrationMeasurementMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTotalTrihalomethanesConcentrationMeasurementMinMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTotalTrihalomethanesConcentrationMeasurementMinMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TotalTrihalomethanesConcentrationMeasurement.ID, ClusterIDMapping.TotalTrihalomethanesConcentrationMeasurement.Attribute.MinMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TotalTrihalomethanesConcentrationMeasurementCluster) cluster).readMinMeasuredValueAttribute(
//              (ChipClusters.TotalTrihalomethanesConcentrationMeasurementCluster.MinMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedTotalTrihalomethanesConcentrationMeasurementClusterMinMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTotalTrihalomethanesConcentrationMeasurementMinMeasuredValueCommandParams
        );
        result.put("readMinMeasuredValueAttribute", readTotalTrihalomethanesConcentrationMeasurementMinMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTotalTrihalomethanesConcentrationMeasurementMaxMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTotalTrihalomethanesConcentrationMeasurementMaxMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TotalTrihalomethanesConcentrationMeasurement.ID, ClusterIDMapping.TotalTrihalomethanesConcentrationMeasurement.Attribute.MaxMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TotalTrihalomethanesConcentrationMeasurementCluster) cluster).readMaxMeasuredValueAttribute(
//              (ChipClusters.TotalTrihalomethanesConcentrationMeasurementCluster.MaxMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedTotalTrihalomethanesConcentrationMeasurementClusterMaxMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTotalTrihalomethanesConcentrationMeasurementMaxMeasuredValueCommandParams
        );
        result.put("readMaxMeasuredValueAttribute", readTotalTrihalomethanesConcentrationMeasurementMaxMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTotalTrihalomethanesConcentrationMeasurementPeakMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTotalTrihalomethanesConcentrationMeasurementPeakMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TotalTrihalomethanesConcentrationMeasurement.ID, ClusterIDMapping.TotalTrihalomethanesConcentrationMeasurement.Attribute.PeakMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TotalTrihalomethanesConcentrationMeasurementCluster) cluster).readPeakMeasuredValueAttribute(
//              (ChipClusters.TotalTrihalomethanesConcentrationMeasurementCluster.PeakMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedTotalTrihalomethanesConcentrationMeasurementClusterPeakMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTotalTrihalomethanesConcentrationMeasurementPeakMeasuredValueCommandParams
        );
        result.put("readPeakMeasuredValueAttribute", readTotalTrihalomethanesConcentrationMeasurementPeakMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTotalTrihalomethanesConcentrationMeasurementPeakMeasuredValueWindowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTotalTrihalomethanesConcentrationMeasurementPeakMeasuredValueWindowAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TotalTrihalomethanesConcentrationMeasurement.ID, ClusterIDMapping.TotalTrihalomethanesConcentrationMeasurement.Attribute.PeakMeasuredValueWindow.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TotalTrihalomethanesConcentrationMeasurementCluster) cluster).readPeakMeasuredValueWindowAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTotalTrihalomethanesConcentrationMeasurementPeakMeasuredValueWindowCommandParams
        );
        result.put("readPeakMeasuredValueWindowAttribute", readTotalTrihalomethanesConcentrationMeasurementPeakMeasuredValueWindowAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTotalTrihalomethanesConcentrationMeasurementAverageMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTotalTrihalomethanesConcentrationMeasurementAverageMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TotalTrihalomethanesConcentrationMeasurement.ID, ClusterIDMapping.TotalTrihalomethanesConcentrationMeasurement.Attribute.AverageMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TotalTrihalomethanesConcentrationMeasurementCluster) cluster).readAverageMeasuredValueAttribute(
//              (ChipClusters.TotalTrihalomethanesConcentrationMeasurementCluster.AverageMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedTotalTrihalomethanesConcentrationMeasurementClusterAverageMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTotalTrihalomethanesConcentrationMeasurementAverageMeasuredValueCommandParams
        );
        result.put("readAverageMeasuredValueAttribute", readTotalTrihalomethanesConcentrationMeasurementAverageMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTotalTrihalomethanesConcentrationMeasurementAverageMeasuredValueWindowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTotalTrihalomethanesConcentrationMeasurementAverageMeasuredValueWindowAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TotalTrihalomethanesConcentrationMeasurement.ID, ClusterIDMapping.TotalTrihalomethanesConcentrationMeasurement.Attribute.AverageMeasuredValueWindow.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TotalTrihalomethanesConcentrationMeasurementCluster) cluster).readAverageMeasuredValueWindowAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTotalTrihalomethanesConcentrationMeasurementAverageMeasuredValueWindowCommandParams
        );
        result.put("readAverageMeasuredValueWindowAttribute", readTotalTrihalomethanesConcentrationMeasurementAverageMeasuredValueWindowAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTotalTrihalomethanesConcentrationMeasurementUncertaintyCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTotalTrihalomethanesConcentrationMeasurementUncertaintyAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TotalTrihalomethanesConcentrationMeasurement.ID, ClusterIDMapping.TotalTrihalomethanesConcentrationMeasurement.Attribute.Uncertainty.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TotalTrihalomethanesConcentrationMeasurementCluster) cluster).readUncertaintyAttribute(
//              (ChipClusters.FloatAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFloatAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTotalTrihalomethanesConcentrationMeasurementUncertaintyCommandParams
        );
        result.put("readUncertaintyAttribute", readTotalTrihalomethanesConcentrationMeasurementUncertaintyAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTotalTrihalomethanesConcentrationMeasurementMeasurementUnitCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTotalTrihalomethanesConcentrationMeasurementMeasurementUnitAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TotalTrihalomethanesConcentrationMeasurement.ID, ClusterIDMapping.TotalTrihalomethanesConcentrationMeasurement.Attribute.MeasurementUnit.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TotalTrihalomethanesConcentrationMeasurementCluster) cluster).readMeasurementUnitAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTotalTrihalomethanesConcentrationMeasurementMeasurementUnitCommandParams
        );
        result.put("readMeasurementUnitAttribute", readTotalTrihalomethanesConcentrationMeasurementMeasurementUnitAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTotalTrihalomethanesConcentrationMeasurementMeasurementMediumCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTotalTrihalomethanesConcentrationMeasurementMeasurementMediumAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TotalTrihalomethanesConcentrationMeasurement.ID, ClusterIDMapping.TotalTrihalomethanesConcentrationMeasurement.Attribute.MeasurementMedium.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TotalTrihalomethanesConcentrationMeasurementCluster) cluster).readMeasurementMediumAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTotalTrihalomethanesConcentrationMeasurementMeasurementMediumCommandParams
        );
        result.put("readMeasurementMediumAttribute", readTotalTrihalomethanesConcentrationMeasurementMeasurementMediumAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTotalTrihalomethanesConcentrationMeasurementLevelValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTotalTrihalomethanesConcentrationMeasurementLevelValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TotalTrihalomethanesConcentrationMeasurement.ID, ClusterIDMapping.TotalTrihalomethanesConcentrationMeasurement.Attribute.LevelValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TotalTrihalomethanesConcentrationMeasurementCluster) cluster).readLevelValueAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTotalTrihalomethanesConcentrationMeasurementLevelValueCommandParams
        );
        result.put("readLevelValueAttribute", readTotalTrihalomethanesConcentrationMeasurementLevelValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTotalTrihalomethanesConcentrationMeasurementGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTotalTrihalomethanesConcentrationMeasurementGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TotalTrihalomethanesConcentrationMeasurement.ID, ClusterIDMapping.TotalTrihalomethanesConcentrationMeasurement.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TotalTrihalomethanesConcentrationMeasurementCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.TotalTrihalomethanesConcentrationMeasurementCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedTotalTrihalomethanesConcentrationMeasurementClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTotalTrihalomethanesConcentrationMeasurementGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readTotalTrihalomethanesConcentrationMeasurementGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTotalTrihalomethanesConcentrationMeasurementAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTotalTrihalomethanesConcentrationMeasurementAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TotalTrihalomethanesConcentrationMeasurement.ID, ClusterIDMapping.TotalTrihalomethanesConcentrationMeasurement.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TotalTrihalomethanesConcentrationMeasurementCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.TotalTrihalomethanesConcentrationMeasurementCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedTotalTrihalomethanesConcentrationMeasurementClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTotalTrihalomethanesConcentrationMeasurementAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readTotalTrihalomethanesConcentrationMeasurementAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTotalTrihalomethanesConcentrationMeasurementEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTotalTrihalomethanesConcentrationMeasurementEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TotalTrihalomethanesConcentrationMeasurement.ID, ClusterIDMapping.TotalTrihalomethanesConcentrationMeasurement.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TotalTrihalomethanesConcentrationMeasurementCluster) cluster).readEventListAttribute(
//              (ChipClusters.TotalTrihalomethanesConcentrationMeasurementCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedTotalTrihalomethanesConcentrationMeasurementClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTotalTrihalomethanesConcentrationMeasurementEventListCommandParams
        );
        result.put("readEventListAttribute", readTotalTrihalomethanesConcentrationMeasurementEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTotalTrihalomethanesConcentrationMeasurementAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTotalTrihalomethanesConcentrationMeasurementAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TotalTrihalomethanesConcentrationMeasurement.ID, ClusterIDMapping.TotalTrihalomethanesConcentrationMeasurement.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TotalTrihalomethanesConcentrationMeasurementCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.TotalTrihalomethanesConcentrationMeasurementCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedTotalTrihalomethanesConcentrationMeasurementClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTotalTrihalomethanesConcentrationMeasurementAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readTotalTrihalomethanesConcentrationMeasurementAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTotalTrihalomethanesConcentrationMeasurementFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTotalTrihalomethanesConcentrationMeasurementFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TotalTrihalomethanesConcentrationMeasurement.ID, ClusterIDMapping.TotalTrihalomethanesConcentrationMeasurement.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TotalTrihalomethanesConcentrationMeasurementCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTotalTrihalomethanesConcentrationMeasurementFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readTotalTrihalomethanesConcentrationMeasurementFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTotalTrihalomethanesConcentrationMeasurementClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTotalTrihalomethanesConcentrationMeasurementClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TotalTrihalomethanesConcentrationMeasurement.ID, ClusterIDMapping.TotalTrihalomethanesConcentrationMeasurement.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TotalTrihalomethanesConcentrationMeasurementCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTotalTrihalomethanesConcentrationMeasurementClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readTotalTrihalomethanesConcentrationMeasurementClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readTotalColiformBacteriaConcentrationMeasurementInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readTotalColiformBacteriaConcentrationMeasurementMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTotalColiformBacteriaConcentrationMeasurementMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TotalColiformBacteriaConcentrationMeasurement.ID, ClusterIDMapping.TotalColiformBacteriaConcentrationMeasurement.Attribute.MeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TotalColiformBacteriaConcentrationMeasurementCluster) cluster).readMeasuredValueAttribute(
//              (ChipClusters.TotalColiformBacteriaConcentrationMeasurementCluster.MeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedTotalColiformBacteriaConcentrationMeasurementClusterMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTotalColiformBacteriaConcentrationMeasurementMeasuredValueCommandParams
        );
        result.put("readMeasuredValueAttribute", readTotalColiformBacteriaConcentrationMeasurementMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTotalColiformBacteriaConcentrationMeasurementMinMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTotalColiformBacteriaConcentrationMeasurementMinMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TotalColiformBacteriaConcentrationMeasurement.ID, ClusterIDMapping.TotalColiformBacteriaConcentrationMeasurement.Attribute.MinMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TotalColiformBacteriaConcentrationMeasurementCluster) cluster).readMinMeasuredValueAttribute(
//              (ChipClusters.TotalColiformBacteriaConcentrationMeasurementCluster.MinMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedTotalColiformBacteriaConcentrationMeasurementClusterMinMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTotalColiformBacteriaConcentrationMeasurementMinMeasuredValueCommandParams
        );
        result.put("readMinMeasuredValueAttribute", readTotalColiformBacteriaConcentrationMeasurementMinMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTotalColiformBacteriaConcentrationMeasurementMaxMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTotalColiformBacteriaConcentrationMeasurementMaxMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TotalColiformBacteriaConcentrationMeasurement.ID, ClusterIDMapping.TotalColiformBacteriaConcentrationMeasurement.Attribute.MaxMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TotalColiformBacteriaConcentrationMeasurementCluster) cluster).readMaxMeasuredValueAttribute(
//              (ChipClusters.TotalColiformBacteriaConcentrationMeasurementCluster.MaxMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedTotalColiformBacteriaConcentrationMeasurementClusterMaxMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTotalColiformBacteriaConcentrationMeasurementMaxMeasuredValueCommandParams
        );
        result.put("readMaxMeasuredValueAttribute", readTotalColiformBacteriaConcentrationMeasurementMaxMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTotalColiformBacteriaConcentrationMeasurementPeakMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTotalColiformBacteriaConcentrationMeasurementPeakMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TotalColiformBacteriaConcentrationMeasurement.ID, ClusterIDMapping.TotalColiformBacteriaConcentrationMeasurement.Attribute.PeakMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TotalColiformBacteriaConcentrationMeasurementCluster) cluster).readPeakMeasuredValueAttribute(
//              (ChipClusters.TotalColiformBacteriaConcentrationMeasurementCluster.PeakMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedTotalColiformBacteriaConcentrationMeasurementClusterPeakMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTotalColiformBacteriaConcentrationMeasurementPeakMeasuredValueCommandParams
        );
        result.put("readPeakMeasuredValueAttribute", readTotalColiformBacteriaConcentrationMeasurementPeakMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTotalColiformBacteriaConcentrationMeasurementPeakMeasuredValueWindowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTotalColiformBacteriaConcentrationMeasurementPeakMeasuredValueWindowAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TotalColiformBacteriaConcentrationMeasurement.ID, ClusterIDMapping.TotalColiformBacteriaConcentrationMeasurement.Attribute.PeakMeasuredValueWindow.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TotalColiformBacteriaConcentrationMeasurementCluster) cluster).readPeakMeasuredValueWindowAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTotalColiformBacteriaConcentrationMeasurementPeakMeasuredValueWindowCommandParams
        );
        result.put("readPeakMeasuredValueWindowAttribute", readTotalColiformBacteriaConcentrationMeasurementPeakMeasuredValueWindowAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTotalColiformBacteriaConcentrationMeasurementAverageMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTotalColiformBacteriaConcentrationMeasurementAverageMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TotalColiformBacteriaConcentrationMeasurement.ID, ClusterIDMapping.TotalColiformBacteriaConcentrationMeasurement.Attribute.AverageMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TotalColiformBacteriaConcentrationMeasurementCluster) cluster).readAverageMeasuredValueAttribute(
//              (ChipClusters.TotalColiformBacteriaConcentrationMeasurementCluster.AverageMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedTotalColiformBacteriaConcentrationMeasurementClusterAverageMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTotalColiformBacteriaConcentrationMeasurementAverageMeasuredValueCommandParams
        );
        result.put("readAverageMeasuredValueAttribute", readTotalColiformBacteriaConcentrationMeasurementAverageMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTotalColiformBacteriaConcentrationMeasurementAverageMeasuredValueWindowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTotalColiformBacteriaConcentrationMeasurementAverageMeasuredValueWindowAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TotalColiformBacteriaConcentrationMeasurement.ID, ClusterIDMapping.TotalColiformBacteriaConcentrationMeasurement.Attribute.AverageMeasuredValueWindow.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TotalColiformBacteriaConcentrationMeasurementCluster) cluster).readAverageMeasuredValueWindowAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTotalColiformBacteriaConcentrationMeasurementAverageMeasuredValueWindowCommandParams
        );
        result.put("readAverageMeasuredValueWindowAttribute", readTotalColiformBacteriaConcentrationMeasurementAverageMeasuredValueWindowAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTotalColiformBacteriaConcentrationMeasurementUncertaintyCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTotalColiformBacteriaConcentrationMeasurementUncertaintyAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TotalColiformBacteriaConcentrationMeasurement.ID, ClusterIDMapping.TotalColiformBacteriaConcentrationMeasurement.Attribute.Uncertainty.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TotalColiformBacteriaConcentrationMeasurementCluster) cluster).readUncertaintyAttribute(
//              (ChipClusters.FloatAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFloatAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTotalColiformBacteriaConcentrationMeasurementUncertaintyCommandParams
        );
        result.put("readUncertaintyAttribute", readTotalColiformBacteriaConcentrationMeasurementUncertaintyAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTotalColiformBacteriaConcentrationMeasurementMeasurementUnitCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTotalColiformBacteriaConcentrationMeasurementMeasurementUnitAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TotalColiformBacteriaConcentrationMeasurement.ID, ClusterIDMapping.TotalColiformBacteriaConcentrationMeasurement.Attribute.MeasurementUnit.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TotalColiformBacteriaConcentrationMeasurementCluster) cluster).readMeasurementUnitAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTotalColiformBacteriaConcentrationMeasurementMeasurementUnitCommandParams
        );
        result.put("readMeasurementUnitAttribute", readTotalColiformBacteriaConcentrationMeasurementMeasurementUnitAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTotalColiformBacteriaConcentrationMeasurementMeasurementMediumCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTotalColiformBacteriaConcentrationMeasurementMeasurementMediumAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TotalColiformBacteriaConcentrationMeasurement.ID, ClusterIDMapping.TotalColiformBacteriaConcentrationMeasurement.Attribute.MeasurementMedium.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TotalColiformBacteriaConcentrationMeasurementCluster) cluster).readMeasurementMediumAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTotalColiformBacteriaConcentrationMeasurementMeasurementMediumCommandParams
        );
        result.put("readMeasurementMediumAttribute", readTotalColiformBacteriaConcentrationMeasurementMeasurementMediumAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTotalColiformBacteriaConcentrationMeasurementLevelValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTotalColiformBacteriaConcentrationMeasurementLevelValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TotalColiformBacteriaConcentrationMeasurement.ID, ClusterIDMapping.TotalColiformBacteriaConcentrationMeasurement.Attribute.LevelValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TotalColiformBacteriaConcentrationMeasurementCluster) cluster).readLevelValueAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTotalColiformBacteriaConcentrationMeasurementLevelValueCommandParams
        );
        result.put("readLevelValueAttribute", readTotalColiformBacteriaConcentrationMeasurementLevelValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTotalColiformBacteriaConcentrationMeasurementGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTotalColiformBacteriaConcentrationMeasurementGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TotalColiformBacteriaConcentrationMeasurement.ID, ClusterIDMapping.TotalColiformBacteriaConcentrationMeasurement.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TotalColiformBacteriaConcentrationMeasurementCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.TotalColiformBacteriaConcentrationMeasurementCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedTotalColiformBacteriaConcentrationMeasurementClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTotalColiformBacteriaConcentrationMeasurementGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readTotalColiformBacteriaConcentrationMeasurementGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTotalColiformBacteriaConcentrationMeasurementAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTotalColiformBacteriaConcentrationMeasurementAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TotalColiformBacteriaConcentrationMeasurement.ID, ClusterIDMapping.TotalColiformBacteriaConcentrationMeasurement.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TotalColiformBacteriaConcentrationMeasurementCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.TotalColiformBacteriaConcentrationMeasurementCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedTotalColiformBacteriaConcentrationMeasurementClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTotalColiformBacteriaConcentrationMeasurementAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readTotalColiformBacteriaConcentrationMeasurementAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTotalColiformBacteriaConcentrationMeasurementEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTotalColiformBacteriaConcentrationMeasurementEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TotalColiformBacteriaConcentrationMeasurement.ID, ClusterIDMapping.TotalColiformBacteriaConcentrationMeasurement.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TotalColiformBacteriaConcentrationMeasurementCluster) cluster).readEventListAttribute(
//              (ChipClusters.TotalColiformBacteriaConcentrationMeasurementCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedTotalColiformBacteriaConcentrationMeasurementClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTotalColiformBacteriaConcentrationMeasurementEventListCommandParams
        );
        result.put("readEventListAttribute", readTotalColiformBacteriaConcentrationMeasurementEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTotalColiformBacteriaConcentrationMeasurementAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTotalColiformBacteriaConcentrationMeasurementAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TotalColiformBacteriaConcentrationMeasurement.ID, ClusterIDMapping.TotalColiformBacteriaConcentrationMeasurement.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TotalColiformBacteriaConcentrationMeasurementCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.TotalColiformBacteriaConcentrationMeasurementCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedTotalColiformBacteriaConcentrationMeasurementClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTotalColiformBacteriaConcentrationMeasurementAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readTotalColiformBacteriaConcentrationMeasurementAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTotalColiformBacteriaConcentrationMeasurementFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTotalColiformBacteriaConcentrationMeasurementFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TotalColiformBacteriaConcentrationMeasurement.ID, ClusterIDMapping.TotalColiformBacteriaConcentrationMeasurement.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TotalColiformBacteriaConcentrationMeasurementCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTotalColiformBacteriaConcentrationMeasurementFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readTotalColiformBacteriaConcentrationMeasurementFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTotalColiformBacteriaConcentrationMeasurementClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTotalColiformBacteriaConcentrationMeasurementClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TotalColiformBacteriaConcentrationMeasurement.ID, ClusterIDMapping.TotalColiformBacteriaConcentrationMeasurement.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TotalColiformBacteriaConcentrationMeasurementCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTotalColiformBacteriaConcentrationMeasurementClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readTotalColiformBacteriaConcentrationMeasurementClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readTurbidityConcentrationMeasurementInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readTurbidityConcentrationMeasurementMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTurbidityConcentrationMeasurementMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TurbidityConcentrationMeasurement.ID, ClusterIDMapping.TurbidityConcentrationMeasurement.Attribute.MeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TurbidityConcentrationMeasurementCluster) cluster).readMeasuredValueAttribute(
//              (ChipClusters.TurbidityConcentrationMeasurementCluster.MeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedTurbidityConcentrationMeasurementClusterMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTurbidityConcentrationMeasurementMeasuredValueCommandParams
        );
        result.put("readMeasuredValueAttribute", readTurbidityConcentrationMeasurementMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTurbidityConcentrationMeasurementMinMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTurbidityConcentrationMeasurementMinMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TurbidityConcentrationMeasurement.ID, ClusterIDMapping.TurbidityConcentrationMeasurement.Attribute.MinMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TurbidityConcentrationMeasurementCluster) cluster).readMinMeasuredValueAttribute(
//              (ChipClusters.TurbidityConcentrationMeasurementCluster.MinMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedTurbidityConcentrationMeasurementClusterMinMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTurbidityConcentrationMeasurementMinMeasuredValueCommandParams
        );
        result.put("readMinMeasuredValueAttribute", readTurbidityConcentrationMeasurementMinMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTurbidityConcentrationMeasurementMaxMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTurbidityConcentrationMeasurementMaxMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TurbidityConcentrationMeasurement.ID, ClusterIDMapping.TurbidityConcentrationMeasurement.Attribute.MaxMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TurbidityConcentrationMeasurementCluster) cluster).readMaxMeasuredValueAttribute(
//              (ChipClusters.TurbidityConcentrationMeasurementCluster.MaxMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedTurbidityConcentrationMeasurementClusterMaxMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTurbidityConcentrationMeasurementMaxMeasuredValueCommandParams
        );
        result.put("readMaxMeasuredValueAttribute", readTurbidityConcentrationMeasurementMaxMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTurbidityConcentrationMeasurementPeakMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTurbidityConcentrationMeasurementPeakMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TurbidityConcentrationMeasurement.ID, ClusterIDMapping.TurbidityConcentrationMeasurement.Attribute.PeakMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TurbidityConcentrationMeasurementCluster) cluster).readPeakMeasuredValueAttribute(
//              (ChipClusters.TurbidityConcentrationMeasurementCluster.PeakMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedTurbidityConcentrationMeasurementClusterPeakMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTurbidityConcentrationMeasurementPeakMeasuredValueCommandParams
        );
        result.put("readPeakMeasuredValueAttribute", readTurbidityConcentrationMeasurementPeakMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTurbidityConcentrationMeasurementPeakMeasuredValueWindowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTurbidityConcentrationMeasurementPeakMeasuredValueWindowAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TurbidityConcentrationMeasurement.ID, ClusterIDMapping.TurbidityConcentrationMeasurement.Attribute.PeakMeasuredValueWindow.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TurbidityConcentrationMeasurementCluster) cluster).readPeakMeasuredValueWindowAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTurbidityConcentrationMeasurementPeakMeasuredValueWindowCommandParams
        );
        result.put("readPeakMeasuredValueWindowAttribute", readTurbidityConcentrationMeasurementPeakMeasuredValueWindowAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTurbidityConcentrationMeasurementAverageMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTurbidityConcentrationMeasurementAverageMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TurbidityConcentrationMeasurement.ID, ClusterIDMapping.TurbidityConcentrationMeasurement.Attribute.AverageMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TurbidityConcentrationMeasurementCluster) cluster).readAverageMeasuredValueAttribute(
//              (ChipClusters.TurbidityConcentrationMeasurementCluster.AverageMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedTurbidityConcentrationMeasurementClusterAverageMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTurbidityConcentrationMeasurementAverageMeasuredValueCommandParams
        );
        result.put("readAverageMeasuredValueAttribute", readTurbidityConcentrationMeasurementAverageMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTurbidityConcentrationMeasurementAverageMeasuredValueWindowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTurbidityConcentrationMeasurementAverageMeasuredValueWindowAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TurbidityConcentrationMeasurement.ID, ClusterIDMapping.TurbidityConcentrationMeasurement.Attribute.AverageMeasuredValueWindow.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TurbidityConcentrationMeasurementCluster) cluster).readAverageMeasuredValueWindowAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTurbidityConcentrationMeasurementAverageMeasuredValueWindowCommandParams
        );
        result.put("readAverageMeasuredValueWindowAttribute", readTurbidityConcentrationMeasurementAverageMeasuredValueWindowAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTurbidityConcentrationMeasurementUncertaintyCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTurbidityConcentrationMeasurementUncertaintyAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TurbidityConcentrationMeasurement.ID, ClusterIDMapping.TurbidityConcentrationMeasurement.Attribute.Uncertainty.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TurbidityConcentrationMeasurementCluster) cluster).readUncertaintyAttribute(
//              (ChipClusters.FloatAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFloatAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTurbidityConcentrationMeasurementUncertaintyCommandParams
        );
        result.put("readUncertaintyAttribute", readTurbidityConcentrationMeasurementUncertaintyAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTurbidityConcentrationMeasurementMeasurementUnitCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTurbidityConcentrationMeasurementMeasurementUnitAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TurbidityConcentrationMeasurement.ID, ClusterIDMapping.TurbidityConcentrationMeasurement.Attribute.MeasurementUnit.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TurbidityConcentrationMeasurementCluster) cluster).readMeasurementUnitAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTurbidityConcentrationMeasurementMeasurementUnitCommandParams
        );
        result.put("readMeasurementUnitAttribute", readTurbidityConcentrationMeasurementMeasurementUnitAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTurbidityConcentrationMeasurementMeasurementMediumCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTurbidityConcentrationMeasurementMeasurementMediumAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TurbidityConcentrationMeasurement.ID, ClusterIDMapping.TurbidityConcentrationMeasurement.Attribute.MeasurementMedium.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TurbidityConcentrationMeasurementCluster) cluster).readMeasurementMediumAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTurbidityConcentrationMeasurementMeasurementMediumCommandParams
        );
        result.put("readMeasurementMediumAttribute", readTurbidityConcentrationMeasurementMeasurementMediumAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTurbidityConcentrationMeasurementLevelValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTurbidityConcentrationMeasurementLevelValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TurbidityConcentrationMeasurement.ID, ClusterIDMapping.TurbidityConcentrationMeasurement.Attribute.LevelValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TurbidityConcentrationMeasurementCluster) cluster).readLevelValueAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTurbidityConcentrationMeasurementLevelValueCommandParams
        );
        result.put("readLevelValueAttribute", readTurbidityConcentrationMeasurementLevelValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTurbidityConcentrationMeasurementGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTurbidityConcentrationMeasurementGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TurbidityConcentrationMeasurement.ID, ClusterIDMapping.TurbidityConcentrationMeasurement.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TurbidityConcentrationMeasurementCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.TurbidityConcentrationMeasurementCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedTurbidityConcentrationMeasurementClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTurbidityConcentrationMeasurementGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readTurbidityConcentrationMeasurementGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTurbidityConcentrationMeasurementAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTurbidityConcentrationMeasurementAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TurbidityConcentrationMeasurement.ID, ClusterIDMapping.TurbidityConcentrationMeasurement.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TurbidityConcentrationMeasurementCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.TurbidityConcentrationMeasurementCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedTurbidityConcentrationMeasurementClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTurbidityConcentrationMeasurementAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readTurbidityConcentrationMeasurementAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTurbidityConcentrationMeasurementEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTurbidityConcentrationMeasurementEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TurbidityConcentrationMeasurement.ID, ClusterIDMapping.TurbidityConcentrationMeasurement.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TurbidityConcentrationMeasurementCluster) cluster).readEventListAttribute(
//              (ChipClusters.TurbidityConcentrationMeasurementCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedTurbidityConcentrationMeasurementClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTurbidityConcentrationMeasurementEventListCommandParams
        );
        result.put("readEventListAttribute", readTurbidityConcentrationMeasurementEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTurbidityConcentrationMeasurementAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTurbidityConcentrationMeasurementAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TurbidityConcentrationMeasurement.ID, ClusterIDMapping.TurbidityConcentrationMeasurement.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TurbidityConcentrationMeasurementCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.TurbidityConcentrationMeasurementCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedTurbidityConcentrationMeasurementClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTurbidityConcentrationMeasurementAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readTurbidityConcentrationMeasurementAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTurbidityConcentrationMeasurementFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTurbidityConcentrationMeasurementFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TurbidityConcentrationMeasurement.ID, ClusterIDMapping.TurbidityConcentrationMeasurement.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TurbidityConcentrationMeasurementCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTurbidityConcentrationMeasurementFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readTurbidityConcentrationMeasurementFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTurbidityConcentrationMeasurementClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTurbidityConcentrationMeasurementClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TurbidityConcentrationMeasurement.ID, ClusterIDMapping.TurbidityConcentrationMeasurement.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TurbidityConcentrationMeasurementCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTurbidityConcentrationMeasurementClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readTurbidityConcentrationMeasurementClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readCopperConcentrationMeasurementInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readCopperConcentrationMeasurementMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readCopperConcentrationMeasurementMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.CopperConcentrationMeasurement.ID, ClusterIDMapping.CopperConcentrationMeasurement.Attribute.MeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.CopperConcentrationMeasurementCluster) cluster).readMeasuredValueAttribute(
//              (ChipClusters.CopperConcentrationMeasurementCluster.MeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedCopperConcentrationMeasurementClusterMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readCopperConcentrationMeasurementMeasuredValueCommandParams
        );
        result.put("readMeasuredValueAttribute", readCopperConcentrationMeasurementMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readCopperConcentrationMeasurementMinMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readCopperConcentrationMeasurementMinMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.CopperConcentrationMeasurement.ID, ClusterIDMapping.CopperConcentrationMeasurement.Attribute.MinMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.CopperConcentrationMeasurementCluster) cluster).readMinMeasuredValueAttribute(
//              (ChipClusters.CopperConcentrationMeasurementCluster.MinMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedCopperConcentrationMeasurementClusterMinMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readCopperConcentrationMeasurementMinMeasuredValueCommandParams
        );
        result.put("readMinMeasuredValueAttribute", readCopperConcentrationMeasurementMinMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readCopperConcentrationMeasurementMaxMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readCopperConcentrationMeasurementMaxMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.CopperConcentrationMeasurement.ID, ClusterIDMapping.CopperConcentrationMeasurement.Attribute.MaxMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.CopperConcentrationMeasurementCluster) cluster).readMaxMeasuredValueAttribute(
//              (ChipClusters.CopperConcentrationMeasurementCluster.MaxMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedCopperConcentrationMeasurementClusterMaxMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readCopperConcentrationMeasurementMaxMeasuredValueCommandParams
        );
        result.put("readMaxMeasuredValueAttribute", readCopperConcentrationMeasurementMaxMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readCopperConcentrationMeasurementPeakMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readCopperConcentrationMeasurementPeakMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.CopperConcentrationMeasurement.ID, ClusterIDMapping.CopperConcentrationMeasurement.Attribute.PeakMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.CopperConcentrationMeasurementCluster) cluster).readPeakMeasuredValueAttribute(
//              (ChipClusters.CopperConcentrationMeasurementCluster.PeakMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedCopperConcentrationMeasurementClusterPeakMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readCopperConcentrationMeasurementPeakMeasuredValueCommandParams
        );
        result.put("readPeakMeasuredValueAttribute", readCopperConcentrationMeasurementPeakMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readCopperConcentrationMeasurementPeakMeasuredValueWindowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readCopperConcentrationMeasurementPeakMeasuredValueWindowAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.CopperConcentrationMeasurement.ID, ClusterIDMapping.CopperConcentrationMeasurement.Attribute.PeakMeasuredValueWindow.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.CopperConcentrationMeasurementCluster) cluster).readPeakMeasuredValueWindowAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readCopperConcentrationMeasurementPeakMeasuredValueWindowCommandParams
        );
        result.put("readPeakMeasuredValueWindowAttribute", readCopperConcentrationMeasurementPeakMeasuredValueWindowAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readCopperConcentrationMeasurementAverageMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readCopperConcentrationMeasurementAverageMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.CopperConcentrationMeasurement.ID, ClusterIDMapping.CopperConcentrationMeasurement.Attribute.AverageMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.CopperConcentrationMeasurementCluster) cluster).readAverageMeasuredValueAttribute(
//              (ChipClusters.CopperConcentrationMeasurementCluster.AverageMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedCopperConcentrationMeasurementClusterAverageMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readCopperConcentrationMeasurementAverageMeasuredValueCommandParams
        );
        result.put("readAverageMeasuredValueAttribute", readCopperConcentrationMeasurementAverageMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readCopperConcentrationMeasurementAverageMeasuredValueWindowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readCopperConcentrationMeasurementAverageMeasuredValueWindowAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.CopperConcentrationMeasurement.ID, ClusterIDMapping.CopperConcentrationMeasurement.Attribute.AverageMeasuredValueWindow.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.CopperConcentrationMeasurementCluster) cluster).readAverageMeasuredValueWindowAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readCopperConcentrationMeasurementAverageMeasuredValueWindowCommandParams
        );
        result.put("readAverageMeasuredValueWindowAttribute", readCopperConcentrationMeasurementAverageMeasuredValueWindowAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readCopperConcentrationMeasurementUncertaintyCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readCopperConcentrationMeasurementUncertaintyAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.CopperConcentrationMeasurement.ID, ClusterIDMapping.CopperConcentrationMeasurement.Attribute.Uncertainty.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.CopperConcentrationMeasurementCluster) cluster).readUncertaintyAttribute(
//              (ChipClusters.FloatAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFloatAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readCopperConcentrationMeasurementUncertaintyCommandParams
        );
        result.put("readUncertaintyAttribute", readCopperConcentrationMeasurementUncertaintyAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readCopperConcentrationMeasurementMeasurementUnitCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readCopperConcentrationMeasurementMeasurementUnitAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.CopperConcentrationMeasurement.ID, ClusterIDMapping.CopperConcentrationMeasurement.Attribute.MeasurementUnit.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.CopperConcentrationMeasurementCluster) cluster).readMeasurementUnitAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readCopperConcentrationMeasurementMeasurementUnitCommandParams
        );
        result.put("readMeasurementUnitAttribute", readCopperConcentrationMeasurementMeasurementUnitAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readCopperConcentrationMeasurementMeasurementMediumCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readCopperConcentrationMeasurementMeasurementMediumAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.CopperConcentrationMeasurement.ID, ClusterIDMapping.CopperConcentrationMeasurement.Attribute.MeasurementMedium.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.CopperConcentrationMeasurementCluster) cluster).readMeasurementMediumAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readCopperConcentrationMeasurementMeasurementMediumCommandParams
        );
        result.put("readMeasurementMediumAttribute", readCopperConcentrationMeasurementMeasurementMediumAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readCopperConcentrationMeasurementLevelValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readCopperConcentrationMeasurementLevelValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.CopperConcentrationMeasurement.ID, ClusterIDMapping.CopperConcentrationMeasurement.Attribute.LevelValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.CopperConcentrationMeasurementCluster) cluster).readLevelValueAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readCopperConcentrationMeasurementLevelValueCommandParams
        );
        result.put("readLevelValueAttribute", readCopperConcentrationMeasurementLevelValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readCopperConcentrationMeasurementGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readCopperConcentrationMeasurementGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.CopperConcentrationMeasurement.ID, ClusterIDMapping.CopperConcentrationMeasurement.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.CopperConcentrationMeasurementCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.CopperConcentrationMeasurementCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedCopperConcentrationMeasurementClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readCopperConcentrationMeasurementGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readCopperConcentrationMeasurementGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readCopperConcentrationMeasurementAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readCopperConcentrationMeasurementAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.CopperConcentrationMeasurement.ID, ClusterIDMapping.CopperConcentrationMeasurement.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.CopperConcentrationMeasurementCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.CopperConcentrationMeasurementCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedCopperConcentrationMeasurementClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readCopperConcentrationMeasurementAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readCopperConcentrationMeasurementAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readCopperConcentrationMeasurementEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readCopperConcentrationMeasurementEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.CopperConcentrationMeasurement.ID, ClusterIDMapping.CopperConcentrationMeasurement.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.CopperConcentrationMeasurementCluster) cluster).readEventListAttribute(
//              (ChipClusters.CopperConcentrationMeasurementCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedCopperConcentrationMeasurementClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readCopperConcentrationMeasurementEventListCommandParams
        );
        result.put("readEventListAttribute", readCopperConcentrationMeasurementEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readCopperConcentrationMeasurementAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readCopperConcentrationMeasurementAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.CopperConcentrationMeasurement.ID, ClusterIDMapping.CopperConcentrationMeasurement.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.CopperConcentrationMeasurementCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.CopperConcentrationMeasurementCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedCopperConcentrationMeasurementClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readCopperConcentrationMeasurementAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readCopperConcentrationMeasurementAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readCopperConcentrationMeasurementFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readCopperConcentrationMeasurementFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.CopperConcentrationMeasurement.ID, ClusterIDMapping.CopperConcentrationMeasurement.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.CopperConcentrationMeasurementCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readCopperConcentrationMeasurementFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readCopperConcentrationMeasurementFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readCopperConcentrationMeasurementClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readCopperConcentrationMeasurementClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.CopperConcentrationMeasurement.ID, ClusterIDMapping.CopperConcentrationMeasurement.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.CopperConcentrationMeasurementCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readCopperConcentrationMeasurementClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readCopperConcentrationMeasurementClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readLeadConcentrationMeasurementInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readLeadConcentrationMeasurementMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readLeadConcentrationMeasurementMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.LeadConcentrationMeasurement.ID, ClusterIDMapping.LeadConcentrationMeasurement.Attribute.MeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.LeadConcentrationMeasurementCluster) cluster).readMeasuredValueAttribute(
//              (ChipClusters.LeadConcentrationMeasurementCluster.MeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLeadConcentrationMeasurementClusterMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readLeadConcentrationMeasurementMeasuredValueCommandParams
        );
        result.put("readMeasuredValueAttribute", readLeadConcentrationMeasurementMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readLeadConcentrationMeasurementMinMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readLeadConcentrationMeasurementMinMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.LeadConcentrationMeasurement.ID, ClusterIDMapping.LeadConcentrationMeasurement.Attribute.MinMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.LeadConcentrationMeasurementCluster) cluster).readMinMeasuredValueAttribute(
//              (ChipClusters.LeadConcentrationMeasurementCluster.MinMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLeadConcentrationMeasurementClusterMinMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readLeadConcentrationMeasurementMinMeasuredValueCommandParams
        );
        result.put("readMinMeasuredValueAttribute", readLeadConcentrationMeasurementMinMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readLeadConcentrationMeasurementMaxMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readLeadConcentrationMeasurementMaxMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.LeadConcentrationMeasurement.ID, ClusterIDMapping.LeadConcentrationMeasurement.Attribute.MaxMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.LeadConcentrationMeasurementCluster) cluster).readMaxMeasuredValueAttribute(
//              (ChipClusters.LeadConcentrationMeasurementCluster.MaxMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLeadConcentrationMeasurementClusterMaxMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readLeadConcentrationMeasurementMaxMeasuredValueCommandParams
        );
        result.put("readMaxMeasuredValueAttribute", readLeadConcentrationMeasurementMaxMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readLeadConcentrationMeasurementPeakMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readLeadConcentrationMeasurementPeakMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.LeadConcentrationMeasurement.ID, ClusterIDMapping.LeadConcentrationMeasurement.Attribute.PeakMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.LeadConcentrationMeasurementCluster) cluster).readPeakMeasuredValueAttribute(
//              (ChipClusters.LeadConcentrationMeasurementCluster.PeakMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLeadConcentrationMeasurementClusterPeakMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readLeadConcentrationMeasurementPeakMeasuredValueCommandParams
        );
        result.put("readPeakMeasuredValueAttribute", readLeadConcentrationMeasurementPeakMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readLeadConcentrationMeasurementPeakMeasuredValueWindowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readLeadConcentrationMeasurementPeakMeasuredValueWindowAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.LeadConcentrationMeasurement.ID, ClusterIDMapping.LeadConcentrationMeasurement.Attribute.PeakMeasuredValueWindow.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.LeadConcentrationMeasurementCluster) cluster).readPeakMeasuredValueWindowAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readLeadConcentrationMeasurementPeakMeasuredValueWindowCommandParams
        );
        result.put("readPeakMeasuredValueWindowAttribute", readLeadConcentrationMeasurementPeakMeasuredValueWindowAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readLeadConcentrationMeasurementAverageMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readLeadConcentrationMeasurementAverageMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.LeadConcentrationMeasurement.ID, ClusterIDMapping.LeadConcentrationMeasurement.Attribute.AverageMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.LeadConcentrationMeasurementCluster) cluster).readAverageMeasuredValueAttribute(
//              (ChipClusters.LeadConcentrationMeasurementCluster.AverageMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLeadConcentrationMeasurementClusterAverageMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readLeadConcentrationMeasurementAverageMeasuredValueCommandParams
        );
        result.put("readAverageMeasuredValueAttribute", readLeadConcentrationMeasurementAverageMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readLeadConcentrationMeasurementAverageMeasuredValueWindowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readLeadConcentrationMeasurementAverageMeasuredValueWindowAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.LeadConcentrationMeasurement.ID, ClusterIDMapping.LeadConcentrationMeasurement.Attribute.AverageMeasuredValueWindow.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.LeadConcentrationMeasurementCluster) cluster).readAverageMeasuredValueWindowAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readLeadConcentrationMeasurementAverageMeasuredValueWindowCommandParams
        );
        result.put("readAverageMeasuredValueWindowAttribute", readLeadConcentrationMeasurementAverageMeasuredValueWindowAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readLeadConcentrationMeasurementUncertaintyCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readLeadConcentrationMeasurementUncertaintyAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.LeadConcentrationMeasurement.ID, ClusterIDMapping.LeadConcentrationMeasurement.Attribute.Uncertainty.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.LeadConcentrationMeasurementCluster) cluster).readUncertaintyAttribute(
//              (ChipClusters.FloatAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFloatAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readLeadConcentrationMeasurementUncertaintyCommandParams
        );
        result.put("readUncertaintyAttribute", readLeadConcentrationMeasurementUncertaintyAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readLeadConcentrationMeasurementMeasurementUnitCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readLeadConcentrationMeasurementMeasurementUnitAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.LeadConcentrationMeasurement.ID, ClusterIDMapping.LeadConcentrationMeasurement.Attribute.MeasurementUnit.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.LeadConcentrationMeasurementCluster) cluster).readMeasurementUnitAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readLeadConcentrationMeasurementMeasurementUnitCommandParams
        );
        result.put("readMeasurementUnitAttribute", readLeadConcentrationMeasurementMeasurementUnitAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readLeadConcentrationMeasurementMeasurementMediumCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readLeadConcentrationMeasurementMeasurementMediumAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.LeadConcentrationMeasurement.ID, ClusterIDMapping.LeadConcentrationMeasurement.Attribute.MeasurementMedium.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.LeadConcentrationMeasurementCluster) cluster).readMeasurementMediumAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readLeadConcentrationMeasurementMeasurementMediumCommandParams
        );
        result.put("readMeasurementMediumAttribute", readLeadConcentrationMeasurementMeasurementMediumAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readLeadConcentrationMeasurementLevelValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readLeadConcentrationMeasurementLevelValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.LeadConcentrationMeasurement.ID, ClusterIDMapping.LeadConcentrationMeasurement.Attribute.LevelValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.LeadConcentrationMeasurementCluster) cluster).readLevelValueAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readLeadConcentrationMeasurementLevelValueCommandParams
        );
        result.put("readLevelValueAttribute", readLeadConcentrationMeasurementLevelValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readLeadConcentrationMeasurementGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readLeadConcentrationMeasurementGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.LeadConcentrationMeasurement.ID, ClusterIDMapping.LeadConcentrationMeasurement.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.LeadConcentrationMeasurementCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.LeadConcentrationMeasurementCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLeadConcentrationMeasurementClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readLeadConcentrationMeasurementGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readLeadConcentrationMeasurementGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readLeadConcentrationMeasurementAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readLeadConcentrationMeasurementAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.LeadConcentrationMeasurement.ID, ClusterIDMapping.LeadConcentrationMeasurement.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.LeadConcentrationMeasurementCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.LeadConcentrationMeasurementCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLeadConcentrationMeasurementClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readLeadConcentrationMeasurementAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readLeadConcentrationMeasurementAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readLeadConcentrationMeasurementEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readLeadConcentrationMeasurementEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.LeadConcentrationMeasurement.ID, ClusterIDMapping.LeadConcentrationMeasurement.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.LeadConcentrationMeasurementCluster) cluster).readEventListAttribute(
//              (ChipClusters.LeadConcentrationMeasurementCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLeadConcentrationMeasurementClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readLeadConcentrationMeasurementEventListCommandParams
        );
        result.put("readEventListAttribute", readLeadConcentrationMeasurementEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readLeadConcentrationMeasurementAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readLeadConcentrationMeasurementAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.LeadConcentrationMeasurement.ID, ClusterIDMapping.LeadConcentrationMeasurement.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.LeadConcentrationMeasurementCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.LeadConcentrationMeasurementCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLeadConcentrationMeasurementClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readLeadConcentrationMeasurementAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readLeadConcentrationMeasurementAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readLeadConcentrationMeasurementFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readLeadConcentrationMeasurementFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.LeadConcentrationMeasurement.ID, ClusterIDMapping.LeadConcentrationMeasurement.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.LeadConcentrationMeasurementCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readLeadConcentrationMeasurementFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readLeadConcentrationMeasurementFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readLeadConcentrationMeasurementClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readLeadConcentrationMeasurementClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.LeadConcentrationMeasurement.ID, ClusterIDMapping.LeadConcentrationMeasurement.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.LeadConcentrationMeasurementCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readLeadConcentrationMeasurementClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readLeadConcentrationMeasurementClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readManganeseConcentrationMeasurementInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readManganeseConcentrationMeasurementMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readManganeseConcentrationMeasurementMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ManganeseConcentrationMeasurement.ID, ClusterIDMapping.ManganeseConcentrationMeasurement.Attribute.MeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ManganeseConcentrationMeasurementCluster) cluster).readMeasuredValueAttribute(
//              (ChipClusters.ManganeseConcentrationMeasurementCluster.MeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedManganeseConcentrationMeasurementClusterMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readManganeseConcentrationMeasurementMeasuredValueCommandParams
        );
        result.put("readMeasuredValueAttribute", readManganeseConcentrationMeasurementMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readManganeseConcentrationMeasurementMinMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readManganeseConcentrationMeasurementMinMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ManganeseConcentrationMeasurement.ID, ClusterIDMapping.ManganeseConcentrationMeasurement.Attribute.MinMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ManganeseConcentrationMeasurementCluster) cluster).readMinMeasuredValueAttribute(
//              (ChipClusters.ManganeseConcentrationMeasurementCluster.MinMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedManganeseConcentrationMeasurementClusterMinMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readManganeseConcentrationMeasurementMinMeasuredValueCommandParams
        );
        result.put("readMinMeasuredValueAttribute", readManganeseConcentrationMeasurementMinMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readManganeseConcentrationMeasurementMaxMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readManganeseConcentrationMeasurementMaxMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ManganeseConcentrationMeasurement.ID, ClusterIDMapping.ManganeseConcentrationMeasurement.Attribute.MaxMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ManganeseConcentrationMeasurementCluster) cluster).readMaxMeasuredValueAttribute(
//              (ChipClusters.ManganeseConcentrationMeasurementCluster.MaxMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedManganeseConcentrationMeasurementClusterMaxMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readManganeseConcentrationMeasurementMaxMeasuredValueCommandParams
        );
        result.put("readMaxMeasuredValueAttribute", readManganeseConcentrationMeasurementMaxMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readManganeseConcentrationMeasurementPeakMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readManganeseConcentrationMeasurementPeakMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ManganeseConcentrationMeasurement.ID, ClusterIDMapping.ManganeseConcentrationMeasurement.Attribute.PeakMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ManganeseConcentrationMeasurementCluster) cluster).readPeakMeasuredValueAttribute(
//              (ChipClusters.ManganeseConcentrationMeasurementCluster.PeakMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedManganeseConcentrationMeasurementClusterPeakMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readManganeseConcentrationMeasurementPeakMeasuredValueCommandParams
        );
        result.put("readPeakMeasuredValueAttribute", readManganeseConcentrationMeasurementPeakMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readManganeseConcentrationMeasurementPeakMeasuredValueWindowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readManganeseConcentrationMeasurementPeakMeasuredValueWindowAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ManganeseConcentrationMeasurement.ID, ClusterIDMapping.ManganeseConcentrationMeasurement.Attribute.PeakMeasuredValueWindow.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ManganeseConcentrationMeasurementCluster) cluster).readPeakMeasuredValueWindowAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readManganeseConcentrationMeasurementPeakMeasuredValueWindowCommandParams
        );
        result.put("readPeakMeasuredValueWindowAttribute", readManganeseConcentrationMeasurementPeakMeasuredValueWindowAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readManganeseConcentrationMeasurementAverageMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readManganeseConcentrationMeasurementAverageMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ManganeseConcentrationMeasurement.ID, ClusterIDMapping.ManganeseConcentrationMeasurement.Attribute.AverageMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ManganeseConcentrationMeasurementCluster) cluster).readAverageMeasuredValueAttribute(
//              (ChipClusters.ManganeseConcentrationMeasurementCluster.AverageMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedManganeseConcentrationMeasurementClusterAverageMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readManganeseConcentrationMeasurementAverageMeasuredValueCommandParams
        );
        result.put("readAverageMeasuredValueAttribute", readManganeseConcentrationMeasurementAverageMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readManganeseConcentrationMeasurementAverageMeasuredValueWindowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readManganeseConcentrationMeasurementAverageMeasuredValueWindowAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ManganeseConcentrationMeasurement.ID, ClusterIDMapping.ManganeseConcentrationMeasurement.Attribute.AverageMeasuredValueWindow.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ManganeseConcentrationMeasurementCluster) cluster).readAverageMeasuredValueWindowAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readManganeseConcentrationMeasurementAverageMeasuredValueWindowCommandParams
        );
        result.put("readAverageMeasuredValueWindowAttribute", readManganeseConcentrationMeasurementAverageMeasuredValueWindowAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readManganeseConcentrationMeasurementUncertaintyCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readManganeseConcentrationMeasurementUncertaintyAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ManganeseConcentrationMeasurement.ID, ClusterIDMapping.ManganeseConcentrationMeasurement.Attribute.Uncertainty.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ManganeseConcentrationMeasurementCluster) cluster).readUncertaintyAttribute(
//              (ChipClusters.FloatAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFloatAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readManganeseConcentrationMeasurementUncertaintyCommandParams
        );
        result.put("readUncertaintyAttribute", readManganeseConcentrationMeasurementUncertaintyAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readManganeseConcentrationMeasurementMeasurementUnitCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readManganeseConcentrationMeasurementMeasurementUnitAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ManganeseConcentrationMeasurement.ID, ClusterIDMapping.ManganeseConcentrationMeasurement.Attribute.MeasurementUnit.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ManganeseConcentrationMeasurementCluster) cluster).readMeasurementUnitAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readManganeseConcentrationMeasurementMeasurementUnitCommandParams
        );
        result.put("readMeasurementUnitAttribute", readManganeseConcentrationMeasurementMeasurementUnitAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readManganeseConcentrationMeasurementMeasurementMediumCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readManganeseConcentrationMeasurementMeasurementMediumAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ManganeseConcentrationMeasurement.ID, ClusterIDMapping.ManganeseConcentrationMeasurement.Attribute.MeasurementMedium.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ManganeseConcentrationMeasurementCluster) cluster).readMeasurementMediumAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readManganeseConcentrationMeasurementMeasurementMediumCommandParams
        );
        result.put("readMeasurementMediumAttribute", readManganeseConcentrationMeasurementMeasurementMediumAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readManganeseConcentrationMeasurementLevelValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readManganeseConcentrationMeasurementLevelValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ManganeseConcentrationMeasurement.ID, ClusterIDMapping.ManganeseConcentrationMeasurement.Attribute.LevelValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ManganeseConcentrationMeasurementCluster) cluster).readLevelValueAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readManganeseConcentrationMeasurementLevelValueCommandParams
        );
        result.put("readLevelValueAttribute", readManganeseConcentrationMeasurementLevelValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readManganeseConcentrationMeasurementGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readManganeseConcentrationMeasurementGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ManganeseConcentrationMeasurement.ID, ClusterIDMapping.ManganeseConcentrationMeasurement.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ManganeseConcentrationMeasurementCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.ManganeseConcentrationMeasurementCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedManganeseConcentrationMeasurementClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readManganeseConcentrationMeasurementGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readManganeseConcentrationMeasurementGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readManganeseConcentrationMeasurementAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readManganeseConcentrationMeasurementAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ManganeseConcentrationMeasurement.ID, ClusterIDMapping.ManganeseConcentrationMeasurement.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ManganeseConcentrationMeasurementCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.ManganeseConcentrationMeasurementCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedManganeseConcentrationMeasurementClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readManganeseConcentrationMeasurementAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readManganeseConcentrationMeasurementAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readManganeseConcentrationMeasurementEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readManganeseConcentrationMeasurementEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ManganeseConcentrationMeasurement.ID, ClusterIDMapping.ManganeseConcentrationMeasurement.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ManganeseConcentrationMeasurementCluster) cluster).readEventListAttribute(
//              (ChipClusters.ManganeseConcentrationMeasurementCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedManganeseConcentrationMeasurementClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readManganeseConcentrationMeasurementEventListCommandParams
        );
        result.put("readEventListAttribute", readManganeseConcentrationMeasurementEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readManganeseConcentrationMeasurementAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readManganeseConcentrationMeasurementAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ManganeseConcentrationMeasurement.ID, ClusterIDMapping.ManganeseConcentrationMeasurement.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ManganeseConcentrationMeasurementCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.ManganeseConcentrationMeasurementCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedManganeseConcentrationMeasurementClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readManganeseConcentrationMeasurementAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readManganeseConcentrationMeasurementAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readManganeseConcentrationMeasurementFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readManganeseConcentrationMeasurementFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ManganeseConcentrationMeasurement.ID, ClusterIDMapping.ManganeseConcentrationMeasurement.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ManganeseConcentrationMeasurementCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readManganeseConcentrationMeasurementFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readManganeseConcentrationMeasurementFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readManganeseConcentrationMeasurementClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readManganeseConcentrationMeasurementClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ManganeseConcentrationMeasurement.ID, ClusterIDMapping.ManganeseConcentrationMeasurement.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ManganeseConcentrationMeasurementCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readManganeseConcentrationMeasurementClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readManganeseConcentrationMeasurementClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readSulfateConcentrationMeasurementInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readSulfateConcentrationMeasurementMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSulfateConcentrationMeasurementMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SulfateConcentrationMeasurement.ID, ClusterIDMapping.SulfateConcentrationMeasurement.Attribute.MeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SulfateConcentrationMeasurementCluster) cluster).readMeasuredValueAttribute(
//              (ChipClusters.SulfateConcentrationMeasurementCluster.MeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedSulfateConcentrationMeasurementClusterMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSulfateConcentrationMeasurementMeasuredValueCommandParams
        );
        result.put("readMeasuredValueAttribute", readSulfateConcentrationMeasurementMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSulfateConcentrationMeasurementMinMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSulfateConcentrationMeasurementMinMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SulfateConcentrationMeasurement.ID, ClusterIDMapping.SulfateConcentrationMeasurement.Attribute.MinMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SulfateConcentrationMeasurementCluster) cluster).readMinMeasuredValueAttribute(
//              (ChipClusters.SulfateConcentrationMeasurementCluster.MinMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedSulfateConcentrationMeasurementClusterMinMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSulfateConcentrationMeasurementMinMeasuredValueCommandParams
        );
        result.put("readMinMeasuredValueAttribute", readSulfateConcentrationMeasurementMinMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSulfateConcentrationMeasurementMaxMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSulfateConcentrationMeasurementMaxMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SulfateConcentrationMeasurement.ID, ClusterIDMapping.SulfateConcentrationMeasurement.Attribute.MaxMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SulfateConcentrationMeasurementCluster) cluster).readMaxMeasuredValueAttribute(
//              (ChipClusters.SulfateConcentrationMeasurementCluster.MaxMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedSulfateConcentrationMeasurementClusterMaxMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSulfateConcentrationMeasurementMaxMeasuredValueCommandParams
        );
        result.put("readMaxMeasuredValueAttribute", readSulfateConcentrationMeasurementMaxMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSulfateConcentrationMeasurementPeakMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSulfateConcentrationMeasurementPeakMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SulfateConcentrationMeasurement.ID, ClusterIDMapping.SulfateConcentrationMeasurement.Attribute.PeakMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SulfateConcentrationMeasurementCluster) cluster).readPeakMeasuredValueAttribute(
//              (ChipClusters.SulfateConcentrationMeasurementCluster.PeakMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedSulfateConcentrationMeasurementClusterPeakMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSulfateConcentrationMeasurementPeakMeasuredValueCommandParams
        );
        result.put("readPeakMeasuredValueAttribute", readSulfateConcentrationMeasurementPeakMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSulfateConcentrationMeasurementPeakMeasuredValueWindowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSulfateConcentrationMeasurementPeakMeasuredValueWindowAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SulfateConcentrationMeasurement.ID, ClusterIDMapping.SulfateConcentrationMeasurement.Attribute.PeakMeasuredValueWindow.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SulfateConcentrationMeasurementCluster) cluster).readPeakMeasuredValueWindowAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSulfateConcentrationMeasurementPeakMeasuredValueWindowCommandParams
        );
        result.put("readPeakMeasuredValueWindowAttribute", readSulfateConcentrationMeasurementPeakMeasuredValueWindowAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSulfateConcentrationMeasurementAverageMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSulfateConcentrationMeasurementAverageMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SulfateConcentrationMeasurement.ID, ClusterIDMapping.SulfateConcentrationMeasurement.Attribute.AverageMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SulfateConcentrationMeasurementCluster) cluster).readAverageMeasuredValueAttribute(
//              (ChipClusters.SulfateConcentrationMeasurementCluster.AverageMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedSulfateConcentrationMeasurementClusterAverageMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSulfateConcentrationMeasurementAverageMeasuredValueCommandParams
        );
        result.put("readAverageMeasuredValueAttribute", readSulfateConcentrationMeasurementAverageMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSulfateConcentrationMeasurementAverageMeasuredValueWindowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSulfateConcentrationMeasurementAverageMeasuredValueWindowAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SulfateConcentrationMeasurement.ID, ClusterIDMapping.SulfateConcentrationMeasurement.Attribute.AverageMeasuredValueWindow.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SulfateConcentrationMeasurementCluster) cluster).readAverageMeasuredValueWindowAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSulfateConcentrationMeasurementAverageMeasuredValueWindowCommandParams
        );
        result.put("readAverageMeasuredValueWindowAttribute", readSulfateConcentrationMeasurementAverageMeasuredValueWindowAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSulfateConcentrationMeasurementUncertaintyCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSulfateConcentrationMeasurementUncertaintyAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SulfateConcentrationMeasurement.ID, ClusterIDMapping.SulfateConcentrationMeasurement.Attribute.Uncertainty.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SulfateConcentrationMeasurementCluster) cluster).readUncertaintyAttribute(
//              (ChipClusters.FloatAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFloatAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSulfateConcentrationMeasurementUncertaintyCommandParams
        );
        result.put("readUncertaintyAttribute", readSulfateConcentrationMeasurementUncertaintyAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSulfateConcentrationMeasurementMeasurementUnitCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSulfateConcentrationMeasurementMeasurementUnitAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SulfateConcentrationMeasurement.ID, ClusterIDMapping.SulfateConcentrationMeasurement.Attribute.MeasurementUnit.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SulfateConcentrationMeasurementCluster) cluster).readMeasurementUnitAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSulfateConcentrationMeasurementMeasurementUnitCommandParams
        );
        result.put("readMeasurementUnitAttribute", readSulfateConcentrationMeasurementMeasurementUnitAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSulfateConcentrationMeasurementMeasurementMediumCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSulfateConcentrationMeasurementMeasurementMediumAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SulfateConcentrationMeasurement.ID, ClusterIDMapping.SulfateConcentrationMeasurement.Attribute.MeasurementMedium.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SulfateConcentrationMeasurementCluster) cluster).readMeasurementMediumAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSulfateConcentrationMeasurementMeasurementMediumCommandParams
        );
        result.put("readMeasurementMediumAttribute", readSulfateConcentrationMeasurementMeasurementMediumAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSulfateConcentrationMeasurementLevelValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSulfateConcentrationMeasurementLevelValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SulfateConcentrationMeasurement.ID, ClusterIDMapping.SulfateConcentrationMeasurement.Attribute.LevelValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SulfateConcentrationMeasurementCluster) cluster).readLevelValueAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSulfateConcentrationMeasurementLevelValueCommandParams
        );
        result.put("readLevelValueAttribute", readSulfateConcentrationMeasurementLevelValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSulfateConcentrationMeasurementGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSulfateConcentrationMeasurementGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SulfateConcentrationMeasurement.ID, ClusterIDMapping.SulfateConcentrationMeasurement.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SulfateConcentrationMeasurementCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.SulfateConcentrationMeasurementCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedSulfateConcentrationMeasurementClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSulfateConcentrationMeasurementGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readSulfateConcentrationMeasurementGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSulfateConcentrationMeasurementAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSulfateConcentrationMeasurementAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SulfateConcentrationMeasurement.ID, ClusterIDMapping.SulfateConcentrationMeasurement.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SulfateConcentrationMeasurementCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.SulfateConcentrationMeasurementCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedSulfateConcentrationMeasurementClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSulfateConcentrationMeasurementAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readSulfateConcentrationMeasurementAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSulfateConcentrationMeasurementEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSulfateConcentrationMeasurementEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SulfateConcentrationMeasurement.ID, ClusterIDMapping.SulfateConcentrationMeasurement.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SulfateConcentrationMeasurementCluster) cluster).readEventListAttribute(
//              (ChipClusters.SulfateConcentrationMeasurementCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedSulfateConcentrationMeasurementClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSulfateConcentrationMeasurementEventListCommandParams
        );
        result.put("readEventListAttribute", readSulfateConcentrationMeasurementEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSulfateConcentrationMeasurementAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSulfateConcentrationMeasurementAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SulfateConcentrationMeasurement.ID, ClusterIDMapping.SulfateConcentrationMeasurement.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SulfateConcentrationMeasurementCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.SulfateConcentrationMeasurementCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedSulfateConcentrationMeasurementClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSulfateConcentrationMeasurementAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readSulfateConcentrationMeasurementAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSulfateConcentrationMeasurementFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSulfateConcentrationMeasurementFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SulfateConcentrationMeasurement.ID, ClusterIDMapping.SulfateConcentrationMeasurement.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SulfateConcentrationMeasurementCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSulfateConcentrationMeasurementFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readSulfateConcentrationMeasurementFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSulfateConcentrationMeasurementClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSulfateConcentrationMeasurementClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SulfateConcentrationMeasurement.ID, ClusterIDMapping.SulfateConcentrationMeasurement.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SulfateConcentrationMeasurementCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSulfateConcentrationMeasurementClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readSulfateConcentrationMeasurementClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readBromodichloromethaneConcentrationMeasurementInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readBromodichloromethaneConcentrationMeasurementMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBromodichloromethaneConcentrationMeasurementMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BromodichloromethaneConcentrationMeasurement.ID, ClusterIDMapping.BromodichloromethaneConcentrationMeasurement.Attribute.MeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BromodichloromethaneConcentrationMeasurementCluster) cluster).readMeasuredValueAttribute(
//              (ChipClusters.BromodichloromethaneConcentrationMeasurementCluster.MeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBromodichloromethaneConcentrationMeasurementClusterMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBromodichloromethaneConcentrationMeasurementMeasuredValueCommandParams
        );
        result.put("readMeasuredValueAttribute", readBromodichloromethaneConcentrationMeasurementMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBromodichloromethaneConcentrationMeasurementMinMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBromodichloromethaneConcentrationMeasurementMinMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BromodichloromethaneConcentrationMeasurement.ID, ClusterIDMapping.BromodichloromethaneConcentrationMeasurement.Attribute.MinMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BromodichloromethaneConcentrationMeasurementCluster) cluster).readMinMeasuredValueAttribute(
//              (ChipClusters.BromodichloromethaneConcentrationMeasurementCluster.MinMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBromodichloromethaneConcentrationMeasurementClusterMinMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBromodichloromethaneConcentrationMeasurementMinMeasuredValueCommandParams
        );
        result.put("readMinMeasuredValueAttribute", readBromodichloromethaneConcentrationMeasurementMinMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBromodichloromethaneConcentrationMeasurementMaxMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBromodichloromethaneConcentrationMeasurementMaxMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BromodichloromethaneConcentrationMeasurement.ID, ClusterIDMapping.BromodichloromethaneConcentrationMeasurement.Attribute.MaxMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BromodichloromethaneConcentrationMeasurementCluster) cluster).readMaxMeasuredValueAttribute(
//              (ChipClusters.BromodichloromethaneConcentrationMeasurementCluster.MaxMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBromodichloromethaneConcentrationMeasurementClusterMaxMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBromodichloromethaneConcentrationMeasurementMaxMeasuredValueCommandParams
        );
        result.put("readMaxMeasuredValueAttribute", readBromodichloromethaneConcentrationMeasurementMaxMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBromodichloromethaneConcentrationMeasurementPeakMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBromodichloromethaneConcentrationMeasurementPeakMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BromodichloromethaneConcentrationMeasurement.ID, ClusterIDMapping.BromodichloromethaneConcentrationMeasurement.Attribute.PeakMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BromodichloromethaneConcentrationMeasurementCluster) cluster).readPeakMeasuredValueAttribute(
//              (ChipClusters.BromodichloromethaneConcentrationMeasurementCluster.PeakMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBromodichloromethaneConcentrationMeasurementClusterPeakMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBromodichloromethaneConcentrationMeasurementPeakMeasuredValueCommandParams
        );
        result.put("readPeakMeasuredValueAttribute", readBromodichloromethaneConcentrationMeasurementPeakMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBromodichloromethaneConcentrationMeasurementPeakMeasuredValueWindowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBromodichloromethaneConcentrationMeasurementPeakMeasuredValueWindowAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BromodichloromethaneConcentrationMeasurement.ID, ClusterIDMapping.BromodichloromethaneConcentrationMeasurement.Attribute.PeakMeasuredValueWindow.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BromodichloromethaneConcentrationMeasurementCluster) cluster).readPeakMeasuredValueWindowAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBromodichloromethaneConcentrationMeasurementPeakMeasuredValueWindowCommandParams
        );
        result.put("readPeakMeasuredValueWindowAttribute", readBromodichloromethaneConcentrationMeasurementPeakMeasuredValueWindowAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBromodichloromethaneConcentrationMeasurementAverageMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBromodichloromethaneConcentrationMeasurementAverageMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BromodichloromethaneConcentrationMeasurement.ID, ClusterIDMapping.BromodichloromethaneConcentrationMeasurement.Attribute.AverageMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BromodichloromethaneConcentrationMeasurementCluster) cluster).readAverageMeasuredValueAttribute(
//              (ChipClusters.BromodichloromethaneConcentrationMeasurementCluster.AverageMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBromodichloromethaneConcentrationMeasurementClusterAverageMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBromodichloromethaneConcentrationMeasurementAverageMeasuredValueCommandParams
        );
        result.put("readAverageMeasuredValueAttribute", readBromodichloromethaneConcentrationMeasurementAverageMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBromodichloromethaneConcentrationMeasurementAverageMeasuredValueWindowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBromodichloromethaneConcentrationMeasurementAverageMeasuredValueWindowAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BromodichloromethaneConcentrationMeasurement.ID, ClusterIDMapping.BromodichloromethaneConcentrationMeasurement.Attribute.AverageMeasuredValueWindow.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BromodichloromethaneConcentrationMeasurementCluster) cluster).readAverageMeasuredValueWindowAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBromodichloromethaneConcentrationMeasurementAverageMeasuredValueWindowCommandParams
        );
        result.put("readAverageMeasuredValueWindowAttribute", readBromodichloromethaneConcentrationMeasurementAverageMeasuredValueWindowAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBromodichloromethaneConcentrationMeasurementUncertaintyCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBromodichloromethaneConcentrationMeasurementUncertaintyAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BromodichloromethaneConcentrationMeasurement.ID, ClusterIDMapping.BromodichloromethaneConcentrationMeasurement.Attribute.Uncertainty.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BromodichloromethaneConcentrationMeasurementCluster) cluster).readUncertaintyAttribute(
//              (ChipClusters.FloatAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFloatAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBromodichloromethaneConcentrationMeasurementUncertaintyCommandParams
        );
        result.put("readUncertaintyAttribute", readBromodichloromethaneConcentrationMeasurementUncertaintyAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBromodichloromethaneConcentrationMeasurementMeasurementUnitCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBromodichloromethaneConcentrationMeasurementMeasurementUnitAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BromodichloromethaneConcentrationMeasurement.ID, ClusterIDMapping.BromodichloromethaneConcentrationMeasurement.Attribute.MeasurementUnit.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BromodichloromethaneConcentrationMeasurementCluster) cluster).readMeasurementUnitAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBromodichloromethaneConcentrationMeasurementMeasurementUnitCommandParams
        );
        result.put("readMeasurementUnitAttribute", readBromodichloromethaneConcentrationMeasurementMeasurementUnitAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBromodichloromethaneConcentrationMeasurementMeasurementMediumCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBromodichloromethaneConcentrationMeasurementMeasurementMediumAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BromodichloromethaneConcentrationMeasurement.ID, ClusterIDMapping.BromodichloromethaneConcentrationMeasurement.Attribute.MeasurementMedium.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BromodichloromethaneConcentrationMeasurementCluster) cluster).readMeasurementMediumAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBromodichloromethaneConcentrationMeasurementMeasurementMediumCommandParams
        );
        result.put("readMeasurementMediumAttribute", readBromodichloromethaneConcentrationMeasurementMeasurementMediumAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBromodichloromethaneConcentrationMeasurementLevelValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBromodichloromethaneConcentrationMeasurementLevelValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BromodichloromethaneConcentrationMeasurement.ID, ClusterIDMapping.BromodichloromethaneConcentrationMeasurement.Attribute.LevelValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BromodichloromethaneConcentrationMeasurementCluster) cluster).readLevelValueAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBromodichloromethaneConcentrationMeasurementLevelValueCommandParams
        );
        result.put("readLevelValueAttribute", readBromodichloromethaneConcentrationMeasurementLevelValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBromodichloromethaneConcentrationMeasurementGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBromodichloromethaneConcentrationMeasurementGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BromodichloromethaneConcentrationMeasurement.ID, ClusterIDMapping.BromodichloromethaneConcentrationMeasurement.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BromodichloromethaneConcentrationMeasurementCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.BromodichloromethaneConcentrationMeasurementCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBromodichloromethaneConcentrationMeasurementClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBromodichloromethaneConcentrationMeasurementGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readBromodichloromethaneConcentrationMeasurementGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBromodichloromethaneConcentrationMeasurementAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBromodichloromethaneConcentrationMeasurementAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BromodichloromethaneConcentrationMeasurement.ID, ClusterIDMapping.BromodichloromethaneConcentrationMeasurement.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BromodichloromethaneConcentrationMeasurementCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.BromodichloromethaneConcentrationMeasurementCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBromodichloromethaneConcentrationMeasurementClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBromodichloromethaneConcentrationMeasurementAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readBromodichloromethaneConcentrationMeasurementAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBromodichloromethaneConcentrationMeasurementEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBromodichloromethaneConcentrationMeasurementEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BromodichloromethaneConcentrationMeasurement.ID, ClusterIDMapping.BromodichloromethaneConcentrationMeasurement.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BromodichloromethaneConcentrationMeasurementCluster) cluster).readEventListAttribute(
//              (ChipClusters.BromodichloromethaneConcentrationMeasurementCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBromodichloromethaneConcentrationMeasurementClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBromodichloromethaneConcentrationMeasurementEventListCommandParams
        );
        result.put("readEventListAttribute", readBromodichloromethaneConcentrationMeasurementEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBromodichloromethaneConcentrationMeasurementAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBromodichloromethaneConcentrationMeasurementAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BromodichloromethaneConcentrationMeasurement.ID, ClusterIDMapping.BromodichloromethaneConcentrationMeasurement.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BromodichloromethaneConcentrationMeasurementCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.BromodichloromethaneConcentrationMeasurementCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBromodichloromethaneConcentrationMeasurementClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBromodichloromethaneConcentrationMeasurementAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readBromodichloromethaneConcentrationMeasurementAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBromodichloromethaneConcentrationMeasurementFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBromodichloromethaneConcentrationMeasurementFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BromodichloromethaneConcentrationMeasurement.ID, ClusterIDMapping.BromodichloromethaneConcentrationMeasurement.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BromodichloromethaneConcentrationMeasurementCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBromodichloromethaneConcentrationMeasurementFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readBromodichloromethaneConcentrationMeasurementFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBromodichloromethaneConcentrationMeasurementClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBromodichloromethaneConcentrationMeasurementClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BromodichloromethaneConcentrationMeasurement.ID, ClusterIDMapping.BromodichloromethaneConcentrationMeasurement.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BromodichloromethaneConcentrationMeasurementCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBromodichloromethaneConcentrationMeasurementClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readBromodichloromethaneConcentrationMeasurementClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readBromoformConcentrationMeasurementInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readBromoformConcentrationMeasurementMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBromoformConcentrationMeasurementMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BromoformConcentrationMeasurement.ID, ClusterIDMapping.BromoformConcentrationMeasurement.Attribute.MeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BromoformConcentrationMeasurementCluster) cluster).readMeasuredValueAttribute(
//              (ChipClusters.BromoformConcentrationMeasurementCluster.MeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBromoformConcentrationMeasurementClusterMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBromoformConcentrationMeasurementMeasuredValueCommandParams
        );
        result.put("readMeasuredValueAttribute", readBromoformConcentrationMeasurementMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBromoformConcentrationMeasurementMinMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBromoformConcentrationMeasurementMinMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BromoformConcentrationMeasurement.ID, ClusterIDMapping.BromoformConcentrationMeasurement.Attribute.MinMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BromoformConcentrationMeasurementCluster) cluster).readMinMeasuredValueAttribute(
//              (ChipClusters.BromoformConcentrationMeasurementCluster.MinMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBromoformConcentrationMeasurementClusterMinMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBromoformConcentrationMeasurementMinMeasuredValueCommandParams
        );
        result.put("readMinMeasuredValueAttribute", readBromoformConcentrationMeasurementMinMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBromoformConcentrationMeasurementMaxMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBromoformConcentrationMeasurementMaxMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BromoformConcentrationMeasurement.ID, ClusterIDMapping.BromoformConcentrationMeasurement.Attribute.MaxMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BromoformConcentrationMeasurementCluster) cluster).readMaxMeasuredValueAttribute(
//              (ChipClusters.BromoformConcentrationMeasurementCluster.MaxMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBromoformConcentrationMeasurementClusterMaxMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBromoformConcentrationMeasurementMaxMeasuredValueCommandParams
        );
        result.put("readMaxMeasuredValueAttribute", readBromoformConcentrationMeasurementMaxMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBromoformConcentrationMeasurementPeakMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBromoformConcentrationMeasurementPeakMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BromoformConcentrationMeasurement.ID, ClusterIDMapping.BromoformConcentrationMeasurement.Attribute.PeakMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BromoformConcentrationMeasurementCluster) cluster).readPeakMeasuredValueAttribute(
//              (ChipClusters.BromoformConcentrationMeasurementCluster.PeakMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBromoformConcentrationMeasurementClusterPeakMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBromoformConcentrationMeasurementPeakMeasuredValueCommandParams
        );
        result.put("readPeakMeasuredValueAttribute", readBromoformConcentrationMeasurementPeakMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBromoformConcentrationMeasurementPeakMeasuredValueWindowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBromoformConcentrationMeasurementPeakMeasuredValueWindowAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BromoformConcentrationMeasurement.ID, ClusterIDMapping.BromoformConcentrationMeasurement.Attribute.PeakMeasuredValueWindow.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BromoformConcentrationMeasurementCluster) cluster).readPeakMeasuredValueWindowAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBromoformConcentrationMeasurementPeakMeasuredValueWindowCommandParams
        );
        result.put("readPeakMeasuredValueWindowAttribute", readBromoformConcentrationMeasurementPeakMeasuredValueWindowAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBromoformConcentrationMeasurementAverageMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBromoformConcentrationMeasurementAverageMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BromoformConcentrationMeasurement.ID, ClusterIDMapping.BromoformConcentrationMeasurement.Attribute.AverageMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BromoformConcentrationMeasurementCluster) cluster).readAverageMeasuredValueAttribute(
//              (ChipClusters.BromoformConcentrationMeasurementCluster.AverageMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBromoformConcentrationMeasurementClusterAverageMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBromoformConcentrationMeasurementAverageMeasuredValueCommandParams
        );
        result.put("readAverageMeasuredValueAttribute", readBromoformConcentrationMeasurementAverageMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBromoformConcentrationMeasurementAverageMeasuredValueWindowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBromoformConcentrationMeasurementAverageMeasuredValueWindowAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BromoformConcentrationMeasurement.ID, ClusterIDMapping.BromoformConcentrationMeasurement.Attribute.AverageMeasuredValueWindow.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BromoformConcentrationMeasurementCluster) cluster).readAverageMeasuredValueWindowAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBromoformConcentrationMeasurementAverageMeasuredValueWindowCommandParams
        );
        result.put("readAverageMeasuredValueWindowAttribute", readBromoformConcentrationMeasurementAverageMeasuredValueWindowAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBromoformConcentrationMeasurementUncertaintyCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBromoformConcentrationMeasurementUncertaintyAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BromoformConcentrationMeasurement.ID, ClusterIDMapping.BromoformConcentrationMeasurement.Attribute.Uncertainty.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BromoformConcentrationMeasurementCluster) cluster).readUncertaintyAttribute(
//              (ChipClusters.FloatAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFloatAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBromoformConcentrationMeasurementUncertaintyCommandParams
        );
        result.put("readUncertaintyAttribute", readBromoformConcentrationMeasurementUncertaintyAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBromoformConcentrationMeasurementMeasurementUnitCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBromoformConcentrationMeasurementMeasurementUnitAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BromoformConcentrationMeasurement.ID, ClusterIDMapping.BromoformConcentrationMeasurement.Attribute.MeasurementUnit.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BromoformConcentrationMeasurementCluster) cluster).readMeasurementUnitAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBromoformConcentrationMeasurementMeasurementUnitCommandParams
        );
        result.put("readMeasurementUnitAttribute", readBromoformConcentrationMeasurementMeasurementUnitAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBromoformConcentrationMeasurementMeasurementMediumCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBromoformConcentrationMeasurementMeasurementMediumAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BromoformConcentrationMeasurement.ID, ClusterIDMapping.BromoformConcentrationMeasurement.Attribute.MeasurementMedium.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BromoformConcentrationMeasurementCluster) cluster).readMeasurementMediumAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBromoformConcentrationMeasurementMeasurementMediumCommandParams
        );
        result.put("readMeasurementMediumAttribute", readBromoformConcentrationMeasurementMeasurementMediumAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBromoformConcentrationMeasurementLevelValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBromoformConcentrationMeasurementLevelValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BromoformConcentrationMeasurement.ID, ClusterIDMapping.BromoformConcentrationMeasurement.Attribute.LevelValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BromoformConcentrationMeasurementCluster) cluster).readLevelValueAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBromoformConcentrationMeasurementLevelValueCommandParams
        );
        result.put("readLevelValueAttribute", readBromoformConcentrationMeasurementLevelValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBromoformConcentrationMeasurementGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBromoformConcentrationMeasurementGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BromoformConcentrationMeasurement.ID, ClusterIDMapping.BromoformConcentrationMeasurement.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BromoformConcentrationMeasurementCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.BromoformConcentrationMeasurementCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBromoformConcentrationMeasurementClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBromoformConcentrationMeasurementGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readBromoformConcentrationMeasurementGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBromoformConcentrationMeasurementAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBromoformConcentrationMeasurementAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BromoformConcentrationMeasurement.ID, ClusterIDMapping.BromoformConcentrationMeasurement.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BromoformConcentrationMeasurementCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.BromoformConcentrationMeasurementCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBromoformConcentrationMeasurementClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBromoformConcentrationMeasurementAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readBromoformConcentrationMeasurementAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBromoformConcentrationMeasurementEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBromoformConcentrationMeasurementEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BromoformConcentrationMeasurement.ID, ClusterIDMapping.BromoformConcentrationMeasurement.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BromoformConcentrationMeasurementCluster) cluster).readEventListAttribute(
//              (ChipClusters.BromoformConcentrationMeasurementCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBromoformConcentrationMeasurementClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBromoformConcentrationMeasurementEventListCommandParams
        );
        result.put("readEventListAttribute", readBromoformConcentrationMeasurementEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBromoformConcentrationMeasurementAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBromoformConcentrationMeasurementAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BromoformConcentrationMeasurement.ID, ClusterIDMapping.BromoformConcentrationMeasurement.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BromoformConcentrationMeasurementCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.BromoformConcentrationMeasurementCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBromoformConcentrationMeasurementClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBromoformConcentrationMeasurementAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readBromoformConcentrationMeasurementAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBromoformConcentrationMeasurementFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBromoformConcentrationMeasurementFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BromoformConcentrationMeasurement.ID, ClusterIDMapping.BromoformConcentrationMeasurement.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BromoformConcentrationMeasurementCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBromoformConcentrationMeasurementFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readBromoformConcentrationMeasurementFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readBromoformConcentrationMeasurementClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readBromoformConcentrationMeasurementClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.BromoformConcentrationMeasurement.ID, ClusterIDMapping.BromoformConcentrationMeasurement.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.BromoformConcentrationMeasurementCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readBromoformConcentrationMeasurementClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readBromoformConcentrationMeasurementClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readChlorodibromomethaneConcentrationMeasurementInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readChlorodibromomethaneConcentrationMeasurementMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readChlorodibromomethaneConcentrationMeasurementMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ChlorodibromomethaneConcentrationMeasurement.ID, ClusterIDMapping.ChlorodibromomethaneConcentrationMeasurement.Attribute.MeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ChlorodibromomethaneConcentrationMeasurementCluster) cluster).readMeasuredValueAttribute(
//              (ChipClusters.ChlorodibromomethaneConcentrationMeasurementCluster.MeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedChlorodibromomethaneConcentrationMeasurementClusterMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readChlorodibromomethaneConcentrationMeasurementMeasuredValueCommandParams
        );
        result.put("readMeasuredValueAttribute", readChlorodibromomethaneConcentrationMeasurementMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readChlorodibromomethaneConcentrationMeasurementMinMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readChlorodibromomethaneConcentrationMeasurementMinMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ChlorodibromomethaneConcentrationMeasurement.ID, ClusterIDMapping.ChlorodibromomethaneConcentrationMeasurement.Attribute.MinMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ChlorodibromomethaneConcentrationMeasurementCluster) cluster).readMinMeasuredValueAttribute(
//              (ChipClusters.ChlorodibromomethaneConcentrationMeasurementCluster.MinMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedChlorodibromomethaneConcentrationMeasurementClusterMinMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readChlorodibromomethaneConcentrationMeasurementMinMeasuredValueCommandParams
        );
        result.put("readMinMeasuredValueAttribute", readChlorodibromomethaneConcentrationMeasurementMinMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readChlorodibromomethaneConcentrationMeasurementMaxMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readChlorodibromomethaneConcentrationMeasurementMaxMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ChlorodibromomethaneConcentrationMeasurement.ID, ClusterIDMapping.ChlorodibromomethaneConcentrationMeasurement.Attribute.MaxMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ChlorodibromomethaneConcentrationMeasurementCluster) cluster).readMaxMeasuredValueAttribute(
//              (ChipClusters.ChlorodibromomethaneConcentrationMeasurementCluster.MaxMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedChlorodibromomethaneConcentrationMeasurementClusterMaxMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readChlorodibromomethaneConcentrationMeasurementMaxMeasuredValueCommandParams
        );
        result.put("readMaxMeasuredValueAttribute", readChlorodibromomethaneConcentrationMeasurementMaxMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readChlorodibromomethaneConcentrationMeasurementPeakMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readChlorodibromomethaneConcentrationMeasurementPeakMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ChlorodibromomethaneConcentrationMeasurement.ID, ClusterIDMapping.ChlorodibromomethaneConcentrationMeasurement.Attribute.PeakMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ChlorodibromomethaneConcentrationMeasurementCluster) cluster).readPeakMeasuredValueAttribute(
//              (ChipClusters.ChlorodibromomethaneConcentrationMeasurementCluster.PeakMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedChlorodibromomethaneConcentrationMeasurementClusterPeakMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readChlorodibromomethaneConcentrationMeasurementPeakMeasuredValueCommandParams
        );
        result.put("readPeakMeasuredValueAttribute", readChlorodibromomethaneConcentrationMeasurementPeakMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readChlorodibromomethaneConcentrationMeasurementPeakMeasuredValueWindowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readChlorodibromomethaneConcentrationMeasurementPeakMeasuredValueWindowAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ChlorodibromomethaneConcentrationMeasurement.ID, ClusterIDMapping.ChlorodibromomethaneConcentrationMeasurement.Attribute.PeakMeasuredValueWindow.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ChlorodibromomethaneConcentrationMeasurementCluster) cluster).readPeakMeasuredValueWindowAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readChlorodibromomethaneConcentrationMeasurementPeakMeasuredValueWindowCommandParams
        );
        result.put("readPeakMeasuredValueWindowAttribute", readChlorodibromomethaneConcentrationMeasurementPeakMeasuredValueWindowAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readChlorodibromomethaneConcentrationMeasurementAverageMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readChlorodibromomethaneConcentrationMeasurementAverageMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ChlorodibromomethaneConcentrationMeasurement.ID, ClusterIDMapping.ChlorodibromomethaneConcentrationMeasurement.Attribute.AverageMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ChlorodibromomethaneConcentrationMeasurementCluster) cluster).readAverageMeasuredValueAttribute(
//              (ChipClusters.ChlorodibromomethaneConcentrationMeasurementCluster.AverageMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedChlorodibromomethaneConcentrationMeasurementClusterAverageMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readChlorodibromomethaneConcentrationMeasurementAverageMeasuredValueCommandParams
        );
        result.put("readAverageMeasuredValueAttribute", readChlorodibromomethaneConcentrationMeasurementAverageMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readChlorodibromomethaneConcentrationMeasurementAverageMeasuredValueWindowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readChlorodibromomethaneConcentrationMeasurementAverageMeasuredValueWindowAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ChlorodibromomethaneConcentrationMeasurement.ID, ClusterIDMapping.ChlorodibromomethaneConcentrationMeasurement.Attribute.AverageMeasuredValueWindow.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ChlorodibromomethaneConcentrationMeasurementCluster) cluster).readAverageMeasuredValueWindowAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readChlorodibromomethaneConcentrationMeasurementAverageMeasuredValueWindowCommandParams
        );
        result.put("readAverageMeasuredValueWindowAttribute", readChlorodibromomethaneConcentrationMeasurementAverageMeasuredValueWindowAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readChlorodibromomethaneConcentrationMeasurementUncertaintyCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readChlorodibromomethaneConcentrationMeasurementUncertaintyAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ChlorodibromomethaneConcentrationMeasurement.ID, ClusterIDMapping.ChlorodibromomethaneConcentrationMeasurement.Attribute.Uncertainty.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ChlorodibromomethaneConcentrationMeasurementCluster) cluster).readUncertaintyAttribute(
//              (ChipClusters.FloatAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFloatAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readChlorodibromomethaneConcentrationMeasurementUncertaintyCommandParams
        );
        result.put("readUncertaintyAttribute", readChlorodibromomethaneConcentrationMeasurementUncertaintyAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readChlorodibromomethaneConcentrationMeasurementMeasurementUnitCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readChlorodibromomethaneConcentrationMeasurementMeasurementUnitAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ChlorodibromomethaneConcentrationMeasurement.ID, ClusterIDMapping.ChlorodibromomethaneConcentrationMeasurement.Attribute.MeasurementUnit.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ChlorodibromomethaneConcentrationMeasurementCluster) cluster).readMeasurementUnitAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readChlorodibromomethaneConcentrationMeasurementMeasurementUnitCommandParams
        );
        result.put("readMeasurementUnitAttribute", readChlorodibromomethaneConcentrationMeasurementMeasurementUnitAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readChlorodibromomethaneConcentrationMeasurementMeasurementMediumCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readChlorodibromomethaneConcentrationMeasurementMeasurementMediumAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ChlorodibromomethaneConcentrationMeasurement.ID, ClusterIDMapping.ChlorodibromomethaneConcentrationMeasurement.Attribute.MeasurementMedium.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ChlorodibromomethaneConcentrationMeasurementCluster) cluster).readMeasurementMediumAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readChlorodibromomethaneConcentrationMeasurementMeasurementMediumCommandParams
        );
        result.put("readMeasurementMediumAttribute", readChlorodibromomethaneConcentrationMeasurementMeasurementMediumAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readChlorodibromomethaneConcentrationMeasurementLevelValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readChlorodibromomethaneConcentrationMeasurementLevelValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ChlorodibromomethaneConcentrationMeasurement.ID, ClusterIDMapping.ChlorodibromomethaneConcentrationMeasurement.Attribute.LevelValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ChlorodibromomethaneConcentrationMeasurementCluster) cluster).readLevelValueAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readChlorodibromomethaneConcentrationMeasurementLevelValueCommandParams
        );
        result.put("readLevelValueAttribute", readChlorodibromomethaneConcentrationMeasurementLevelValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readChlorodibromomethaneConcentrationMeasurementGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readChlorodibromomethaneConcentrationMeasurementGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ChlorodibromomethaneConcentrationMeasurement.ID, ClusterIDMapping.ChlorodibromomethaneConcentrationMeasurement.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ChlorodibromomethaneConcentrationMeasurementCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.ChlorodibromomethaneConcentrationMeasurementCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedChlorodibromomethaneConcentrationMeasurementClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readChlorodibromomethaneConcentrationMeasurementGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readChlorodibromomethaneConcentrationMeasurementGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readChlorodibromomethaneConcentrationMeasurementAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readChlorodibromomethaneConcentrationMeasurementAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ChlorodibromomethaneConcentrationMeasurement.ID, ClusterIDMapping.ChlorodibromomethaneConcentrationMeasurement.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ChlorodibromomethaneConcentrationMeasurementCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.ChlorodibromomethaneConcentrationMeasurementCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedChlorodibromomethaneConcentrationMeasurementClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readChlorodibromomethaneConcentrationMeasurementAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readChlorodibromomethaneConcentrationMeasurementAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readChlorodibromomethaneConcentrationMeasurementEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readChlorodibromomethaneConcentrationMeasurementEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ChlorodibromomethaneConcentrationMeasurement.ID, ClusterIDMapping.ChlorodibromomethaneConcentrationMeasurement.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ChlorodibromomethaneConcentrationMeasurementCluster) cluster).readEventListAttribute(
//              (ChipClusters.ChlorodibromomethaneConcentrationMeasurementCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedChlorodibromomethaneConcentrationMeasurementClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readChlorodibromomethaneConcentrationMeasurementEventListCommandParams
        );
        result.put("readEventListAttribute", readChlorodibromomethaneConcentrationMeasurementEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readChlorodibromomethaneConcentrationMeasurementAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readChlorodibromomethaneConcentrationMeasurementAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ChlorodibromomethaneConcentrationMeasurement.ID, ClusterIDMapping.ChlorodibromomethaneConcentrationMeasurement.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ChlorodibromomethaneConcentrationMeasurementCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.ChlorodibromomethaneConcentrationMeasurementCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedChlorodibromomethaneConcentrationMeasurementClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readChlorodibromomethaneConcentrationMeasurementAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readChlorodibromomethaneConcentrationMeasurementAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readChlorodibromomethaneConcentrationMeasurementFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readChlorodibromomethaneConcentrationMeasurementFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ChlorodibromomethaneConcentrationMeasurement.ID, ClusterIDMapping.ChlorodibromomethaneConcentrationMeasurement.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ChlorodibromomethaneConcentrationMeasurementCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readChlorodibromomethaneConcentrationMeasurementFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readChlorodibromomethaneConcentrationMeasurementFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readChlorodibromomethaneConcentrationMeasurementClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readChlorodibromomethaneConcentrationMeasurementClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ChlorodibromomethaneConcentrationMeasurement.ID, ClusterIDMapping.ChlorodibromomethaneConcentrationMeasurement.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ChlorodibromomethaneConcentrationMeasurementCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readChlorodibromomethaneConcentrationMeasurementClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readChlorodibromomethaneConcentrationMeasurementClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readChloroformConcentrationMeasurementInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readChloroformConcentrationMeasurementMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readChloroformConcentrationMeasurementMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ChloroformConcentrationMeasurement.ID, ClusterIDMapping.ChloroformConcentrationMeasurement.Attribute.MeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ChloroformConcentrationMeasurementCluster) cluster).readMeasuredValueAttribute(
//              (ChipClusters.ChloroformConcentrationMeasurementCluster.MeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedChloroformConcentrationMeasurementClusterMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readChloroformConcentrationMeasurementMeasuredValueCommandParams
        );
        result.put("readMeasuredValueAttribute", readChloroformConcentrationMeasurementMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readChloroformConcentrationMeasurementMinMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readChloroformConcentrationMeasurementMinMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ChloroformConcentrationMeasurement.ID, ClusterIDMapping.ChloroformConcentrationMeasurement.Attribute.MinMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ChloroformConcentrationMeasurementCluster) cluster).readMinMeasuredValueAttribute(
//              (ChipClusters.ChloroformConcentrationMeasurementCluster.MinMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedChloroformConcentrationMeasurementClusterMinMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readChloroformConcentrationMeasurementMinMeasuredValueCommandParams
        );
        result.put("readMinMeasuredValueAttribute", readChloroformConcentrationMeasurementMinMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readChloroformConcentrationMeasurementMaxMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readChloroformConcentrationMeasurementMaxMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ChloroformConcentrationMeasurement.ID, ClusterIDMapping.ChloroformConcentrationMeasurement.Attribute.MaxMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ChloroformConcentrationMeasurementCluster) cluster).readMaxMeasuredValueAttribute(
//              (ChipClusters.ChloroformConcentrationMeasurementCluster.MaxMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedChloroformConcentrationMeasurementClusterMaxMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readChloroformConcentrationMeasurementMaxMeasuredValueCommandParams
        );
        result.put("readMaxMeasuredValueAttribute", readChloroformConcentrationMeasurementMaxMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readChloroformConcentrationMeasurementPeakMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readChloroformConcentrationMeasurementPeakMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ChloroformConcentrationMeasurement.ID, ClusterIDMapping.ChloroformConcentrationMeasurement.Attribute.PeakMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ChloroformConcentrationMeasurementCluster) cluster).readPeakMeasuredValueAttribute(
//              (ChipClusters.ChloroformConcentrationMeasurementCluster.PeakMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedChloroformConcentrationMeasurementClusterPeakMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readChloroformConcentrationMeasurementPeakMeasuredValueCommandParams
        );
        result.put("readPeakMeasuredValueAttribute", readChloroformConcentrationMeasurementPeakMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readChloroformConcentrationMeasurementPeakMeasuredValueWindowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readChloroformConcentrationMeasurementPeakMeasuredValueWindowAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ChloroformConcentrationMeasurement.ID, ClusterIDMapping.ChloroformConcentrationMeasurement.Attribute.PeakMeasuredValueWindow.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ChloroformConcentrationMeasurementCluster) cluster).readPeakMeasuredValueWindowAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readChloroformConcentrationMeasurementPeakMeasuredValueWindowCommandParams
        );
        result.put("readPeakMeasuredValueWindowAttribute", readChloroformConcentrationMeasurementPeakMeasuredValueWindowAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readChloroformConcentrationMeasurementAverageMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readChloroformConcentrationMeasurementAverageMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ChloroformConcentrationMeasurement.ID, ClusterIDMapping.ChloroformConcentrationMeasurement.Attribute.AverageMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ChloroformConcentrationMeasurementCluster) cluster).readAverageMeasuredValueAttribute(
//              (ChipClusters.ChloroformConcentrationMeasurementCluster.AverageMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedChloroformConcentrationMeasurementClusterAverageMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readChloroformConcentrationMeasurementAverageMeasuredValueCommandParams
        );
        result.put("readAverageMeasuredValueAttribute", readChloroformConcentrationMeasurementAverageMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readChloroformConcentrationMeasurementAverageMeasuredValueWindowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readChloroformConcentrationMeasurementAverageMeasuredValueWindowAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ChloroformConcentrationMeasurement.ID, ClusterIDMapping.ChloroformConcentrationMeasurement.Attribute.AverageMeasuredValueWindow.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ChloroformConcentrationMeasurementCluster) cluster).readAverageMeasuredValueWindowAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readChloroformConcentrationMeasurementAverageMeasuredValueWindowCommandParams
        );
        result.put("readAverageMeasuredValueWindowAttribute", readChloroformConcentrationMeasurementAverageMeasuredValueWindowAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readChloroformConcentrationMeasurementUncertaintyCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readChloroformConcentrationMeasurementUncertaintyAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ChloroformConcentrationMeasurement.ID, ClusterIDMapping.ChloroformConcentrationMeasurement.Attribute.Uncertainty.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ChloroformConcentrationMeasurementCluster) cluster).readUncertaintyAttribute(
//              (ChipClusters.FloatAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFloatAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readChloroformConcentrationMeasurementUncertaintyCommandParams
        );
        result.put("readUncertaintyAttribute", readChloroformConcentrationMeasurementUncertaintyAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readChloroformConcentrationMeasurementMeasurementUnitCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readChloroformConcentrationMeasurementMeasurementUnitAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ChloroformConcentrationMeasurement.ID, ClusterIDMapping.ChloroformConcentrationMeasurement.Attribute.MeasurementUnit.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ChloroformConcentrationMeasurementCluster) cluster).readMeasurementUnitAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readChloroformConcentrationMeasurementMeasurementUnitCommandParams
        );
        result.put("readMeasurementUnitAttribute", readChloroformConcentrationMeasurementMeasurementUnitAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readChloroformConcentrationMeasurementMeasurementMediumCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readChloroformConcentrationMeasurementMeasurementMediumAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ChloroformConcentrationMeasurement.ID, ClusterIDMapping.ChloroformConcentrationMeasurement.Attribute.MeasurementMedium.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ChloroformConcentrationMeasurementCluster) cluster).readMeasurementMediumAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readChloroformConcentrationMeasurementMeasurementMediumCommandParams
        );
        result.put("readMeasurementMediumAttribute", readChloroformConcentrationMeasurementMeasurementMediumAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readChloroformConcentrationMeasurementLevelValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readChloroformConcentrationMeasurementLevelValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ChloroformConcentrationMeasurement.ID, ClusterIDMapping.ChloroformConcentrationMeasurement.Attribute.LevelValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ChloroformConcentrationMeasurementCluster) cluster).readLevelValueAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readChloroformConcentrationMeasurementLevelValueCommandParams
        );
        result.put("readLevelValueAttribute", readChloroformConcentrationMeasurementLevelValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readChloroformConcentrationMeasurementGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readChloroformConcentrationMeasurementGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ChloroformConcentrationMeasurement.ID, ClusterIDMapping.ChloroformConcentrationMeasurement.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ChloroformConcentrationMeasurementCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.ChloroformConcentrationMeasurementCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedChloroformConcentrationMeasurementClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readChloroformConcentrationMeasurementGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readChloroformConcentrationMeasurementGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readChloroformConcentrationMeasurementAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readChloroformConcentrationMeasurementAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ChloroformConcentrationMeasurement.ID, ClusterIDMapping.ChloroformConcentrationMeasurement.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ChloroformConcentrationMeasurementCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.ChloroformConcentrationMeasurementCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedChloroformConcentrationMeasurementClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readChloroformConcentrationMeasurementAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readChloroformConcentrationMeasurementAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readChloroformConcentrationMeasurementEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readChloroformConcentrationMeasurementEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ChloroformConcentrationMeasurement.ID, ClusterIDMapping.ChloroformConcentrationMeasurement.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ChloroformConcentrationMeasurementCluster) cluster).readEventListAttribute(
//              (ChipClusters.ChloroformConcentrationMeasurementCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedChloroformConcentrationMeasurementClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readChloroformConcentrationMeasurementEventListCommandParams
        );
        result.put("readEventListAttribute", readChloroformConcentrationMeasurementEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readChloroformConcentrationMeasurementAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readChloroformConcentrationMeasurementAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ChloroformConcentrationMeasurement.ID, ClusterIDMapping.ChloroformConcentrationMeasurement.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ChloroformConcentrationMeasurementCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.ChloroformConcentrationMeasurementCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedChloroformConcentrationMeasurementClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readChloroformConcentrationMeasurementAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readChloroformConcentrationMeasurementAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readChloroformConcentrationMeasurementFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readChloroformConcentrationMeasurementFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ChloroformConcentrationMeasurement.ID, ClusterIDMapping.ChloroformConcentrationMeasurement.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ChloroformConcentrationMeasurementCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readChloroformConcentrationMeasurementFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readChloroformConcentrationMeasurementFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readChloroformConcentrationMeasurementClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readChloroformConcentrationMeasurementClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ChloroformConcentrationMeasurement.ID, ClusterIDMapping.ChloroformConcentrationMeasurement.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ChloroformConcentrationMeasurementCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readChloroformConcentrationMeasurementClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readChloroformConcentrationMeasurementClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readSodiumConcentrationMeasurementInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readSodiumConcentrationMeasurementMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSodiumConcentrationMeasurementMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SodiumConcentrationMeasurement.ID, ClusterIDMapping.SodiumConcentrationMeasurement.Attribute.MeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SodiumConcentrationMeasurementCluster) cluster).readMeasuredValueAttribute(
//              (ChipClusters.SodiumConcentrationMeasurementCluster.MeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedSodiumConcentrationMeasurementClusterMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSodiumConcentrationMeasurementMeasuredValueCommandParams
        );
        result.put("readMeasuredValueAttribute", readSodiumConcentrationMeasurementMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSodiumConcentrationMeasurementMinMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSodiumConcentrationMeasurementMinMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SodiumConcentrationMeasurement.ID, ClusterIDMapping.SodiumConcentrationMeasurement.Attribute.MinMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SodiumConcentrationMeasurementCluster) cluster).readMinMeasuredValueAttribute(
//              (ChipClusters.SodiumConcentrationMeasurementCluster.MinMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedSodiumConcentrationMeasurementClusterMinMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSodiumConcentrationMeasurementMinMeasuredValueCommandParams
        );
        result.put("readMinMeasuredValueAttribute", readSodiumConcentrationMeasurementMinMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSodiumConcentrationMeasurementMaxMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSodiumConcentrationMeasurementMaxMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SodiumConcentrationMeasurement.ID, ClusterIDMapping.SodiumConcentrationMeasurement.Attribute.MaxMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SodiumConcentrationMeasurementCluster) cluster).readMaxMeasuredValueAttribute(
//              (ChipClusters.SodiumConcentrationMeasurementCluster.MaxMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedSodiumConcentrationMeasurementClusterMaxMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSodiumConcentrationMeasurementMaxMeasuredValueCommandParams
        );
        result.put("readMaxMeasuredValueAttribute", readSodiumConcentrationMeasurementMaxMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSodiumConcentrationMeasurementPeakMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSodiumConcentrationMeasurementPeakMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SodiumConcentrationMeasurement.ID, ClusterIDMapping.SodiumConcentrationMeasurement.Attribute.PeakMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SodiumConcentrationMeasurementCluster) cluster).readPeakMeasuredValueAttribute(
//              (ChipClusters.SodiumConcentrationMeasurementCluster.PeakMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedSodiumConcentrationMeasurementClusterPeakMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSodiumConcentrationMeasurementPeakMeasuredValueCommandParams
        );
        result.put("readPeakMeasuredValueAttribute", readSodiumConcentrationMeasurementPeakMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSodiumConcentrationMeasurementPeakMeasuredValueWindowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSodiumConcentrationMeasurementPeakMeasuredValueWindowAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SodiumConcentrationMeasurement.ID, ClusterIDMapping.SodiumConcentrationMeasurement.Attribute.PeakMeasuredValueWindow.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SodiumConcentrationMeasurementCluster) cluster).readPeakMeasuredValueWindowAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSodiumConcentrationMeasurementPeakMeasuredValueWindowCommandParams
        );
        result.put("readPeakMeasuredValueWindowAttribute", readSodiumConcentrationMeasurementPeakMeasuredValueWindowAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSodiumConcentrationMeasurementAverageMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSodiumConcentrationMeasurementAverageMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SodiumConcentrationMeasurement.ID, ClusterIDMapping.SodiumConcentrationMeasurement.Attribute.AverageMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SodiumConcentrationMeasurementCluster) cluster).readAverageMeasuredValueAttribute(
//              (ChipClusters.SodiumConcentrationMeasurementCluster.AverageMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedSodiumConcentrationMeasurementClusterAverageMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSodiumConcentrationMeasurementAverageMeasuredValueCommandParams
        );
        result.put("readAverageMeasuredValueAttribute", readSodiumConcentrationMeasurementAverageMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSodiumConcentrationMeasurementAverageMeasuredValueWindowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSodiumConcentrationMeasurementAverageMeasuredValueWindowAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SodiumConcentrationMeasurement.ID, ClusterIDMapping.SodiumConcentrationMeasurement.Attribute.AverageMeasuredValueWindow.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SodiumConcentrationMeasurementCluster) cluster).readAverageMeasuredValueWindowAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSodiumConcentrationMeasurementAverageMeasuredValueWindowCommandParams
        );
        result.put("readAverageMeasuredValueWindowAttribute", readSodiumConcentrationMeasurementAverageMeasuredValueWindowAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSodiumConcentrationMeasurementUncertaintyCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSodiumConcentrationMeasurementUncertaintyAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SodiumConcentrationMeasurement.ID, ClusterIDMapping.SodiumConcentrationMeasurement.Attribute.Uncertainty.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SodiumConcentrationMeasurementCluster) cluster).readUncertaintyAttribute(
//              (ChipClusters.FloatAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFloatAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSodiumConcentrationMeasurementUncertaintyCommandParams
        );
        result.put("readUncertaintyAttribute", readSodiumConcentrationMeasurementUncertaintyAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSodiumConcentrationMeasurementMeasurementUnitCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSodiumConcentrationMeasurementMeasurementUnitAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SodiumConcentrationMeasurement.ID, ClusterIDMapping.SodiumConcentrationMeasurement.Attribute.MeasurementUnit.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SodiumConcentrationMeasurementCluster) cluster).readMeasurementUnitAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSodiumConcentrationMeasurementMeasurementUnitCommandParams
        );
        result.put("readMeasurementUnitAttribute", readSodiumConcentrationMeasurementMeasurementUnitAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSodiumConcentrationMeasurementMeasurementMediumCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSodiumConcentrationMeasurementMeasurementMediumAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SodiumConcentrationMeasurement.ID, ClusterIDMapping.SodiumConcentrationMeasurement.Attribute.MeasurementMedium.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SodiumConcentrationMeasurementCluster) cluster).readMeasurementMediumAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSodiumConcentrationMeasurementMeasurementMediumCommandParams
        );
        result.put("readMeasurementMediumAttribute", readSodiumConcentrationMeasurementMeasurementMediumAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSodiumConcentrationMeasurementLevelValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSodiumConcentrationMeasurementLevelValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SodiumConcentrationMeasurement.ID, ClusterIDMapping.SodiumConcentrationMeasurement.Attribute.LevelValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SodiumConcentrationMeasurementCluster) cluster).readLevelValueAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSodiumConcentrationMeasurementLevelValueCommandParams
        );
        result.put("readLevelValueAttribute", readSodiumConcentrationMeasurementLevelValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSodiumConcentrationMeasurementGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSodiumConcentrationMeasurementGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SodiumConcentrationMeasurement.ID, ClusterIDMapping.SodiumConcentrationMeasurement.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SodiumConcentrationMeasurementCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.SodiumConcentrationMeasurementCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedSodiumConcentrationMeasurementClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSodiumConcentrationMeasurementGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readSodiumConcentrationMeasurementGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSodiumConcentrationMeasurementAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSodiumConcentrationMeasurementAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SodiumConcentrationMeasurement.ID, ClusterIDMapping.SodiumConcentrationMeasurement.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SodiumConcentrationMeasurementCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.SodiumConcentrationMeasurementCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedSodiumConcentrationMeasurementClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSodiumConcentrationMeasurementAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readSodiumConcentrationMeasurementAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSodiumConcentrationMeasurementEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSodiumConcentrationMeasurementEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SodiumConcentrationMeasurement.ID, ClusterIDMapping.SodiumConcentrationMeasurement.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SodiumConcentrationMeasurementCluster) cluster).readEventListAttribute(
//              (ChipClusters.SodiumConcentrationMeasurementCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedSodiumConcentrationMeasurementClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSodiumConcentrationMeasurementEventListCommandParams
        );
        result.put("readEventListAttribute", readSodiumConcentrationMeasurementEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSodiumConcentrationMeasurementAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSodiumConcentrationMeasurementAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SodiumConcentrationMeasurement.ID, ClusterIDMapping.SodiumConcentrationMeasurement.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SodiumConcentrationMeasurementCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.SodiumConcentrationMeasurementCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedSodiumConcentrationMeasurementClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSodiumConcentrationMeasurementAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readSodiumConcentrationMeasurementAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSodiumConcentrationMeasurementFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSodiumConcentrationMeasurementFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SodiumConcentrationMeasurement.ID, ClusterIDMapping.SodiumConcentrationMeasurement.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SodiumConcentrationMeasurementCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSodiumConcentrationMeasurementFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readSodiumConcentrationMeasurementFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readSodiumConcentrationMeasurementClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readSodiumConcentrationMeasurementClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.SodiumConcentrationMeasurement.ID, ClusterIDMapping.SodiumConcentrationMeasurement.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.SodiumConcentrationMeasurementCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readSodiumConcentrationMeasurementClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readSodiumConcentrationMeasurementClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readPm25ConcentrationMeasurementInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readPm25ConcentrationMeasurementMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPm25ConcentrationMeasurementMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Pm25ConcentrationMeasurement.ID, ClusterIDMapping.Pm25ConcentrationMeasurement.Attribute.MeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.Pm25ConcentrationMeasurementCluster) cluster).readMeasuredValueAttribute(
//              (ChipClusters.Pm25ConcentrationMeasurementCluster.MeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPm25ConcentrationMeasurementClusterMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPm25ConcentrationMeasurementMeasuredValueCommandParams
        );
        result.put("readMeasuredValueAttribute", readPm25ConcentrationMeasurementMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPm25ConcentrationMeasurementMinMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPm25ConcentrationMeasurementMinMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Pm25ConcentrationMeasurement.ID, ClusterIDMapping.Pm25ConcentrationMeasurement.Attribute.MinMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.Pm25ConcentrationMeasurementCluster) cluster).readMinMeasuredValueAttribute(
//              (ChipClusters.Pm25ConcentrationMeasurementCluster.MinMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPm25ConcentrationMeasurementClusterMinMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPm25ConcentrationMeasurementMinMeasuredValueCommandParams
        );
        result.put("readMinMeasuredValueAttribute", readPm25ConcentrationMeasurementMinMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPm25ConcentrationMeasurementMaxMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPm25ConcentrationMeasurementMaxMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Pm25ConcentrationMeasurement.ID, ClusterIDMapping.Pm25ConcentrationMeasurement.Attribute.MaxMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.Pm25ConcentrationMeasurementCluster) cluster).readMaxMeasuredValueAttribute(
//              (ChipClusters.Pm25ConcentrationMeasurementCluster.MaxMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPm25ConcentrationMeasurementClusterMaxMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPm25ConcentrationMeasurementMaxMeasuredValueCommandParams
        );
        result.put("readMaxMeasuredValueAttribute", readPm25ConcentrationMeasurementMaxMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPm25ConcentrationMeasurementPeakMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPm25ConcentrationMeasurementPeakMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Pm25ConcentrationMeasurement.ID, ClusterIDMapping.Pm25ConcentrationMeasurement.Attribute.PeakMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.Pm25ConcentrationMeasurementCluster) cluster).readPeakMeasuredValueAttribute(
//              (ChipClusters.Pm25ConcentrationMeasurementCluster.PeakMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPm25ConcentrationMeasurementClusterPeakMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPm25ConcentrationMeasurementPeakMeasuredValueCommandParams
        );
        result.put("readPeakMeasuredValueAttribute", readPm25ConcentrationMeasurementPeakMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPm25ConcentrationMeasurementPeakMeasuredValueWindowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPm25ConcentrationMeasurementPeakMeasuredValueWindowAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Pm25ConcentrationMeasurement.ID, ClusterIDMapping.Pm25ConcentrationMeasurement.Attribute.PeakMeasuredValueWindow.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.Pm25ConcentrationMeasurementCluster) cluster).readPeakMeasuredValueWindowAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPm25ConcentrationMeasurementPeakMeasuredValueWindowCommandParams
        );
        result.put("readPeakMeasuredValueWindowAttribute", readPm25ConcentrationMeasurementPeakMeasuredValueWindowAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPm25ConcentrationMeasurementAverageMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPm25ConcentrationMeasurementAverageMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Pm25ConcentrationMeasurement.ID, ClusterIDMapping.Pm25ConcentrationMeasurement.Attribute.AverageMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.Pm25ConcentrationMeasurementCluster) cluster).readAverageMeasuredValueAttribute(
//              (ChipClusters.Pm25ConcentrationMeasurementCluster.AverageMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPm25ConcentrationMeasurementClusterAverageMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPm25ConcentrationMeasurementAverageMeasuredValueCommandParams
        );
        result.put("readAverageMeasuredValueAttribute", readPm25ConcentrationMeasurementAverageMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPm25ConcentrationMeasurementAverageMeasuredValueWindowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPm25ConcentrationMeasurementAverageMeasuredValueWindowAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Pm25ConcentrationMeasurement.ID, ClusterIDMapping.Pm25ConcentrationMeasurement.Attribute.AverageMeasuredValueWindow.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.Pm25ConcentrationMeasurementCluster) cluster).readAverageMeasuredValueWindowAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPm25ConcentrationMeasurementAverageMeasuredValueWindowCommandParams
        );
        result.put("readAverageMeasuredValueWindowAttribute", readPm25ConcentrationMeasurementAverageMeasuredValueWindowAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPm25ConcentrationMeasurementUncertaintyCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPm25ConcentrationMeasurementUncertaintyAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Pm25ConcentrationMeasurement.ID, ClusterIDMapping.Pm25ConcentrationMeasurement.Attribute.Uncertainty.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.Pm25ConcentrationMeasurementCluster) cluster).readUncertaintyAttribute(
//              (ChipClusters.FloatAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFloatAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPm25ConcentrationMeasurementUncertaintyCommandParams
        );
        result.put("readUncertaintyAttribute", readPm25ConcentrationMeasurementUncertaintyAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPm25ConcentrationMeasurementMeasurementUnitCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPm25ConcentrationMeasurementMeasurementUnitAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Pm25ConcentrationMeasurement.ID, ClusterIDMapping.Pm25ConcentrationMeasurement.Attribute.MeasurementUnit.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.Pm25ConcentrationMeasurementCluster) cluster).readMeasurementUnitAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPm25ConcentrationMeasurementMeasurementUnitCommandParams
        );
        result.put("readMeasurementUnitAttribute", readPm25ConcentrationMeasurementMeasurementUnitAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPm25ConcentrationMeasurementMeasurementMediumCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPm25ConcentrationMeasurementMeasurementMediumAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Pm25ConcentrationMeasurement.ID, ClusterIDMapping.Pm25ConcentrationMeasurement.Attribute.MeasurementMedium.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.Pm25ConcentrationMeasurementCluster) cluster).readMeasurementMediumAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPm25ConcentrationMeasurementMeasurementMediumCommandParams
        );
        result.put("readMeasurementMediumAttribute", readPm25ConcentrationMeasurementMeasurementMediumAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPm25ConcentrationMeasurementLevelValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPm25ConcentrationMeasurementLevelValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Pm25ConcentrationMeasurement.ID, ClusterIDMapping.Pm25ConcentrationMeasurement.Attribute.LevelValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.Pm25ConcentrationMeasurementCluster) cluster).readLevelValueAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPm25ConcentrationMeasurementLevelValueCommandParams
        );
        result.put("readLevelValueAttribute", readPm25ConcentrationMeasurementLevelValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPm25ConcentrationMeasurementGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPm25ConcentrationMeasurementGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Pm25ConcentrationMeasurement.ID, ClusterIDMapping.Pm25ConcentrationMeasurement.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.Pm25ConcentrationMeasurementCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.Pm25ConcentrationMeasurementCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPm25ConcentrationMeasurementClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPm25ConcentrationMeasurementGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readPm25ConcentrationMeasurementGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPm25ConcentrationMeasurementAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPm25ConcentrationMeasurementAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Pm25ConcentrationMeasurement.ID, ClusterIDMapping.Pm25ConcentrationMeasurement.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.Pm25ConcentrationMeasurementCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.Pm25ConcentrationMeasurementCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPm25ConcentrationMeasurementClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPm25ConcentrationMeasurementAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readPm25ConcentrationMeasurementAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPm25ConcentrationMeasurementEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPm25ConcentrationMeasurementEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Pm25ConcentrationMeasurement.ID, ClusterIDMapping.Pm25ConcentrationMeasurement.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.Pm25ConcentrationMeasurementCluster) cluster).readEventListAttribute(
//              (ChipClusters.Pm25ConcentrationMeasurementCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPm25ConcentrationMeasurementClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPm25ConcentrationMeasurementEventListCommandParams
        );
        result.put("readEventListAttribute", readPm25ConcentrationMeasurementEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPm25ConcentrationMeasurementAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPm25ConcentrationMeasurementAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Pm25ConcentrationMeasurement.ID, ClusterIDMapping.Pm25ConcentrationMeasurement.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.Pm25ConcentrationMeasurementCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.Pm25ConcentrationMeasurementCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPm25ConcentrationMeasurementClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPm25ConcentrationMeasurementAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readPm25ConcentrationMeasurementAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPm25ConcentrationMeasurementFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPm25ConcentrationMeasurementFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Pm25ConcentrationMeasurement.ID, ClusterIDMapping.Pm25ConcentrationMeasurement.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.Pm25ConcentrationMeasurementCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPm25ConcentrationMeasurementFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readPm25ConcentrationMeasurementFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPm25ConcentrationMeasurementClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPm25ConcentrationMeasurementClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Pm25ConcentrationMeasurement.ID, ClusterIDMapping.Pm25ConcentrationMeasurement.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.Pm25ConcentrationMeasurementCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPm25ConcentrationMeasurementClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readPm25ConcentrationMeasurementClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readFormaldehydeConcentrationMeasurementInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readFormaldehydeConcentrationMeasurementMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFormaldehydeConcentrationMeasurementMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FormaldehydeConcentrationMeasurement.ID, ClusterIDMapping.FormaldehydeConcentrationMeasurement.Attribute.MeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FormaldehydeConcentrationMeasurementCluster) cluster).readMeasuredValueAttribute(
//              (ChipClusters.FormaldehydeConcentrationMeasurementCluster.MeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFormaldehydeConcentrationMeasurementClusterMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFormaldehydeConcentrationMeasurementMeasuredValueCommandParams
        );
        result.put("readMeasuredValueAttribute", readFormaldehydeConcentrationMeasurementMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFormaldehydeConcentrationMeasurementMinMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFormaldehydeConcentrationMeasurementMinMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FormaldehydeConcentrationMeasurement.ID, ClusterIDMapping.FormaldehydeConcentrationMeasurement.Attribute.MinMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FormaldehydeConcentrationMeasurementCluster) cluster).readMinMeasuredValueAttribute(
//              (ChipClusters.FormaldehydeConcentrationMeasurementCluster.MinMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFormaldehydeConcentrationMeasurementClusterMinMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFormaldehydeConcentrationMeasurementMinMeasuredValueCommandParams
        );
        result.put("readMinMeasuredValueAttribute", readFormaldehydeConcentrationMeasurementMinMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFormaldehydeConcentrationMeasurementMaxMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFormaldehydeConcentrationMeasurementMaxMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FormaldehydeConcentrationMeasurement.ID, ClusterIDMapping.FormaldehydeConcentrationMeasurement.Attribute.MaxMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FormaldehydeConcentrationMeasurementCluster) cluster).readMaxMeasuredValueAttribute(
//              (ChipClusters.FormaldehydeConcentrationMeasurementCluster.MaxMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFormaldehydeConcentrationMeasurementClusterMaxMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFormaldehydeConcentrationMeasurementMaxMeasuredValueCommandParams
        );
        result.put("readMaxMeasuredValueAttribute", readFormaldehydeConcentrationMeasurementMaxMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFormaldehydeConcentrationMeasurementPeakMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFormaldehydeConcentrationMeasurementPeakMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FormaldehydeConcentrationMeasurement.ID, ClusterIDMapping.FormaldehydeConcentrationMeasurement.Attribute.PeakMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FormaldehydeConcentrationMeasurementCluster) cluster).readPeakMeasuredValueAttribute(
//              (ChipClusters.FormaldehydeConcentrationMeasurementCluster.PeakMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFormaldehydeConcentrationMeasurementClusterPeakMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFormaldehydeConcentrationMeasurementPeakMeasuredValueCommandParams
        );
        result.put("readPeakMeasuredValueAttribute", readFormaldehydeConcentrationMeasurementPeakMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFormaldehydeConcentrationMeasurementPeakMeasuredValueWindowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFormaldehydeConcentrationMeasurementPeakMeasuredValueWindowAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FormaldehydeConcentrationMeasurement.ID, ClusterIDMapping.FormaldehydeConcentrationMeasurement.Attribute.PeakMeasuredValueWindow.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FormaldehydeConcentrationMeasurementCluster) cluster).readPeakMeasuredValueWindowAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFormaldehydeConcentrationMeasurementPeakMeasuredValueWindowCommandParams
        );
        result.put("readPeakMeasuredValueWindowAttribute", readFormaldehydeConcentrationMeasurementPeakMeasuredValueWindowAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFormaldehydeConcentrationMeasurementAverageMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFormaldehydeConcentrationMeasurementAverageMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FormaldehydeConcentrationMeasurement.ID, ClusterIDMapping.FormaldehydeConcentrationMeasurement.Attribute.AverageMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FormaldehydeConcentrationMeasurementCluster) cluster).readAverageMeasuredValueAttribute(
//              (ChipClusters.FormaldehydeConcentrationMeasurementCluster.AverageMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFormaldehydeConcentrationMeasurementClusterAverageMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFormaldehydeConcentrationMeasurementAverageMeasuredValueCommandParams
        );
        result.put("readAverageMeasuredValueAttribute", readFormaldehydeConcentrationMeasurementAverageMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFormaldehydeConcentrationMeasurementAverageMeasuredValueWindowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFormaldehydeConcentrationMeasurementAverageMeasuredValueWindowAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FormaldehydeConcentrationMeasurement.ID, ClusterIDMapping.FormaldehydeConcentrationMeasurement.Attribute.AverageMeasuredValueWindow.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FormaldehydeConcentrationMeasurementCluster) cluster).readAverageMeasuredValueWindowAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFormaldehydeConcentrationMeasurementAverageMeasuredValueWindowCommandParams
        );
        result.put("readAverageMeasuredValueWindowAttribute", readFormaldehydeConcentrationMeasurementAverageMeasuredValueWindowAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFormaldehydeConcentrationMeasurementUncertaintyCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFormaldehydeConcentrationMeasurementUncertaintyAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FormaldehydeConcentrationMeasurement.ID, ClusterIDMapping.FormaldehydeConcentrationMeasurement.Attribute.Uncertainty.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FormaldehydeConcentrationMeasurementCluster) cluster).readUncertaintyAttribute(
//              (ChipClusters.FloatAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFloatAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFormaldehydeConcentrationMeasurementUncertaintyCommandParams
        );
        result.put("readUncertaintyAttribute", readFormaldehydeConcentrationMeasurementUncertaintyAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFormaldehydeConcentrationMeasurementMeasurementUnitCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFormaldehydeConcentrationMeasurementMeasurementUnitAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FormaldehydeConcentrationMeasurement.ID, ClusterIDMapping.FormaldehydeConcentrationMeasurement.Attribute.MeasurementUnit.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FormaldehydeConcentrationMeasurementCluster) cluster).readMeasurementUnitAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFormaldehydeConcentrationMeasurementMeasurementUnitCommandParams
        );
        result.put("readMeasurementUnitAttribute", readFormaldehydeConcentrationMeasurementMeasurementUnitAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFormaldehydeConcentrationMeasurementMeasurementMediumCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFormaldehydeConcentrationMeasurementMeasurementMediumAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FormaldehydeConcentrationMeasurement.ID, ClusterIDMapping.FormaldehydeConcentrationMeasurement.Attribute.MeasurementMedium.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FormaldehydeConcentrationMeasurementCluster) cluster).readMeasurementMediumAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFormaldehydeConcentrationMeasurementMeasurementMediumCommandParams
        );
        result.put("readMeasurementMediumAttribute", readFormaldehydeConcentrationMeasurementMeasurementMediumAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFormaldehydeConcentrationMeasurementLevelValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFormaldehydeConcentrationMeasurementLevelValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FormaldehydeConcentrationMeasurement.ID, ClusterIDMapping.FormaldehydeConcentrationMeasurement.Attribute.LevelValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FormaldehydeConcentrationMeasurementCluster) cluster).readLevelValueAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFormaldehydeConcentrationMeasurementLevelValueCommandParams
        );
        result.put("readLevelValueAttribute", readFormaldehydeConcentrationMeasurementLevelValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFormaldehydeConcentrationMeasurementGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFormaldehydeConcentrationMeasurementGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FormaldehydeConcentrationMeasurement.ID, ClusterIDMapping.FormaldehydeConcentrationMeasurement.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FormaldehydeConcentrationMeasurementCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.FormaldehydeConcentrationMeasurementCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFormaldehydeConcentrationMeasurementClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFormaldehydeConcentrationMeasurementGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readFormaldehydeConcentrationMeasurementGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFormaldehydeConcentrationMeasurementAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFormaldehydeConcentrationMeasurementAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FormaldehydeConcentrationMeasurement.ID, ClusterIDMapping.FormaldehydeConcentrationMeasurement.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FormaldehydeConcentrationMeasurementCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.FormaldehydeConcentrationMeasurementCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFormaldehydeConcentrationMeasurementClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFormaldehydeConcentrationMeasurementAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readFormaldehydeConcentrationMeasurementAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFormaldehydeConcentrationMeasurementEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFormaldehydeConcentrationMeasurementEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FormaldehydeConcentrationMeasurement.ID, ClusterIDMapping.FormaldehydeConcentrationMeasurement.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FormaldehydeConcentrationMeasurementCluster) cluster).readEventListAttribute(
//              (ChipClusters.FormaldehydeConcentrationMeasurementCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFormaldehydeConcentrationMeasurementClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFormaldehydeConcentrationMeasurementEventListCommandParams
        );
        result.put("readEventListAttribute", readFormaldehydeConcentrationMeasurementEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFormaldehydeConcentrationMeasurementAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFormaldehydeConcentrationMeasurementAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FormaldehydeConcentrationMeasurement.ID, ClusterIDMapping.FormaldehydeConcentrationMeasurement.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FormaldehydeConcentrationMeasurementCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.FormaldehydeConcentrationMeasurementCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFormaldehydeConcentrationMeasurementClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFormaldehydeConcentrationMeasurementAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readFormaldehydeConcentrationMeasurementAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFormaldehydeConcentrationMeasurementFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFormaldehydeConcentrationMeasurementFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FormaldehydeConcentrationMeasurement.ID, ClusterIDMapping.FormaldehydeConcentrationMeasurement.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FormaldehydeConcentrationMeasurementCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFormaldehydeConcentrationMeasurementFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readFormaldehydeConcentrationMeasurementFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFormaldehydeConcentrationMeasurementClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFormaldehydeConcentrationMeasurementClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FormaldehydeConcentrationMeasurement.ID, ClusterIDMapping.FormaldehydeConcentrationMeasurement.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FormaldehydeConcentrationMeasurementCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFormaldehydeConcentrationMeasurementClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readFormaldehydeConcentrationMeasurementClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readPm1ConcentrationMeasurementInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readPm1ConcentrationMeasurementMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPm1ConcentrationMeasurementMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Pm1ConcentrationMeasurement.ID, ClusterIDMapping.Pm1ConcentrationMeasurement.Attribute.MeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.Pm1ConcentrationMeasurementCluster) cluster).readMeasuredValueAttribute(
//              (ChipClusters.Pm1ConcentrationMeasurementCluster.MeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPm1ConcentrationMeasurementClusterMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPm1ConcentrationMeasurementMeasuredValueCommandParams
        );
        result.put("readMeasuredValueAttribute", readPm1ConcentrationMeasurementMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPm1ConcentrationMeasurementMinMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPm1ConcentrationMeasurementMinMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Pm1ConcentrationMeasurement.ID, ClusterIDMapping.Pm1ConcentrationMeasurement.Attribute.MinMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.Pm1ConcentrationMeasurementCluster) cluster).readMinMeasuredValueAttribute(
//              (ChipClusters.Pm1ConcentrationMeasurementCluster.MinMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPm1ConcentrationMeasurementClusterMinMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPm1ConcentrationMeasurementMinMeasuredValueCommandParams
        );
        result.put("readMinMeasuredValueAttribute", readPm1ConcentrationMeasurementMinMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPm1ConcentrationMeasurementMaxMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPm1ConcentrationMeasurementMaxMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Pm1ConcentrationMeasurement.ID, ClusterIDMapping.Pm1ConcentrationMeasurement.Attribute.MaxMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.Pm1ConcentrationMeasurementCluster) cluster).readMaxMeasuredValueAttribute(
//              (ChipClusters.Pm1ConcentrationMeasurementCluster.MaxMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPm1ConcentrationMeasurementClusterMaxMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPm1ConcentrationMeasurementMaxMeasuredValueCommandParams
        );
        result.put("readMaxMeasuredValueAttribute", readPm1ConcentrationMeasurementMaxMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPm1ConcentrationMeasurementPeakMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPm1ConcentrationMeasurementPeakMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Pm1ConcentrationMeasurement.ID, ClusterIDMapping.Pm1ConcentrationMeasurement.Attribute.PeakMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.Pm1ConcentrationMeasurementCluster) cluster).readPeakMeasuredValueAttribute(
//              (ChipClusters.Pm1ConcentrationMeasurementCluster.PeakMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPm1ConcentrationMeasurementClusterPeakMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPm1ConcentrationMeasurementPeakMeasuredValueCommandParams
        );
        result.put("readPeakMeasuredValueAttribute", readPm1ConcentrationMeasurementPeakMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPm1ConcentrationMeasurementPeakMeasuredValueWindowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPm1ConcentrationMeasurementPeakMeasuredValueWindowAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Pm1ConcentrationMeasurement.ID, ClusterIDMapping.Pm1ConcentrationMeasurement.Attribute.PeakMeasuredValueWindow.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.Pm1ConcentrationMeasurementCluster) cluster).readPeakMeasuredValueWindowAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPm1ConcentrationMeasurementPeakMeasuredValueWindowCommandParams
        );
        result.put("readPeakMeasuredValueWindowAttribute", readPm1ConcentrationMeasurementPeakMeasuredValueWindowAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPm1ConcentrationMeasurementAverageMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPm1ConcentrationMeasurementAverageMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Pm1ConcentrationMeasurement.ID, ClusterIDMapping.Pm1ConcentrationMeasurement.Attribute.AverageMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.Pm1ConcentrationMeasurementCluster) cluster).readAverageMeasuredValueAttribute(
//              (ChipClusters.Pm1ConcentrationMeasurementCluster.AverageMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPm1ConcentrationMeasurementClusterAverageMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPm1ConcentrationMeasurementAverageMeasuredValueCommandParams
        );
        result.put("readAverageMeasuredValueAttribute", readPm1ConcentrationMeasurementAverageMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPm1ConcentrationMeasurementAverageMeasuredValueWindowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPm1ConcentrationMeasurementAverageMeasuredValueWindowAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Pm1ConcentrationMeasurement.ID, ClusterIDMapping.Pm1ConcentrationMeasurement.Attribute.AverageMeasuredValueWindow.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.Pm1ConcentrationMeasurementCluster) cluster).readAverageMeasuredValueWindowAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPm1ConcentrationMeasurementAverageMeasuredValueWindowCommandParams
        );
        result.put("readAverageMeasuredValueWindowAttribute", readPm1ConcentrationMeasurementAverageMeasuredValueWindowAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPm1ConcentrationMeasurementUncertaintyCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPm1ConcentrationMeasurementUncertaintyAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Pm1ConcentrationMeasurement.ID, ClusterIDMapping.Pm1ConcentrationMeasurement.Attribute.Uncertainty.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.Pm1ConcentrationMeasurementCluster) cluster).readUncertaintyAttribute(
//              (ChipClusters.FloatAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFloatAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPm1ConcentrationMeasurementUncertaintyCommandParams
        );
        result.put("readUncertaintyAttribute", readPm1ConcentrationMeasurementUncertaintyAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPm1ConcentrationMeasurementMeasurementUnitCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPm1ConcentrationMeasurementMeasurementUnitAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Pm1ConcentrationMeasurement.ID, ClusterIDMapping.Pm1ConcentrationMeasurement.Attribute.MeasurementUnit.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.Pm1ConcentrationMeasurementCluster) cluster).readMeasurementUnitAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPm1ConcentrationMeasurementMeasurementUnitCommandParams
        );
        result.put("readMeasurementUnitAttribute", readPm1ConcentrationMeasurementMeasurementUnitAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPm1ConcentrationMeasurementMeasurementMediumCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPm1ConcentrationMeasurementMeasurementMediumAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Pm1ConcentrationMeasurement.ID, ClusterIDMapping.Pm1ConcentrationMeasurement.Attribute.MeasurementMedium.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.Pm1ConcentrationMeasurementCluster) cluster).readMeasurementMediumAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPm1ConcentrationMeasurementMeasurementMediumCommandParams
        );
        result.put("readMeasurementMediumAttribute", readPm1ConcentrationMeasurementMeasurementMediumAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPm1ConcentrationMeasurementLevelValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPm1ConcentrationMeasurementLevelValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Pm1ConcentrationMeasurement.ID, ClusterIDMapping.Pm1ConcentrationMeasurement.Attribute.LevelValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.Pm1ConcentrationMeasurementCluster) cluster).readLevelValueAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPm1ConcentrationMeasurementLevelValueCommandParams
        );
        result.put("readLevelValueAttribute", readPm1ConcentrationMeasurementLevelValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPm1ConcentrationMeasurementGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPm1ConcentrationMeasurementGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Pm1ConcentrationMeasurement.ID, ClusterIDMapping.Pm1ConcentrationMeasurement.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.Pm1ConcentrationMeasurementCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.Pm1ConcentrationMeasurementCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPm1ConcentrationMeasurementClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPm1ConcentrationMeasurementGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readPm1ConcentrationMeasurementGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPm1ConcentrationMeasurementAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPm1ConcentrationMeasurementAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Pm1ConcentrationMeasurement.ID, ClusterIDMapping.Pm1ConcentrationMeasurement.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.Pm1ConcentrationMeasurementCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.Pm1ConcentrationMeasurementCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPm1ConcentrationMeasurementClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPm1ConcentrationMeasurementAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readPm1ConcentrationMeasurementAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPm1ConcentrationMeasurementEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPm1ConcentrationMeasurementEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Pm1ConcentrationMeasurement.ID, ClusterIDMapping.Pm1ConcentrationMeasurement.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.Pm1ConcentrationMeasurementCluster) cluster).readEventListAttribute(
//              (ChipClusters.Pm1ConcentrationMeasurementCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPm1ConcentrationMeasurementClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPm1ConcentrationMeasurementEventListCommandParams
        );
        result.put("readEventListAttribute", readPm1ConcentrationMeasurementEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPm1ConcentrationMeasurementAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPm1ConcentrationMeasurementAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Pm1ConcentrationMeasurement.ID, ClusterIDMapping.Pm1ConcentrationMeasurement.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.Pm1ConcentrationMeasurementCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.Pm1ConcentrationMeasurementCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPm1ConcentrationMeasurementClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPm1ConcentrationMeasurementAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readPm1ConcentrationMeasurementAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPm1ConcentrationMeasurementFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPm1ConcentrationMeasurementFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Pm1ConcentrationMeasurement.ID, ClusterIDMapping.Pm1ConcentrationMeasurement.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.Pm1ConcentrationMeasurementCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPm1ConcentrationMeasurementFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readPm1ConcentrationMeasurementFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPm1ConcentrationMeasurementClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPm1ConcentrationMeasurementClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Pm1ConcentrationMeasurement.ID, ClusterIDMapping.Pm1ConcentrationMeasurement.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.Pm1ConcentrationMeasurementCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPm1ConcentrationMeasurementClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readPm1ConcentrationMeasurementClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readPm10ConcentrationMeasurementInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readPm10ConcentrationMeasurementMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPm10ConcentrationMeasurementMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Pm10ConcentrationMeasurement.ID, ClusterIDMapping.Pm10ConcentrationMeasurement.Attribute.MeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.Pm10ConcentrationMeasurementCluster) cluster).readMeasuredValueAttribute(
//              (ChipClusters.Pm10ConcentrationMeasurementCluster.MeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPm10ConcentrationMeasurementClusterMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPm10ConcentrationMeasurementMeasuredValueCommandParams
        );
        result.put("readMeasuredValueAttribute", readPm10ConcentrationMeasurementMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPm10ConcentrationMeasurementMinMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPm10ConcentrationMeasurementMinMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Pm10ConcentrationMeasurement.ID, ClusterIDMapping.Pm10ConcentrationMeasurement.Attribute.MinMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.Pm10ConcentrationMeasurementCluster) cluster).readMinMeasuredValueAttribute(
//              (ChipClusters.Pm10ConcentrationMeasurementCluster.MinMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPm10ConcentrationMeasurementClusterMinMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPm10ConcentrationMeasurementMinMeasuredValueCommandParams
        );
        result.put("readMinMeasuredValueAttribute", readPm10ConcentrationMeasurementMinMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPm10ConcentrationMeasurementMaxMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPm10ConcentrationMeasurementMaxMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Pm10ConcentrationMeasurement.ID, ClusterIDMapping.Pm10ConcentrationMeasurement.Attribute.MaxMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.Pm10ConcentrationMeasurementCluster) cluster).readMaxMeasuredValueAttribute(
//              (ChipClusters.Pm10ConcentrationMeasurementCluster.MaxMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPm10ConcentrationMeasurementClusterMaxMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPm10ConcentrationMeasurementMaxMeasuredValueCommandParams
        );
        result.put("readMaxMeasuredValueAttribute", readPm10ConcentrationMeasurementMaxMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPm10ConcentrationMeasurementPeakMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPm10ConcentrationMeasurementPeakMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Pm10ConcentrationMeasurement.ID, ClusterIDMapping.Pm10ConcentrationMeasurement.Attribute.PeakMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.Pm10ConcentrationMeasurementCluster) cluster).readPeakMeasuredValueAttribute(
//              (ChipClusters.Pm10ConcentrationMeasurementCluster.PeakMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPm10ConcentrationMeasurementClusterPeakMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPm10ConcentrationMeasurementPeakMeasuredValueCommandParams
        );
        result.put("readPeakMeasuredValueAttribute", readPm10ConcentrationMeasurementPeakMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPm10ConcentrationMeasurementPeakMeasuredValueWindowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPm10ConcentrationMeasurementPeakMeasuredValueWindowAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Pm10ConcentrationMeasurement.ID, ClusterIDMapping.Pm10ConcentrationMeasurement.Attribute.PeakMeasuredValueWindow.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.Pm10ConcentrationMeasurementCluster) cluster).readPeakMeasuredValueWindowAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPm10ConcentrationMeasurementPeakMeasuredValueWindowCommandParams
        );
        result.put("readPeakMeasuredValueWindowAttribute", readPm10ConcentrationMeasurementPeakMeasuredValueWindowAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPm10ConcentrationMeasurementAverageMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPm10ConcentrationMeasurementAverageMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Pm10ConcentrationMeasurement.ID, ClusterIDMapping.Pm10ConcentrationMeasurement.Attribute.AverageMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.Pm10ConcentrationMeasurementCluster) cluster).readAverageMeasuredValueAttribute(
//              (ChipClusters.Pm10ConcentrationMeasurementCluster.AverageMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPm10ConcentrationMeasurementClusterAverageMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPm10ConcentrationMeasurementAverageMeasuredValueCommandParams
        );
        result.put("readAverageMeasuredValueAttribute", readPm10ConcentrationMeasurementAverageMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPm10ConcentrationMeasurementAverageMeasuredValueWindowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPm10ConcentrationMeasurementAverageMeasuredValueWindowAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Pm10ConcentrationMeasurement.ID, ClusterIDMapping.Pm10ConcentrationMeasurement.Attribute.AverageMeasuredValueWindow.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.Pm10ConcentrationMeasurementCluster) cluster).readAverageMeasuredValueWindowAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPm10ConcentrationMeasurementAverageMeasuredValueWindowCommandParams
        );
        result.put("readAverageMeasuredValueWindowAttribute", readPm10ConcentrationMeasurementAverageMeasuredValueWindowAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPm10ConcentrationMeasurementUncertaintyCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPm10ConcentrationMeasurementUncertaintyAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Pm10ConcentrationMeasurement.ID, ClusterIDMapping.Pm10ConcentrationMeasurement.Attribute.Uncertainty.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.Pm10ConcentrationMeasurementCluster) cluster).readUncertaintyAttribute(
//              (ChipClusters.FloatAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFloatAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPm10ConcentrationMeasurementUncertaintyCommandParams
        );
        result.put("readUncertaintyAttribute", readPm10ConcentrationMeasurementUncertaintyAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPm10ConcentrationMeasurementMeasurementUnitCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPm10ConcentrationMeasurementMeasurementUnitAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Pm10ConcentrationMeasurement.ID, ClusterIDMapping.Pm10ConcentrationMeasurement.Attribute.MeasurementUnit.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.Pm10ConcentrationMeasurementCluster) cluster).readMeasurementUnitAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPm10ConcentrationMeasurementMeasurementUnitCommandParams
        );
        result.put("readMeasurementUnitAttribute", readPm10ConcentrationMeasurementMeasurementUnitAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPm10ConcentrationMeasurementMeasurementMediumCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPm10ConcentrationMeasurementMeasurementMediumAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Pm10ConcentrationMeasurement.ID, ClusterIDMapping.Pm10ConcentrationMeasurement.Attribute.MeasurementMedium.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.Pm10ConcentrationMeasurementCluster) cluster).readMeasurementMediumAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPm10ConcentrationMeasurementMeasurementMediumCommandParams
        );
        result.put("readMeasurementMediumAttribute", readPm10ConcentrationMeasurementMeasurementMediumAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPm10ConcentrationMeasurementLevelValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPm10ConcentrationMeasurementLevelValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Pm10ConcentrationMeasurement.ID, ClusterIDMapping.Pm10ConcentrationMeasurement.Attribute.LevelValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.Pm10ConcentrationMeasurementCluster) cluster).readLevelValueAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPm10ConcentrationMeasurementLevelValueCommandParams
        );
        result.put("readLevelValueAttribute", readPm10ConcentrationMeasurementLevelValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPm10ConcentrationMeasurementGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPm10ConcentrationMeasurementGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Pm10ConcentrationMeasurement.ID, ClusterIDMapping.Pm10ConcentrationMeasurement.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.Pm10ConcentrationMeasurementCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.Pm10ConcentrationMeasurementCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPm10ConcentrationMeasurementClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPm10ConcentrationMeasurementGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readPm10ConcentrationMeasurementGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPm10ConcentrationMeasurementAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPm10ConcentrationMeasurementAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Pm10ConcentrationMeasurement.ID, ClusterIDMapping.Pm10ConcentrationMeasurement.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.Pm10ConcentrationMeasurementCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.Pm10ConcentrationMeasurementCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPm10ConcentrationMeasurementClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPm10ConcentrationMeasurementAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readPm10ConcentrationMeasurementAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPm10ConcentrationMeasurementEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPm10ConcentrationMeasurementEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Pm10ConcentrationMeasurement.ID, ClusterIDMapping.Pm10ConcentrationMeasurement.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.Pm10ConcentrationMeasurementCluster) cluster).readEventListAttribute(
//              (ChipClusters.Pm10ConcentrationMeasurementCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPm10ConcentrationMeasurementClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPm10ConcentrationMeasurementEventListCommandParams
        );
        result.put("readEventListAttribute", readPm10ConcentrationMeasurementEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPm10ConcentrationMeasurementAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPm10ConcentrationMeasurementAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Pm10ConcentrationMeasurement.ID, ClusterIDMapping.Pm10ConcentrationMeasurement.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.Pm10ConcentrationMeasurementCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.Pm10ConcentrationMeasurementCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedPm10ConcentrationMeasurementClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPm10ConcentrationMeasurementAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readPm10ConcentrationMeasurementAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPm10ConcentrationMeasurementFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPm10ConcentrationMeasurementFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Pm10ConcentrationMeasurement.ID, ClusterIDMapping.Pm10ConcentrationMeasurement.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.Pm10ConcentrationMeasurementCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPm10ConcentrationMeasurementFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readPm10ConcentrationMeasurementFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readPm10ConcentrationMeasurementClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readPm10ConcentrationMeasurementClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Pm10ConcentrationMeasurement.ID, ClusterIDMapping.Pm10ConcentrationMeasurement.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.Pm10ConcentrationMeasurementCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readPm10ConcentrationMeasurementClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readPm10ConcentrationMeasurementClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readTotalVolatileOrganicCompoundsConcentrationMeasurementInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readTotalVolatileOrganicCompoundsConcentrationMeasurementMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTotalVolatileOrganicCompoundsConcentrationMeasurementMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TotalVolatileOrganicCompoundsConcentrationMeasurement.ID, ClusterIDMapping.TotalVolatileOrganicCompoundsConcentrationMeasurement.Attribute.MeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TotalVolatileOrganicCompoundsConcentrationMeasurementCluster) cluster).readMeasuredValueAttribute(
//              (ChipClusters.TotalVolatileOrganicCompoundsConcentrationMeasurementCluster.MeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedTotalVolatileOrganicCompoundsConcentrationMeasurementClusterMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTotalVolatileOrganicCompoundsConcentrationMeasurementMeasuredValueCommandParams
        );
        result.put("readMeasuredValueAttribute", readTotalVolatileOrganicCompoundsConcentrationMeasurementMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTotalVolatileOrganicCompoundsConcentrationMeasurementMinMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTotalVolatileOrganicCompoundsConcentrationMeasurementMinMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TotalVolatileOrganicCompoundsConcentrationMeasurement.ID, ClusterIDMapping.TotalVolatileOrganicCompoundsConcentrationMeasurement.Attribute.MinMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TotalVolatileOrganicCompoundsConcentrationMeasurementCluster) cluster).readMinMeasuredValueAttribute(
//              (ChipClusters.TotalVolatileOrganicCompoundsConcentrationMeasurementCluster.MinMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedTotalVolatileOrganicCompoundsConcentrationMeasurementClusterMinMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTotalVolatileOrganicCompoundsConcentrationMeasurementMinMeasuredValueCommandParams
        );
        result.put("readMinMeasuredValueAttribute", readTotalVolatileOrganicCompoundsConcentrationMeasurementMinMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTotalVolatileOrganicCompoundsConcentrationMeasurementMaxMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTotalVolatileOrganicCompoundsConcentrationMeasurementMaxMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TotalVolatileOrganicCompoundsConcentrationMeasurement.ID, ClusterIDMapping.TotalVolatileOrganicCompoundsConcentrationMeasurement.Attribute.MaxMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TotalVolatileOrganicCompoundsConcentrationMeasurementCluster) cluster).readMaxMeasuredValueAttribute(
//              (ChipClusters.TotalVolatileOrganicCompoundsConcentrationMeasurementCluster.MaxMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedTotalVolatileOrganicCompoundsConcentrationMeasurementClusterMaxMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTotalVolatileOrganicCompoundsConcentrationMeasurementMaxMeasuredValueCommandParams
        );
        result.put("readMaxMeasuredValueAttribute", readTotalVolatileOrganicCompoundsConcentrationMeasurementMaxMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTotalVolatileOrganicCompoundsConcentrationMeasurementPeakMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTotalVolatileOrganicCompoundsConcentrationMeasurementPeakMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TotalVolatileOrganicCompoundsConcentrationMeasurement.ID, ClusterIDMapping.TotalVolatileOrganicCompoundsConcentrationMeasurement.Attribute.PeakMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TotalVolatileOrganicCompoundsConcentrationMeasurementCluster) cluster).readPeakMeasuredValueAttribute(
//              (ChipClusters.TotalVolatileOrganicCompoundsConcentrationMeasurementCluster.PeakMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedTotalVolatileOrganicCompoundsConcentrationMeasurementClusterPeakMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTotalVolatileOrganicCompoundsConcentrationMeasurementPeakMeasuredValueCommandParams
        );
        result.put("readPeakMeasuredValueAttribute", readTotalVolatileOrganicCompoundsConcentrationMeasurementPeakMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTotalVolatileOrganicCompoundsConcentrationMeasurementPeakMeasuredValueWindowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTotalVolatileOrganicCompoundsConcentrationMeasurementPeakMeasuredValueWindowAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TotalVolatileOrganicCompoundsConcentrationMeasurement.ID, ClusterIDMapping.TotalVolatileOrganicCompoundsConcentrationMeasurement.Attribute.PeakMeasuredValueWindow.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TotalVolatileOrganicCompoundsConcentrationMeasurementCluster) cluster).readPeakMeasuredValueWindowAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTotalVolatileOrganicCompoundsConcentrationMeasurementPeakMeasuredValueWindowCommandParams
        );
        result.put("readPeakMeasuredValueWindowAttribute", readTotalVolatileOrganicCompoundsConcentrationMeasurementPeakMeasuredValueWindowAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTotalVolatileOrganicCompoundsConcentrationMeasurementAverageMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTotalVolatileOrganicCompoundsConcentrationMeasurementAverageMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TotalVolatileOrganicCompoundsConcentrationMeasurement.ID, ClusterIDMapping.TotalVolatileOrganicCompoundsConcentrationMeasurement.Attribute.AverageMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TotalVolatileOrganicCompoundsConcentrationMeasurementCluster) cluster).readAverageMeasuredValueAttribute(
//              (ChipClusters.TotalVolatileOrganicCompoundsConcentrationMeasurementCluster.AverageMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedTotalVolatileOrganicCompoundsConcentrationMeasurementClusterAverageMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTotalVolatileOrganicCompoundsConcentrationMeasurementAverageMeasuredValueCommandParams
        );
        result.put("readAverageMeasuredValueAttribute", readTotalVolatileOrganicCompoundsConcentrationMeasurementAverageMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTotalVolatileOrganicCompoundsConcentrationMeasurementAverageMeasuredValueWindowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTotalVolatileOrganicCompoundsConcentrationMeasurementAverageMeasuredValueWindowAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TotalVolatileOrganicCompoundsConcentrationMeasurement.ID, ClusterIDMapping.TotalVolatileOrganicCompoundsConcentrationMeasurement.Attribute.AverageMeasuredValueWindow.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TotalVolatileOrganicCompoundsConcentrationMeasurementCluster) cluster).readAverageMeasuredValueWindowAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTotalVolatileOrganicCompoundsConcentrationMeasurementAverageMeasuredValueWindowCommandParams
        );
        result.put("readAverageMeasuredValueWindowAttribute", readTotalVolatileOrganicCompoundsConcentrationMeasurementAverageMeasuredValueWindowAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTotalVolatileOrganicCompoundsConcentrationMeasurementUncertaintyCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTotalVolatileOrganicCompoundsConcentrationMeasurementUncertaintyAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TotalVolatileOrganicCompoundsConcentrationMeasurement.ID, ClusterIDMapping.TotalVolatileOrganicCompoundsConcentrationMeasurement.Attribute.Uncertainty.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TotalVolatileOrganicCompoundsConcentrationMeasurementCluster) cluster).readUncertaintyAttribute(
//              (ChipClusters.FloatAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFloatAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTotalVolatileOrganicCompoundsConcentrationMeasurementUncertaintyCommandParams
        );
        result.put("readUncertaintyAttribute", readTotalVolatileOrganicCompoundsConcentrationMeasurementUncertaintyAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTotalVolatileOrganicCompoundsConcentrationMeasurementMeasurementUnitCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTotalVolatileOrganicCompoundsConcentrationMeasurementMeasurementUnitAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TotalVolatileOrganicCompoundsConcentrationMeasurement.ID, ClusterIDMapping.TotalVolatileOrganicCompoundsConcentrationMeasurement.Attribute.MeasurementUnit.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TotalVolatileOrganicCompoundsConcentrationMeasurementCluster) cluster).readMeasurementUnitAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTotalVolatileOrganicCompoundsConcentrationMeasurementMeasurementUnitCommandParams
        );
        result.put("readMeasurementUnitAttribute", readTotalVolatileOrganicCompoundsConcentrationMeasurementMeasurementUnitAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTotalVolatileOrganicCompoundsConcentrationMeasurementMeasurementMediumCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTotalVolatileOrganicCompoundsConcentrationMeasurementMeasurementMediumAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TotalVolatileOrganicCompoundsConcentrationMeasurement.ID, ClusterIDMapping.TotalVolatileOrganicCompoundsConcentrationMeasurement.Attribute.MeasurementMedium.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TotalVolatileOrganicCompoundsConcentrationMeasurementCluster) cluster).readMeasurementMediumAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTotalVolatileOrganicCompoundsConcentrationMeasurementMeasurementMediumCommandParams
        );
        result.put("readMeasurementMediumAttribute", readTotalVolatileOrganicCompoundsConcentrationMeasurementMeasurementMediumAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTotalVolatileOrganicCompoundsConcentrationMeasurementLevelValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTotalVolatileOrganicCompoundsConcentrationMeasurementLevelValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TotalVolatileOrganicCompoundsConcentrationMeasurement.ID, ClusterIDMapping.TotalVolatileOrganicCompoundsConcentrationMeasurement.Attribute.LevelValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TotalVolatileOrganicCompoundsConcentrationMeasurementCluster) cluster).readLevelValueAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTotalVolatileOrganicCompoundsConcentrationMeasurementLevelValueCommandParams
        );
        result.put("readLevelValueAttribute", readTotalVolatileOrganicCompoundsConcentrationMeasurementLevelValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTotalVolatileOrganicCompoundsConcentrationMeasurementGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTotalVolatileOrganicCompoundsConcentrationMeasurementGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TotalVolatileOrganicCompoundsConcentrationMeasurement.ID, ClusterIDMapping.TotalVolatileOrganicCompoundsConcentrationMeasurement.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TotalVolatileOrganicCompoundsConcentrationMeasurementCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.TotalVolatileOrganicCompoundsConcentrationMeasurementCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedTotalVolatileOrganicCompoundsConcentrationMeasurementClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTotalVolatileOrganicCompoundsConcentrationMeasurementGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readTotalVolatileOrganicCompoundsConcentrationMeasurementGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTotalVolatileOrganicCompoundsConcentrationMeasurementAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTotalVolatileOrganicCompoundsConcentrationMeasurementAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TotalVolatileOrganicCompoundsConcentrationMeasurement.ID, ClusterIDMapping.TotalVolatileOrganicCompoundsConcentrationMeasurement.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TotalVolatileOrganicCompoundsConcentrationMeasurementCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.TotalVolatileOrganicCompoundsConcentrationMeasurementCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedTotalVolatileOrganicCompoundsConcentrationMeasurementClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTotalVolatileOrganicCompoundsConcentrationMeasurementAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readTotalVolatileOrganicCompoundsConcentrationMeasurementAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTotalVolatileOrganicCompoundsConcentrationMeasurementEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTotalVolatileOrganicCompoundsConcentrationMeasurementEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TotalVolatileOrganicCompoundsConcentrationMeasurement.ID, ClusterIDMapping.TotalVolatileOrganicCompoundsConcentrationMeasurement.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TotalVolatileOrganicCompoundsConcentrationMeasurementCluster) cluster).readEventListAttribute(
//              (ChipClusters.TotalVolatileOrganicCompoundsConcentrationMeasurementCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedTotalVolatileOrganicCompoundsConcentrationMeasurementClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTotalVolatileOrganicCompoundsConcentrationMeasurementEventListCommandParams
        );
        result.put("readEventListAttribute", readTotalVolatileOrganicCompoundsConcentrationMeasurementEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTotalVolatileOrganicCompoundsConcentrationMeasurementAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTotalVolatileOrganicCompoundsConcentrationMeasurementAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TotalVolatileOrganicCompoundsConcentrationMeasurement.ID, ClusterIDMapping.TotalVolatileOrganicCompoundsConcentrationMeasurement.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TotalVolatileOrganicCompoundsConcentrationMeasurementCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.TotalVolatileOrganicCompoundsConcentrationMeasurementCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedTotalVolatileOrganicCompoundsConcentrationMeasurementClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTotalVolatileOrganicCompoundsConcentrationMeasurementAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readTotalVolatileOrganicCompoundsConcentrationMeasurementAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTotalVolatileOrganicCompoundsConcentrationMeasurementFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTotalVolatileOrganicCompoundsConcentrationMeasurementFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TotalVolatileOrganicCompoundsConcentrationMeasurement.ID, ClusterIDMapping.TotalVolatileOrganicCompoundsConcentrationMeasurement.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TotalVolatileOrganicCompoundsConcentrationMeasurementCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTotalVolatileOrganicCompoundsConcentrationMeasurementFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readTotalVolatileOrganicCompoundsConcentrationMeasurementFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTotalVolatileOrganicCompoundsConcentrationMeasurementClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTotalVolatileOrganicCompoundsConcentrationMeasurementClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TotalVolatileOrganicCompoundsConcentrationMeasurement.ID, ClusterIDMapping.TotalVolatileOrganicCompoundsConcentrationMeasurement.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TotalVolatileOrganicCompoundsConcentrationMeasurementCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTotalVolatileOrganicCompoundsConcentrationMeasurementClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readTotalVolatileOrganicCompoundsConcentrationMeasurementClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readRadonConcentrationMeasurementInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readRadonConcentrationMeasurementMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readRadonConcentrationMeasurementMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.RadonConcentrationMeasurement.ID, ClusterIDMapping.RadonConcentrationMeasurement.Attribute.MeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.RadonConcentrationMeasurementCluster) cluster).readMeasuredValueAttribute(
//              (ChipClusters.RadonConcentrationMeasurementCluster.MeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedRadonConcentrationMeasurementClusterMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readRadonConcentrationMeasurementMeasuredValueCommandParams
        );
        result.put("readMeasuredValueAttribute", readRadonConcentrationMeasurementMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readRadonConcentrationMeasurementMinMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readRadonConcentrationMeasurementMinMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.RadonConcentrationMeasurement.ID, ClusterIDMapping.RadonConcentrationMeasurement.Attribute.MinMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.RadonConcentrationMeasurementCluster) cluster).readMinMeasuredValueAttribute(
//              (ChipClusters.RadonConcentrationMeasurementCluster.MinMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedRadonConcentrationMeasurementClusterMinMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readRadonConcentrationMeasurementMinMeasuredValueCommandParams
        );
        result.put("readMinMeasuredValueAttribute", readRadonConcentrationMeasurementMinMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readRadonConcentrationMeasurementMaxMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readRadonConcentrationMeasurementMaxMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.RadonConcentrationMeasurement.ID, ClusterIDMapping.RadonConcentrationMeasurement.Attribute.MaxMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.RadonConcentrationMeasurementCluster) cluster).readMaxMeasuredValueAttribute(
//              (ChipClusters.RadonConcentrationMeasurementCluster.MaxMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedRadonConcentrationMeasurementClusterMaxMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readRadonConcentrationMeasurementMaxMeasuredValueCommandParams
        );
        result.put("readMaxMeasuredValueAttribute", readRadonConcentrationMeasurementMaxMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readRadonConcentrationMeasurementPeakMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readRadonConcentrationMeasurementPeakMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.RadonConcentrationMeasurement.ID, ClusterIDMapping.RadonConcentrationMeasurement.Attribute.PeakMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.RadonConcentrationMeasurementCluster) cluster).readPeakMeasuredValueAttribute(
//              (ChipClusters.RadonConcentrationMeasurementCluster.PeakMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedRadonConcentrationMeasurementClusterPeakMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readRadonConcentrationMeasurementPeakMeasuredValueCommandParams
        );
        result.put("readPeakMeasuredValueAttribute", readRadonConcentrationMeasurementPeakMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readRadonConcentrationMeasurementPeakMeasuredValueWindowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readRadonConcentrationMeasurementPeakMeasuredValueWindowAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.RadonConcentrationMeasurement.ID, ClusterIDMapping.RadonConcentrationMeasurement.Attribute.PeakMeasuredValueWindow.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.RadonConcentrationMeasurementCluster) cluster).readPeakMeasuredValueWindowAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readRadonConcentrationMeasurementPeakMeasuredValueWindowCommandParams
        );
        result.put("readPeakMeasuredValueWindowAttribute", readRadonConcentrationMeasurementPeakMeasuredValueWindowAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readRadonConcentrationMeasurementAverageMeasuredValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readRadonConcentrationMeasurementAverageMeasuredValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.RadonConcentrationMeasurement.ID, ClusterIDMapping.RadonConcentrationMeasurement.Attribute.AverageMeasuredValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.RadonConcentrationMeasurementCluster) cluster).readAverageMeasuredValueAttribute(
//              (ChipClusters.RadonConcentrationMeasurementCluster.AverageMeasuredValueAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedRadonConcentrationMeasurementClusterAverageMeasuredValueAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readRadonConcentrationMeasurementAverageMeasuredValueCommandParams
        );
        result.put("readAverageMeasuredValueAttribute", readRadonConcentrationMeasurementAverageMeasuredValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readRadonConcentrationMeasurementAverageMeasuredValueWindowCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readRadonConcentrationMeasurementAverageMeasuredValueWindowAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.RadonConcentrationMeasurement.ID, ClusterIDMapping.RadonConcentrationMeasurement.Attribute.AverageMeasuredValueWindow.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.RadonConcentrationMeasurementCluster) cluster).readAverageMeasuredValueWindowAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readRadonConcentrationMeasurementAverageMeasuredValueWindowCommandParams
        );
        result.put("readAverageMeasuredValueWindowAttribute", readRadonConcentrationMeasurementAverageMeasuredValueWindowAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readRadonConcentrationMeasurementUncertaintyCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readRadonConcentrationMeasurementUncertaintyAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.RadonConcentrationMeasurement.ID, ClusterIDMapping.RadonConcentrationMeasurement.Attribute.Uncertainty.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.RadonConcentrationMeasurementCluster) cluster).readUncertaintyAttribute(
//              (ChipClusters.FloatAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFloatAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readRadonConcentrationMeasurementUncertaintyCommandParams
        );
        result.put("readUncertaintyAttribute", readRadonConcentrationMeasurementUncertaintyAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readRadonConcentrationMeasurementMeasurementUnitCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readRadonConcentrationMeasurementMeasurementUnitAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.RadonConcentrationMeasurement.ID, ClusterIDMapping.RadonConcentrationMeasurement.Attribute.MeasurementUnit.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.RadonConcentrationMeasurementCluster) cluster).readMeasurementUnitAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readRadonConcentrationMeasurementMeasurementUnitCommandParams
        );
        result.put("readMeasurementUnitAttribute", readRadonConcentrationMeasurementMeasurementUnitAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readRadonConcentrationMeasurementMeasurementMediumCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readRadonConcentrationMeasurementMeasurementMediumAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.RadonConcentrationMeasurement.ID, ClusterIDMapping.RadonConcentrationMeasurement.Attribute.MeasurementMedium.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.RadonConcentrationMeasurementCluster) cluster).readMeasurementMediumAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readRadonConcentrationMeasurementMeasurementMediumCommandParams
        );
        result.put("readMeasurementMediumAttribute", readRadonConcentrationMeasurementMeasurementMediumAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readRadonConcentrationMeasurementLevelValueCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readRadonConcentrationMeasurementLevelValueAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.RadonConcentrationMeasurement.ID, ClusterIDMapping.RadonConcentrationMeasurement.Attribute.LevelValue.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.RadonConcentrationMeasurementCluster) cluster).readLevelValueAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readRadonConcentrationMeasurementLevelValueCommandParams
        );
        result.put("readLevelValueAttribute", readRadonConcentrationMeasurementLevelValueAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readRadonConcentrationMeasurementGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readRadonConcentrationMeasurementGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.RadonConcentrationMeasurement.ID, ClusterIDMapping.RadonConcentrationMeasurement.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.RadonConcentrationMeasurementCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.RadonConcentrationMeasurementCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedRadonConcentrationMeasurementClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readRadonConcentrationMeasurementGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readRadonConcentrationMeasurementGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readRadonConcentrationMeasurementAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readRadonConcentrationMeasurementAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.RadonConcentrationMeasurement.ID, ClusterIDMapping.RadonConcentrationMeasurement.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.RadonConcentrationMeasurementCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.RadonConcentrationMeasurementCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedRadonConcentrationMeasurementClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readRadonConcentrationMeasurementAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readRadonConcentrationMeasurementAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readRadonConcentrationMeasurementEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readRadonConcentrationMeasurementEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.RadonConcentrationMeasurement.ID, ClusterIDMapping.RadonConcentrationMeasurement.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.RadonConcentrationMeasurementCluster) cluster).readEventListAttribute(
//              (ChipClusters.RadonConcentrationMeasurementCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedRadonConcentrationMeasurementClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readRadonConcentrationMeasurementEventListCommandParams
        );
        result.put("readEventListAttribute", readRadonConcentrationMeasurementEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readRadonConcentrationMeasurementAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readRadonConcentrationMeasurementAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.RadonConcentrationMeasurement.ID, ClusterIDMapping.RadonConcentrationMeasurement.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.RadonConcentrationMeasurementCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.RadonConcentrationMeasurementCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedRadonConcentrationMeasurementClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readRadonConcentrationMeasurementAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readRadonConcentrationMeasurementAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readRadonConcentrationMeasurementFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readRadonConcentrationMeasurementFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.RadonConcentrationMeasurement.ID, ClusterIDMapping.RadonConcentrationMeasurement.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.RadonConcentrationMeasurementCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readRadonConcentrationMeasurementFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readRadonConcentrationMeasurementFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readRadonConcentrationMeasurementClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readRadonConcentrationMeasurementClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.RadonConcentrationMeasurement.ID, ClusterIDMapping.RadonConcentrationMeasurement.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.RadonConcentrationMeasurementCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readRadonConcentrationMeasurementClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readRadonConcentrationMeasurementClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readWakeOnLanInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readWakeOnLanMACAddressCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readWakeOnLanMACAddressAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.WakeOnLan.ID, ClusterIDMapping.WakeOnLan.Attribute.MACAddress.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.WakeOnLanCluster) cluster).readMACAddressAttribute(
//              (ChipClusters.CharStringAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedCharStringAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readWakeOnLanMACAddressCommandParams
        );
        result.put("readMACAddressAttribute", readWakeOnLanMACAddressAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readWakeOnLanGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readWakeOnLanGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.WakeOnLan.ID, ClusterIDMapping.WakeOnLan.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.WakeOnLanCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.WakeOnLanCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedWakeOnLanClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readWakeOnLanGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readWakeOnLanGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readWakeOnLanAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readWakeOnLanAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.WakeOnLan.ID, ClusterIDMapping.WakeOnLan.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.WakeOnLanCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.WakeOnLanCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedWakeOnLanClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readWakeOnLanAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readWakeOnLanAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readWakeOnLanEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readWakeOnLanEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.WakeOnLan.ID, ClusterIDMapping.WakeOnLan.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.WakeOnLanCluster) cluster).readEventListAttribute(
//              (ChipClusters.WakeOnLanCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedWakeOnLanClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readWakeOnLanEventListCommandParams
        );
        result.put("readEventListAttribute", readWakeOnLanEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readWakeOnLanAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readWakeOnLanAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.WakeOnLan.ID, ClusterIDMapping.WakeOnLan.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.WakeOnLanCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.WakeOnLanCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedWakeOnLanClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readWakeOnLanAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readWakeOnLanAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readWakeOnLanFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readWakeOnLanFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.WakeOnLan.ID, ClusterIDMapping.WakeOnLan.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.WakeOnLanCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readWakeOnLanFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readWakeOnLanFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readWakeOnLanClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readWakeOnLanClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.WakeOnLan.ID, ClusterIDMapping.WakeOnLan.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.WakeOnLanCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readWakeOnLanClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readWakeOnLanClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readChannelInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readChannelChannelListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readChannelChannelListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Channel.ID, ClusterIDMapping.Channel.Attribute.ChannelList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ChannelCluster) cluster).readChannelListAttribute(
//              (ChipClusters.ChannelCluster.ChannelListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedChannelClusterChannelListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readChannelChannelListCommandParams
        );
        result.put("readChannelListAttribute", readChannelChannelListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readChannelGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readChannelGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Channel.ID, ClusterIDMapping.Channel.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ChannelCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.ChannelCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedChannelClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readChannelGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readChannelGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readChannelAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readChannelAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Channel.ID, ClusterIDMapping.Channel.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ChannelCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.ChannelCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedChannelClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readChannelAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readChannelAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readChannelEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readChannelEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Channel.ID, ClusterIDMapping.Channel.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ChannelCluster) cluster).readEventListAttribute(
//              (ChipClusters.ChannelCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedChannelClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readChannelEventListCommandParams
        );
        result.put("readEventListAttribute", readChannelEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readChannelAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readChannelAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Channel.ID, ClusterIDMapping.Channel.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ChannelCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.ChannelCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedChannelClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readChannelAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readChannelAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readChannelFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readChannelFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Channel.ID, ClusterIDMapping.Channel.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ChannelCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readChannelFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readChannelFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readChannelClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readChannelClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.Channel.ID, ClusterIDMapping.Channel.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ChannelCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readChannelClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readChannelClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readTargetNavigatorInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readTargetNavigatorTargetListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTargetNavigatorTargetListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TargetNavigator.ID, ClusterIDMapping.TargetNavigator.Attribute.TargetList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TargetNavigatorCluster) cluster).readTargetListAttribute(
//              (ChipClusters.TargetNavigatorCluster.TargetListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedTargetNavigatorClusterTargetListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTargetNavigatorTargetListCommandParams
        );
        result.put("readTargetListAttribute", readTargetNavigatorTargetListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTargetNavigatorCurrentTargetCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTargetNavigatorCurrentTargetAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TargetNavigator.ID, ClusterIDMapping.TargetNavigator.Attribute.CurrentTarget.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TargetNavigatorCluster) cluster).readCurrentTargetAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTargetNavigatorCurrentTargetCommandParams
        );
        result.put("readCurrentTargetAttribute", readTargetNavigatorCurrentTargetAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTargetNavigatorGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTargetNavigatorGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TargetNavigator.ID, ClusterIDMapping.TargetNavigator.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TargetNavigatorCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.TargetNavigatorCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedTargetNavigatorClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTargetNavigatorGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readTargetNavigatorGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTargetNavigatorAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTargetNavigatorAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TargetNavigator.ID, ClusterIDMapping.TargetNavigator.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TargetNavigatorCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.TargetNavigatorCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedTargetNavigatorClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTargetNavigatorAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readTargetNavigatorAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTargetNavigatorEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTargetNavigatorEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TargetNavigator.ID, ClusterIDMapping.TargetNavigator.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TargetNavigatorCluster) cluster).readEventListAttribute(
//              (ChipClusters.TargetNavigatorCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedTargetNavigatorClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTargetNavigatorEventListCommandParams
        );
        result.put("readEventListAttribute", readTargetNavigatorEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTargetNavigatorAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTargetNavigatorAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TargetNavigator.ID, ClusterIDMapping.TargetNavigator.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TargetNavigatorCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.TargetNavigatorCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedTargetNavigatorClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTargetNavigatorAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readTargetNavigatorAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTargetNavigatorFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTargetNavigatorFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TargetNavigator.ID, ClusterIDMapping.TargetNavigator.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TargetNavigatorCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTargetNavigatorFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readTargetNavigatorFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readTargetNavigatorClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readTargetNavigatorClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.TargetNavigator.ID, ClusterIDMapping.TargetNavigator.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.TargetNavigatorCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readTargetNavigatorClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readTargetNavigatorClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readMediaPlaybackInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readMediaPlaybackCurrentStateCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readMediaPlaybackCurrentStateAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.MediaPlayback.ID, ClusterIDMapping.MediaPlayback.Attribute.CurrentState.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.MediaPlaybackCluster) cluster).readCurrentStateAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readMediaPlaybackCurrentStateCommandParams
        );
        result.put("readCurrentStateAttribute", readMediaPlaybackCurrentStateAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readMediaPlaybackStartTimeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readMediaPlaybackStartTimeAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.MediaPlayback.ID, ClusterIDMapping.MediaPlayback.Attribute.StartTime.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.MediaPlaybackCluster) cluster).readStartTimeAttribute(
//              (ChipClusters.MediaPlaybackCluster.StartTimeAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedMediaPlaybackClusterStartTimeAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readMediaPlaybackStartTimeCommandParams
        );
        result.put("readStartTimeAttribute", readMediaPlaybackStartTimeAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readMediaPlaybackDurationCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readMediaPlaybackDurationAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.MediaPlayback.ID, ClusterIDMapping.MediaPlayback.Attribute.Duration.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.MediaPlaybackCluster) cluster).readDurationAttribute(
//              (ChipClusters.MediaPlaybackCluster.DurationAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedMediaPlaybackClusterDurationAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readMediaPlaybackDurationCommandParams
        );
        result.put("readDurationAttribute", readMediaPlaybackDurationAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readMediaPlaybackPlaybackSpeedCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readMediaPlaybackPlaybackSpeedAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.MediaPlayback.ID, ClusterIDMapping.MediaPlayback.Attribute.PlaybackSpeed.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.MediaPlaybackCluster) cluster).readPlaybackSpeedAttribute(
//              (ChipClusters.FloatAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFloatAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readMediaPlaybackPlaybackSpeedCommandParams
        );
        result.put("readPlaybackSpeedAttribute", readMediaPlaybackPlaybackSpeedAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readMediaPlaybackSeekRangeEndCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readMediaPlaybackSeekRangeEndAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.MediaPlayback.ID, ClusterIDMapping.MediaPlayback.Attribute.SeekRangeEnd.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.MediaPlaybackCluster) cluster).readSeekRangeEndAttribute(
//              (ChipClusters.MediaPlaybackCluster.SeekRangeEndAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedMediaPlaybackClusterSeekRangeEndAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readMediaPlaybackSeekRangeEndCommandParams
        );
        result.put("readSeekRangeEndAttribute", readMediaPlaybackSeekRangeEndAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readMediaPlaybackSeekRangeStartCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readMediaPlaybackSeekRangeStartAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.MediaPlayback.ID, ClusterIDMapping.MediaPlayback.Attribute.SeekRangeStart.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.MediaPlaybackCluster) cluster).readSeekRangeStartAttribute(
//              (ChipClusters.MediaPlaybackCluster.SeekRangeStartAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedMediaPlaybackClusterSeekRangeStartAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readMediaPlaybackSeekRangeStartCommandParams
        );
        result.put("readSeekRangeStartAttribute", readMediaPlaybackSeekRangeStartAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readMediaPlaybackGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readMediaPlaybackGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.MediaPlayback.ID, ClusterIDMapping.MediaPlayback.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.MediaPlaybackCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.MediaPlaybackCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedMediaPlaybackClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readMediaPlaybackGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readMediaPlaybackGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readMediaPlaybackAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readMediaPlaybackAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.MediaPlayback.ID, ClusterIDMapping.MediaPlayback.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.MediaPlaybackCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.MediaPlaybackCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedMediaPlaybackClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readMediaPlaybackAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readMediaPlaybackAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readMediaPlaybackEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readMediaPlaybackEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.MediaPlayback.ID, ClusterIDMapping.MediaPlayback.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.MediaPlaybackCluster) cluster).readEventListAttribute(
//              (ChipClusters.MediaPlaybackCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedMediaPlaybackClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readMediaPlaybackEventListCommandParams
        );
        result.put("readEventListAttribute", readMediaPlaybackEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readMediaPlaybackAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readMediaPlaybackAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.MediaPlayback.ID, ClusterIDMapping.MediaPlayback.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.MediaPlaybackCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.MediaPlaybackCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedMediaPlaybackClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readMediaPlaybackAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readMediaPlaybackAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readMediaPlaybackFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readMediaPlaybackFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.MediaPlayback.ID, ClusterIDMapping.MediaPlayback.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.MediaPlaybackCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readMediaPlaybackFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readMediaPlaybackFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readMediaPlaybackClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readMediaPlaybackClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.MediaPlayback.ID, ClusterIDMapping.MediaPlayback.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.MediaPlaybackCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readMediaPlaybackClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readMediaPlaybackClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readMediaInputInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readMediaInputInputListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readMediaInputInputListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.MediaInput.ID, ClusterIDMapping.MediaInput.Attribute.InputList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.MediaInputCluster) cluster).readInputListAttribute(
//              (ChipClusters.MediaInputCluster.InputListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedMediaInputClusterInputListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readMediaInputInputListCommandParams
        );
        result.put("readInputListAttribute", readMediaInputInputListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readMediaInputCurrentInputCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readMediaInputCurrentInputAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.MediaInput.ID, ClusterIDMapping.MediaInput.Attribute.CurrentInput.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.MediaInputCluster) cluster).readCurrentInputAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readMediaInputCurrentInputCommandParams
        );
        result.put("readCurrentInputAttribute", readMediaInputCurrentInputAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readMediaInputGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readMediaInputGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.MediaInput.ID, ClusterIDMapping.MediaInput.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.MediaInputCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.MediaInputCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedMediaInputClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readMediaInputGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readMediaInputGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readMediaInputAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readMediaInputAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.MediaInput.ID, ClusterIDMapping.MediaInput.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.MediaInputCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.MediaInputCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedMediaInputClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readMediaInputAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readMediaInputAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readMediaInputEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readMediaInputEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.MediaInput.ID, ClusterIDMapping.MediaInput.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.MediaInputCluster) cluster).readEventListAttribute(
//              (ChipClusters.MediaInputCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedMediaInputClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readMediaInputEventListCommandParams
        );
        result.put("readEventListAttribute", readMediaInputEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readMediaInputAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readMediaInputAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.MediaInput.ID, ClusterIDMapping.MediaInput.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.MediaInputCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.MediaInputCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedMediaInputClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readMediaInputAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readMediaInputAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readMediaInputFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readMediaInputFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.MediaInput.ID, ClusterIDMapping.MediaInput.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.MediaInputCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readMediaInputFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readMediaInputFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readMediaInputClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readMediaInputClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.MediaInput.ID, ClusterIDMapping.MediaInput.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.MediaInputCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readMediaInputClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readMediaInputClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readLowPowerInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readLowPowerGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readLowPowerGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.LowPower.ID, ClusterIDMapping.LowPower.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.LowPowerCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.LowPowerCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLowPowerClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readLowPowerGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readLowPowerGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readLowPowerAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readLowPowerAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.LowPower.ID, ClusterIDMapping.LowPower.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.LowPowerCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.LowPowerCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLowPowerClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readLowPowerAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readLowPowerAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readLowPowerEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readLowPowerEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.LowPower.ID, ClusterIDMapping.LowPower.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.LowPowerCluster) cluster).readEventListAttribute(
//              (ChipClusters.LowPowerCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLowPowerClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readLowPowerEventListCommandParams
        );
        result.put("readEventListAttribute", readLowPowerEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readLowPowerAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readLowPowerAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.LowPower.ID, ClusterIDMapping.LowPower.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.LowPowerCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.LowPowerCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLowPowerClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readLowPowerAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readLowPowerAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readLowPowerFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readLowPowerFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.LowPower.ID, ClusterIDMapping.LowPower.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.LowPowerCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readLowPowerFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readLowPowerFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readLowPowerClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readLowPowerClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.LowPower.ID, ClusterIDMapping.LowPower.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.LowPowerCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readLowPowerClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readLowPowerClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readKeypadInputInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readKeypadInputGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readKeypadInputGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.KeypadInput.ID, ClusterIDMapping.KeypadInput.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.KeypadInputCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.KeypadInputCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedKeypadInputClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readKeypadInputGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readKeypadInputGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readKeypadInputAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readKeypadInputAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.KeypadInput.ID, ClusterIDMapping.KeypadInput.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.KeypadInputCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.KeypadInputCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedKeypadInputClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readKeypadInputAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readKeypadInputAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readKeypadInputEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readKeypadInputEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.KeypadInput.ID, ClusterIDMapping.KeypadInput.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.KeypadInputCluster) cluster).readEventListAttribute(
//              (ChipClusters.KeypadInputCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedKeypadInputClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readKeypadInputEventListCommandParams
        );
        result.put("readEventListAttribute", readKeypadInputEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readKeypadInputAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readKeypadInputAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.KeypadInput.ID, ClusterIDMapping.KeypadInput.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.KeypadInputCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.KeypadInputCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedKeypadInputClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readKeypadInputAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readKeypadInputAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readKeypadInputFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readKeypadInputFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.KeypadInput.ID, ClusterIDMapping.KeypadInput.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.KeypadInputCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readKeypadInputFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readKeypadInputFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readKeypadInputClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readKeypadInputClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.KeypadInput.ID, ClusterIDMapping.KeypadInput.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.KeypadInputCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readKeypadInputClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readKeypadInputClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readContentLauncherInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readContentLauncherAcceptHeaderCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readContentLauncherAcceptHeaderAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ContentLauncher.ID, ClusterIDMapping.ContentLauncher.Attribute.AcceptHeader.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ContentLauncherCluster) cluster).readAcceptHeaderAttribute(
//              (ChipClusters.ContentLauncherCluster.AcceptHeaderAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedContentLauncherClusterAcceptHeaderAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readContentLauncherAcceptHeaderCommandParams
        );
        result.put("readAcceptHeaderAttribute", readContentLauncherAcceptHeaderAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readContentLauncherSupportedStreamingProtocolsCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readContentLauncherSupportedStreamingProtocolsAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ContentLauncher.ID, ClusterIDMapping.ContentLauncher.Attribute.SupportedStreamingProtocols.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ContentLauncherCluster) cluster).readSupportedStreamingProtocolsAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readContentLauncherSupportedStreamingProtocolsCommandParams
        );
        result.put("readSupportedStreamingProtocolsAttribute", readContentLauncherSupportedStreamingProtocolsAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readContentLauncherGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readContentLauncherGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ContentLauncher.ID, ClusterIDMapping.ContentLauncher.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ContentLauncherCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.ContentLauncherCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedContentLauncherClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readContentLauncherGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readContentLauncherGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readContentLauncherAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readContentLauncherAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ContentLauncher.ID, ClusterIDMapping.ContentLauncher.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ContentLauncherCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.ContentLauncherCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedContentLauncherClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readContentLauncherAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readContentLauncherAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readContentLauncherEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readContentLauncherEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ContentLauncher.ID, ClusterIDMapping.ContentLauncher.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ContentLauncherCluster) cluster).readEventListAttribute(
//              (ChipClusters.ContentLauncherCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedContentLauncherClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readContentLauncherEventListCommandParams
        );
        result.put("readEventListAttribute", readContentLauncherEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readContentLauncherAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readContentLauncherAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ContentLauncher.ID, ClusterIDMapping.ContentLauncher.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ContentLauncherCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.ContentLauncherCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedContentLauncherClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readContentLauncherAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readContentLauncherAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readContentLauncherFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readContentLauncherFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ContentLauncher.ID, ClusterIDMapping.ContentLauncher.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ContentLauncherCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readContentLauncherFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readContentLauncherFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readContentLauncherClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readContentLauncherClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ContentLauncher.ID, ClusterIDMapping.ContentLauncher.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ContentLauncherCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readContentLauncherClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readContentLauncherClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readAudioOutputInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readAudioOutputOutputListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readAudioOutputOutputListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.AudioOutput.ID, ClusterIDMapping.AudioOutput.Attribute.OutputList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.AudioOutputCluster) cluster).readOutputListAttribute(
//              (ChipClusters.AudioOutputCluster.OutputListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedAudioOutputClusterOutputListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readAudioOutputOutputListCommandParams
        );
        result.put("readOutputListAttribute", readAudioOutputOutputListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readAudioOutputCurrentOutputCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readAudioOutputCurrentOutputAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.AudioOutput.ID, ClusterIDMapping.AudioOutput.Attribute.CurrentOutput.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.AudioOutputCluster) cluster).readCurrentOutputAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readAudioOutputCurrentOutputCommandParams
        );
        result.put("readCurrentOutputAttribute", readAudioOutputCurrentOutputAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readAudioOutputGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readAudioOutputGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.AudioOutput.ID, ClusterIDMapping.AudioOutput.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.AudioOutputCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.AudioOutputCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedAudioOutputClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readAudioOutputGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readAudioOutputGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readAudioOutputAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readAudioOutputAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.AudioOutput.ID, ClusterIDMapping.AudioOutput.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.AudioOutputCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.AudioOutputCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedAudioOutputClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readAudioOutputAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readAudioOutputAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readAudioOutputEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readAudioOutputEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.AudioOutput.ID, ClusterIDMapping.AudioOutput.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.AudioOutputCluster) cluster).readEventListAttribute(
//              (ChipClusters.AudioOutputCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedAudioOutputClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readAudioOutputEventListCommandParams
        );
        result.put("readEventListAttribute", readAudioOutputEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readAudioOutputAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readAudioOutputAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.AudioOutput.ID, ClusterIDMapping.AudioOutput.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.AudioOutputCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.AudioOutputCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedAudioOutputClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readAudioOutputAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readAudioOutputAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readAudioOutputFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readAudioOutputFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.AudioOutput.ID, ClusterIDMapping.AudioOutput.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.AudioOutputCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readAudioOutputFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readAudioOutputFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readAudioOutputClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readAudioOutputClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.AudioOutput.ID, ClusterIDMapping.AudioOutput.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.AudioOutputCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readAudioOutputClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readAudioOutputClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readApplicationLauncherInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readApplicationLauncherCatalogListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readApplicationLauncherCatalogListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ApplicationLauncher.ID, ClusterIDMapping.ApplicationLauncher.Attribute.CatalogList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ApplicationLauncherCluster) cluster).readCatalogListAttribute(
//              (ChipClusters.ApplicationLauncherCluster.CatalogListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedApplicationLauncherClusterCatalogListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readApplicationLauncherCatalogListCommandParams
        );
        result.put("readCatalogListAttribute", readApplicationLauncherCatalogListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readApplicationLauncherGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readApplicationLauncherGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ApplicationLauncher.ID, ClusterIDMapping.ApplicationLauncher.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ApplicationLauncherCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.ApplicationLauncherCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedApplicationLauncherClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readApplicationLauncherGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readApplicationLauncherGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readApplicationLauncherAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readApplicationLauncherAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ApplicationLauncher.ID, ClusterIDMapping.ApplicationLauncher.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ApplicationLauncherCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.ApplicationLauncherCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedApplicationLauncherClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readApplicationLauncherAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readApplicationLauncherAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readApplicationLauncherEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readApplicationLauncherEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ApplicationLauncher.ID, ClusterIDMapping.ApplicationLauncher.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ApplicationLauncherCluster) cluster).readEventListAttribute(
//              (ChipClusters.ApplicationLauncherCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedApplicationLauncherClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readApplicationLauncherEventListCommandParams
        );
        result.put("readEventListAttribute", readApplicationLauncherEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readApplicationLauncherAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readApplicationLauncherAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ApplicationLauncher.ID, ClusterIDMapping.ApplicationLauncher.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ApplicationLauncherCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.ApplicationLauncherCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedApplicationLauncherClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readApplicationLauncherAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readApplicationLauncherAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readApplicationLauncherFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readApplicationLauncherFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ApplicationLauncher.ID, ClusterIDMapping.ApplicationLauncher.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ApplicationLauncherCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readApplicationLauncherFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readApplicationLauncherFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readApplicationLauncherClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readApplicationLauncherClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ApplicationLauncher.ID, ClusterIDMapping.ApplicationLauncher.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ApplicationLauncherCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readApplicationLauncherClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readApplicationLauncherClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readApplicationBasicInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readApplicationBasicVendorNameCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readApplicationBasicVendorNameAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ApplicationBasic.ID, ClusterIDMapping.ApplicationBasic.Attribute.VendorName.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ApplicationBasicCluster) cluster).readVendorNameAttribute(
//              (ChipClusters.CharStringAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedCharStringAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readApplicationBasicVendorNameCommandParams
        );
        result.put("readVendorNameAttribute", readApplicationBasicVendorNameAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readApplicationBasicVendorIDCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readApplicationBasicVendorIDAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ApplicationBasic.ID, ClusterIDMapping.ApplicationBasic.Attribute.VendorID.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ApplicationBasicCluster) cluster).readVendorIDAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readApplicationBasicVendorIDCommandParams
        );
        result.put("readVendorIDAttribute", readApplicationBasicVendorIDAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readApplicationBasicApplicationNameCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readApplicationBasicApplicationNameAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ApplicationBasic.ID, ClusterIDMapping.ApplicationBasic.Attribute.ApplicationName.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ApplicationBasicCluster) cluster).readApplicationNameAttribute(
//              (ChipClusters.CharStringAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedCharStringAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readApplicationBasicApplicationNameCommandParams
        );
        result.put("readApplicationNameAttribute", readApplicationBasicApplicationNameAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readApplicationBasicProductIDCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readApplicationBasicProductIDAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ApplicationBasic.ID, ClusterIDMapping.ApplicationBasic.Attribute.ProductID.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ApplicationBasicCluster) cluster).readProductIDAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readApplicationBasicProductIDCommandParams
        );
        result.put("readProductIDAttribute", readApplicationBasicProductIDAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readApplicationBasicStatusCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readApplicationBasicStatusAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ApplicationBasic.ID, ClusterIDMapping.ApplicationBasic.Attribute.Status.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ApplicationBasicCluster) cluster).readStatusAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readApplicationBasicStatusCommandParams
        );
        result.put("readStatusAttribute", readApplicationBasicStatusAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readApplicationBasicApplicationVersionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readApplicationBasicApplicationVersionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ApplicationBasic.ID, ClusterIDMapping.ApplicationBasic.Attribute.ApplicationVersion.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ApplicationBasicCluster) cluster).readApplicationVersionAttribute(
//              (ChipClusters.CharStringAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedCharStringAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readApplicationBasicApplicationVersionCommandParams
        );
        result.put("readApplicationVersionAttribute", readApplicationBasicApplicationVersionAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readApplicationBasicAllowedVendorListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readApplicationBasicAllowedVendorListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ApplicationBasic.ID, ClusterIDMapping.ApplicationBasic.Attribute.AllowedVendorList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ApplicationBasicCluster) cluster).readAllowedVendorListAttribute(
//              (ChipClusters.ApplicationBasicCluster.AllowedVendorListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedApplicationBasicClusterAllowedVendorListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readApplicationBasicAllowedVendorListCommandParams
        );
        result.put("readAllowedVendorListAttribute", readApplicationBasicAllowedVendorListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readApplicationBasicGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readApplicationBasicGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ApplicationBasic.ID, ClusterIDMapping.ApplicationBasic.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ApplicationBasicCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.ApplicationBasicCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedApplicationBasicClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readApplicationBasicGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readApplicationBasicGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readApplicationBasicAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readApplicationBasicAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ApplicationBasic.ID, ClusterIDMapping.ApplicationBasic.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ApplicationBasicCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.ApplicationBasicCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedApplicationBasicClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readApplicationBasicAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readApplicationBasicAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readApplicationBasicEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readApplicationBasicEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ApplicationBasic.ID, ClusterIDMapping.ApplicationBasic.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ApplicationBasicCluster) cluster).readEventListAttribute(
//              (ChipClusters.ApplicationBasicCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedApplicationBasicClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readApplicationBasicEventListCommandParams
        );
        result.put("readEventListAttribute", readApplicationBasicEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readApplicationBasicAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readApplicationBasicAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ApplicationBasic.ID, ClusterIDMapping.ApplicationBasic.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ApplicationBasicCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.ApplicationBasicCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedApplicationBasicClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readApplicationBasicAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readApplicationBasicAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readApplicationBasicFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readApplicationBasicFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ApplicationBasic.ID, ClusterIDMapping.ApplicationBasic.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ApplicationBasicCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readApplicationBasicFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readApplicationBasicFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readApplicationBasicClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readApplicationBasicClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ApplicationBasic.ID, ClusterIDMapping.ApplicationBasic.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ApplicationBasicCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readApplicationBasicClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readApplicationBasicClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readAccountLoginInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readAccountLoginGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readAccountLoginGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.AccountLogin.ID, ClusterIDMapping.AccountLogin.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.AccountLoginCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.AccountLoginCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedAccountLoginClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readAccountLoginGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readAccountLoginGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readAccountLoginAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readAccountLoginAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.AccountLogin.ID, ClusterIDMapping.AccountLogin.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.AccountLoginCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.AccountLoginCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedAccountLoginClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readAccountLoginAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readAccountLoginAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readAccountLoginEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readAccountLoginEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.AccountLogin.ID, ClusterIDMapping.AccountLogin.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.AccountLoginCluster) cluster).readEventListAttribute(
//              (ChipClusters.AccountLoginCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedAccountLoginClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readAccountLoginEventListCommandParams
        );
        result.put("readEventListAttribute", readAccountLoginEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readAccountLoginAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readAccountLoginAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.AccountLogin.ID, ClusterIDMapping.AccountLogin.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.AccountLoginCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.AccountLoginCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedAccountLoginClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readAccountLoginAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readAccountLoginAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readAccountLoginFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readAccountLoginFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.AccountLogin.ID, ClusterIDMapping.AccountLogin.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.AccountLoginCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readAccountLoginFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readAccountLoginFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readAccountLoginClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readAccountLoginClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.AccountLogin.ID, ClusterIDMapping.AccountLogin.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.AccountLoginCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readAccountLoginClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readAccountLoginClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readElectricalMeasurementInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readElectricalMeasurementMeasurementTypeCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementMeasurementTypeAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.MeasurementType.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readMeasurementTypeAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementMeasurementTypeCommandParams
        );
        result.put("readMeasurementTypeAttribute", readElectricalMeasurementMeasurementTypeAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementDcVoltageCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementDcVoltageAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.DcVoltage.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readDcVoltageAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementDcVoltageCommandParams
        );
        result.put("readDcVoltageAttribute", readElectricalMeasurementDcVoltageAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementDcVoltageMinCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementDcVoltageMinAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.DcVoltageMin.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readDcVoltageMinAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementDcVoltageMinCommandParams
        );
        result.put("readDcVoltageMinAttribute", readElectricalMeasurementDcVoltageMinAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementDcVoltageMaxCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementDcVoltageMaxAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.DcVoltageMax.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readDcVoltageMaxAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementDcVoltageMaxCommandParams
        );
        result.put("readDcVoltageMaxAttribute", readElectricalMeasurementDcVoltageMaxAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementDcCurrentCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementDcCurrentAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.DcCurrent.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readDcCurrentAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementDcCurrentCommandParams
        );
        result.put("readDcCurrentAttribute", readElectricalMeasurementDcCurrentAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementDcCurrentMinCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementDcCurrentMinAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.DcCurrentMin.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readDcCurrentMinAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementDcCurrentMinCommandParams
        );
        result.put("readDcCurrentMinAttribute", readElectricalMeasurementDcCurrentMinAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementDcCurrentMaxCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementDcCurrentMaxAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.DcCurrentMax.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readDcCurrentMaxAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementDcCurrentMaxCommandParams
        );
        result.put("readDcCurrentMaxAttribute", readElectricalMeasurementDcCurrentMaxAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementDcPowerCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementDcPowerAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.DcPower.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readDcPowerAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementDcPowerCommandParams
        );
        result.put("readDcPowerAttribute", readElectricalMeasurementDcPowerAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementDcPowerMinCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementDcPowerMinAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.DcPowerMin.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readDcPowerMinAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementDcPowerMinCommandParams
        );
        result.put("readDcPowerMinAttribute", readElectricalMeasurementDcPowerMinAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementDcPowerMaxCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementDcPowerMaxAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.DcPowerMax.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readDcPowerMaxAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementDcPowerMaxCommandParams
        );
        result.put("readDcPowerMaxAttribute", readElectricalMeasurementDcPowerMaxAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementDcVoltageMultiplierCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementDcVoltageMultiplierAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.DcVoltageMultiplier.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readDcVoltageMultiplierAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementDcVoltageMultiplierCommandParams
        );
        result.put("readDcVoltageMultiplierAttribute", readElectricalMeasurementDcVoltageMultiplierAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementDcVoltageDivisorCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementDcVoltageDivisorAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.DcVoltageDivisor.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readDcVoltageDivisorAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementDcVoltageDivisorCommandParams
        );
        result.put("readDcVoltageDivisorAttribute", readElectricalMeasurementDcVoltageDivisorAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementDcCurrentMultiplierCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementDcCurrentMultiplierAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.DcCurrentMultiplier.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readDcCurrentMultiplierAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementDcCurrentMultiplierCommandParams
        );
        result.put("readDcCurrentMultiplierAttribute", readElectricalMeasurementDcCurrentMultiplierAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementDcCurrentDivisorCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementDcCurrentDivisorAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.DcCurrentDivisor.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readDcCurrentDivisorAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementDcCurrentDivisorCommandParams
        );
        result.put("readDcCurrentDivisorAttribute", readElectricalMeasurementDcCurrentDivisorAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementDcPowerMultiplierCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementDcPowerMultiplierAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.DcPowerMultiplier.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readDcPowerMultiplierAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementDcPowerMultiplierCommandParams
        );
        result.put("readDcPowerMultiplierAttribute", readElectricalMeasurementDcPowerMultiplierAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementDcPowerDivisorCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementDcPowerDivisorAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.DcPowerDivisor.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readDcPowerDivisorAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementDcPowerDivisorCommandParams
        );
        result.put("readDcPowerDivisorAttribute", readElectricalMeasurementDcPowerDivisorAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementAcFrequencyCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementAcFrequencyAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.AcFrequency.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readAcFrequencyAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementAcFrequencyCommandParams
        );
        result.put("readAcFrequencyAttribute", readElectricalMeasurementAcFrequencyAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementAcFrequencyMinCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementAcFrequencyMinAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.AcFrequencyMin.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readAcFrequencyMinAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementAcFrequencyMinCommandParams
        );
        result.put("readAcFrequencyMinAttribute", readElectricalMeasurementAcFrequencyMinAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementAcFrequencyMaxCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementAcFrequencyMaxAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.AcFrequencyMax.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readAcFrequencyMaxAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementAcFrequencyMaxCommandParams
        );
        result.put("readAcFrequencyMaxAttribute", readElectricalMeasurementAcFrequencyMaxAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementNeutralCurrentCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementNeutralCurrentAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.NeutralCurrent.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readNeutralCurrentAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementNeutralCurrentCommandParams
        );
        result.put("readNeutralCurrentAttribute", readElectricalMeasurementNeutralCurrentAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementTotalActivePowerCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementTotalActivePowerAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.TotalActivePower.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readTotalActivePowerAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementTotalActivePowerCommandParams
        );
        result.put("readTotalActivePowerAttribute", readElectricalMeasurementTotalActivePowerAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementTotalReactivePowerCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementTotalReactivePowerAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.TotalReactivePower.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readTotalReactivePowerAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementTotalReactivePowerCommandParams
        );
        result.put("readTotalReactivePowerAttribute", readElectricalMeasurementTotalReactivePowerAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementTotalApparentPowerCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementTotalApparentPowerAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.TotalApparentPower.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readTotalApparentPowerAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementTotalApparentPowerCommandParams
        );
        result.put("readTotalApparentPowerAttribute", readElectricalMeasurementTotalApparentPowerAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementMeasured1stHarmonicCurrentCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementMeasured1stHarmonicCurrentAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.Measured1stHarmonicCurrent.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readMeasured1stHarmonicCurrentAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementMeasured1stHarmonicCurrentCommandParams
        );
        result.put("readMeasured1stHarmonicCurrentAttribute", readElectricalMeasurementMeasured1stHarmonicCurrentAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementMeasured3rdHarmonicCurrentCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementMeasured3rdHarmonicCurrentAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.Measured3rdHarmonicCurrent.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readMeasured3rdHarmonicCurrentAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementMeasured3rdHarmonicCurrentCommandParams
        );
        result.put("readMeasured3rdHarmonicCurrentAttribute", readElectricalMeasurementMeasured3rdHarmonicCurrentAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementMeasured5thHarmonicCurrentCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementMeasured5thHarmonicCurrentAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.Measured5thHarmonicCurrent.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readMeasured5thHarmonicCurrentAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementMeasured5thHarmonicCurrentCommandParams
        );
        result.put("readMeasured5thHarmonicCurrentAttribute", readElectricalMeasurementMeasured5thHarmonicCurrentAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementMeasured7thHarmonicCurrentCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementMeasured7thHarmonicCurrentAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.Measured7thHarmonicCurrent.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readMeasured7thHarmonicCurrentAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementMeasured7thHarmonicCurrentCommandParams
        );
        result.put("readMeasured7thHarmonicCurrentAttribute", readElectricalMeasurementMeasured7thHarmonicCurrentAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementMeasured9thHarmonicCurrentCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementMeasured9thHarmonicCurrentAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.Measured9thHarmonicCurrent.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readMeasured9thHarmonicCurrentAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementMeasured9thHarmonicCurrentCommandParams
        );
        result.put("readMeasured9thHarmonicCurrentAttribute", readElectricalMeasurementMeasured9thHarmonicCurrentAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementMeasured11thHarmonicCurrentCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementMeasured11thHarmonicCurrentAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.Measured11thHarmonicCurrent.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readMeasured11thHarmonicCurrentAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementMeasured11thHarmonicCurrentCommandParams
        );
        result.put("readMeasured11thHarmonicCurrentAttribute", readElectricalMeasurementMeasured11thHarmonicCurrentAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementMeasuredPhase1stHarmonicCurrentCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementMeasuredPhase1stHarmonicCurrentAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.MeasuredPhase1stHarmonicCurrent.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readMeasuredPhase1stHarmonicCurrentAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementMeasuredPhase1stHarmonicCurrentCommandParams
        );
        result.put("readMeasuredPhase1stHarmonicCurrentAttribute", readElectricalMeasurementMeasuredPhase1stHarmonicCurrentAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementMeasuredPhase3rdHarmonicCurrentCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementMeasuredPhase3rdHarmonicCurrentAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.MeasuredPhase3rdHarmonicCurrent.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readMeasuredPhase3rdHarmonicCurrentAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementMeasuredPhase3rdHarmonicCurrentCommandParams
        );
        result.put("readMeasuredPhase3rdHarmonicCurrentAttribute", readElectricalMeasurementMeasuredPhase3rdHarmonicCurrentAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementMeasuredPhase5thHarmonicCurrentCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementMeasuredPhase5thHarmonicCurrentAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.MeasuredPhase5thHarmonicCurrent.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readMeasuredPhase5thHarmonicCurrentAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementMeasuredPhase5thHarmonicCurrentCommandParams
        );
        result.put("readMeasuredPhase5thHarmonicCurrentAttribute", readElectricalMeasurementMeasuredPhase5thHarmonicCurrentAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementMeasuredPhase7thHarmonicCurrentCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementMeasuredPhase7thHarmonicCurrentAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.MeasuredPhase7thHarmonicCurrent.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readMeasuredPhase7thHarmonicCurrentAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementMeasuredPhase7thHarmonicCurrentCommandParams
        );
        result.put("readMeasuredPhase7thHarmonicCurrentAttribute", readElectricalMeasurementMeasuredPhase7thHarmonicCurrentAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementMeasuredPhase9thHarmonicCurrentCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementMeasuredPhase9thHarmonicCurrentAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.MeasuredPhase9thHarmonicCurrent.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readMeasuredPhase9thHarmonicCurrentAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementMeasuredPhase9thHarmonicCurrentCommandParams
        );
        result.put("readMeasuredPhase9thHarmonicCurrentAttribute", readElectricalMeasurementMeasuredPhase9thHarmonicCurrentAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementMeasuredPhase11thHarmonicCurrentCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementMeasuredPhase11thHarmonicCurrentAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.MeasuredPhase11thHarmonicCurrent.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readMeasuredPhase11thHarmonicCurrentAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementMeasuredPhase11thHarmonicCurrentCommandParams
        );
        result.put("readMeasuredPhase11thHarmonicCurrentAttribute", readElectricalMeasurementMeasuredPhase11thHarmonicCurrentAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementAcFrequencyMultiplierCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementAcFrequencyMultiplierAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.AcFrequencyMultiplier.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readAcFrequencyMultiplierAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementAcFrequencyMultiplierCommandParams
        );
        result.put("readAcFrequencyMultiplierAttribute", readElectricalMeasurementAcFrequencyMultiplierAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementAcFrequencyDivisorCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementAcFrequencyDivisorAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.AcFrequencyDivisor.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readAcFrequencyDivisorAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementAcFrequencyDivisorCommandParams
        );
        result.put("readAcFrequencyDivisorAttribute", readElectricalMeasurementAcFrequencyDivisorAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementPowerMultiplierCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementPowerMultiplierAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.PowerMultiplier.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readPowerMultiplierAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementPowerMultiplierCommandParams
        );
        result.put("readPowerMultiplierAttribute", readElectricalMeasurementPowerMultiplierAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementPowerDivisorCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementPowerDivisorAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.PowerDivisor.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readPowerDivisorAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementPowerDivisorCommandParams
        );
        result.put("readPowerDivisorAttribute", readElectricalMeasurementPowerDivisorAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementHarmonicCurrentMultiplierCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementHarmonicCurrentMultiplierAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.HarmonicCurrentMultiplier.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readHarmonicCurrentMultiplierAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementHarmonicCurrentMultiplierCommandParams
        );
        result.put("readHarmonicCurrentMultiplierAttribute", readElectricalMeasurementHarmonicCurrentMultiplierAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementPhaseHarmonicCurrentMultiplierCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementPhaseHarmonicCurrentMultiplierAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.PhaseHarmonicCurrentMultiplier.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readPhaseHarmonicCurrentMultiplierAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementPhaseHarmonicCurrentMultiplierCommandParams
        );
        result.put("readPhaseHarmonicCurrentMultiplierAttribute", readElectricalMeasurementPhaseHarmonicCurrentMultiplierAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementInstantaneousVoltageCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementInstantaneousVoltageAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.InstantaneousVoltage.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readInstantaneousVoltageAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementInstantaneousVoltageCommandParams
        );
        result.put("readInstantaneousVoltageAttribute", readElectricalMeasurementInstantaneousVoltageAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementInstantaneousLineCurrentCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementInstantaneousLineCurrentAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.InstantaneousLineCurrent.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readInstantaneousLineCurrentAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementInstantaneousLineCurrentCommandParams
        );
        result.put("readInstantaneousLineCurrentAttribute", readElectricalMeasurementInstantaneousLineCurrentAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementInstantaneousActiveCurrentCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementInstantaneousActiveCurrentAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.InstantaneousActiveCurrent.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readInstantaneousActiveCurrentAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementInstantaneousActiveCurrentCommandParams
        );
        result.put("readInstantaneousActiveCurrentAttribute", readElectricalMeasurementInstantaneousActiveCurrentAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementInstantaneousReactiveCurrentCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementInstantaneousReactiveCurrentAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.InstantaneousReactiveCurrent.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readInstantaneousReactiveCurrentAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementInstantaneousReactiveCurrentCommandParams
        );
        result.put("readInstantaneousReactiveCurrentAttribute", readElectricalMeasurementInstantaneousReactiveCurrentAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementInstantaneousPowerCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementInstantaneousPowerAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.InstantaneousPower.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readInstantaneousPowerAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementInstantaneousPowerCommandParams
        );
        result.put("readInstantaneousPowerAttribute", readElectricalMeasurementInstantaneousPowerAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementRmsVoltageCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementRmsVoltageAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.RmsVoltage.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readRmsVoltageAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementRmsVoltageCommandParams
        );
        result.put("readRmsVoltageAttribute", readElectricalMeasurementRmsVoltageAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementRmsVoltageMinCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementRmsVoltageMinAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.RmsVoltageMin.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readRmsVoltageMinAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementRmsVoltageMinCommandParams
        );
        result.put("readRmsVoltageMinAttribute", readElectricalMeasurementRmsVoltageMinAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementRmsVoltageMaxCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementRmsVoltageMaxAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.RmsVoltageMax.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readRmsVoltageMaxAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementRmsVoltageMaxCommandParams
        );
        result.put("readRmsVoltageMaxAttribute", readElectricalMeasurementRmsVoltageMaxAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementRmsCurrentCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementRmsCurrentAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.RmsCurrent.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readRmsCurrentAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementRmsCurrentCommandParams
        );
        result.put("readRmsCurrentAttribute", readElectricalMeasurementRmsCurrentAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementRmsCurrentMinCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementRmsCurrentMinAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.RmsCurrentMin.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readRmsCurrentMinAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementRmsCurrentMinCommandParams
        );
        result.put("readRmsCurrentMinAttribute", readElectricalMeasurementRmsCurrentMinAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementRmsCurrentMaxCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementRmsCurrentMaxAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.RmsCurrentMax.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readRmsCurrentMaxAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementRmsCurrentMaxCommandParams
        );
        result.put("readRmsCurrentMaxAttribute", readElectricalMeasurementRmsCurrentMaxAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementActivePowerCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementActivePowerAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.ActivePower.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readActivePowerAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementActivePowerCommandParams
        );
        result.put("readActivePowerAttribute", readElectricalMeasurementActivePowerAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementActivePowerMinCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementActivePowerMinAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.ActivePowerMin.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readActivePowerMinAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementActivePowerMinCommandParams
        );
        result.put("readActivePowerMinAttribute", readElectricalMeasurementActivePowerMinAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementActivePowerMaxCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementActivePowerMaxAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.ActivePowerMax.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readActivePowerMaxAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementActivePowerMaxCommandParams
        );
        result.put("readActivePowerMaxAttribute", readElectricalMeasurementActivePowerMaxAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementReactivePowerCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementReactivePowerAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.ReactivePower.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readReactivePowerAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementReactivePowerCommandParams
        );
        result.put("readReactivePowerAttribute", readElectricalMeasurementReactivePowerAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementApparentPowerCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementApparentPowerAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.ApparentPower.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readApparentPowerAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementApparentPowerCommandParams
        );
        result.put("readApparentPowerAttribute", readElectricalMeasurementApparentPowerAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementPowerFactorCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementPowerFactorAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.PowerFactor.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readPowerFactorAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementPowerFactorCommandParams
        );
        result.put("readPowerFactorAttribute", readElectricalMeasurementPowerFactorAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementAverageRmsVoltageMeasurementPeriodCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementAverageRmsVoltageMeasurementPeriodAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.AverageRmsVoltageMeasurementPeriod.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readAverageRmsVoltageMeasurementPeriodAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementAverageRmsVoltageMeasurementPeriodCommandParams
        );
        result.put("readAverageRmsVoltageMeasurementPeriodAttribute", readElectricalMeasurementAverageRmsVoltageMeasurementPeriodAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementAverageRmsUnderVoltageCounterCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementAverageRmsUnderVoltageCounterAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.AverageRmsUnderVoltageCounter.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readAverageRmsUnderVoltageCounterAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementAverageRmsUnderVoltageCounterCommandParams
        );
        result.put("readAverageRmsUnderVoltageCounterAttribute", readElectricalMeasurementAverageRmsUnderVoltageCounterAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementRmsExtremeOverVoltagePeriodCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementRmsExtremeOverVoltagePeriodAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.RmsExtremeOverVoltagePeriod.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readRmsExtremeOverVoltagePeriodAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementRmsExtremeOverVoltagePeriodCommandParams
        );
        result.put("readRmsExtremeOverVoltagePeriodAttribute", readElectricalMeasurementRmsExtremeOverVoltagePeriodAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementRmsExtremeUnderVoltagePeriodCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementRmsExtremeUnderVoltagePeriodAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.RmsExtremeUnderVoltagePeriod.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readRmsExtremeUnderVoltagePeriodAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementRmsExtremeUnderVoltagePeriodCommandParams
        );
        result.put("readRmsExtremeUnderVoltagePeriodAttribute", readElectricalMeasurementRmsExtremeUnderVoltagePeriodAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementRmsVoltageSagPeriodCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementRmsVoltageSagPeriodAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.RmsVoltageSagPeriod.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readRmsVoltageSagPeriodAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementRmsVoltageSagPeriodCommandParams
        );
        result.put("readRmsVoltageSagPeriodAttribute", readElectricalMeasurementRmsVoltageSagPeriodAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementRmsVoltageSwellPeriodCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementRmsVoltageSwellPeriodAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.RmsVoltageSwellPeriod.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readRmsVoltageSwellPeriodAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementRmsVoltageSwellPeriodCommandParams
        );
        result.put("readRmsVoltageSwellPeriodAttribute", readElectricalMeasurementRmsVoltageSwellPeriodAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementAcVoltageMultiplierCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementAcVoltageMultiplierAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.AcVoltageMultiplier.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readAcVoltageMultiplierAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementAcVoltageMultiplierCommandParams
        );
        result.put("readAcVoltageMultiplierAttribute", readElectricalMeasurementAcVoltageMultiplierAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementAcVoltageDivisorCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementAcVoltageDivisorAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.AcVoltageDivisor.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readAcVoltageDivisorAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementAcVoltageDivisorCommandParams
        );
        result.put("readAcVoltageDivisorAttribute", readElectricalMeasurementAcVoltageDivisorAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementAcCurrentMultiplierCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementAcCurrentMultiplierAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.AcCurrentMultiplier.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readAcCurrentMultiplierAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementAcCurrentMultiplierCommandParams
        );
        result.put("readAcCurrentMultiplierAttribute", readElectricalMeasurementAcCurrentMultiplierAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementAcCurrentDivisorCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementAcCurrentDivisorAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.AcCurrentDivisor.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readAcCurrentDivisorAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementAcCurrentDivisorCommandParams
        );
        result.put("readAcCurrentDivisorAttribute", readElectricalMeasurementAcCurrentDivisorAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementAcPowerMultiplierCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementAcPowerMultiplierAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.AcPowerMultiplier.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readAcPowerMultiplierAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementAcPowerMultiplierCommandParams
        );
        result.put("readAcPowerMultiplierAttribute", readElectricalMeasurementAcPowerMultiplierAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementAcPowerDivisorCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementAcPowerDivisorAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.AcPowerDivisor.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readAcPowerDivisorAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementAcPowerDivisorCommandParams
        );
        result.put("readAcPowerDivisorAttribute", readElectricalMeasurementAcPowerDivisorAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementOverloadAlarmsMaskCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementOverloadAlarmsMaskAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.OverloadAlarmsMask.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readOverloadAlarmsMaskAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementOverloadAlarmsMaskCommandParams
        );
        result.put("readOverloadAlarmsMaskAttribute", readElectricalMeasurementOverloadAlarmsMaskAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementVoltageOverloadCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementVoltageOverloadAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.VoltageOverload.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readVoltageOverloadAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementVoltageOverloadCommandParams
        );
        result.put("readVoltageOverloadAttribute", readElectricalMeasurementVoltageOverloadAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementCurrentOverloadCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementCurrentOverloadAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.CurrentOverload.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readCurrentOverloadAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementCurrentOverloadCommandParams
        );
        result.put("readCurrentOverloadAttribute", readElectricalMeasurementCurrentOverloadAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementAcOverloadAlarmsMaskCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementAcOverloadAlarmsMaskAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.AcOverloadAlarmsMask.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readAcOverloadAlarmsMaskAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementAcOverloadAlarmsMaskCommandParams
        );
        result.put("readAcOverloadAlarmsMaskAttribute", readElectricalMeasurementAcOverloadAlarmsMaskAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementAcVoltageOverloadCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementAcVoltageOverloadAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.AcVoltageOverload.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readAcVoltageOverloadAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementAcVoltageOverloadCommandParams
        );
        result.put("readAcVoltageOverloadAttribute", readElectricalMeasurementAcVoltageOverloadAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementAcCurrentOverloadCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementAcCurrentOverloadAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.AcCurrentOverload.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readAcCurrentOverloadAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementAcCurrentOverloadCommandParams
        );
        result.put("readAcCurrentOverloadAttribute", readElectricalMeasurementAcCurrentOverloadAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementAcActivePowerOverloadCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementAcActivePowerOverloadAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.AcActivePowerOverload.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readAcActivePowerOverloadAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementAcActivePowerOverloadCommandParams
        );
        result.put("readAcActivePowerOverloadAttribute", readElectricalMeasurementAcActivePowerOverloadAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementAcReactivePowerOverloadCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementAcReactivePowerOverloadAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.AcReactivePowerOverload.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readAcReactivePowerOverloadAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementAcReactivePowerOverloadCommandParams
        );
        result.put("readAcReactivePowerOverloadAttribute", readElectricalMeasurementAcReactivePowerOverloadAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementAverageRmsOverVoltageCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementAverageRmsOverVoltageAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.AverageRmsOverVoltage.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readAverageRmsOverVoltageAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementAverageRmsOverVoltageCommandParams
        );
        result.put("readAverageRmsOverVoltageAttribute", readElectricalMeasurementAverageRmsOverVoltageAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementAverageRmsUnderVoltageCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementAverageRmsUnderVoltageAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.AverageRmsUnderVoltage.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readAverageRmsUnderVoltageAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementAverageRmsUnderVoltageCommandParams
        );
        result.put("readAverageRmsUnderVoltageAttribute", readElectricalMeasurementAverageRmsUnderVoltageAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementRmsExtremeOverVoltageCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementRmsExtremeOverVoltageAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.RmsExtremeOverVoltage.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readRmsExtremeOverVoltageAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementRmsExtremeOverVoltageCommandParams
        );
        result.put("readRmsExtremeOverVoltageAttribute", readElectricalMeasurementRmsExtremeOverVoltageAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementRmsExtremeUnderVoltageCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementRmsExtremeUnderVoltageAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.RmsExtremeUnderVoltage.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readRmsExtremeUnderVoltageAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementRmsExtremeUnderVoltageCommandParams
        );
        result.put("readRmsExtremeUnderVoltageAttribute", readElectricalMeasurementRmsExtremeUnderVoltageAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementRmsVoltageSagCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementRmsVoltageSagAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.RmsVoltageSag.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readRmsVoltageSagAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementRmsVoltageSagCommandParams
        );
        result.put("readRmsVoltageSagAttribute", readElectricalMeasurementRmsVoltageSagAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementRmsVoltageSwellCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementRmsVoltageSwellAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.RmsVoltageSwell.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readRmsVoltageSwellAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementRmsVoltageSwellCommandParams
        );
        result.put("readRmsVoltageSwellAttribute", readElectricalMeasurementRmsVoltageSwellAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementLineCurrentPhaseBCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementLineCurrentPhaseBAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.LineCurrentPhaseB.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readLineCurrentPhaseBAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementLineCurrentPhaseBCommandParams
        );
        result.put("readLineCurrentPhaseBAttribute", readElectricalMeasurementLineCurrentPhaseBAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementActiveCurrentPhaseBCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementActiveCurrentPhaseBAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.ActiveCurrentPhaseB.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readActiveCurrentPhaseBAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementActiveCurrentPhaseBCommandParams
        );
        result.put("readActiveCurrentPhaseBAttribute", readElectricalMeasurementActiveCurrentPhaseBAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementReactiveCurrentPhaseBCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementReactiveCurrentPhaseBAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.ReactiveCurrentPhaseB.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readReactiveCurrentPhaseBAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementReactiveCurrentPhaseBCommandParams
        );
        result.put("readReactiveCurrentPhaseBAttribute", readElectricalMeasurementReactiveCurrentPhaseBAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementRmsVoltagePhaseBCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementRmsVoltagePhaseBAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.RmsVoltagePhaseB.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readRmsVoltagePhaseBAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementRmsVoltagePhaseBCommandParams
        );
        result.put("readRmsVoltagePhaseBAttribute", readElectricalMeasurementRmsVoltagePhaseBAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementRmsVoltageMinPhaseBCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementRmsVoltageMinPhaseBAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.RmsVoltageMinPhaseB.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readRmsVoltageMinPhaseBAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementRmsVoltageMinPhaseBCommandParams
        );
        result.put("readRmsVoltageMinPhaseBAttribute", readElectricalMeasurementRmsVoltageMinPhaseBAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementRmsVoltageMaxPhaseBCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementRmsVoltageMaxPhaseBAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.RmsVoltageMaxPhaseB.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readRmsVoltageMaxPhaseBAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementRmsVoltageMaxPhaseBCommandParams
        );
        result.put("readRmsVoltageMaxPhaseBAttribute", readElectricalMeasurementRmsVoltageMaxPhaseBAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementRmsCurrentPhaseBCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementRmsCurrentPhaseBAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.RmsCurrentPhaseB.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readRmsCurrentPhaseBAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementRmsCurrentPhaseBCommandParams
        );
        result.put("readRmsCurrentPhaseBAttribute", readElectricalMeasurementRmsCurrentPhaseBAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementRmsCurrentMinPhaseBCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementRmsCurrentMinPhaseBAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.RmsCurrentMinPhaseB.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readRmsCurrentMinPhaseBAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementRmsCurrentMinPhaseBCommandParams
        );
        result.put("readRmsCurrentMinPhaseBAttribute", readElectricalMeasurementRmsCurrentMinPhaseBAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementRmsCurrentMaxPhaseBCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementRmsCurrentMaxPhaseBAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.RmsCurrentMaxPhaseB.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readRmsCurrentMaxPhaseBAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementRmsCurrentMaxPhaseBCommandParams
        );
        result.put("readRmsCurrentMaxPhaseBAttribute", readElectricalMeasurementRmsCurrentMaxPhaseBAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementActivePowerPhaseBCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementActivePowerPhaseBAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.ActivePowerPhaseB.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readActivePowerPhaseBAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementActivePowerPhaseBCommandParams
        );
        result.put("readActivePowerPhaseBAttribute", readElectricalMeasurementActivePowerPhaseBAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementActivePowerMinPhaseBCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementActivePowerMinPhaseBAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.ActivePowerMinPhaseB.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readActivePowerMinPhaseBAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementActivePowerMinPhaseBCommandParams
        );
        result.put("readActivePowerMinPhaseBAttribute", readElectricalMeasurementActivePowerMinPhaseBAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementActivePowerMaxPhaseBCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementActivePowerMaxPhaseBAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.ActivePowerMaxPhaseB.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readActivePowerMaxPhaseBAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementActivePowerMaxPhaseBCommandParams
        );
        result.put("readActivePowerMaxPhaseBAttribute", readElectricalMeasurementActivePowerMaxPhaseBAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementReactivePowerPhaseBCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementReactivePowerPhaseBAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.ReactivePowerPhaseB.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readReactivePowerPhaseBAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementReactivePowerPhaseBCommandParams
        );
        result.put("readReactivePowerPhaseBAttribute", readElectricalMeasurementReactivePowerPhaseBAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementApparentPowerPhaseBCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementApparentPowerPhaseBAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.ApparentPowerPhaseB.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readApparentPowerPhaseBAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementApparentPowerPhaseBCommandParams
        );
        result.put("readApparentPowerPhaseBAttribute", readElectricalMeasurementApparentPowerPhaseBAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementPowerFactorPhaseBCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementPowerFactorPhaseBAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.PowerFactorPhaseB.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readPowerFactorPhaseBAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementPowerFactorPhaseBCommandParams
        );
        result.put("readPowerFactorPhaseBAttribute", readElectricalMeasurementPowerFactorPhaseBAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementAverageRmsVoltageMeasurementPeriodPhaseBCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementAverageRmsVoltageMeasurementPeriodPhaseBAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.AverageRmsVoltageMeasurementPeriodPhaseB.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readAverageRmsVoltageMeasurementPeriodPhaseBAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementAverageRmsVoltageMeasurementPeriodPhaseBCommandParams
        );
        result.put("readAverageRmsVoltageMeasurementPeriodPhaseBAttribute", readElectricalMeasurementAverageRmsVoltageMeasurementPeriodPhaseBAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementAverageRmsOverVoltageCounterPhaseBCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementAverageRmsOverVoltageCounterPhaseBAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.AverageRmsOverVoltageCounterPhaseB.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readAverageRmsOverVoltageCounterPhaseBAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementAverageRmsOverVoltageCounterPhaseBCommandParams
        );
        result.put("readAverageRmsOverVoltageCounterPhaseBAttribute", readElectricalMeasurementAverageRmsOverVoltageCounterPhaseBAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementAverageRmsUnderVoltageCounterPhaseBCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementAverageRmsUnderVoltageCounterPhaseBAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.AverageRmsUnderVoltageCounterPhaseB.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readAverageRmsUnderVoltageCounterPhaseBAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementAverageRmsUnderVoltageCounterPhaseBCommandParams
        );
        result.put("readAverageRmsUnderVoltageCounterPhaseBAttribute", readElectricalMeasurementAverageRmsUnderVoltageCounterPhaseBAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementRmsExtremeOverVoltagePeriodPhaseBCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementRmsExtremeOverVoltagePeriodPhaseBAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.RmsExtremeOverVoltagePeriodPhaseB.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readRmsExtremeOverVoltagePeriodPhaseBAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementRmsExtremeOverVoltagePeriodPhaseBCommandParams
        );
        result.put("readRmsExtremeOverVoltagePeriodPhaseBAttribute", readElectricalMeasurementRmsExtremeOverVoltagePeriodPhaseBAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementRmsExtremeUnderVoltagePeriodPhaseBCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementRmsExtremeUnderVoltagePeriodPhaseBAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.RmsExtremeUnderVoltagePeriodPhaseB.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readRmsExtremeUnderVoltagePeriodPhaseBAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementRmsExtremeUnderVoltagePeriodPhaseBCommandParams
        );
        result.put("readRmsExtremeUnderVoltagePeriodPhaseBAttribute", readElectricalMeasurementRmsExtremeUnderVoltagePeriodPhaseBAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementRmsVoltageSagPeriodPhaseBCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementRmsVoltageSagPeriodPhaseBAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.RmsVoltageSagPeriodPhaseB.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readRmsVoltageSagPeriodPhaseBAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementRmsVoltageSagPeriodPhaseBCommandParams
        );
        result.put("readRmsVoltageSagPeriodPhaseBAttribute", readElectricalMeasurementRmsVoltageSagPeriodPhaseBAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementRmsVoltageSwellPeriodPhaseBCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementRmsVoltageSwellPeriodPhaseBAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.RmsVoltageSwellPeriodPhaseB.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readRmsVoltageSwellPeriodPhaseBAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementRmsVoltageSwellPeriodPhaseBCommandParams
        );
        result.put("readRmsVoltageSwellPeriodPhaseBAttribute", readElectricalMeasurementRmsVoltageSwellPeriodPhaseBAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementLineCurrentPhaseCCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementLineCurrentPhaseCAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.LineCurrentPhaseC.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readLineCurrentPhaseCAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementLineCurrentPhaseCCommandParams
        );
        result.put("readLineCurrentPhaseCAttribute", readElectricalMeasurementLineCurrentPhaseCAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementActiveCurrentPhaseCCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementActiveCurrentPhaseCAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.ActiveCurrentPhaseC.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readActiveCurrentPhaseCAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementActiveCurrentPhaseCCommandParams
        );
        result.put("readActiveCurrentPhaseCAttribute", readElectricalMeasurementActiveCurrentPhaseCAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementReactiveCurrentPhaseCCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementReactiveCurrentPhaseCAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.ReactiveCurrentPhaseC.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readReactiveCurrentPhaseCAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementReactiveCurrentPhaseCCommandParams
        );
        result.put("readReactiveCurrentPhaseCAttribute", readElectricalMeasurementReactiveCurrentPhaseCAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementRmsVoltagePhaseCCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementRmsVoltagePhaseCAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.RmsVoltagePhaseC.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readRmsVoltagePhaseCAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementRmsVoltagePhaseCCommandParams
        );
        result.put("readRmsVoltagePhaseCAttribute", readElectricalMeasurementRmsVoltagePhaseCAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementRmsVoltageMinPhaseCCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementRmsVoltageMinPhaseCAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.RmsVoltageMinPhaseC.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readRmsVoltageMinPhaseCAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementRmsVoltageMinPhaseCCommandParams
        );
        result.put("readRmsVoltageMinPhaseCAttribute", readElectricalMeasurementRmsVoltageMinPhaseCAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementRmsVoltageMaxPhaseCCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementRmsVoltageMaxPhaseCAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.RmsVoltageMaxPhaseC.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readRmsVoltageMaxPhaseCAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementRmsVoltageMaxPhaseCCommandParams
        );
        result.put("readRmsVoltageMaxPhaseCAttribute", readElectricalMeasurementRmsVoltageMaxPhaseCAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementRmsCurrentPhaseCCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementRmsCurrentPhaseCAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.RmsCurrentPhaseC.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readRmsCurrentPhaseCAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementRmsCurrentPhaseCCommandParams
        );
        result.put("readRmsCurrentPhaseCAttribute", readElectricalMeasurementRmsCurrentPhaseCAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementRmsCurrentMinPhaseCCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementRmsCurrentMinPhaseCAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.RmsCurrentMinPhaseC.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readRmsCurrentMinPhaseCAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementRmsCurrentMinPhaseCCommandParams
        );
        result.put("readRmsCurrentMinPhaseCAttribute", readElectricalMeasurementRmsCurrentMinPhaseCAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementRmsCurrentMaxPhaseCCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementRmsCurrentMaxPhaseCAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.RmsCurrentMaxPhaseC.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readRmsCurrentMaxPhaseCAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementRmsCurrentMaxPhaseCCommandParams
        );
        result.put("readRmsCurrentMaxPhaseCAttribute", readElectricalMeasurementRmsCurrentMaxPhaseCAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementActivePowerPhaseCCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementActivePowerPhaseCAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.ActivePowerPhaseC.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readActivePowerPhaseCAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementActivePowerPhaseCCommandParams
        );
        result.put("readActivePowerPhaseCAttribute", readElectricalMeasurementActivePowerPhaseCAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementActivePowerMinPhaseCCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementActivePowerMinPhaseCAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.ActivePowerMinPhaseC.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readActivePowerMinPhaseCAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementActivePowerMinPhaseCCommandParams
        );
        result.put("readActivePowerMinPhaseCAttribute", readElectricalMeasurementActivePowerMinPhaseCAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementActivePowerMaxPhaseCCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementActivePowerMaxPhaseCAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.ActivePowerMaxPhaseC.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readActivePowerMaxPhaseCAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementActivePowerMaxPhaseCCommandParams
        );
        result.put("readActivePowerMaxPhaseCAttribute", readElectricalMeasurementActivePowerMaxPhaseCAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementReactivePowerPhaseCCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementReactivePowerPhaseCAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.ReactivePowerPhaseC.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readReactivePowerPhaseCAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementReactivePowerPhaseCCommandParams
        );
        result.put("readReactivePowerPhaseCAttribute", readElectricalMeasurementReactivePowerPhaseCAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementApparentPowerPhaseCCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementApparentPowerPhaseCAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.ApparentPowerPhaseC.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readApparentPowerPhaseCAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementApparentPowerPhaseCCommandParams
        );
        result.put("readApparentPowerPhaseCAttribute", readElectricalMeasurementApparentPowerPhaseCAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementPowerFactorPhaseCCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementPowerFactorPhaseCAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.PowerFactorPhaseC.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readPowerFactorPhaseCAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementPowerFactorPhaseCCommandParams
        );
        result.put("readPowerFactorPhaseCAttribute", readElectricalMeasurementPowerFactorPhaseCAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementAverageRmsVoltageMeasurementPeriodPhaseCCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementAverageRmsVoltageMeasurementPeriodPhaseCAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.AverageRmsVoltageMeasurementPeriodPhaseC.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readAverageRmsVoltageMeasurementPeriodPhaseCAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementAverageRmsVoltageMeasurementPeriodPhaseCCommandParams
        );
        result.put("readAverageRmsVoltageMeasurementPeriodPhaseCAttribute", readElectricalMeasurementAverageRmsVoltageMeasurementPeriodPhaseCAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementAverageRmsOverVoltageCounterPhaseCCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementAverageRmsOverVoltageCounterPhaseCAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.AverageRmsOverVoltageCounterPhaseC.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readAverageRmsOverVoltageCounterPhaseCAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementAverageRmsOverVoltageCounterPhaseCCommandParams
        );
        result.put("readAverageRmsOverVoltageCounterPhaseCAttribute", readElectricalMeasurementAverageRmsOverVoltageCounterPhaseCAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementAverageRmsUnderVoltageCounterPhaseCCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementAverageRmsUnderVoltageCounterPhaseCAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.AverageRmsUnderVoltageCounterPhaseC.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readAverageRmsUnderVoltageCounterPhaseCAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementAverageRmsUnderVoltageCounterPhaseCCommandParams
        );
        result.put("readAverageRmsUnderVoltageCounterPhaseCAttribute", readElectricalMeasurementAverageRmsUnderVoltageCounterPhaseCAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementRmsExtremeOverVoltagePeriodPhaseCCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementRmsExtremeOverVoltagePeriodPhaseCAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.RmsExtremeOverVoltagePeriodPhaseC.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readRmsExtremeOverVoltagePeriodPhaseCAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementRmsExtremeOverVoltagePeriodPhaseCCommandParams
        );
        result.put("readRmsExtremeOverVoltagePeriodPhaseCAttribute", readElectricalMeasurementRmsExtremeOverVoltagePeriodPhaseCAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementRmsExtremeUnderVoltagePeriodPhaseCCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementRmsExtremeUnderVoltagePeriodPhaseCAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.RmsExtremeUnderVoltagePeriodPhaseC.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readRmsExtremeUnderVoltagePeriodPhaseCAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementRmsExtremeUnderVoltagePeriodPhaseCCommandParams
        );
        result.put("readRmsExtremeUnderVoltagePeriodPhaseCAttribute", readElectricalMeasurementRmsExtremeUnderVoltagePeriodPhaseCAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementRmsVoltageSagPeriodPhaseCCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementRmsVoltageSagPeriodPhaseCAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.RmsVoltageSagPeriodPhaseC.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readRmsVoltageSagPeriodPhaseCAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementRmsVoltageSagPeriodPhaseCCommandParams
        );
        result.put("readRmsVoltageSagPeriodPhaseCAttribute", readElectricalMeasurementRmsVoltageSagPeriodPhaseCAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementRmsVoltageSwellPeriodPhaseCCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementRmsVoltageSwellPeriodPhaseCAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.RmsVoltageSwellPeriodPhaseC.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readRmsVoltageSwellPeriodPhaseCAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementRmsVoltageSwellPeriodPhaseCCommandParams
        );
        result.put("readRmsVoltageSwellPeriodPhaseCAttribute", readElectricalMeasurementRmsVoltageSwellPeriodPhaseCAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.ElectricalMeasurementCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedElectricalMeasurementClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readElectricalMeasurementGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.ElectricalMeasurementCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedElectricalMeasurementClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readElectricalMeasurementAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readEventListAttribute(
//              (ChipClusters.ElectricalMeasurementCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedElectricalMeasurementClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementEventListCommandParams
        );
        result.put("readEventListAttribute", readElectricalMeasurementEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.ElectricalMeasurementCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedElectricalMeasurementClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readElectricalMeasurementAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readElectricalMeasurementFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readElectricalMeasurementClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readElectricalMeasurementClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.ElectricalMeasurement.ID, ClusterIDMapping.ElectricalMeasurement.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.ElectricalMeasurementCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readElectricalMeasurementClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readElectricalMeasurementClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readUnitTestingInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readUnitTestingBooleanCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingBooleanAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.Boolean.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readBooleanAttribute(
//              (ChipClusters.BooleanAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBooleanAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingBooleanCommandParams
        );
        result.put("readBooleanAttribute", readUnitTestingBooleanAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingBitmap8CommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingBitmap8AttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.Bitmap8.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readBitmap8Attribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingBitmap8CommandParams
        );
        result.put("readBitmap8Attribute", readUnitTestingBitmap8AttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingBitmap16CommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingBitmap16AttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.Bitmap16.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readBitmap16Attribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingBitmap16CommandParams
        );
        result.put("readBitmap16Attribute", readUnitTestingBitmap16AttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingBitmap32CommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingBitmap32AttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.Bitmap32.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readBitmap32Attribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingBitmap32CommandParams
        );
        result.put("readBitmap32Attribute", readUnitTestingBitmap32AttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingBitmap64CommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingBitmap64AttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.Bitmap64.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readBitmap64Attribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingBitmap64CommandParams
        );
        result.put("readBitmap64Attribute", readUnitTestingBitmap64AttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingInt8uCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingInt8uAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.Int8u.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readInt8uAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingInt8uCommandParams
        );
        result.put("readInt8uAttribute", readUnitTestingInt8uAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingInt16uCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingInt16uAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.Int16u.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readInt16uAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingInt16uCommandParams
        );
        result.put("readInt16uAttribute", readUnitTestingInt16uAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingInt24uCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingInt24uAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.Int24u.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readInt24uAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingInt24uCommandParams
        );
        result.put("readInt24uAttribute", readUnitTestingInt24uAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingInt32uCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingInt32uAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.Int32u.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readInt32uAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingInt32uCommandParams
        );
        result.put("readInt32uAttribute", readUnitTestingInt32uAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingInt40uCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingInt40uAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.Int40u.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readInt40uAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingInt40uCommandParams
        );
        result.put("readInt40uAttribute", readUnitTestingInt40uAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingInt48uCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingInt48uAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.Int48u.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readInt48uAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingInt48uCommandParams
        );
        result.put("readInt48uAttribute", readUnitTestingInt48uAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingInt56uCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingInt56uAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.Int56u.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readInt56uAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingInt56uCommandParams
        );
        result.put("readInt56uAttribute", readUnitTestingInt56uAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingInt64uCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingInt64uAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.Int64u.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readInt64uAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingInt64uCommandParams
        );
        result.put("readInt64uAttribute", readUnitTestingInt64uAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingInt8sCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingInt8sAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.Int8s.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readInt8sAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingInt8sCommandParams
        );
        result.put("readInt8sAttribute", readUnitTestingInt8sAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingInt16sCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingInt16sAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.Int16s.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readInt16sAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingInt16sCommandParams
        );
        result.put("readInt16sAttribute", readUnitTestingInt16sAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingInt24sCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingInt24sAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.Int24s.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readInt24sAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingInt24sCommandParams
        );
        result.put("readInt24sAttribute", readUnitTestingInt24sAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingInt32sCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingInt32sAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.Int32s.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readInt32sAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingInt32sCommandParams
        );
        result.put("readInt32sAttribute", readUnitTestingInt32sAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingInt40sCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingInt40sAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.Int40s.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readInt40sAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingInt40sCommandParams
        );
        result.put("readInt40sAttribute", readUnitTestingInt40sAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingInt48sCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingInt48sAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.Int48s.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readInt48sAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingInt48sCommandParams
        );
        result.put("readInt48sAttribute", readUnitTestingInt48sAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingInt56sCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingInt56sAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.Int56s.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readInt56sAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingInt56sCommandParams
        );
        result.put("readInt56sAttribute", readUnitTestingInt56sAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingInt64sCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingInt64sAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.Int64s.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readInt64sAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingInt64sCommandParams
        );
        result.put("readInt64sAttribute", readUnitTestingInt64sAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingEnum8CommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingEnum8AttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.Enum8.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readEnum8Attribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingEnum8CommandParams
        );
        result.put("readEnum8Attribute", readUnitTestingEnum8AttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingEnum16CommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingEnum16AttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.Enum16.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readEnum16Attribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingEnum16CommandParams
        );
        result.put("readEnum16Attribute", readUnitTestingEnum16AttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingFloatSingleCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingFloatSingleAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.FloatSingle.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readFloatSingleAttribute(
//              (ChipClusters.FloatAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFloatAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingFloatSingleCommandParams
        );
        result.put("readFloatSingleAttribute", readUnitTestingFloatSingleAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingFloatDoubleCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingFloatDoubleAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.FloatDouble.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readFloatDoubleAttribute(
//              (ChipClusters.DoubleAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedDoubleAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingFloatDoubleCommandParams
        );
        result.put("readFloatDoubleAttribute", readUnitTestingFloatDoubleAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingOctetStringCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingOctetStringAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.OctetString.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readOctetStringAttribute(
//              (ChipClusters.OctetStringAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedOctetStringAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingOctetStringCommandParams
        );
        result.put("readOctetStringAttribute", readUnitTestingOctetStringAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingListInt8uCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingListInt8uAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.ListInt8u.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readListInt8uAttribute(
//              (ChipClusters.UnitTestingCluster.ListInt8uAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedUnitTestingClusterListInt8uAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingListInt8uCommandParams
        );
        result.put("readListInt8uAttribute", readUnitTestingListInt8uAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingListOctetStringCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingListOctetStringAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.ListOctetString.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readListOctetStringAttribute(
//              (ChipClusters.UnitTestingCluster.ListOctetStringAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedUnitTestingClusterListOctetStringAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingListOctetStringCommandParams
        );
        result.put("readListOctetStringAttribute", readUnitTestingListOctetStringAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingListStructOctetStringCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingListStructOctetStringAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.ListStructOctetString.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readListStructOctetStringAttribute(
//              (ChipClusters.UnitTestingCluster.ListStructOctetStringAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedUnitTestingClusterListStructOctetStringAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingListStructOctetStringCommandParams
        );
        result.put("readListStructOctetStringAttribute", readUnitTestingListStructOctetStringAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingLongOctetStringCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingLongOctetStringAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.LongOctetString.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readLongOctetStringAttribute(
//              (ChipClusters.OctetStringAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedOctetStringAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingLongOctetStringCommandParams
        );
        result.put("readLongOctetStringAttribute", readUnitTestingLongOctetStringAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingCharStringCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingCharStringAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.CharString.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readCharStringAttribute(
//              (ChipClusters.CharStringAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedCharStringAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingCharStringCommandParams
        );
        result.put("readCharStringAttribute", readUnitTestingCharStringAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingLongCharStringCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingLongCharStringAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.LongCharString.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readLongCharStringAttribute(
//              (ChipClusters.CharStringAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedCharStringAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingLongCharStringCommandParams
        );
        result.put("readLongCharStringAttribute", readUnitTestingLongCharStringAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingEpochUsCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingEpochUsAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.EpochUs.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readEpochUsAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingEpochUsCommandParams
        );
        result.put("readEpochUsAttribute", readUnitTestingEpochUsAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingEpochSCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingEpochSAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.EpochS.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readEpochSAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingEpochSCommandParams
        );
        result.put("readEpochSAttribute", readUnitTestingEpochSAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingVendorIdCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingVendorIdAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.VendorId.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readVendorIdAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingVendorIdCommandParams
        );
        result.put("readVendorIdAttribute", readUnitTestingVendorIdAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingListNullablesAndOptionalsStructCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingListNullablesAndOptionalsStructAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.ListNullablesAndOptionalsStruct.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readListNullablesAndOptionalsStructAttribute(
//              (ChipClusters.UnitTestingCluster.ListNullablesAndOptionalsStructAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedUnitTestingClusterListNullablesAndOptionalsStructAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingListNullablesAndOptionalsStructCommandParams
        );
        result.put("readListNullablesAndOptionalsStructAttribute", readUnitTestingListNullablesAndOptionalsStructAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingEnumAttrCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingEnumAttrAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.EnumAttr.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readEnumAttrAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingEnumAttrCommandParams
        );
        result.put("readEnumAttrAttribute", readUnitTestingEnumAttrAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingRangeRestrictedInt8uCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingRangeRestrictedInt8uAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.RangeRestrictedInt8u.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readRangeRestrictedInt8uAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingRangeRestrictedInt8uCommandParams
        );
        result.put("readRangeRestrictedInt8uAttribute", readUnitTestingRangeRestrictedInt8uAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingRangeRestrictedInt8sCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingRangeRestrictedInt8sAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.RangeRestrictedInt8s.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readRangeRestrictedInt8sAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingRangeRestrictedInt8sCommandParams
        );
        result.put("readRangeRestrictedInt8sAttribute", readUnitTestingRangeRestrictedInt8sAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingRangeRestrictedInt16uCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingRangeRestrictedInt16uAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.RangeRestrictedInt16u.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readRangeRestrictedInt16uAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingRangeRestrictedInt16uCommandParams
        );
        result.put("readRangeRestrictedInt16uAttribute", readUnitTestingRangeRestrictedInt16uAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingRangeRestrictedInt16sCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingRangeRestrictedInt16sAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.RangeRestrictedInt16s.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readRangeRestrictedInt16sAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingRangeRestrictedInt16sCommandParams
        );
        result.put("readRangeRestrictedInt16sAttribute", readUnitTestingRangeRestrictedInt16sAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingListLongOctetStringCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingListLongOctetStringAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.ListLongOctetString.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readListLongOctetStringAttribute(
//              (ChipClusters.UnitTestingCluster.ListLongOctetStringAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedUnitTestingClusterListLongOctetStringAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingListLongOctetStringCommandParams
        );
        result.put("readListLongOctetStringAttribute", readUnitTestingListLongOctetStringAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingListFabricScopedCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingListFabricScopedAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.ListFabricScoped.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readListFabricScopedAttribute(
//              (ChipClusters.UnitTestingCluster.ListFabricScopedAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedUnitTestingClusterListFabricScopedAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingListFabricScopedCommandParams
        );
        result.put("readListFabricScopedAttribute", readUnitTestingListFabricScopedAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingTimedWriteBooleanCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingTimedWriteBooleanAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.TimedWriteBoolean.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readTimedWriteBooleanAttribute(
//              (ChipClusters.BooleanAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBooleanAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingTimedWriteBooleanCommandParams
        );
        result.put("readTimedWriteBooleanAttribute", readUnitTestingTimedWriteBooleanAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingGeneralErrorBooleanCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingGeneralErrorBooleanAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.GeneralErrorBoolean.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readGeneralErrorBooleanAttribute(
//              (ChipClusters.BooleanAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBooleanAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingGeneralErrorBooleanCommandParams
        );
        result.put("readGeneralErrorBooleanAttribute", readUnitTestingGeneralErrorBooleanAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingClusterErrorBooleanCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingClusterErrorBooleanAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.ClusterErrorBoolean.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readClusterErrorBooleanAttribute(
//              (ChipClusters.BooleanAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBooleanAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingClusterErrorBooleanCommandParams
        );
        result.put("readClusterErrorBooleanAttribute", readUnitTestingClusterErrorBooleanAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingUnsupportedCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingUnsupportedAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.Unsupported.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readUnsupportedAttribute(
//              (ChipClusters.BooleanAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedBooleanAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingUnsupportedCommandParams
        );
        result.put("readUnsupportedAttribute", readUnitTestingUnsupportedAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingNullableBooleanCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingNullableBooleanAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.NullableBoolean.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readNullableBooleanAttribute(
//              (ChipClusters.UnitTestingCluster.NullableBooleanAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedUnitTestingClusterNullableBooleanAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingNullableBooleanCommandParams
        );
        result.put("readNullableBooleanAttribute", readUnitTestingNullableBooleanAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingNullableBitmap8CommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingNullableBitmap8AttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.NullableBitmap8.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readNullableBitmap8Attribute(
//              (ChipClusters.UnitTestingCluster.NullableBitmap8AttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedUnitTestingClusterNullableBitmap8AttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingNullableBitmap8CommandParams
        );
        result.put("readNullableBitmap8Attribute", readUnitTestingNullableBitmap8AttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingNullableBitmap16CommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingNullableBitmap16AttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.NullableBitmap16.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readNullableBitmap16Attribute(
//              (ChipClusters.UnitTestingCluster.NullableBitmap16AttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedUnitTestingClusterNullableBitmap16AttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingNullableBitmap16CommandParams
        );
        result.put("readNullableBitmap16Attribute", readUnitTestingNullableBitmap16AttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingNullableBitmap32CommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingNullableBitmap32AttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.NullableBitmap32.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readNullableBitmap32Attribute(
//              (ChipClusters.UnitTestingCluster.NullableBitmap32AttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedUnitTestingClusterNullableBitmap32AttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingNullableBitmap32CommandParams
        );
        result.put("readNullableBitmap32Attribute", readUnitTestingNullableBitmap32AttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingNullableBitmap64CommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingNullableBitmap64AttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.NullableBitmap64.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readNullableBitmap64Attribute(
//              (ChipClusters.UnitTestingCluster.NullableBitmap64AttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedUnitTestingClusterNullableBitmap64AttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingNullableBitmap64CommandParams
        );
        result.put("readNullableBitmap64Attribute", readUnitTestingNullableBitmap64AttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingNullableInt8uCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingNullableInt8uAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.NullableInt8u.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readNullableInt8uAttribute(
//              (ChipClusters.UnitTestingCluster.NullableInt8uAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedUnitTestingClusterNullableInt8uAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingNullableInt8uCommandParams
        );
        result.put("readNullableInt8uAttribute", readUnitTestingNullableInt8uAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingNullableInt16uCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingNullableInt16uAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.NullableInt16u.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readNullableInt16uAttribute(
//              (ChipClusters.UnitTestingCluster.NullableInt16uAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedUnitTestingClusterNullableInt16uAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingNullableInt16uCommandParams
        );
        result.put("readNullableInt16uAttribute", readUnitTestingNullableInt16uAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingNullableInt24uCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingNullableInt24uAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.NullableInt24u.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readNullableInt24uAttribute(
//              (ChipClusters.UnitTestingCluster.NullableInt24uAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedUnitTestingClusterNullableInt24uAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingNullableInt24uCommandParams
        );
        result.put("readNullableInt24uAttribute", readUnitTestingNullableInt24uAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingNullableInt32uCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingNullableInt32uAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.NullableInt32u.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readNullableInt32uAttribute(
//              (ChipClusters.UnitTestingCluster.NullableInt32uAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedUnitTestingClusterNullableInt32uAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingNullableInt32uCommandParams
        );
        result.put("readNullableInt32uAttribute", readUnitTestingNullableInt32uAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingNullableInt40uCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingNullableInt40uAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.NullableInt40u.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readNullableInt40uAttribute(
//              (ChipClusters.UnitTestingCluster.NullableInt40uAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedUnitTestingClusterNullableInt40uAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingNullableInt40uCommandParams
        );
        result.put("readNullableInt40uAttribute", readUnitTestingNullableInt40uAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingNullableInt48uCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingNullableInt48uAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.NullableInt48u.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readNullableInt48uAttribute(
//              (ChipClusters.UnitTestingCluster.NullableInt48uAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedUnitTestingClusterNullableInt48uAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingNullableInt48uCommandParams
        );
        result.put("readNullableInt48uAttribute", readUnitTestingNullableInt48uAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingNullableInt56uCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingNullableInt56uAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.NullableInt56u.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readNullableInt56uAttribute(
//              (ChipClusters.UnitTestingCluster.NullableInt56uAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedUnitTestingClusterNullableInt56uAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingNullableInt56uCommandParams
        );
        result.put("readNullableInt56uAttribute", readUnitTestingNullableInt56uAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingNullableInt64uCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingNullableInt64uAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.NullableInt64u.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readNullableInt64uAttribute(
//              (ChipClusters.UnitTestingCluster.NullableInt64uAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedUnitTestingClusterNullableInt64uAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingNullableInt64uCommandParams
        );
        result.put("readNullableInt64uAttribute", readUnitTestingNullableInt64uAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingNullableInt8sCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingNullableInt8sAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.NullableInt8s.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readNullableInt8sAttribute(
//              (ChipClusters.UnitTestingCluster.NullableInt8sAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedUnitTestingClusterNullableInt8sAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingNullableInt8sCommandParams
        );
        result.put("readNullableInt8sAttribute", readUnitTestingNullableInt8sAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingNullableInt16sCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingNullableInt16sAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.NullableInt16s.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readNullableInt16sAttribute(
//              (ChipClusters.UnitTestingCluster.NullableInt16sAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedUnitTestingClusterNullableInt16sAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingNullableInt16sCommandParams
        );
        result.put("readNullableInt16sAttribute", readUnitTestingNullableInt16sAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingNullableInt24sCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingNullableInt24sAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.NullableInt24s.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readNullableInt24sAttribute(
//              (ChipClusters.UnitTestingCluster.NullableInt24sAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedUnitTestingClusterNullableInt24sAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingNullableInt24sCommandParams
        );
        result.put("readNullableInt24sAttribute", readUnitTestingNullableInt24sAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingNullableInt32sCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingNullableInt32sAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.NullableInt32s.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readNullableInt32sAttribute(
//              (ChipClusters.UnitTestingCluster.NullableInt32sAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedUnitTestingClusterNullableInt32sAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingNullableInt32sCommandParams
        );
        result.put("readNullableInt32sAttribute", readUnitTestingNullableInt32sAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingNullableInt40sCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingNullableInt40sAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.NullableInt40s.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readNullableInt40sAttribute(
//              (ChipClusters.UnitTestingCluster.NullableInt40sAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedUnitTestingClusterNullableInt40sAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingNullableInt40sCommandParams
        );
        result.put("readNullableInt40sAttribute", readUnitTestingNullableInt40sAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingNullableInt48sCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingNullableInt48sAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.NullableInt48s.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readNullableInt48sAttribute(
//              (ChipClusters.UnitTestingCluster.NullableInt48sAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedUnitTestingClusterNullableInt48sAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingNullableInt48sCommandParams
        );
        result.put("readNullableInt48sAttribute", readUnitTestingNullableInt48sAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingNullableInt56sCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingNullableInt56sAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.NullableInt56s.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readNullableInt56sAttribute(
//              (ChipClusters.UnitTestingCluster.NullableInt56sAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedUnitTestingClusterNullableInt56sAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingNullableInt56sCommandParams
        );
        result.put("readNullableInt56sAttribute", readUnitTestingNullableInt56sAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingNullableInt64sCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingNullableInt64sAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.NullableInt64s.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readNullableInt64sAttribute(
//              (ChipClusters.UnitTestingCluster.NullableInt64sAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedUnitTestingClusterNullableInt64sAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingNullableInt64sCommandParams
        );
        result.put("readNullableInt64sAttribute", readUnitTestingNullableInt64sAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingNullableEnum8CommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingNullableEnum8AttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.NullableEnum8.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readNullableEnum8Attribute(
//              (ChipClusters.UnitTestingCluster.NullableEnum8AttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedUnitTestingClusterNullableEnum8AttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingNullableEnum8CommandParams
        );
        result.put("readNullableEnum8Attribute", readUnitTestingNullableEnum8AttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingNullableEnum16CommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingNullableEnum16AttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.NullableEnum16.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readNullableEnum16Attribute(
//              (ChipClusters.UnitTestingCluster.NullableEnum16AttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedUnitTestingClusterNullableEnum16AttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingNullableEnum16CommandParams
        );
        result.put("readNullableEnum16Attribute", readUnitTestingNullableEnum16AttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingNullableFloatSingleCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingNullableFloatSingleAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.NullableFloatSingle.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readNullableFloatSingleAttribute(
//              (ChipClusters.UnitTestingCluster.NullableFloatSingleAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedUnitTestingClusterNullableFloatSingleAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingNullableFloatSingleCommandParams
        );
        result.put("readNullableFloatSingleAttribute", readUnitTestingNullableFloatSingleAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingNullableFloatDoubleCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingNullableFloatDoubleAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.NullableFloatDouble.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readNullableFloatDoubleAttribute(
//              (ChipClusters.UnitTestingCluster.NullableFloatDoubleAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedUnitTestingClusterNullableFloatDoubleAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingNullableFloatDoubleCommandParams
        );
        result.put("readNullableFloatDoubleAttribute", readUnitTestingNullableFloatDoubleAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingNullableOctetStringCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingNullableOctetStringAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.NullableOctetString.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readNullableOctetStringAttribute(
//              (ChipClusters.UnitTestingCluster.NullableOctetStringAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedUnitTestingClusterNullableOctetStringAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingNullableOctetStringCommandParams
        );
        result.put("readNullableOctetStringAttribute", readUnitTestingNullableOctetStringAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingNullableCharStringCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingNullableCharStringAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.NullableCharString.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readNullableCharStringAttribute(
//              (ChipClusters.UnitTestingCluster.NullableCharStringAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedUnitTestingClusterNullableCharStringAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingNullableCharStringCommandParams
        );
        result.put("readNullableCharStringAttribute", readUnitTestingNullableCharStringAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingNullableEnumAttrCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingNullableEnumAttrAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.NullableEnumAttr.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readNullableEnumAttrAttribute(
//              (ChipClusters.UnitTestingCluster.NullableEnumAttrAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedUnitTestingClusterNullableEnumAttrAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingNullableEnumAttrCommandParams
        );
        result.put("readNullableEnumAttrAttribute", readUnitTestingNullableEnumAttrAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingNullableRangeRestrictedInt8uCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingNullableRangeRestrictedInt8uAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.NullableRangeRestrictedInt8u.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readNullableRangeRestrictedInt8uAttribute(
//              (ChipClusters.UnitTestingCluster.NullableRangeRestrictedInt8uAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedUnitTestingClusterNullableRangeRestrictedInt8uAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingNullableRangeRestrictedInt8uCommandParams
        );
        result.put("readNullableRangeRestrictedInt8uAttribute", readUnitTestingNullableRangeRestrictedInt8uAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingNullableRangeRestrictedInt8sCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingNullableRangeRestrictedInt8sAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.NullableRangeRestrictedInt8s.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readNullableRangeRestrictedInt8sAttribute(
//              (ChipClusters.UnitTestingCluster.NullableRangeRestrictedInt8sAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedUnitTestingClusterNullableRangeRestrictedInt8sAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingNullableRangeRestrictedInt8sCommandParams
        );
        result.put("readNullableRangeRestrictedInt8sAttribute", readUnitTestingNullableRangeRestrictedInt8sAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingNullableRangeRestrictedInt16uCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingNullableRangeRestrictedInt16uAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.NullableRangeRestrictedInt16u.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readNullableRangeRestrictedInt16uAttribute(
//              (ChipClusters.UnitTestingCluster.NullableRangeRestrictedInt16uAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedUnitTestingClusterNullableRangeRestrictedInt16uAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingNullableRangeRestrictedInt16uCommandParams
        );
        result.put("readNullableRangeRestrictedInt16uAttribute", readUnitTestingNullableRangeRestrictedInt16uAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingNullableRangeRestrictedInt16sCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingNullableRangeRestrictedInt16sAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.NullableRangeRestrictedInt16s.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readNullableRangeRestrictedInt16sAttribute(
//              (ChipClusters.UnitTestingCluster.NullableRangeRestrictedInt16sAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedUnitTestingClusterNullableRangeRestrictedInt16sAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingNullableRangeRestrictedInt16sCommandParams
        );
        result.put("readNullableRangeRestrictedInt16sAttribute", readUnitTestingNullableRangeRestrictedInt16sAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingWriteOnlyInt8uCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingWriteOnlyInt8uAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.WriteOnlyInt8u.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readWriteOnlyInt8uAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingWriteOnlyInt8uCommandParams
        );
        result.put("readWriteOnlyInt8uAttribute", readUnitTestingWriteOnlyInt8uAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.UnitTestingCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedUnitTestingClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readUnitTestingGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.UnitTestingCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedUnitTestingClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readUnitTestingAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readEventListAttribute(
//              (ChipClusters.UnitTestingCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedUnitTestingClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingEventListCommandParams
        );
        result.put("readEventListAttribute", readUnitTestingEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.UnitTestingCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedUnitTestingClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readUnitTestingAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readUnitTestingFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readUnitTestingClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readUnitTestingClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.UnitTesting.ID, ClusterIDMapping.UnitTesting.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.UnitTestingCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readUnitTestingClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readUnitTestingClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    private static Map<String, InteractionInfo> readFaultInjectionInteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();Map<String, CommandParameterInfo> readFaultInjectionGeneratedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFaultInjectionGeneratedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FaultInjection.ID, ClusterIDMapping.FaultInjection.Attribute.GeneratedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FaultInjectionCluster) cluster).readGeneratedCommandListAttribute(
//              (ChipClusters.FaultInjectionCluster.GeneratedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFaultInjectionClusterGeneratedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFaultInjectionGeneratedCommandListCommandParams
        );
        result.put("readGeneratedCommandListAttribute", readFaultInjectionGeneratedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFaultInjectionAcceptedCommandListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFaultInjectionAcceptedCommandListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FaultInjection.ID, ClusterIDMapping.FaultInjection.Attribute.AcceptedCommandList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FaultInjectionCluster) cluster).readAcceptedCommandListAttribute(
//              (ChipClusters.FaultInjectionCluster.AcceptedCommandListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFaultInjectionClusterAcceptedCommandListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFaultInjectionAcceptedCommandListCommandParams
        );
        result.put("readAcceptedCommandListAttribute", readFaultInjectionAcceptedCommandListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFaultInjectionEventListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFaultInjectionEventListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FaultInjection.ID, ClusterIDMapping.FaultInjection.Attribute.EventList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FaultInjectionCluster) cluster).readEventListAttribute(
//              (ChipClusters.FaultInjectionCluster.EventListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFaultInjectionClusterEventListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFaultInjectionEventListCommandParams
        );
        result.put("readEventListAttribute", readFaultInjectionEventListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFaultInjectionAttributeListCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFaultInjectionAttributeListAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FaultInjection.ID, ClusterIDMapping.FaultInjection.Attribute.AttributeList.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FaultInjectionCluster) cluster).readAttributeListAttribute(
//              (ChipClusters.FaultInjectionCluster.AttributeListAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedFaultInjectionClusterAttributeListAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFaultInjectionAttributeListCommandParams
        );
        result.put("readAttributeListAttribute", readFaultInjectionAttributeListAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFaultInjectionFeatureMapCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFaultInjectionFeatureMapAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FaultInjection.ID, ClusterIDMapping.FaultInjection.Attribute.FeatureMap.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FaultInjectionCluster) cluster).readFeatureMapAttribute(
//              (ChipClusters.LongAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedLongAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFaultInjectionFeatureMapCommandParams
        );
        result.put("readFeatureMapAttribute", readFaultInjectionFeatureMapAttributeInteractionInfo);
     Map<String, CommandParameterInfo> readFaultInjectionClusterRevisionCommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo readFaultInjectionClusterRevisionAttributeInteractionInfo = new InteractionInfo(
          (deviceController, devicePtr, endpointId, callback, commandArguments) -> {
            DelegatedReportCallback reportCallback = (DelegatedReportCallback) callback;
            final ChipAttributePath path = ChipAttributePath.newInstance(endpointId, ClusterIDMapping.FaultInjection.ID, ClusterIDMapping.FaultInjection.Attribute.ClusterRevision.getID());
            reportCallback.setAttributePath(path);
            deviceController.readAttributePath(reportCallback, devicePtr, List.of(path), 0);
//          (cluster, callback, commandArguments) -> {
//            ((ChipClusters.FaultInjectionCluster) cluster).readClusterRevisionAttribute(
//              (ChipClusters.IntegerAttributeCallback) callback
//            );
          },
          //() -> new ClusterInfoMapping.DelegatedIntegerAttributeCallback(),
          () -> new DelegatedReportCallback() {
            @Override
            public Object parseTlv(ChipAttributePath path, byte[] tlv) {
              return ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            }
          },
          readFaultInjectionClusterRevisionCommandParams
        );
        result.put("readClusterRevisionAttribute", readFaultInjectionClusterRevisionAttributeInteractionInfo);
     
       return result;
    }
    @SuppressWarnings("serial")
    public Map<String, Map<String, InteractionInfo>> getReadAttributeMap() {

        return new HashMap<String, Map<String, InteractionInfo>>(){{
            put("identify", readIdentifyInteractionInfo());
            put("groups", readGroupsInteractionInfo());
            put("scenes", readScenesInteractionInfo());
            put("onOff", readOnOffInteractionInfo());
            put("onOffSwitchConfiguration", readOnOffSwitchConfigurationInteractionInfo());
            put("levelControl", readLevelControlInteractionInfo());
            put("binaryInputBasic", readBinaryInputBasicInteractionInfo());
            put("pulseWidthModulation", readPulseWidthModulationInteractionInfo());
            put("descriptor", readDescriptorInteractionInfo());
            put("binding", readBindingInteractionInfo());
            put("accessControl", readAccessControlInteractionInfo());
            put("actions", readActionsInteractionInfo());
            put("basicInformation", readBasicInformationInteractionInfo());
            put("otaSoftwareUpdateProvider", readOtaSoftwareUpdateProviderInteractionInfo());
            put("otaSoftwareUpdateRequestor", readOtaSoftwareUpdateRequestorInteractionInfo());
            put("localizationConfiguration", readLocalizationConfigurationInteractionInfo());
            put("timeFormatLocalization", readTimeFormatLocalizationInteractionInfo());
            put("unitLocalization", readUnitLocalizationInteractionInfo());
            put("powerSourceConfiguration", readPowerSourceConfigurationInteractionInfo());
            put("powerSource", readPowerSourceInteractionInfo());
            put("generalCommissioning", readGeneralCommissioningInteractionInfo());
            put("networkCommissioning", readNetworkCommissioningInteractionInfo());
            put("diagnosticLogs", readDiagnosticLogsInteractionInfo());
            put("generalDiagnostics", readGeneralDiagnosticsInteractionInfo());
            put("softwareDiagnostics", readSoftwareDiagnosticsInteractionInfo());
            put("threadNetworkDiagnostics", readThreadNetworkDiagnosticsInteractionInfo());
            put("wiFiNetworkDiagnostics", readWiFiNetworkDiagnosticsInteractionInfo());
            put("ethernetNetworkDiagnostics", readEthernetNetworkDiagnosticsInteractionInfo());
            put("timeSynchronization", readTimeSynchronizationInteractionInfo());
            put("bridgedDeviceBasicInformation", readBridgedDeviceBasicInformationInteractionInfo());
            put("switch", readSwitchInteractionInfo());
            put("administratorCommissioning", readAdministratorCommissioningInteractionInfo());
            put("operationalCredentials", readOperationalCredentialsInteractionInfo());
            put("groupKeyManagement", readGroupKeyManagementInteractionInfo());
            put("fixedLabel", readFixedLabelInteractionInfo());
            put("userLabel", readUserLabelInteractionInfo());
            put("proxyConfiguration", readProxyConfigurationInteractionInfo());
            put("proxyDiscovery", readProxyDiscoveryInteractionInfo());
            put("proxyValid", readProxyValidInteractionInfo());
            put("booleanState", readBooleanStateInteractionInfo());
            put("icdManagement", readIcdManagementInteractionInfo());
            put("modeSelect", readModeSelectInteractionInfo());
            put("laundryWasherMode", readLaundryWasherModeInteractionInfo());
            put("refrigeratorAndTemperatureControlledCabinetMode", readRefrigeratorAndTemperatureControlledCabinetModeInteractionInfo());
            put("laundryWasherControls", readLaundryWasherControlsInteractionInfo());
            put("rvcRunMode", readRvcRunModeInteractionInfo());
            put("rvcCleanMode", readRvcCleanModeInteractionInfo());
            put("temperatureControl", readTemperatureControlInteractionInfo());
            put("refrigeratorAlarm", readRefrigeratorAlarmInteractionInfo());
            put("dishwasherMode", readDishwasherModeInteractionInfo());
            put("airQuality", readAirQualityInteractionInfo());
            put("smokeCoAlarm", readSmokeCoAlarmInteractionInfo());
            put("dishwasherAlarm", readDishwasherAlarmInteractionInfo());
            put("operationalState", readOperationalStateInteractionInfo());
            put("rvcOperationalState", readRvcOperationalStateInteractionInfo());
            put("hepaFilterMonitoring", readHepaFilterMonitoringInteractionInfo());
            put("activatedCarbonFilterMonitoring", readActivatedCarbonFilterMonitoringInteractionInfo());
            put("ceramicFilterMonitoring", readCeramicFilterMonitoringInteractionInfo());
            put("electrostaticFilterMonitoring", readElectrostaticFilterMonitoringInteractionInfo());
            put("uvFilterMonitoring", readUvFilterMonitoringInteractionInfo());
            put("ionizingFilterMonitoring", readIonizingFilterMonitoringInteractionInfo());
            put("zeoliteFilterMonitoring", readZeoliteFilterMonitoringInteractionInfo());
            put("ozoneFilterMonitoring", readOzoneFilterMonitoringInteractionInfo());
            put("waterTankMonitoring", readWaterTankMonitoringInteractionInfo());
            put("fuelTankMonitoring", readFuelTankMonitoringInteractionInfo());
            put("inkCartridgeMonitoring", readInkCartridgeMonitoringInteractionInfo());
            put("tonerCartridgeMonitoring", readTonerCartridgeMonitoringInteractionInfo());
            put("doorLock", readDoorLockInteractionInfo());
            put("windowCovering", readWindowCoveringInteractionInfo());
            put("barrierControl", readBarrierControlInteractionInfo());
            put("pumpConfigurationAndControl", readPumpConfigurationAndControlInteractionInfo());
            put("thermostat", readThermostatInteractionInfo());
            put("fanControl", readFanControlInteractionInfo());
            put("thermostatUserInterfaceConfiguration", readThermostatUserInterfaceConfigurationInteractionInfo());
            put("colorControl", readColorControlInteractionInfo());
            put("ballastConfiguration", readBallastConfigurationInteractionInfo());
            put("illuminanceMeasurement", readIlluminanceMeasurementInteractionInfo());
            put("temperatureMeasurement", readTemperatureMeasurementInteractionInfo());
            put("pressureMeasurement", readPressureMeasurementInteractionInfo());
            put("flowMeasurement", readFlowMeasurementInteractionInfo());
            put("relativeHumidityMeasurement", readRelativeHumidityMeasurementInteractionInfo());
            put("occupancySensing", readOccupancySensingInteractionInfo());
            put("carbonMonoxideConcentrationMeasurement", readCarbonMonoxideConcentrationMeasurementInteractionInfo());
            put("carbonDioxideConcentrationMeasurement", readCarbonDioxideConcentrationMeasurementInteractionInfo());
            put("ethyleneConcentrationMeasurement", readEthyleneConcentrationMeasurementInteractionInfo());
            put("ethyleneOxideConcentrationMeasurement", readEthyleneOxideConcentrationMeasurementInteractionInfo());
            put("hydrogenConcentrationMeasurement", readHydrogenConcentrationMeasurementInteractionInfo());
            put("hydrogenSulfideConcentrationMeasurement", readHydrogenSulfideConcentrationMeasurementInteractionInfo());
            put("nitricOxideConcentrationMeasurement", readNitricOxideConcentrationMeasurementInteractionInfo());
            put("nitrogenDioxideConcentrationMeasurement", readNitrogenDioxideConcentrationMeasurementInteractionInfo());
            put("oxygenConcentrationMeasurement", readOxygenConcentrationMeasurementInteractionInfo());
            put("ozoneConcentrationMeasurement", readOzoneConcentrationMeasurementInteractionInfo());
            put("sulfurDioxideConcentrationMeasurement", readSulfurDioxideConcentrationMeasurementInteractionInfo());
            put("dissolvedOxygenConcentrationMeasurement", readDissolvedOxygenConcentrationMeasurementInteractionInfo());
            put("bromateConcentrationMeasurement", readBromateConcentrationMeasurementInteractionInfo());
            put("chloraminesConcentrationMeasurement", readChloraminesConcentrationMeasurementInteractionInfo());
            put("chlorineConcentrationMeasurement", readChlorineConcentrationMeasurementInteractionInfo());
            put("fecalColiformEColiConcentrationMeasurement", readFecalColiformEColiConcentrationMeasurementInteractionInfo());
            put("fluorideConcentrationMeasurement", readFluorideConcentrationMeasurementInteractionInfo());
            put("haloaceticAcidsConcentrationMeasurement", readHaloaceticAcidsConcentrationMeasurementInteractionInfo());
            put("totalTrihalomethanesConcentrationMeasurement", readTotalTrihalomethanesConcentrationMeasurementInteractionInfo());
            put("totalColiformBacteriaConcentrationMeasurement", readTotalColiformBacteriaConcentrationMeasurementInteractionInfo());
            put("turbidityConcentrationMeasurement", readTurbidityConcentrationMeasurementInteractionInfo());
            put("copperConcentrationMeasurement", readCopperConcentrationMeasurementInteractionInfo());
            put("leadConcentrationMeasurement", readLeadConcentrationMeasurementInteractionInfo());
            put("manganeseConcentrationMeasurement", readManganeseConcentrationMeasurementInteractionInfo());
            put("sulfateConcentrationMeasurement", readSulfateConcentrationMeasurementInteractionInfo());
            put("bromodichloromethaneConcentrationMeasurement", readBromodichloromethaneConcentrationMeasurementInteractionInfo());
            put("bromoformConcentrationMeasurement", readBromoformConcentrationMeasurementInteractionInfo());
            put("chlorodibromomethaneConcentrationMeasurement", readChlorodibromomethaneConcentrationMeasurementInteractionInfo());
            put("chloroformConcentrationMeasurement", readChloroformConcentrationMeasurementInteractionInfo());
            put("sodiumConcentrationMeasurement", readSodiumConcentrationMeasurementInteractionInfo());
            put("pm25ConcentrationMeasurement", readPm25ConcentrationMeasurementInteractionInfo());
            put("formaldehydeConcentrationMeasurement", readFormaldehydeConcentrationMeasurementInteractionInfo());
            put("pm1ConcentrationMeasurement", readPm1ConcentrationMeasurementInteractionInfo());
            put("pm10ConcentrationMeasurement", readPm10ConcentrationMeasurementInteractionInfo());
            put("totalVolatileOrganicCompoundsConcentrationMeasurement", readTotalVolatileOrganicCompoundsConcentrationMeasurementInteractionInfo());
            put("radonConcentrationMeasurement", readRadonConcentrationMeasurementInteractionInfo());
            put("wakeOnLan", readWakeOnLanInteractionInfo());
            put("channel", readChannelInteractionInfo());
            put("targetNavigator", readTargetNavigatorInteractionInfo());
            put("mediaPlayback", readMediaPlaybackInteractionInfo());
            put("mediaInput", readMediaInputInteractionInfo());
            put("lowPower", readLowPowerInteractionInfo());
            put("keypadInput", readKeypadInputInteractionInfo());
            put("contentLauncher", readContentLauncherInteractionInfo());
            put("audioOutput", readAudioOutputInteractionInfo());
            put("applicationLauncher", readApplicationLauncherInteractionInfo());
            put("applicationBasic", readApplicationBasicInteractionInfo());
            put("accountLogin", readAccountLoginInteractionInfo());
            put("electricalMeasurement", readElectricalMeasurementInteractionInfo());
            put("unitTesting", readUnitTestingInteractionInfo());
            put("faultInjection", readFaultInjectionInteractionInfo());}};
    }
}
