/*
 *
 *    Copyright (c) 2023 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */
package chip.devicecontroller

class ClusterIDMapping {
  {%- for cluster in clientClusters | sort(attribute='code') %}
  class {{cluster.name}}: BaseCluster {
    {%- if cluster.attributes %}
    enum class Attribute(val id: Long) {
        {%- for attribute in cluster.attributes | sort(attribute='code') %}
            {{attribute.definition.name | upfirst}}({{attribute.definition.code}}L)
            {%- if loop.index0 < loop.length - 1 -%}{{", "}}{%- endif -%}
        {%- endfor -%};

      companion object {
        @Throws(NoSuchFieldError::class)
        fun value(id: Long): Attribute {
          for (attribute in Attribute.values()) {
            if (attribute.id == id) {
              return attribute
            }
          }
          throw NoSuchFieldError()
        }
      }
    }
    {%- endif -%}

    {%- if cluster.events %}
    enum class Event(val id: Long) {
      {%- for event in cluster.events | sort(attribute='code') %}
        {{event.name | upfirst}}({{event.code}}L)
        {%- if loop.index0 < loop.length - 1 -%}{{", "}}{%- endif -%}
      {%- endfor -%};

      companion object {
        @Throws(NoSuchFieldError::class)
        fun value(id: Long): Event {
          for (event in Event.values()) {
            if (event.id == id) {
              return event
            }
          }
          throw NoSuchFieldError()
        }
      }
    }
    {%- endif -%}

    {%- if cluster.commands %}
    enum class Command(val id: Long) {
      {%- for command in cluster.commands | sort(attribute='code') %}
        {{command.name | upfirst}}({{command.code}}L)
        {%- if loop.index0 < loop.length - 1 -%}{{", "}}{%- endif -%}
      {%- endfor -%};

      companion object {
        @Throws(NoSuchFieldError::class)
        fun value(id: Long): Command {
          for (command in Command.values()) {
            if (command.id == id) {
              return command
            }
          }
          throw NoSuchFieldError()
        }
      }
    }
    {%- endif -%}

    {%- for command in cluster.commands | sort(attribute='code') %}
    {%- if command.input_param %}
    enum class {{command.name | upfirst}}CommandField(val id: Int) {
      {%- for field in (cluster.structs | named(command.input_param)).fields %}
        {{field.name | upfirst}}({{field.code}})
        {%- if loop.index0 < loop.length - 1 -%}{{", "}}{%- endif -%}
      {%- endfor -%};

      companion object {
        @Throws(NoSuchFieldError::class)
        fun value(id: Int): {{command.name | upfirst}}CommandField {
          for (field in {{command.name | upfirst}}CommandField.values()) {
            if (field.id == id) {
              return field
            }
          }
          throw NoSuchFieldError()
        }
      }
    }
    {%- endif -%}
    {% endfor %}

    override fun getID(): Long { return ID }

    override fun getAttributeName(id: Long): String {
        {%- if cluster.attributes %}
        return Attribute.value(id).toString()
        {%- else %}
        throw IllegalArgumentException()
        {%- endif %}
    }

    override fun getEventName(id: Long): String {
        {%- if cluster.events %}
        return Event.value(id).toString()
        {%- else %}
        throw IllegalArgumentException()
        {%- endif %}
    }

    override fun getCommandName(id: Long): String {
        {%- if cluster.commands %}
        return Command.value(id).toString()
        {%- else %}
        throw IllegalArgumentException()
        {%- endif %}
    }

    override fun getAttributeID(name: String): Long {
        {%- if cluster.attributes %}
        return Attribute.valueOf(name).id
        {%- else %}
        throw NoSuchFieldError()
        {%- endif %}
    }

    override fun getEventID(name: String): Long {
        {%- if cluster.events %}
        return Event.valueOf(name).id
        {%- else %}
        throw NoSuchFieldError()
        {%- endif %}
    }

    override fun getCommandID(name: String): Long {
        {%- if cluster.commands %}
        return Command.valueOf(name).id
        {%- else %}
        throw NoSuchFieldError()
        {%- endif %}
    }

    companion object {
      const val ID = {{cluster.code}}L
    }
  }
  {%- endfor -%}

  companion object {
    fun getCluster(clusterId: Long): BaseCluster? {
      {%- for cluster in clientClusters | sort(attribute='code') %}
      if (clusterId == {{cluster.name}}.ID) {
        return {{cluster.name}}()
      }
      {%- endfor %}
      return null
    }
  }

  interface BaseCluster {
    fun getID(): Long

    @Throws(NoSuchFieldError::class)
    fun getAttributeName(id: Long): String

    @Throws(NoSuchFieldError::class)
    fun getEventName(id: Long): String

    @Throws(NoSuchFieldError::class)
    fun getCommandName(id: Long): String

    @Throws(IllegalArgumentException::class)
    fun getAttributeID(name: String): Long

    @Throws(IllegalArgumentException::class)
    fun getEventID(name: String): Long

    @Throws(IllegalArgumentException::class)
    fun getCommandID(name: String): Long
  }
}